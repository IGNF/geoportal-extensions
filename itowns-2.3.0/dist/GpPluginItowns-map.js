/*!
 * @brief French Geoportal Extension for Itowns
 *
 * This software is released under the licence CeCILL-B (Free BSD compatible)
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-fr.txt
 * @see http://www.cecill.info/
 *
 * @copyright copyright (c) IGN 
 * @license CeCILL-B
 * @author IGN
 * @version 2.3.0
 * @date 02/12/2020
 *
 */

/*!
 * Sortable -- JavaScript library for reorderable drag-and-drop lists on modern
 * browsers and touch devices. No jQuery required. Supports Meteor, AngularJS,
 * React, Polymer, Vue, Knockout and any CSS library, e.g. Bootstrap.
 *
 * Released under MIT LICENSE
 *
 * Copyright Lebedev Konstantin <ibnRubaXa@gmail.com>
 * https://github.com/SortableJS/Sortable
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @version 1.8.4
 */

/*!
 * @overview  es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.4
 */

/*!
 * @overview   Proj4js - Javascript reprojection library.
 *
 * @authors
 * - Mike Adair madairATdmsolutions.ca
 * - Richard Greenwood richATgreenwoodmap.com
 * - Didier Richard didier.richardATign.fr
 * - Stephen Irons stephen.ironsATclear.net.nz
 * - Olivier Terral oterralATgmail.com
 * - Calvin Metcalf cmetcalfATappgeo.com
 *
 * @copyright Copyright (c) 2014, Mike Adair, Richard Greenwood, Didier Richard, Stephen Irons, Olivier Terral and Calvin Metcalf
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/proj4js/proj4js/master/LICENSE.md
 * @version   ^2.6.2
 */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("itowns"), require("request"), require("xmldom"));
	else if(typeof define === 'function' && define.amd)
		define("Gp", ["itowns", "require", "require"], factory);
	else if(typeof exports === 'object')
		exports["Gp"] = factory(require("itowns"), require("request"), require("xmldom"));
	else
		root["Gp"] = factory(root["itowns"], root[undefined], root[undefined]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_itowns__, __WEBPACK_EXTERNAL_MODULE_request__, __WEBPACK_EXTERNAL_MODULE_xmldom__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Itowns/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    var then$$1 = void 0;\n    try {\n      then$$1 = value.then;\n    } catch (error) {\n      reject(promise, error);\n      return;\n    }\n    handleMaybeThenable(promise, value, then$$1);\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = true;\n\n  if (hasCallback) {\n    try {\n      value = callback(detail);\n    } catch (e) {\n      succeeded = false;\n      error = e;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (succeeded === false) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = void 0;\n      var error = void 0;\n      var didError = false;\n      try {\n        _then = entry.then;\n      } catch (e) {\n        didError = true;\n        error = e;\n      }\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        if (didError) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, _then);\n        }\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/es6-promise/dist/es6-promise.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/package.json":
/*!********************************************************!*\
  !*** ./node_modules/geoportal-access-lib/package.json ***!
  \********************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, date, dependencies, deprecated, description, devDependencies, homepage, keywords, license, main, module, name, nyc, optionalDependencies, peerDependencies, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"_from\\\":\\\"geoportal-access-lib@2.1.6\\\",\\\"_id\\\":\\\"geoportal-access-lib@2.1.6\\\",\\\"_inBundle\\\":false,\\\"_integrity\\\":\\\"sha512-zQpSjZq8YkGW+ooB1WloQd2KZHCKyg4/pbIFLSPCk3et2Zan/O2hZlKOf2alEX2zbsg7Wd+e8KiLc7cHZKniag==\\\",\\\"_location\\\":\\\"/geoportal-access-lib\\\",\\\"_phantomChildren\\\":{},\\\"_requested\\\":{\\\"type\\\":\\\"version\\\",\\\"registry\\\":true,\\\"raw\\\":\\\"geoportal-access-lib@2.1.6\\\",\\\"name\\\":\\\"geoportal-access-lib\\\",\\\"escapedName\\\":\\\"geoportal-access-lib\\\",\\\"rawSpec\\\":\\\"2.1.6\\\",\\\"saveSpec\\\":null,\\\"fetchSpec\\\":\\\"2.1.6\\\"},\\\"_requiredBy\\\":[\\\"/\\\"],\\\"_resolved\\\":\\\"https://registry.npmjs.org/geoportal-access-lib/-/geoportal-access-lib-2.1.6.tgz\\\",\\\"_shasum\\\":\\\"8bb0d4cc7045c39c3392fe076ba699aace2b6066\\\",\\\"_spec\\\":\\\"geoportal-access-lib@2.1.6\\\",\\\"_where\\\":\\\"/home/runner/work/geoportal-extensions/geoportal-extensions\\\",\\\"author\\\":{\\\"name\\\":\\\"IGNF\\\"},\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/IGNF/geoportal-access-lib/issues\\\"},\\\"bundleDependencies\\\":false,\\\"date\\\":\\\"03/10/2019\\\",\\\"dependencies\\\":{\\\"es6-promise\\\":\\\"^4.2.4\\\",\\\"request\\\":\\\"^2.87.0\\\",\\\"xmldom\\\":\\\"^0.1.27\\\"},\\\"deprecated\\\":false,\\\"description\\\":\\\"French Geoportal resources access library\\\",\\\"devDependencies\\\":{\\\"babel-core\\\":\\\"^6.26.3\\\",\\\"babel-loader\\\":\\\"^7.1.2\\\",\\\"babel-preset-env\\\":\\\"^1.7.0\\\",\\\"chai\\\":\\\"^4.1.2\\\",\\\"clean-webpack-plugin\\\":\\\"^0.1.18\\\",\\\"copy-webpack-plugin\\\":\\\"^4.5.1\\\",\\\"eslint\\\":\\\"^4.18.2\\\",\\\"eslint-config-standard\\\":\\\"^11.0.0\\\",\\\"eslint-loader\\\":\\\"^2.0.0\\\",\\\"eslint-plugin-import\\\":\\\"^2.9.0\\\",\\\"eslint-plugin-node\\\":\\\"^6.0.1\\\",\\\"eslint-plugin-promise\\\":\\\"^3.7.0\\\",\\\"eslint-plugin-standard\\\":\\\"^3.0.1\\\",\\\"glob\\\":\\\"^7.1.2\\\",\\\"handlebars-layouts\\\":\\\"^3.1.4\\\",\\\"handlebars-webpack-plugin\\\":\\\"^1.4.1\\\",\\\"html-webpack-plugin\\\":\\\"^2.30.1\\\",\\\"istanbul-instrumenter-loader\\\":\\\"^3.0.1\\\",\\\"jsdoc-webpack-plugin\\\":\\\"0.0.1\\\",\\\"loglevel\\\":\\\"^1.6.1\\\",\\\"mocha\\\":\\\"^4.0.0\\\",\\\"mocha-loader\\\":\\\"^1.1.3\\\",\\\"mocha-webpack\\\":\\\"^1.0.1\\\",\\\"nyc\\\":\\\"^12.0.2\\\",\\\"path\\\":\\\"^0.12.7\\\",\\\"replace-bundle-webpack-plugin\\\":\\\"^1.0.0\\\",\\\"sinon\\\":\\\"^4.3.0\\\",\\\"sinon-es6\\\":\\\"0.0.3\\\",\\\"speed-measure-webpack-plugin\\\":\\\"^1.2.2\\\",\\\"string-template\\\":\\\"^1.0.0\\\",\\\"webpack\\\":\\\"^3.11.0\\\",\\\"webpack-dev-server\\\":\\\"^2.11.3\\\",\\\"webpack-node-externals\\\":\\\"^1.6.0\\\",\\\"webpack-shell-plugin\\\":\\\"^0.5.0\\\"},\\\"homepage\\\":\\\"https://github.com/IGNF/geoportal-access-lib#readme\\\",\\\"keywords\\\":[\\\"geoportail\\\",\\\"webservice\\\",\\\"javascript\\\",\\\"es6\\\"],\\\"license\\\":\\\"CECILL-B\\\",\\\"main\\\":\\\"dist/GpServices-src.js\\\",\\\"module\\\":\\\"src/Gp.js\\\",\\\"name\\\":\\\"geoportal-access-lib\\\",\\\"nyc\\\":{\\\"include\\\":[\\\"src/**/*.js\\\"],\\\"instrument\\\":false,\\\"sourceMap\\\":false},\\\"optionalDependencies\\\":{},\\\"peerDependencies\\\":{},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/IGNF/geoportal-access-lib.git\\\"},\\\"scripts\\\":{\\\"build\\\":\\\"webpack\\\",\\\"build:dev\\\":\\\"webpack --env.development\\\",\\\"build:prod\\\":\\\"webpack --env.production\\\",\\\"clean\\\":\\\"echo \\\\\\\"Warning: no yet implemented!\\\\\\\" && exit 0\\\",\\\"cover\\\":\\\"nyc --reporter=lcov --reporter=text npm run test\\\",\\\"doc\\\":\\\"npm run doc:serve\\\",\\\"doc:serve\\\":\\\"webpack-dev-server --content-base jsdoc --port 9001 --open\\\",\\\"sample\\\":\\\"npm run sample:serve\\\",\\\"sample:serve\\\":\\\"webpack-dev-server --open-page samples/index-src.html --https --content-base .  --output-public-path '/dist/' --port 9001 --open 'google-chrome'\\\",\\\"sample:serve:dev\\\":\\\"webpack-dev-server --env.development --open-page samples/index-map.html --content-base . --output-public-path '/dist/' --port 9001 --open 'google-chrome\\\",\\\"sample:serve:prod\\\":\\\"webpack-dev-server --env.production --open-page samples/index.html --content-base . --output-public-path '/dist/' --port 9001 --open 'google-chrome\\\",\\\"setup\\\":\\\"npm install\\\",\\\"test\\\":\\\"mocha-webpack --webpack-config webpack.test.js --glob \\\\\\\"test_*.js\\\\\\\" test/spec/\\\",\\\"test:end-to-end:serve\\\":\\\"webpack-dev-server --hot --config webpack.end-to-end.serve.js\\\",\\\"test:serve\\\":\\\"webpack-dev-server --hot --config webpack.test.serve.js\\\"},\\\"version\\\":\\\"2.1.6\\\"}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/package.json\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js":
/*!**************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Errors raised by API for one among three reasons : wrong API usage, underlying service error or unknown reason.\n *\n * @property {String} message - Error message\n * @property {Number} status - Error status : when {@link Gp.Error.TYPE_SRVERR}, gives the [HTTP status of the underlying web service response]{@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes} ; -1 otherwise.\n * @property {String} type - Error type ({@link Gp.Error.TYPE_SRVERR}, {@link Gp.Error.TYPE_USEERR} or {@link Gp.Error.TYPE_UNKERR}).\n *\n * @namespace\n * @alias Gp.Error\n * @param {Object|String} error - Options for creating error object. Can be a String (message) or an Object.\n * @param {String} error.message - Error message to return to user.\n * @param {enum} [error.type=TYPE_UNKERR] - Error type\n * @param {status} [error.status=-1] - Error status : when {@link Gp.Error.TYPE_SRVERR}, gives the [HTTP status of the underlying web service response]{@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}.\n *\n */\nfunction ErrorService (error) {\n    if (!(this instanceof ErrorService)) {\n        throw new TypeError(\"ErrorService constructor cannot be called as a function.\");\n    }\n\n    var e = error;\n    if (typeof error === \"string\" || error instanceof String) {\n        this.message = error;\n        this.status = -1;\n        this.type = ErrorService.TYPE_UNKERR;\n    } else {\n        this.message = e.message || \"undefined!?\";\n        this.type = e.type;\n        this.status = e.status || -1;\n    }\n\n    this.name = \"ErrorService\";\n    this.stack = (new Error()).stack;\n}\n\n/**\n * Error raised when underlying geoportal service answers on error.\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_SRVERR = \"SERVICE_ERROR\";\n/**\n * Error raised when funcion use is inappropriate\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_USEERR = \"USAGE_ERROR\";\n/**\n * Error raised when API can't perform the job for a reason other than the two other ones.\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_UNKERR = \"UNKNOWN_ERROR\";\n\n/**\n * @lends module:ErrorService\n */\nErrorService.prototype = Object.create(Error.prototype, {\n    constructor : {\n        value : ErrorService,\n        writable : true,\n        configurable : true\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ErrorService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRXhjZXB0aW9ucy9FcnJvclNlcnZpY2UuanM/ODRiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU8sK0JBQStCLDJCQUEyQixpRUFBaUUsOERBQThELEVBQUU7QUFDaE4sY0FBYyxPQUFPLHFCQUFxQiwyQkFBMkIsR0FBRywyQkFBMkIsS0FBSywyQkFBMkI7QUFDbkk7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsT0FBTztBQUNsQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPLDBDQUEwQywyQkFBMkIsaUVBQWlFLDhEQUE4RDtBQUN0TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRWMsMkVBQVksRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRXhjZXB0aW9ucy9FcnJvclNlcnZpY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9ycyByYWlzZWQgYnkgQVBJIGZvciBvbmUgYW1vbmcgdGhyZWUgcmVhc29ucyA6IHdyb25nIEFQSSB1c2FnZSwgdW5kZXJseWluZyBzZXJ2aWNlIGVycm9yIG9yIHVua25vd24gcmVhc29uLlxuICpcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBtZXNzYWdlIC0gRXJyb3IgbWVzc2FnZVxuICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXR1cyAtIEVycm9yIHN0YXR1cyA6IHdoZW4ge0BsaW5rIEdwLkVycm9yLlRZUEVfU1JWRVJSfSwgZ2l2ZXMgdGhlIFtIVFRQIHN0YXR1cyBvZiB0aGUgdW5kZXJseWluZyB3ZWIgc2VydmljZSByZXNwb25zZV17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9IVFRQX3N0YXR1c19jb2Rlc30gOyAtMSBvdGhlcndpc2UuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdHlwZSAtIEVycm9yIHR5cGUgKHtAbGluayBHcC5FcnJvci5UWVBFX1NSVkVSUn0sIHtAbGluayBHcC5FcnJvci5UWVBFX1VTRUVSUn0gb3Ige0BsaW5rIEdwLkVycm9yLlRZUEVfVU5LRVJSfSkuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLkVycm9yXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGVycm9yIC0gT3B0aW9ucyBmb3IgY3JlYXRpbmcgZXJyb3Igb2JqZWN0LiBDYW4gYmUgYSBTdHJpbmcgKG1lc3NhZ2UpIG9yIGFuIE9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBlcnJvci5tZXNzYWdlIC0gRXJyb3IgbWVzc2FnZSB0byByZXR1cm4gdG8gdXNlci5cbiAqIEBwYXJhbSB7ZW51bX0gW2Vycm9yLnR5cGU9VFlQRV9VTktFUlJdIC0gRXJyb3IgdHlwZVxuICogQHBhcmFtIHtzdGF0dXN9IFtlcnJvci5zdGF0dXM9LTFdIC0gRXJyb3Igc3RhdHVzIDogd2hlbiB7QGxpbmsgR3AuRXJyb3IuVFlQRV9TUlZFUlJ9LCBnaXZlcyB0aGUgW0hUVFAgc3RhdHVzIG9mIHRoZSB1bmRlcmx5aW5nIHdlYiBzZXJ2aWNlIHJlc3BvbnNlXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX0hUVFBfc3RhdHVzX2NvZGVzfS5cbiAqXG4gKi9cbmZ1bmN0aW9uIEVycm9yU2VydmljZSAoZXJyb3IpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRXJyb3JTZXJ2aWNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXJyb3JTZXJ2aWNlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdmFyIGUgPSBlcnJvcjtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiIHx8IGVycm9yIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IC0xO1xuICAgICAgICB0aGlzLnR5cGUgPSBFcnJvclNlcnZpY2UuVFlQRV9VTktFUlI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZS5tZXNzYWdlIHx8IFwidW5kZWZpbmVkIT9cIjtcbiAgICAgICAgdGhpcy50eXBlID0gZS50eXBlO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IGUuc3RhdHVzIHx8IC0xO1xuICAgIH1cblxuICAgIHRoaXMubmFtZSA9IFwiRXJyb3JTZXJ2aWNlXCI7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG59XG5cbi8qKlxuICogRXJyb3IgcmFpc2VkIHdoZW4gdW5kZXJseWluZyBnZW9wb3J0YWwgc2VydmljZSBhbnN3ZXJzIG9uIGVycm9yLlxuICpcbiAqIEB0eXBlIHtTdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqIEBzdGF0aWNcbiAqL1xuRXJyb3JTZXJ2aWNlLlRZUEVfU1JWRVJSID0gXCJTRVJWSUNFX0VSUk9SXCI7XG4vKipcbiAqIEVycm9yIHJhaXNlZCB3aGVuIGZ1bmNpb24gdXNlIGlzIGluYXBwcm9wcmlhdGVcbiAqXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQGNvbnN0YW50XG4gKiBAc3RhdGljXG4gKi9cbkVycm9yU2VydmljZS5UWVBFX1VTRUVSUiA9IFwiVVNBR0VfRVJST1JcIjtcbi8qKlxuICogRXJyb3IgcmFpc2VkIHdoZW4gQVBJIGNhbid0IHBlcmZvcm0gdGhlIGpvYiBmb3IgYSByZWFzb24gb3RoZXIgdGhhbiB0aGUgdHdvIG90aGVyIG9uZXMuXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBjb25zdGFudFxuICogQHN0YXRpY1xuICovXG5FcnJvclNlcnZpY2UuVFlQRV9VTktFUlIgPSBcIlVOS05PV05fRVJST1JcIjtcblxuLyoqXG4gKiBAbGVuZHMgbW9kdWxlOkVycm9yU2VydmljZVxuICovXG5FcnJvclNlcnZpY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3RvciA6IHtcbiAgICAgICAgdmFsdWUgOiBFcnJvclNlcnZpY2UsXG4gICAgICAgIHdyaXRhYmxlIDogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlIDogdHJ1ZVxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBFcnJvclNlcnZpY2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/WKT.js":
/*!**************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/WKT.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * Lecture / Ecriture du format WKT\n *\n * Les besoins sont assez simples :\n * 1. lecture des types suivants :\n *  - LINESTRING\n *  - POLYGON\n *  - (TODO)\n * 2. convertir aux formats suivants :\n *  - json\n *  - (TODO)\n *\n *\n * @example\n *  var strWKT = \"LINESTRING (2.416907 48.846577, 2.416916 48.846613)\";\n *  WKT.toJson (strWKT,\n *      function onSuccess (json) {\n *          // {\n *          //      type : 'LINESTRING',\n *          //      coordinates : [\n *          //          [2.416907, 48.846577],\n *          //          [2.416916, 48.846613]\n *          //      ]\n *          // }\n *      },\n *      function onError (error) {\n *          console.log(error);\n *      }\n *  );\n *\n * @module WKT\n * @alias Gp.Formats.WKT\n * @private\n */\n\nvar WKT = {\n\n    /**\n     * Parsing d'une chaine WKT\n     *\n     * @method toJson\n     * @param {String} strWkt - chaine de type WKT\n     * @param {Function} success - fonction callback\n     * @param {Function} error   - fonction callback\n     */\n    toJson : function (strWkt, success, error) {\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n\n        var json = null;\n\n        try {\n            if (!strWkt) {\n                throw new Error(\"La chaine WKT n'est pas renseignée !\");\n            }\n\n            if (!success) {\n                // callback success par defaut\n                success = function (json) {\n                    console.log(json);\n                };\n            }\n\n            if (!error) {\n                // callback error par defaut\n                error = function (e) {\n                    console.log(e);\n                };\n            }\n\n            var regex;\n            var subst;\n\n            // regex coordinates\n            regex = /(-?\\d+\\.?[0-9]*)\\s(-?\\d+\\.?[0-9]+)/g;\n            subst = \"[$1,$2]\";\n            strWkt = strWkt.replace(regex, subst);\n\n            // regex type\n            regex = /^(\\w+)/;\n            regex.exec(strWkt);\n            if (RegExp.$1 === \"POLYGON\") {\n                subst = \"{\\\"type\\\" : \\\"Polygon\\\",\";\n                strWkt = strWkt.replace(RegExp.$1, subst);\n                // clean\n                // (( --> coordinates : [[\n                regex = /(\\({2}?)/;\n                subst = \"\\\"coordinates\\\" : [[\";\n                strWkt = strWkt.replace(regex, subst);\n                // )) --> ]]}\n                regex = /(\\){2}?)/;\n                subst = \"]]}\";\n                strWkt = strWkt.replace(regex, subst);\n                // all ( --> [\n                regex = /(\\()/g;\n                subst = \"[\";\n                strWkt = strWkt.replace(regex, subst);\n                // all ) --> ]\n                regex = /(\\))/g;\n                subst = \"]\";\n                strWkt = strWkt.replace(regex, subst);\n            } else if (RegExp.$1 === \"LINESTRING\") {\n                subst = \"{\\\"type\\\" : \\\"LineString\\\",\";\n                strWkt = strWkt.replace(RegExp.$1, subst);\n                // clean\n                regex = /(\\(\\(?)/;\n                subst = \"\\\"coordinates\\\" : [\";\n                strWkt = strWkt.replace(regex, subst);\n                regex = /(\\)\\)?)/;\n                subst = \"]}\";\n                strWkt = strWkt.replace(regex, subst);\n            }\n\n            logger.trace(strWkt);\n\n            json = JSON.parse(strWkt);\n\n            if (!json) {\n                throw new Error(\"Le JSON est vide !\");\n            }\n\n            if (!json.type) {\n                throw new Error(\"Le type de geometrie n'est pas connu !\");\n            }\n\n            if (!json.coordinates) {\n                throw new Error(\"La liste des points est vide !\");\n            }\n\n            success.call(this, json);\n        } catch (e) {\n            if (e.name === \"SyntaxError\") {\n                error.call(this, \"Erreur de parsing JSON !\");\n                return;\n            }\n            error.call(this, e);\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (WKT);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9XS1QuanM/OWIzOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQThDOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBLHFCQUFxQiw4REFBTTs7QUFFM0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixFQUFFO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixFQUFFO0FBQy9CLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWUsa0VBQUcsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9XS1QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcblxuLyoqXG4gKiBMZWN0dXJlIC8gRWNyaXR1cmUgZHUgZm9ybWF0IFdLVFxuICpcbiAqIExlcyBiZXNvaW5zIHNvbnQgYXNzZXogc2ltcGxlcyA6XG4gKiAxLiBsZWN0dXJlIGRlcyB0eXBlcyBzdWl2YW50cyA6XG4gKiAgLSBMSU5FU1RSSU5HXG4gKiAgLSBQT0xZR09OXG4gKiAgLSAoVE9ETylcbiAqIDIuIGNvbnZlcnRpciBhdXggZm9ybWF0cyBzdWl2YW50cyA6XG4gKiAgLSBqc29uXG4gKiAgLSAoVE9ETylcbiAqXG4gKlxuICogQGV4YW1wbGVcbiAqICB2YXIgc3RyV0tUID0gXCJMSU5FU1RSSU5HICgyLjQxNjkwNyA0OC44NDY1NzcsIDIuNDE2OTE2IDQ4Ljg0NjYxMylcIjtcbiAqICBXS1QudG9Kc29uIChzdHJXS1QsXG4gKiAgICAgIGZ1bmN0aW9uIG9uU3VjY2VzcyAoanNvbikge1xuICogICAgICAgICAgLy8ge1xuICogICAgICAgICAgLy8gICAgICB0eXBlIDogJ0xJTkVTVFJJTkcnLFxuICogICAgICAgICAgLy8gICAgICBjb29yZGluYXRlcyA6IFtcbiAqICAgICAgICAgIC8vICAgICAgICAgIFsyLjQxNjkwNywgNDguODQ2NTc3XSxcbiAqICAgICAgICAgIC8vICAgICAgICAgIFsyLjQxNjkxNiwgNDguODQ2NjEzXVxuICogICAgICAgICAgLy8gICAgICBdXG4gKiAgICAgICAgICAvLyB9XG4gKiAgICAgIH0sXG4gKiAgICAgIGZ1bmN0aW9uIG9uRXJyb3IgKGVycm9yKSB7XG4gKiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gKiAgICAgIH1cbiAqICApO1xuICpcbiAqIEBtb2R1bGUgV0tUXG4gKiBAYWxpYXMgR3AuRm9ybWF0cy5XS1RcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIFdLVCA9IHtcblxuICAgIC8qKlxuICAgICAqIFBhcnNpbmcgZCd1bmUgY2hhaW5lIFdLVFxuICAgICAqXG4gICAgICogQG1ldGhvZCB0b0pzb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyV2t0IC0gY2hhaW5lIGRlIHR5cGUgV0tUXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VjY2VzcyAtIGZvbmN0aW9uIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXJyb3IgICAtIGZvbmN0aW9uIGNhbGxiYWNrXG4gICAgICovXG4gICAgdG9Kc29uIDogZnVuY3Rpb24gKHN0cldrdCwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgdmFyIGxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoKTtcblxuICAgICAgICB2YXIganNvbiA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghc3RyV2t0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGEgY2hhaW5lIFdLVCBuJ2VzdCBwYXMgcmVuc2VpZ27DqWUgIVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgLy8gY2FsbGJhY2sgc3VjY2VzcyBwYXIgZGVmYXV0XG4gICAgICAgICAgICAgICAgc3VjY2VzcyA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpzb24pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBjYWxsYmFjayBlcnJvciBwYXIgZGVmYXV0XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVnZXg7XG4gICAgICAgICAgICB2YXIgc3Vic3Q7XG5cbiAgICAgICAgICAgIC8vIHJlZ2V4IGNvb3JkaW5hdGVzXG4gICAgICAgICAgICByZWdleCA9IC8oLT9cXGQrXFwuP1swLTldKilcXHMoLT9cXGQrXFwuP1swLTldKykvZztcbiAgICAgICAgICAgIHN1YnN0ID0gXCJbJDEsJDJdXCI7XG4gICAgICAgICAgICBzdHJXa3QgPSBzdHJXa3QucmVwbGFjZShyZWdleCwgc3Vic3QpO1xuXG4gICAgICAgICAgICAvLyByZWdleCB0eXBlXG4gICAgICAgICAgICByZWdleCA9IC9eKFxcdyspLztcbiAgICAgICAgICAgIHJlZ2V4LmV4ZWMoc3RyV2t0KTtcbiAgICAgICAgICAgIGlmIChSZWdFeHAuJDEgPT09IFwiUE9MWUdPTlwiKSB7XG4gICAgICAgICAgICAgICAgc3Vic3QgPSBcIntcXFwidHlwZVxcXCIgOiBcXFwiUG9seWdvblxcXCIsXCI7XG4gICAgICAgICAgICAgICAgc3RyV2t0ID0gc3RyV2t0LnJlcGxhY2UoUmVnRXhwLiQxLCBzdWJzdCk7XG4gICAgICAgICAgICAgICAgLy8gY2xlYW5cbiAgICAgICAgICAgICAgICAvLyAoKCAtLT4gY29vcmRpbmF0ZXMgOiBbW1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gLyhcXCh7Mn0/KS87XG4gICAgICAgICAgICAgICAgc3Vic3QgPSBcIlxcXCJjb29yZGluYXRlc1xcXCIgOiBbW1wiO1xuICAgICAgICAgICAgICAgIHN0cldrdCA9IHN0cldrdC5yZXBsYWNlKHJlZ2V4LCBzdWJzdCk7XG4gICAgICAgICAgICAgICAgLy8gKSkgLS0+IF1dfVxuICAgICAgICAgICAgICAgIHJlZ2V4ID0gLyhcXCl7Mn0/KS87XG4gICAgICAgICAgICAgICAgc3Vic3QgPSBcIl1dfVwiO1xuICAgICAgICAgICAgICAgIHN0cldrdCA9IHN0cldrdC5yZXBsYWNlKHJlZ2V4LCBzdWJzdCk7XG4gICAgICAgICAgICAgICAgLy8gYWxsICggLS0+IFtcbiAgICAgICAgICAgICAgICByZWdleCA9IC8oXFwoKS9nO1xuICAgICAgICAgICAgICAgIHN1YnN0ID0gXCJbXCI7XG4gICAgICAgICAgICAgICAgc3RyV2t0ID0gc3RyV2t0LnJlcGxhY2UocmVnZXgsIHN1YnN0KTtcbiAgICAgICAgICAgICAgICAvLyBhbGwgKSAtLT4gXVxuICAgICAgICAgICAgICAgIHJlZ2V4ID0gLyhcXCkpL2c7XG4gICAgICAgICAgICAgICAgc3Vic3QgPSBcIl1cIjtcbiAgICAgICAgICAgICAgICBzdHJXa3QgPSBzdHJXa3QucmVwbGFjZShyZWdleCwgc3Vic3QpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChSZWdFeHAuJDEgPT09IFwiTElORVNUUklOR1wiKSB7XG4gICAgICAgICAgICAgICAgc3Vic3QgPSBcIntcXFwidHlwZVxcXCIgOiBcXFwiTGluZVN0cmluZ1xcXCIsXCI7XG4gICAgICAgICAgICAgICAgc3RyV2t0ID0gc3RyV2t0LnJlcGxhY2UoUmVnRXhwLiQxLCBzdWJzdCk7XG4gICAgICAgICAgICAgICAgLy8gY2xlYW5cbiAgICAgICAgICAgICAgICByZWdleCA9IC8oXFwoXFwoPykvO1xuICAgICAgICAgICAgICAgIHN1YnN0ID0gXCJcXFwiY29vcmRpbmF0ZXNcXFwiIDogW1wiO1xuICAgICAgICAgICAgICAgIHN0cldrdCA9IHN0cldrdC5yZXBsYWNlKHJlZ2V4LCBzdWJzdCk7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAvKFxcKVxcKT8pLztcbiAgICAgICAgICAgICAgICBzdWJzdCA9IFwiXX1cIjtcbiAgICAgICAgICAgICAgICBzdHJXa3QgPSBzdHJXa3QucmVwbGFjZShyZWdleCwgc3Vic3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2dnZXIudHJhY2Uoc3RyV2t0KTtcblxuICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2Uoc3RyV2t0KTtcblxuICAgICAgICAgICAgaWYgKCFqc29uKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGUgSlNPTiBlc3QgdmlkZSAhXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWpzb24udHlwZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxlIHR5cGUgZGUgZ2VvbWV0cmllIG4nZXN0IHBhcyBjb25udSAhXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWpzb24uY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMYSBsaXN0ZSBkZXMgcG9pbnRzIGVzdCB2aWRlICFcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1Y2Nlc3MuY2FsbCh0aGlzLCBqc29uKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUubmFtZSA9PT0gXCJTeW50YXhFcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IuY2FsbCh0aGlzLCBcIkVycmV1ciBkZSBwYXJzaW5nIEpTT04gIVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgV0tUO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/WKT.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/WPS.js":
/*!**************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/WPS.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * @classdesc\n * Standard WPS\n *\n * @constructor\n * @alias Gp.Formats.WPS\n * @param {Object} options - options\n * @param {Object}   options.data - objet\n * @param {String}   options.method - POST|GET\n * @param {String}   options.param.service - \"WPS\"\n * @param {String}   options.param.version - \"1.0.0\"\n * @param {String}   options.param.identifier - \"gs:WPSElevation|gs:WPSLineElevation\"\n * @param {String}   options.param.rawdataoutput - \"result\"\n * @param {String}   options.param.request - \"Execute\"\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n * @private\n */\nfunction WPS (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur WPS()]\");\n\n    if (!(this instanceof WPS)) {\n        throw new TypeError(\"WPS constructor cannot be called as a function.\");\n    }\n\n    this.options = options || {};\n\n    /**\n     * Objet DATA\n     */\n    this.DataObject = this.options.data;\n\n    if (!this.DataObject) {\n        throw new TypeError(\"This data object is not defined !\");\n    }\n\n    /**\n     * param service.\n     * Par defaut, \"WPS\".\n     */\n    this.paramservice = this.options.param.service || \"WPS\";\n\n    /**\n     * param version.\n     * Par defaut, \"1.0.0\".\n     */\n    this.paramversion = this.options.param.version || \"1.0.0\";\n\n    /**\n     * param identifier\n     * Par defaut, \"gs:WPS\"\n     */\n    this.paramidentifier = this.options.param.identifier || \"gs:WPS\";\n\n    /**\n     * param rawdataoutput\n     * Par defaut, \"result\".\n     */\n    this.paramrawdataoutput = this.options.param.rawdataoutput || \"result\";\n\n    /**\n     * param request\n     * Par defaut, \"Execute\".\n     */\n    this.paramrequest = this.options.param.request || \"Execute\";\n\n    /**\n     * methode.\n     * Par defaut, \"GET\".\n     */\n    this.method = this.options.method || \"GET\";\n}\n\nWPS.prototype = {\n\n    /**\n     * @lends module:WPS#\n     */\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : WPS,\n\n    /**\n     * Template de la requête.\n     */\n    template : {\n        get : {\n            value : \"service=__SERVICE__\" +\n                \"&version=__VERSION__\" +\n                \"&rawdataoutput=__RAWDATAOUTPUT__\" +\n                \"&identifier=__IDENTIFIER__\" +\n                \"&request=__REQUEST__\" +\n                \"&datainputs=<!-- __DATAINPUTS__ -->\",\n\n            input : \"__KEY__=__DATA__\"\n\n        },\n        post : {\n\n            value : \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +\n                \"<wps:__REQUEST__ version=\\\"__VERSION__\\\" service=\\\"__SERVICE__\\\" \" +\n                \"__NAMESPACE__ __SCHEMALOCATION__>\" +\n                \"<ows:Identifier>__IDENTIFIER__</ows:Identifier>\" +\n                \"<wps:DataInputs>\" +\n                \"<!-- __DATAINPUTS__ -->\" +\n                \"</wps:DataInputs>\" +\n                \"<wps:ResponseForm>\" +\n                \"<wps:RawDataOutput>\" +\n                \"<ows:Identifier>__RAWDATAOUTPUT__</ows:Identifier>\" +\n                \"</wps:RawDataOutput>\" +\n                \"</wps:ResponseForm>\" +\n                \"</wps:__REQUEST__>\",\n\n            input : \"<wps:Input>\" +\n                \"<ows:Identifier>__KEY__</ows:Identifier>\" +\n                \"<wps:Data>\" +\n                \"<wps:LiteralData>__DATA__</wps:LiteralData>\" +\n                \"</wps:Data>\" +\n                \"</wps:Input>\"\n        }\n    },\n\n    /**\n     * Namespace par defaut de la requete POST.\n     *\n     * @returns {String} namespace\n     */\n    namespaceByDefault : function () {\n        var ns = [\n            \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n            \"xmlns=\\\"http://www.opengis.net/wps/1.0.0\\\"\",\n            \"xmlns:wfs=\\\"http://www.opengis.net/wfs\\\"\",\n            \"xmlns:wps=\\\"http://www.opengis.net/wps/1.0.0\\\"\",\n            \"xmlns:ows=\\\"http://www.opengis.net/ows/1.1\\\"\",\n            \"xmlns:gml=\\\"http://www.opengis.net/gml\\\"\",\n            \"xmlns:ogc=\\\"http://www.opengis.net/ogc\\\"\",\n            \"xmlns:wcs=\\\"http://www.opengis.net/wcs/1.1.1\\\"\",\n            \"xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\"\n        ];\n\n        return ns.join(\" \");\n    },\n\n    /**\n     * Schemalocation par defaut.\n     *\n     * @returns {String} schemaLocation\n     */\n    schemaLocationByDefault : function () {\n        return \"xsi:schemaLocation=\\\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\\\"\";\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out :\n     * //  service=__SERVICE__\n     * //  &version=__VERSION__\n     * //  &rawdataoutput=__RAWDATAOUTPUT__\n     * //  &identifier=__IDENTIFIER__\n     * //  &request=__REQUEST__\n     * //  &datainputs=\"__DATAINPUTS__\"\n     * //  avec __DATAINPUTS__ = __KEY__=__DATA__;...\n     *\n     * // POST out :\n     * //      <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n     * //      <wps:__REQUEST__ version=\\\"__VERSION__\\\" service=\\\"__SERVICE__\\\"\n     * //         __NAMESPACE__ __SCHEMALOCATION__>\n     * //          <ows:Identifier>__IDENTIFIER__</ows:Identifier>\n     * //          <wps:DataInputs>\n     * //              <!-- __DATAINPUTS__ -->\n     * //          </wps:DataInputs>\n     * //          <wps:ResponseForm>\n     * //              <wps:RawDataOutput>\n     * //              <ows:Identifier>__RAWDATAOUTPUT__</ows:Identifier>\n     * //              </wps:RawDataOutput>\n     * //          </wps:ResponseForm>\n     * //      </wps:__REQUEST__>\",\n     * //      avec __DATAINPUTS__\n     * //             <wps:Input>\n     * //                  <ows:Identifier>__KEY__</ows:Identifier>\n     * //                  <wps:Data>\n     * //                    <wps:LiteralData>__DATA__</wps:LiteralData>\n     * //                  </wps:Data>\n     * //              </wps:Input>\n     *\n     * @returns {Boolean} validation de la construction de la requete\n     */\n    processRequestString : function () {\n        this.logger.trace(\"WPS::processRequestString ()\");\n\n        var template = \"\";\n        if (this.method === \"POST\") {\n            template = this.template.post.value;\n        } else if (this.method === \"GET\") {\n            template = this.template.get.value;\n        } else {\n            this.logger.error(\"No other method supported by the service !\");\n            return false;\n        }\n\n        template = template.replace(/__SERVICE__/g, this.paramservice);\n        template = template.replace(/__VERSION__/g, this.paramversion);\n        template = template.replace(/__RAWDATAOUTPUT__/g, this.paramrawdataoutput);\n        template = template.replace(/__IDENTIFIER__/g, this.paramidentifier);\n        template = template.replace(/__REQUEST__/g, this.paramrequest);\n\n        // ajout +\n        if (this.method === \"POST\") {\n            template = template.replace(/__NAMESPACE__/g, this.namespaceByDefault);\n            template = template.replace(/__SCHEMALOCATION__/g, this.schemaLocationByDefault);\n        }\n\n        // ajout des datainputs\n        template = template.replace(/<!-- __DATAINPUTS__ -->/g, this.__addDataInputs());\n\n        if (!template) {\n            this.logger.warn(\"traduction tmpl : empty request !?\");\n            return false;\n        }\n\n        this.requestString = template;\n        this.logger.trace(\"traduction tmpl\", template);\n\n        return true;\n    },\n\n    /**\n     * Ajout des données\n     *\n     * @returns {String} Données concaténées dans une chaine\n     */\n    __addDataInputs : function () {\n        this.logger.trace(\"WPS::__addDataInputs ()\");\n\n        // c'est un peu grossier...\n        var tmpl = this.method === \"GET\" ? this.template.get.input : this.template.post.input;\n        var sep = this.method === \"GET\" ? \";\" : \"\";\n\n        var result = \"\";\n        var that = this;\n        var map = this.DataObject.getData();\n        for (var i = 0; i < map.length; i++) {\n            // FIXME closure ?\n            (function (j) {\n                if (sep) {\n                    sep = (j === map.length - 1) ? \"\" : \";\";\n                }\n                result = result.concat(that.__addDataInput(tmpl, map[j].k, map[j].v), sep);\n            })(i);\n        }\n\n        return result;\n    },\n\n    /**\n     * Ajout d'une donnée.\n     *\n     * @param {String} tmpl - template\n     * @param {String} key - clef\n     * @param {String} data - valeur\n     * @returns {String} chaine avec les substitutions clef/valeur\n     */\n    __addDataInput : function (tmpl, key, data) {\n        var tmp = tmpl;\n        tmp = tmp.replace(/__KEY__/g, key);\n        tmp = tmp.replace(/__DATA__/g, data);\n        return tmp;\n    },\n\n    /**\n     * Definir le mode de requête\n     *\n     * @param {String} method - GET|POST\n     */\n    setMethod : function (method) {\n        if (method === \"GET\" || method === \"POST\") {\n            this.method = method;\n        } else {\n            this.logger.warn(\"support only GET and POST method !\");\n        }\n    },\n\n    /**\n     * Retourne le mode de requete (GET|POST).\n     *\n     * @returns {AltiRequest.options.mode|String} methode (GET|POST)\n     */\n    getMethod : function () {\n        return this.method;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (WPS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/WPS.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS.js":
/*!**************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _XLS_RequestHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XLS/RequestHeader */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/RequestHeader.js\");\n/* harmony import */ var _XLS_Request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XLS/Request */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/Request.js\");\n/* harmony import */ var _XLS_AbstractService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./XLS/AbstractService */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/AbstractService.js\");\n\n\n\n\n\n/**\n * @classdesc\n *\n * standard OpenLS\n * standard XLS\n * (version 1.2)\n *\n * Réfs :\n *     - {@link http://schemas.opengis.net/ols/1.2/}\n *     - {@link http://www.opengeospatial.org/standards/ols}\n *     - {@link http://wxs.ign.fr/schemas/}\n *\n *\n * Création du template XLS (avec gestion des namespaces)\n * ------------------------\n * ```\n *   balise xsd : element name=\"XLS\" attribute name=\"version\" [(attribute ref=\"lang\")]\n * ```\n *\n * Exemple :\n * ```\n * <XLS xmlns=\"http://www.opengis.net/xls\" version=\"1.2\">\n *   < (ref. OLS) />\n * </XLS>\n * ```\n * ```\n * <xls:XLS xmlns:xls=\"http://www.opengis.net/xls\" version=\"1.2\">\n *   <xls: (ref. OLS) />\n * </xls:XLS>\n * ```\n *\n * Création des templates OLS pour LocationUtilityService\n * ------------------------------------------------------\n *\n * Exemple :\n *\n * ```\n * <RequestHeader srsName=\"epsg:4326\"/>\n * <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n *      <GeocodeRequest>\n *          <Address countryCode=\"PositionOfInterest\">\n *              <freeFormAddress>saint mandé</freeFormAddress>\n *          </Address>\n *      </GeocodeRequest>\n *  </Request>\n * ```\n * ```\n * <RequestHeader sessionID=\"\" />\n * <Request methodName=\"ReverseGeocodeRequest\" version=\"1.2\" requestID=\"\" maximumResponses=\"10\">\n *   <ReverseGeocodeRequest>\n *     <Position>\n *       <gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n *           <gml:pos>50.347775 3.205098</gml:pos>\n *       </gml:Point>\n *     </Position>\n *     <ReverseGeocodePreference>StreetAddress</ReverseGeocodePreference>\n *  </ReverseGeocodeRequest>\n * </Request>\n * ```\n * ```\n * Geocodage direct (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"GeocodeRequest\" attribute name=\"returnFreeForm\"\n *         element ref=\"xls:Address\"\n * ```\n * ```\n * Geocodage inverse (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"ReverseGeocodeRequest\"\n *         element ref=\"xls:Position\"\n *         element name=\"ReverseGeocodePreference\" (enumeration)\n * ```\n *\n * Il existe 3 sous ensembles d'objets :\n *     - RequestHeader\n *     - Request\n *     - ReverseGeocodeRequest, GeocodeRequest\n *\n * GeocodeRequest est composé d'un objet {@link Gp.Services.Geocode.Response.GeocodeLocation}.\n * ReverseGeocodeRequest est composé d'un objet {@link Gp.Services.ReverseGeocode.Response.ReverseGeocodeLocation}.\n *\n * Les locations font appels aux objets suivants qui possèdent des attributs spécifiques\n * en fonction du type de table de geocodage interrogé :\n *     - StreetAddress\n *     - CadastralParcel\n *     - PositionOfInterest\n *     - Administratif\n *\n *\n * et des élements sous jacents tels que :\n *     - ReverseGeocodePreference -> tables de geocodages :\n *         - StreetAddress\n *         - CadastralParcel\n *         - PositionOfInterest\n *         - Administratif (une balise par table)\n *     - Position -> standard GML 3.2.1\n *     - Address  -> cf. ci-dessous\n *\n * ```\n * Position (balise xsd) :\n *   ex. <Position><gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>50.347775 3.205098</gml:pos></gml:Point></Position>\n *   ex. <Position><gml:CircleByCenterPoint xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>48.85978570614691 2.2913572761128878</gml:pos><gml:radius>1000</gml:radius></gml:CircleByCenterPoint></Position>\n *   (au choix)\n *   element ref=\"gml:Point\"\n *   element ref=\"gml:CircleByCenterPoint\"\n *   element ref=\"gml:Polygon\"\n *   element ref=\"gml:MultiPolygon\"\n *   les autres elemennts ne sont pas implémentés (QoP, Speed, Direction, Time, ...)\n *\n * Address (balise xsd) :\n *   ex. <Address countryCode=\"StreetAddress\"><freeFormAddress>1 r de paris saint denis</freeFormAddress></Address>\n *   attribute name=\"countryCode\"\n *     element name=\"freeFormAddress\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n *  ou\n *   ex. <Address countryCode=\"StreetAddress\"><StreetAddress><Street>1 rue Marconi</Street></StreetAddress><Place type=\"Municipality\">Metz</Place><PostalCode>57000</PostalCode></Address>\n *   attribute name=\"countryCode\"\n *     element ref=\"xls:StreetAddress\"\n *     element ref=\"xls:PostalCode\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n *\n * Place  (balise xsd) :\n *  ex. <Place type=\"Municipality\">Metz</Place>\n *  attribute name=\"type\"\n *   enumeration value=\"CountrySubdivision\"\n *   enumeration value=\"CountrySecondarySubdivision\"\n *   enumeration value=\"Municipality\"\n *   enumeration value=\"MunicipalitySubdivision\"\n *   enumeration value=\"choume-banchi-go\"\n *   enumeration value=\"Qualite\"\n *   enumeration value=\"Departement\"\n *   enumeration value=\"Bbox\"\n *   enumeration value=\"Commune\"\n *   enumeration value=\"Territoire\"\n *   enumeration value=\"Importance\"\n *   enumeration value=\"Nature\"\n *   (la liste n'est pas exhaustives...)\n *\n * StreetAddress (balise xsd) :\n *   ex. <StreetAddress><Street>1 rue Marconi</Street></StreetAddress>\n *   attribute name=\"locator\"\n *    element name=\"xls:Building\"\n *    element ref=\"xls:Street\"\n *\n * Street (balise xsd) :\n *   ex. <Street>1 rue Marconi</Street>\n *   attribute name=\"officialName\" (...)\n *\n * Building (balise xsd) :\n *   ex. <Building number=\"800\"/>\n *   attribute name=\"number\" attribute name=\"subdivision\" attribute name=\"buildingName\"\n *\n * PostalCode (balise xsd) :\n *   ex. <PostalCode>77182</PostalCode>\n *\n * ```\n *\n * Requête\n * -------\n *\n * 2 modes de requête sur les services : GET ou POST.\n *\n * Le mode GET n'est que l'encodage du XML en param (qxml) de la requête (donc pas d'implementation particulière ?)\n *\n * Modèle de classes\n * -----------------\n *\n * ```\n *                 ________  XLS ____________\n *               /            |               \\\n *   RequestHeader      AbstractService    Request\n *                            ^\n *                      ______|________________________\n *           (extends) /                               \\ (extends)\n *          LocationUtilityService                    RouteService\n *                    |                                    |\n *         ___________|___________                       (...)\n *       /                        \\\n * GeocodeRequest          ReverseGeocodeRequest\n *      |                          |\n *      |                     _____|______\n *      |                    /            \\\n *   Address              Preference  Position\n *      |\n *    /   \\\n * Place   StreetAddress\n *               |\n *             /   \\\n *       Street   Building\n * ```\n *\n * @example\n * // encapsule un objet 'LocationUtilityService'\n * // dans une coquille XSL (avec/sans namespace)\n * xsl = new XSL ();\n * xsl.namespace = false;\n * xsl.srsName = \"epsg:4326\";\n * xsl.maximumResponses = 26;\n * //   methodName fournit par l'objet 'lus'\n * //   requestID est calculé\n * xsl.setService (lus);\n * xsl.build ();\n * // out ->\n * // <XLS xmlns=\"http://www.opengis.net/xls\" version=\"1.2\">\n * // <RequestHeader srsName=\"epsg:4326\"/>\n * // <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n * //   < (ref. LocationUtilityService ou vide) />\n * //  </Request>\n * // </XLS>\n *\n *\n * @constructor\n * @alias Gp.Formats.XLS\n * @param {Object} options - options du constructeur\n * @param {Object} options.srsName - identifiant du Systeme de Coordonnees\n * @param {String}   options.maximumResponses - nombre de reponses max d'une requete\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction XLS (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur XLS()]\");\n\n    if (!(this instanceof XLS)) {\n        throw new TypeError(\"XLS constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = {\n        srsName : \"EPSG:4326\",\n        maximumResponses : 25\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            if (options[opt]) {\n                this.options[opt] = options[opt];\n            }\n        }\n    }\n}\n\n/**\n * Version\n */\nXLS.VERSION = \"1.2\";\n\nXLS.prototype = {\n\n    /**\n     * @lends module:XLS#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * namespace\n     * Surcharge les balises XLS d'un prefixe.\n     * Par defaut, false\n     * @type {Boolean}\n     */\n    namespace : false,\n\n    /**\n     * Objet Service\n     * LocationUtilityService ou RouteService\n     * @type {AbstractService}\n     */\n    oService : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : XLS,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __VERSION__, __NAMESPACE__, __SCHEMALOCATION__\n     * __REQUESTHEADER__, __REQUEST__\n     */\n    template : \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n        \"<XLS version=\\\"__VERSION__\\\"\\n\" +\n        \"__NAMESPACE__ \\n\" +\n        \"__SCHEMALOCATION__>\\n\" +\n        \"__REQUESTHEADER__\\n\" +\n        \"__REQUEST__\\n\" +\n        \"</XLS>\\n\",\n\n    /**\n     * Namespace par defaut.\n     *\n     * @returns {String} namespace\n     */\n    namespaceByDefault : function () {\n        var ns = [\n            \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n            \"xmlns:xls=\\\"http://www.opengis.net/xls\\\"\",\n            \"xmlns:gml=\\\"http://www.opengis.net/gml\\\"\"\n        ];\n\n        return ns.join(\" \");\n    },\n\n    /**\n     * Schemalocation par defaut\n     *\n     * @returns {String} schemaLocation\n     */\n    schemaLocationByDefault : function () {\n        return \"xsi:schemaLocation=\\\"http://www.opengis.net/xls http://schemas.opengis.net/ols/1.2/olsAll.xsd\\\"\";\n    },\n\n    /**\n     * Setter Service\n     * Ajout d'un objet de type LocationUtilityService (LUS) ou RouteService\n     *\n     * @param {Object} oService - GeoceodeRequest / ReverseGeocodeRequest ou RouteRequest\n     */\n    setService : function (oService) {\n        if (!oService) {\n            this.logger.trace(\"L'objet de type Service XSL n'est pas encore defini !?\");\n            return;\n        }\n\n        if (oService instanceof _XLS_AbstractService__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n            this.oService = oService;\n        } else {\n            this.logger.error(\"L'objet n'est pas du type 'LocationUtilityService' ou 'RouteService' !?\");\n        }\n    },\n\n    /**\n     * Getter Service\n     * Retourne un objet de type LocationUtilityService (LUS) ou RouteService\n     * ex. GeoceodeRequest / ReverseGeocodeRequest ou RouteRequest\n     *\n     * @returns {Object} service (LocationUtilityService|RouteService)\n     */\n    getService : function () {\n        return this.oService;\n    }\n};\n\n/**\n * Ajout d'un prefixe de namespace\n *\n * @todo impl. l'ajout de namespace\n * @param {Object} ns - ex. {key:xls, url:http://www.opengis.net/xls}\n * @param {String} request - requête\n * @returns {String} requête\n */\nXLS.prototype.addNamespace = function (ns, request) {\n    // INFO\n    // on recherche la clef dans les namespaces par defaut.\n    // si la clef n'existe pas dans les namespaceByDefault (), on l'ajoute.\n    // on surcharge toutes les balises, ex. XLS -> xls:XLS\n    // sauf celles qui sont déjà prefixées !\n\n    var keyNS = ns.key;\n    // var urlNS = ns.url; // TODO not yet implemented !\n\n    // recherche la clef dans les namespaces par defaut\n    var bFound = false;\n    var allNS = this.namespaceByDefault().split(\" \");\n    for (var index = 0; index < allNS.length; index++) {\n        var element = allNS[index];\n        var map = element.split(\"=\");\n        var key = map[0];\n        // var url = map[1]; // TODO not yet implemented !\n\n        if (key === \"xmlns:\" + keyNS) {\n            bFound = true;\n            break;\n        }\n    }\n\n    // TODO\n    // si on a une nouvelle clef, on l'ajoute...\n    if (!bFound) {\n        this.logger.warn(\"L'ajout d'un nouvel namespace n'est pas encore implémenté !\");\n        return request;\n    }\n\n    // surcharge toutes les balises\n    var regex;\n    var subst;\n\n    // regex balise ouvrante\n    regex = /<(\\w+[\\s>])/g;\n    subst = \"<\" + keyNS + \":$1\";\n    request = request.replace(regex, subst);\n\n    // regex balise fermante\n    regex = /<\\/(\\w+[\\s>])/g;\n    subst = \"</\" + keyNS + \":$1\";\n    request = request.replace(regex, subst);\n\n    this.logger.trace(\"namespace\", request);\n\n    return request;\n};\n\n/**\n * Construction de la requête\n * @returns {String} requête\n */\nXLS.prototype.build = function () {\n    // out ->\n    // <XLS xmlns=\"http://www.opengis.net/xls\" version=\"1.2\">\n    // <RequestHeader srsName=\"epsg:4326\"/>\n    // <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n    //   < (ref. LocationUtilityService ou vide) />\n    //  </Request>\n    // </XLS>\n\n    // as t on un objet de type Service XLS à disposition ?\n    var bService = !!this.getService();\n\n    var template = \"\";\n    template = this.template;\n    template = template.replace(/__VERSION__/g, XLS.VERSION);\n    template = template.replace(/__NAMESPACE__/g, this.namespaceByDefault);\n    template = template.replace(/__SCHEMALOCATION__/g, this.schemaLocationByDefault);\n\n    // header\n    var oHeader = new _XLS_RequestHeader__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n        srsName : this.options.srsName\n    });\n    template = template.replace(/__REQUESTHEADER__/g, oHeader.toString());\n\n    // request\n    var oRequest = new _XLS_Request__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n        maximumResponses : this.options.maximumResponses,\n        version : XLS.VERSION, // FIXME même version ?\n        methodName : bService ? this.getService().CLASSTYPE : null\n    });\n    template = template.replace(/__REQUEST__/g, oRequest.toString());\n\n    // objet lus ou route\n    if (bService) { // INFO : clef __REQUESTSERVICE__ dispo dans l'objet 'Request'\n        template = template.replace(/<!-- __REQUESTSERVICE__ -->/g, this.getService().toString());\n    }\n\n    if (!template) {\n        this.logger.warn(\"traduction tmpl : empty request !?\");\n        return;\n    }\n\n    // ajout d'un namespace\n    if (this.namespace) {\n        // ajout de xls par defaut\n        template = this.addNamespace({\n            key : \"xls\",\n            url : \"http://www.opengis.net/xls\"\n        }, template);\n    }\n\n    this.requestString = template;\n    this.logger.trace(\"traduction tmpl\", template);\n\n    // on retourne qqchose !\n    return this.requestString;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (XLS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/AbstractService.js":
/*!******************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/AbstractService.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * @classdesc\n * @private\n *\n * @constructor\n * @alias Gp.Formats.XLS.AbstractService\n *\n * @param {Object} [options] - options\n */\nfunction AbstractService (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur AbstractService ()]\");\n\n    if (!(this instanceof AbstractService)) {\n        throw new TypeError(\"AbstractService constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\n/**\n * @lends module:AbstractService#\n */\nAbstractService.prototype = {\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * objet Request\n     * @type {Request}\n     */\n    oRequest : null,\n\n    /**\n     * Filter\n     * @type {FilterExtension}\n     */\n    oFilter : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AbstractService,\n\n    /**\n     * Ajout d'un objet de type Request : GeocodeRequest / ReverseGeocodeRequest / RouteRequest\n     *\n     * @param {Object} oRequest - GeocodeRequest / ReverseGeocodeRequest / RouteRequest\n     */\n    addRequest : function (oRequest) {\n        this.logger.error(\"overwritten method !\");\n    },\n\n    /**\n     * Ajout d'un objet de type FilterExtension : GeocodeFilterExtension ou RouteRequestExtension\n     *\n     * @param {Object} oFilter - GeocodeFilterExtension ou RouteRequestExtension\n     */\n    addFilter : function (oFilter) {\n        this.logger.error(\"overwritten method !\");\n    },\n\n    /**\n     * toString\n     */\n    toString : function () {\n        this.logger.error(\"overwritten method !\");\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AbstractService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvQWJzdHJhY3RTZXJ2aWNlLmpzPzc1MDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBLGtCQUFrQiw4REFBTTtBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZSw4RUFBZSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9Gb3JtYXRzL1hMUy9BYnN0cmFjdFNlcnZpY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIEdwLkZvcm1hdHMuWExTLkFic3RyYWN0U2VydmljZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIEFic3RyYWN0U2VydmljZSAob3B0aW9ucykge1xuICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcigpO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiW0NvbnN0cnVjdGV1ciBBYnN0cmFjdFNlcnZpY2UgKCldXCIpO1xuXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFic3RyYWN0U2VydmljZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFic3RyYWN0U2VydmljZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8vIG9wdGlvbnMgcGFyIGRlZmF1dFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBldCBvbiBham91dGUgbGVzIG9wdGlvbnMgZW4gcGFyYW3DqHRyZSBhdXggb3B0aW9ucyBwYXIgZMOpZmF1dFxuICAgIGZvciAodmFyIG9wdCBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1tvcHRdID0gb3B0aW9uc1tvcHRdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBsZW5kcyBtb2R1bGU6QWJzdHJhY3RTZXJ2aWNlI1xuICovXG5BYnN0cmFjdFNlcnZpY2UucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogcmVxdWVzdCAob3V0KVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RyUmVxdWVzdCA6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBvYmpldCBSZXF1ZXN0XG4gICAgICogQHR5cGUge1JlcXVlc3R9XG4gICAgICovXG4gICAgb1JlcXVlc3QgOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogRmlsdGVyXG4gICAgICogQHR5cGUge0ZpbHRlckV4dGVuc2lvbn1cbiAgICAgKi9cbiAgICBvRmlsdGVyIDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgOiBBYnN0cmFjdFNlcnZpY2UsXG5cbiAgICAvKipcbiAgICAgKiBBam91dCBkJ3VuIG9iamV0IGRlIHR5cGUgUmVxdWVzdCA6IEdlb2NvZGVSZXF1ZXN0IC8gUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0IC8gUm91dGVSZXF1ZXN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb1JlcXVlc3QgLSBHZW9jb2RlUmVxdWVzdCAvIFJldmVyc2VHZW9jb2RlUmVxdWVzdCAvIFJvdXRlUmVxdWVzdFxuICAgICAqL1xuICAgIGFkZFJlcXVlc3QgOiBmdW5jdGlvbiAob1JlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJvdmVyd3JpdHRlbiBtZXRob2QgIVwiKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWpvdXQgZCd1biBvYmpldCBkZSB0eXBlIEZpbHRlckV4dGVuc2lvbiA6IEdlb2NvZGVGaWx0ZXJFeHRlbnNpb24gb3UgUm91dGVSZXF1ZXN0RXh0ZW5zaW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb0ZpbHRlciAtIEdlb2NvZGVGaWx0ZXJFeHRlbnNpb24gb3UgUm91dGVSZXF1ZXN0RXh0ZW5zaW9uXG4gICAgICovXG4gICAgYWRkRmlsdGVyIDogZnVuY3Rpb24gKG9GaWx0ZXIpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJvdmVyd3JpdHRlbiBtZXRob2QgIVwiKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdG9TdHJpbmdcbiAgICAgKi9cbiAgICB0b1N0cmluZyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJvdmVyd3JpdHRlbiBtZXRob2QgIVwiKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdFNlcnZpY2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/AbstractService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _AbstractService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractService */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/AbstractService.js\");\n/* harmony import */ var _LocationUtilityService_GeocodeRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LocationUtilityService/GeocodeRequest */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeRequest.js\");\n/* harmony import */ var _LocationUtilityService_ReverseGeocodeRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LocationUtilityService/ReverseGeocodeRequest */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/ReverseGeocodeRequest.js\");\n/* harmony import */ var _LocationUtilityService_GeocodeFilterExtension__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LocationUtilityService/GeocodeFilterExtension */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeFilterExtension.js\");\n\n\n\n\n\n\n/**\n * @classdesc\n *\n * Requête de type LocationUtilityService (LUS)\n * (Factory)\n *\n * @example\n * // encapsule un objet dans une coquille XSL, Factory sur les objets Geocode/ReverseGeocode\n * lus = new LocationUtilityService ();\n * lus.addRequest (req);\n * lus.toString();\n *  ou\n * lus = new LocationUtilityService ({\n *      location : \"saint mandé\",\n *      returnFreeForm : true,\n *      filterOptions : {\n *          type :  ['PositionOfInterest']\n *      }\n * });\n * lus.toString();\n *\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n *\n * // creation de l'objet Geocode\n * req = new GeocodeRequest ();\n * req.addAddress (new Address (/*todo/*));\n * req.toString();\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n *\n * // creation de l'objet ReverseGeocode\n * req = new ReverseGeocodeRequest ();\n * req.addPosition (new Position (position:{x: , y: }));\n * req.addPreference (['StreetAddress']);\n * req.toString();\n * // out ->\n * // <ReverseGeocodeRequest>\n * //     <Position>\n * //       <gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n * //           <gml:pos>50.347775 3.205098</gml:pos>\n * //       </gml:Point>\n * //     </Position>\n * //     <ReverseGeocodePreference>StreetAddress</ReverseGeocodePreference>\n * //  </ReverseGeocodeRequest>\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService\n * @param {Object} options - options\n * @param {Object}   options.location - location\n * @param {String}   options.position - position : {x : \"\", y : \"\"}\n * @param {String}   options.returnFreeForm - true|false\n * @param {Object}   options.filterOptions - filtres\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction LocationUtilityService (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur LocationUtilityService ()]\");\n\n    if (!(this instanceof LocationUtilityService)) {\n        throw new TypeError(\"LocationUtilityService constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe\n     */\n    this.CLASSNAME = \"LocationUtilityService\";\n\n    /**\n     * Type de classe de geocodage\n     * ex. GeocodeRequest ou ReverseGeocodeRequest\n     */\n    this.CLASSTYPE = null;\n\n    // appel du constructeur par heritage\n    _AbstractService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n\n    // on determine le type de geocodage si les options sont renseignées\n    if (this.options) {\n        this.CLASSTYPE = (this.options.location) ? \"GeocodeRequest\" : (this.options.position) ? \"ReverseGeocodeRequest\" : null;\n    }\n}\n\n/**\n * @lends module:LocationUtilityService#\n */\nLocationUtilityService.prototype = Object.create(_AbstractService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/**\n * Constructeur (alias)\n */\nLocationUtilityService.prototype.constructor = LocationUtilityService;\n\n/**\n * (overwrite) Ajout d'un objet de type LUS : GeocodeRequest ou ReverseGeocodeRequest\n *\n * @param {Object} oLUSRequest - objet de type LUS\n */\nLocationUtilityService.prototype.addRequest = function (oLUSRequest) {\n    // on determine le type de geocodage\n    this.CLASSTYPE = oLUSRequest.CLASSNAME;\n\n    // on controle les types acceptés\n    switch (this.CLASSTYPE) {\n        case \"GeocodeRequest\":\n        case \"ReverseGeocodeRequest\":\n            this.oRequest = oLUSRequest;\n            break;\n        default:\n            throw new Error(\"Ce n'est pas un objet de type 'LUS Request' !?\");\n    }\n};\n\n/**\n * (overwrite) Ajout d'un objet de type GeocodeFilterExtension\n *\n * @param {Object} oFilter - objet de type Filtre\n */\nLocationUtilityService.prototype.addFilter = function (oFilter) {\n    // FIXME gestion des filtres à partir des tables de geocodages\n    if (oFilter instanceof _LocationUtilityService_GeocodeFilterExtension__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n        this.oFilter = oFilter;\n    }\n};\n\n/**\n * (overwrite) toString\n *\n * @returns {String} requête\n */\nLocationUtilityService.prototype.toString = function () {\n    // soit, on a un objet LUS Request déjà instancié\n    // sinon, il faut le construire à partir des options à disposition\n    if (!this.oRequest) {\n        // il nous faut des options\n        if (!this.options) {\n            throw new Error(\"Les options ne sont pas renseignées, impossible de construire la requête !\");\n        }\n\n        // si les options 'location' et 'position' sont renseignées,\n        // on prendra par defaut le choix du geocodage direct\n        if (this.CLASSTYPE === \"GeocodeRequest\") {\n            var settingsDirect = {\n                location : this.options.location,\n                returnFreeForm : this.options.returnFreeForm,\n                filterOptions : this.options.filterOptions || {}\n            };\n            this.oRequest = new _LocationUtilityService_GeocodeRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"](settingsDirect);\n            // ajout des filtres spécifiques au service du geocodage direct de l'IGN\n            if (this.oFilter) {\n                this.oRequest.addFilter(this.oFilter);\n            }\n        } else if (this.CLASSTYPE === \"ReverseGeocodeRequest\") {\n            var settingsInv = {\n                position : this.options.position,\n                returnFreeForm : this.options.returnFreeForm,\n                filterOptions : this.options.filterOptions || {}\n            };\n            this.oRequest = new _LocationUtilityService_ReverseGeocodeRequest__WEBPACK_IMPORTED_MODULE_3__[\"default\"](settingsInv);\n        } else {\n            this.logger.error(\"impossible de determiner le type de geocodage : Direct ou Inverse !?\");\n        }\n    }\n\n    // objet indefini !?\n    if (!this.oRequest) {\n        throw new Error(\"Type de Geocodage indefini !\");\n    }\n\n    this.strRequest = this.oRequest.toString();\n    return this.strRequest;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LocationUtilityService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeFilterExtension.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeFilterExtension.js ***!
  \************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n\n/**\n * @classdesc\n *\n * Ajouter des extensions de filtres spécifiques au service de geocodage de l'IGN.\n * Ceci permet de contrôler les options spécifiques de la table de geocodage intérrogées.\n *\n * @example\n * var ext =  new GeocodeFiltersExtension ();\n *     ext.add (new Administratif ());\n *     ext.add (new StreetAddress ());\n *     ext.add (new PositionOfInterest ());\n *     ext.add (new CadastralParcel ());\n *\n * ext.getNames ()\n * // --> out\n * // [Administratif, StreetAddress, PositionOfInterest, CadastralParcel]\n *\n * ext.getFilters ()\n * // --> out\n * // [Object, Object, Object, Object] = tableau d'objet GeocodeLocation\n *\n * ext.getFilter ('StreetAddress')\n * // --> out\n * // {Object} = objet GeocodeLocation\n *\n * ext.getAttributs ('StreetAddress')\n * // --> out\n * // [\"bbox\", \"number\", \"ID\", \"IDTR\", \"postalCode\", \"quality\", \"street\", \"territoire\", \"commune\", \"department\", \"insee\", \"municipality\"]\n *\n * ext.setPlaceAttributs ('StreetAddress', {number:'', territoire:'', quality:'', fake:''})\n * // --> out\n * // (fake est écarté car il n'appartient pas à la liste !)\n *\n * ext.getPlaceAttributs ('StreetAddress')\n * // --> out\n * // {number : '', territoire : '', quality : ''}\n *\n * // Comment ajouter des filtres spécifiques au service de geocodage ?\n * var req = new GeocodeRequest ({\n *      location : \"saint mandé\",\n *      returnFreeForm : true,\n *      filterOptions : {\n *          type : ['PositionOfInterest'], <-- ajouter une extension afin de gerer les attributs de cette table de geocodage !\n *          (...)\n *      }\n *  })\n *  req.addFilter (new PositionOfInterest ());\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.GeocodeFilterExtension\n *\n * @private\n */\nfunction GeocodeFilterExtension () {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"GeocodeFilterExtension\");\n    this.logger.trace(\"[Constructeur GeocodeFilterExtension ()]\");\n\n    if (!(this instanceof GeocodeFilterExtension)) {\n        throw new TypeError(\"GeocodeFilterExtension constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Tableau de filtres (table de geocodage)\n     */\n    this.filters = [];\n}\n\n/**\n * @lends module:GeocodeFilterExtension#\n */\nGeocodeFilterExtension.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : GeocodeFilterExtension,\n\n    /**\n     * Ajout d'un filtre\n     *\n     * @param {Object} oGeocodeLocation - objet de type 'GeocodeLocation'\n     */\n    addFilterExtensions : function (oGeocodeLocation) {\n        // FIXME test sur le type d'objet !\n        if (oGeocodeLocation) {\n            // FIXME ou test sur ses propriétés !\n            this.filters.push(oGeocodeLocation);\n        }\n    },\n\n    // getter\n\n    /**\n     * Tableau de noms (tables de geocodage)\n     *\n     * @returns {Array.<String>} liste des noms de filtres\n     */\n    getNames : function () {\n        var names = [];\n        for (var idx in this.filters) {\n            names.push(this.filters[idx].CLASSNAME);\n        }\n        this.logger.trace(names);\n        return names;\n    },\n\n    /**\n     * Retourne une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     * @returns {Object} filtre\n     */\n    getFilter : function (name) {\n        var filter = null;\n        for (var idx in this.filters) {\n            if (this.filters[idx].CLASSNAME === name) {\n                filter = this.filters[idx];\n            }\n        }\n        this.logger.trace(filter);\n        return filter;\n    },\n\n    /**\n     * Tableau d'objects (tables de geocodage)\n     *\n     * @returns {Array.<Object>} liste des filtres\n     */\n    getFilters : function () {\n        this.logger.trace(this.filters);\n        return this.filters;\n    },\n\n    /**\n     * Récupère la liste des attributs (filtres) sur une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     * @returns {Array} liste des attributs d'un filtre\n     */\n    getAttributs : function (name) {\n        var attributs = [];\n        for (var idx in this.filters) {\n            if (this.filters[idx].CLASSNAME === name) {\n                attributs = this.filters[idx].attributesList;\n            }\n        }\n        this.logger.trace(attributs);\n        return attributs;\n    },\n\n    /**\n     * Ajout des attributs (filtres) sur une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     * @param {Object} options - options de la table de geocodage\n     */\n    setPlaceAttributs : function (name, options) {\n        var filter = this.getFilter(name);\n        var attributs = this.getAttributs(name);\n        for (var idx in attributs) {\n            var value = attributs[idx];\n            if (options[value]) {\n                filter.placeAttributes[value] = options[value];\n            }\n        }\n    },\n\n    /**\n     * Retourne les attributs (filtres) sur une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     * @returns {Array} liste des attributs d'un filtre\n     */\n    getPlaceAttributs : function (name) {\n        var places = {};\n        for (var idx in this.filters) {\n            if (this.filters[idx].CLASSNAME === name) {\n                places = this.filters[idx].placeAttributes;\n            }\n        }\n        this.logger.trace(places);\n        return places;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GeocodeFilterExtension);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeFilterExtension.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeRequest.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeRequest.js ***!
  \****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _model_Address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model/Address */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Address.js\");\n/* harmony import */ var _GeocodeFilterExtension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GeocodeFilterExtension */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeFilterExtension.js\");\n\n\n\n\n/**\n * @classdesc\n * Requête de geocodage direct\n *\n * ```\n * XSD\n * Geocodage direct (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"GeocodeRequest\" attribute name=\"returnFreeForm\"\n *         element ref=\"xls:Address\"\n * ```\n *\n * @example\n * // creation de l'objet Geocode an ajoutant un objet Address\n * req = new GeocodeRequest ();\n * req.returnFreeForm = true; // TODO !\n * req.addAddress (new Address ({\n *      location : \"saint mandé\",\n *      type : ['PositionOfInterest'],\n *      filter : {\n *          (...)\n *      }\n * }));\n * req.toString();\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n *\n * // creation de l'objet Geocode avec les options uniquement\n * req = new GeocodeRequest ({\n *      location : \"saint mandé\",\n *      returnFreeForm : true,\n *      filterOptions : {\n *          type : ['PositionOfInterest'],\n *          (...)\n *      }\n * });\n * req.toString();\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n * @constructor\n *\n * @alias Gp.Formats.XLS.LocationUtilityService.GeocodeRequest\n * @param {Object} options - options\n * @param {Object}   options.location - location\n * @param {String}   options.returnFreeForm - returnFreeForm\n * @param {String}   options.filterOptions - filtres\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction GeocodeRequest (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur GeocodeRequest ()]\");\n\n    if (!(this instanceof GeocodeRequest)) {\n        throw new TypeError(\"GeocodeRequest constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    // TODO\n    // gestion de l'option 'returnFreeForm' si elle n'est pas renseignée dans les options !\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"GeocodeRequest\";\n}\n\nGeocodeRequest.prototype = {\n\n    /**\n     * @lends module:GeocodeRequest#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * Addresse\n     * @type {Address}\n     */\n    oAddress : null,\n\n    /**\n     * Filter\n     * @type {GeocodeFilterExtension}\n     */\n    oFilter : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __ADDRESS__, __RETURNFREEFORM__\n     */\n    template : \"<GeocodeRequest returnFreeForm=\\\"__RETURNFREEFORM__\\\">\" +\n        \"__ADDRESS__\" +\n        \"</GeocodeRequest>\",\n\n    /**\n     * Ajout d'un objet de type Adresse\n     *\n     * @param {Object} oAddress - Adresse\n     */\n    addAddress : function (oAddress) {\n        if (oAddress instanceof _model_Address__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n            this.oAddress = oAddress;\n        }\n    },\n\n    /**\n     * Ajout d'un objet de type GeocodeFilterExtension\n     *\n     * @param {Object} oFilter - GeocodeFilterExtension\n     */\n    addFilter : function (oFilter) {\n        // FIXME gestion des filtres à partir des tables de geocodages\n        if (oFilter instanceof _GeocodeFilterExtension__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            this.oFilter = oFilter;\n        }\n    },\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : GeocodeRequest,\n\n    /**\n     * toString\n     *\n     * @returns {String} requête\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template;\n\n        // soit on a déjà un objet Address instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oAddress) {\n            var settings = {};\n            settings.location = this.options.location;\n            settings.type = this.options.filterOptions.type || [\"StreetAddress\"];\n            settings.filter = this.options.filterOptions;\n            delete settings.filter.type; // on ne met pas le 'type' dans les filtres...\n\n            // gestion des filtres\n            if (this.oFilter) {\n                // on reconstruit les filtres\n                settings.filter = {};\n\n                // on determine la liste des filtres possibles\n                // pour chaque table de geocodage en param\n                for (var idx in settings.type) {\n                    var filter = settings.type[idx];\n                    var oFilter = this.oFilter.getFilter(filter);\n\n                    if (!oFilter) {\n                        this.logger.warn(\"Le filtre '\" + filter + \"' n'existe pas !?\");\n                        continue;\n                    }\n\n                    var mFilter = this.options.filterOptions;\n\n                    // correspondances des attributs de filtres possibles avec ceux qui sont en options\n                    var attributs = oFilter.attributesList;\n                    for (var idxe = 0; idxe < attributs.length; idxe++) {\n                        var key = attributs[idxe];\n                        if (mFilter[key]) {\n                            var matchingKey = oFilter.serviceAttributes[idxe];\n                            oFilter.placeAttributes[matchingKey] = mFilter[key];\n                            this.logger.trace(\"Selection du filtre '\" + key + \"' sur le type '\" + filter + \"'.\");\n                        }\n                    }\n\n                    // ajout des valeurs des filtres\n                    var places = oFilter.placeAttributes;\n                    for (var kplace in places) {\n                        if (places.hasOwnProperty(kplace)) {\n                            settings.filter[kplace] = places[kplace];\n                        }\n                    }\n                }\n            }\n\n            this.oAddress = new _model_Address__WEBPACK_IMPORTED_MODULE_1__[\"default\"](settings);\n            if (!this.oAddress) {\n                throw new Error(\"La construction de l'adresse n'est pas correctement definie !?\");\n            }\n        }\n\n        // FIXME gestion des filtres pour un objet Address déjà instancié ?\n\n        template = template.replace(/__ADDRESS__/g, this.oAddress.toString());\n        template = template.replace(/__RETURNFREEFORM__/g, (this.options.returnFreeForm) ? \"true\" : \"false\");\n\n        this.strRequest = template;\n        return this.strRequest;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GeocodeRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/ReverseGeocodeRequest.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/ReverseGeocodeRequest.js ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _model_Position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model/Position */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Position.js\");\n/* harmony import */ var _model_Preference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/Preference */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Preference.js\");\n\n\n\n\n\n/**\n * @classdesc\n *\n * Requête de geocodage inverse\n *\n * XSD\n * ```\n * Geocodage inverse (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"ReverseGeocodeRequest\"\n *         element ref=\"xls:Position\"\n *         element name=\"ReverseGeocodePreference\" (enumeration)\n * ```\n *\n * @example\n * // creation de l\"objet ReverseGeocode\n * req = new ReverseGeocodeRequest ();\n * req.addPosition (new Position (position:{x: , y: }));\n * req.addPreference ([\"StreetAddress\"]);\n * req.toString();\n * // out ->\n * // <ReverseGeocodeRequest>\n * //     <Position>\n * //       <gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n * //           <gml:pos>50.347775 3.205098</gml:pos>\n * //       </gml:Point>\n * //     </Position>\n * //     <ReverseGeocodePreference>StreetAddress</ReverseGeocodePreference>\n * //  </ReverseGeocodeRequest>\n * @constructor\n * @alias Gp.Formats.XLS.ReverseGeocodeRequest\n * @param {Object} options - options\n * @param {Object}   options.position - position\n * @param {String}   options.returnFreeForm - returnFreeForm\n * @param {String}   options.filterOptions - filtres\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction ReverseGeocodeRequest (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur ReverseGeocodeRequest ()]\");\n\n    if (!(this instanceof ReverseGeocodeRequest)) {\n        throw new TypeError(\"ReverseGeocodeRequest constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"ReverseGeocodeRequest\";\n}\n\nReverseGeocodeRequest.prototype = {\n\n    /**\n     * @lends module:ReverseGeocodeRequest#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * Position\n     * @type {Position}\n     */\n    oPosition : null,\n\n    /**\n     * Preference\n     * @type {Preference}\n     */\n    oPreference : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : ReverseGeocodeRequest,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __POSITION__, __PREFERENCE__, __RETURNFREEFORM__\n     */\n    template : \"<ReverseGeocodeRequest returnFreeForm=\\\"__RETURNFREEFORM__\\\">\" +\n        \"__POSITION__\" +\n        \"__PREFERENCE__\" +\n        \"</ReverseGeocodeRequest>\",\n\n    /**\n     * Ajout d\"un objet de type Position\n     *\n     * @param {Object} oPosition - Position\n     */\n    addPosition : function (oPosition) {\n        if (oPosition instanceof _model_Position__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n            this.oPosition = oPosition;\n        }\n    },\n\n    /**\n     * Ajout d\"une liste de table de référence LUS :\n     * [StreetAddress, PointOfInterest, CadastralParcel, Administrativ]\n     *\n     * @param {Object} oPreference - Preference\n     */\n    addPreferences : function (oPreference) {\n        if (oPreference instanceof _model_Preference__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            this.oPreference = oPreference;\n        }\n    },\n\n    /**\n     * toString\n     * @returns {String} requête\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template;\n\n        // si on a déjà un objet Preference instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oPreference) {\n            this.oPreference = new _model_Preference__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.options.filterOptions.type || [\"StreetAddress\"]);\n            if (!this.oPreference) {\n                throw new Error(\"Les preferences ne sont pas definies !?\");\n            }\n        }\n        template = template.replace(/__PREFERENCE__/g, this.oPreference.toString());\n\n        // si on a déjà un objet Position instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oPosition) {\n            var settings = {\n                position : this.options.position,\n                filter : {}\n            };\n\n            // FIXME gestion des filtres ?\n            if (this.options.filterOptions) {\n                settings.filter = this.options.filterOptions;\n                delete settings.filter.type; // pas besoin ?\n            }\n            this.oPosition = new _model_Position__WEBPACK_IMPORTED_MODULE_1__[\"default\"](settings);\n            if (!this.oPosition) {\n                throw new Error(\"La position et ses filtres ne sont pas definis !?\");\n            }\n        }\n        template = template.replace(/__POSITION__/g, this.oPosition.toString());\n        template = template.replace(/__RETURNFREEFORM__/g, (this.options.returnFreeForm) ? \"true\" : \"false\");\n\n        this.strRequest = template;\n        return this.strRequest;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReverseGeocodeRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvTG9jYXRpb25VdGlsaXR5U2VydmljZS9SZXZlcnNlR2VvY29kZVJlcXVlc3QuanM/NmExNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNvRDtBQUNaO0FBQ0k7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxTQUFTO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsOERBQU07QUFDeEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBLGlDQUFpQyx1REFBUTtBQUN6QztBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0EsbUNBQW1DLHlEQUFVO0FBQzdDO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMseURBQVU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQSxpQ0FBaUMsdURBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLG9GQUFxQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9Gb3JtYXRzL1hMUy9Mb2NhdGlvblV0aWxpdHlTZXJ2aWNlL1JldmVyc2VHZW9jb2RlUmVxdWVzdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5pbXBvcnQgUG9zaXRpb24gZnJvbSBcIi4vbW9kZWwvUG9zaXRpb25cIjtcbmltcG9ydCBQcmVmZXJlbmNlIGZyb20gXCIuL21vZGVsL1ByZWZlcmVuY2VcIjtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKlxuICogUmVxdcOqdGUgZGUgZ2VvY29kYWdlIGludmVyc2VcbiAqXG4gKiBYU0RcbiAqIGBgYFxuICogR2VvY29kYWdlIGludmVyc2UgKGJhbGlzZSB4c2QpIDpcbiAqICAgZWxlbWVudCByZWY9XCJSZXF1ZXN0SGVhZGVyXCIgWyAoYXR0cmlidXRlIG5hbWU9XCJjbGllbnROYW1lXCIgYXR0cmlidXRlIG5hbWU9XCJjbGllbnRQYXNzd29yZFwiIGF0dHJpYnV0ZSBuYW1lPVwic2Vzc2lvbklEXCIgYXR0cmlidXRlIG5hbWU9XCJzcnNOYW1lXCIgYXR0cmlidXRlIG5hbWU9XCJNU0lEXCIpIF1cbiAqICAgICBlbGVtZW50IG5hbWU9XCJSZXF1ZXN0XCIgYXR0cmlidXRlIG5hbWU9XCJtZXRob2ROYW1lXCIgYXR0cmlidXRlIG5hbWU9XCJ2ZXJzaW9uXCIgYXR0cmlidXRlIG5hbWU9XCJyZXF1ZXN0SURcIiBbIGF0dHJpYnV0ZSBuYW1lPVwibWF4aW11bVJlc3BvbnNlc1wiIF1cbiAqICAgICAgIGVsZW1lbnQgbmFtZT1cIlJldmVyc2VHZW9jb2RlUmVxdWVzdFwiXG4gKiAgICAgICAgIGVsZW1lbnQgcmVmPVwieGxzOlBvc2l0aW9uXCJcbiAqICAgICAgICAgZWxlbWVudCBuYW1lPVwiUmV2ZXJzZUdlb2NvZGVQcmVmZXJlbmNlXCIgKGVudW1lcmF0aW9uKVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIGNyZWF0aW9uIGRlIGxcIm9iamV0IFJldmVyc2VHZW9jb2RlXG4gKiByZXEgPSBuZXcgUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0ICgpO1xuICogcmVxLmFkZFBvc2l0aW9uIChuZXcgUG9zaXRpb24gKHBvc2l0aW9uOnt4OiAsIHk6IH0pKTtcbiAqIHJlcS5hZGRQcmVmZXJlbmNlIChbXCJTdHJlZXRBZGRyZXNzXCJdKTtcbiAqIHJlcS50b1N0cmluZygpO1xuICogLy8gb3V0IC0+XG4gKiAvLyA8UmV2ZXJzZUdlb2NvZGVSZXF1ZXN0PlxuICogLy8gICAgIDxQb3NpdGlvbj5cbiAqIC8vICAgICAgIDxnbWw6UG9pbnQgeG1sbnM6Z21sPVwiaHR0cDovL3d3dy5vcGVuZ2lzLm5ldC9nbWxcIj5cbiAqIC8vICAgICAgICAgICA8Z21sOnBvcz41MC4zNDc3NzUgMy4yMDUwOTg8L2dtbDpwb3M+XG4gKiAvLyAgICAgICA8L2dtbDpQb2ludD5cbiAqIC8vICAgICA8L1Bvc2l0aW9uPlxuICogLy8gICAgIDxSZXZlcnNlR2VvY29kZVByZWZlcmVuY2U+U3RyZWV0QWRkcmVzczwvUmV2ZXJzZUdlb2NvZGVQcmVmZXJlbmNlPlxuICogLy8gIDwvUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0PlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgR3AuRm9ybWF0cy5YTFMuUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSAgIG9wdGlvbnMucG9zaXRpb24gLSBwb3NpdGlvblxuICogQHBhcmFtIHtTdHJpbmd9ICAgb3B0aW9ucy5yZXR1cm5GcmVlRm9ybSAtIHJldHVybkZyZWVGb3JtXG4gKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLmZpbHRlck9wdGlvbnMgLSBmaWx0cmVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm9uc3VjY2VzcyAtIGZ1bmN0aW9uIGNhbGxiYWNrIHN1Y2Nlc3MgKFRPRE8pXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm9uZXJyb3IgICAtIGZ1bmN0aW9uIGNhbGxiYWNrIGVycm9yICAgKFRPRE8pXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0IChvcHRpb25zKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKCk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCJbQ29uc3RydWN0ZXVyIFJldmVyc2VHZW9jb2RlUmVxdWVzdCAoKV1cIik7XG5cbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgLy8gb3B0aW9ucyBwYXIgZGVmYXV0XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGV0IG9uIGFqb3V0ZSBsZXMgb3B0aW9ucyBlbiBwYXJhbcOodHJlIGF1eCBvcHRpb25zIHBhciBkw6lmYXV0XG4gICAgZm9yICh2YXIgb3B0IGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW29wdF0gPSBvcHRpb25zW29wdF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb20gZGUgbGEgY2xhc3NlIChoZXJpdGFnZSlcbiAgICAgKi9cbiAgICB0aGlzLkNMQVNTTkFNRSA9IFwiUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0XCI7XG59XG5cblJldmVyc2VHZW9jb2RlUmVxdWVzdC5wcm90b3R5cGUgPSB7XG5cbiAgICAvKipcbiAgICAgKiBAbGVuZHMgbW9kdWxlOlJldmVyc2VHZW9jb2RlUmVxdWVzdCNcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIHJlcXVlc3QgKG91dClcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0clJlcXVlc3QgOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb25cbiAgICAgKiBAdHlwZSB7UG9zaXRpb259XG4gICAgICovXG4gICAgb1Bvc2l0aW9uIDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFByZWZlcmVuY2VcbiAgICAgKiBAdHlwZSB7UHJlZmVyZW5jZX1cbiAgICAgKi9cbiAgICBvUHJlZmVyZW5jZSA6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RldXIgKGFsaWFzKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIDogUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0LFxuXG4gICAgLyoqXG4gICAgICogVGVtcGxhdGUgZGUgbGEgcmVxdcOqdGUuXG4gICAgICogc3Vic3RpdHV0aW9uIGRlcyB2YWxldXJzIHN1aXZhbnRlcyA6XG4gICAgICogX19QT1NJVElPTl9fLCBfX1BSRUZFUkVOQ0VfXywgX19SRVRVUk5GUkVFRk9STV9fXG4gICAgICovXG4gICAgdGVtcGxhdGUgOiBcIjxSZXZlcnNlR2VvY29kZVJlcXVlc3QgcmV0dXJuRnJlZUZvcm09XFxcIl9fUkVUVVJORlJFRUZPUk1fX1xcXCI+XCIgK1xuICAgICAgICBcIl9fUE9TSVRJT05fX1wiICtcbiAgICAgICAgXCJfX1BSRUZFUkVOQ0VfX1wiICtcbiAgICAgICAgXCI8L1JldmVyc2VHZW9jb2RlUmVxdWVzdD5cIixcblxuICAgIC8qKlxuICAgICAqIEFqb3V0IGRcInVuIG9iamV0IGRlIHR5cGUgUG9zaXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvUG9zaXRpb24gLSBQb3NpdGlvblxuICAgICAqL1xuICAgIGFkZFBvc2l0aW9uIDogZnVuY3Rpb24gKG9Qb3NpdGlvbikge1xuICAgICAgICBpZiAob1Bvc2l0aW9uIGluc3RhbmNlb2YgUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMub1Bvc2l0aW9uID0gb1Bvc2l0aW9uO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFqb3V0IGRcInVuZSBsaXN0ZSBkZSB0YWJsZSBkZSByw6lmw6lyZW5jZSBMVVMgOlxuICAgICAqIFtTdHJlZXRBZGRyZXNzLCBQb2ludE9mSW50ZXJlc3QsIENhZGFzdHJhbFBhcmNlbCwgQWRtaW5pc3RyYXRpdl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvUHJlZmVyZW5jZSAtIFByZWZlcmVuY2VcbiAgICAgKi9cbiAgICBhZGRQcmVmZXJlbmNlcyA6IGZ1bmN0aW9uIChvUHJlZmVyZW5jZSkge1xuICAgICAgICBpZiAob1ByZWZlcmVuY2UgaW5zdGFuY2VvZiBQcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLm9QcmVmZXJlbmNlID0gb1ByZWZlcmVuY2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdG9TdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXF1w6p0ZVxuICAgICAqL1xuICAgIHRvU3RyaW5nIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSBcIlwiO1xuICAgICAgICB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG5cbiAgICAgICAgLy8gc2kgb24gYSBkw6lqw6AgdW4gb2JqZXQgUHJlZmVyZW5jZSBpbnN0YW5jacOpLFxuICAgICAgICAvLyBzaW5vbiwgb24gbGUgZmFicmlxdWUgdmlhIGxlcyBvcHRpb25zXG4gICAgICAgIGlmICghdGhpcy5vUHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgdGhpcy5vUHJlZmVyZW5jZSA9IG5ldyBQcmVmZXJlbmNlKHRoaXMub3B0aW9ucy5maWx0ZXJPcHRpb25zLnR5cGUgfHwgW1wiU3RyZWV0QWRkcmVzc1wiXSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub1ByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMZXMgcHJlZmVyZW5jZXMgbmUgc29udCBwYXMgZGVmaW5pZXMgIT9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9fX1BSRUZFUkVOQ0VfXy9nLCB0aGlzLm9QcmVmZXJlbmNlLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgIC8vIHNpIG9uIGEgZMOpasOgIHVuIG9iamV0IFBvc2l0aW9uIGluc3RhbmNpw6ksXG4gICAgICAgIC8vIHNpbm9uLCBvbiBsZSBmYWJyaXF1ZSB2aWEgbGVzIG9wdGlvbnNcbiAgICAgICAgaWYgKCF0aGlzLm9Qb3NpdGlvbikge1xuICAgICAgICAgICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uIDogdGhpcy5vcHRpb25zLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGZpbHRlciA6IHt9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBGSVhNRSBnZXN0aW9uIGRlcyBmaWx0cmVzID9cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsdGVyT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLmZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXJPcHRpb25zO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzZXR0aW5ncy5maWx0ZXIudHlwZTsgLy8gcGFzIGJlc29pbiA/XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9Qb3NpdGlvbiA9IG5ldyBQb3NpdGlvbihzZXR0aW5ncyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGEgcG9zaXRpb24gZXQgc2VzIGZpbHRyZXMgbmUgc29udCBwYXMgZGVmaW5pcyAhP1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL19fUE9TSVRJT05fXy9nLCB0aGlzLm9Qb3NpdGlvbi50b1N0cmluZygpKTtcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9fX1JFVFVSTkZSRUVGT1JNX18vZywgKHRoaXMub3B0aW9ucy5yZXR1cm5GcmVlRm9ybSkgPyBcInRydWVcIiA6IFwiZmFsc2VcIik7XG5cbiAgICAgICAgdGhpcy5zdHJSZXF1ZXN0ID0gdGVtcGxhdGU7XG4gICAgICAgIHJldHVybiB0aGlzLnN0clJlcXVlc3Q7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/ReverseGeocodeRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Address.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Address.js ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n\n/**\n * @classdesc\n *\n * Location type \"Address\".\n *\n * Modèles de classes :\n * ------------------\n * ```\n *\n *                Address\n *            (est composé de)\n *           ______ | _________ _________________\n *          /       |          \\                 \\\n *      Place (StreetAddress ou FreeFormAddress) PostalCode\n *       (*)       _|_\n *                /   \\\n *           Street   Building\n * ```\n * ```\n * XSD\n * Address (balise xsd) :\n *   ex. <Address countryCode=\"StreetAddress\"><freeFormAddress>1 r de paris saint denis</freeFormAddress></Address>\n *   attribute name=\"countryCode\"\n *     element name=\"freeFormAddress\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n *  ou\n *   ex. <Address countryCode=\"StreetAddress\"><StreetAddress><Street>1 rue Marconi</Street></StreetAddress><Place type=\"Municipality\">Metz</Place><PostalCode>57000</PostalCode></Address>\n *   attribute name=\"countryCode\"\n *     element ref=\"xls:StreetAddress\"\n *     element ref=\"xls:PostalCode\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n * ```\n *\n * @example\n * // simple\n * adr = new Address ({\n *    location : \"2 av pasteur, Saint-Mandée\",\n *    type : [\"StreetAddress\"],\n *    filter : {}\n * });\n * adr.toString();\n * // -> out\n * // <Address countryCode=\"StreetAddress\">\n * //   <freeFormAddress>2 av pasteur, Saint-Mandée</freeFormAddress>\n * // </Address>\n *\n * // avec filtre\n * adr = new Address ({\n *    location : {\n *      number : 2,\n *      street : \"av pasteur\",\n *      city : \"Saint-Mandée\", // FIXME filter Place \"commune\" ou \"municipality\" ?\n *      postalCode : \"94166\"   // FIXME filter Place ou balise PostalCode ?\n *    },\n *    type : [\"StreetAddress\"],\n *    filter : {\n *      territory : \"FR\",\n *      department : \"94\"\n *    }\n * });\n * adr.toString();\n * // -> out\n * // <Address countryCode=\"StreetAddress\">\n * //   <StreetAddress>\n * //   <Building number=\"2\"/>\n * //   <Street>2 av pasteur</Street>\n * // </StreetAddress>\n * // <Place type=\"municipality\">Saint-Mandée</Place>\n * // <Place type=\"departement\">94</Place>\n * // <Place type=\"territoire\">FR</Place>\n * // <PostalCode>94166</PostalCode>\n * // </Address>\n *\n * // avec bbox\n * adr = new Address ({\n *    location : \"2 av pasteur, Saint-Mandée\",\n *    type : [\"StreetAddress\"],\n *    filter : {\n *      bbox : {left:1, right:2, top:2, bottom:0}\n *    }\n * });\n * adr.toString();\n * // -> out\n * // <Address countryCode=\"StreetAddress\">\n * //   <freeFormAddress>2 av pasteur, Saint-Mandée</freeFormAddress>\n * //   <gml:Envelope>\n * //     <gml:lowerCorner>1 0</gml:lowerCorner>\n * //     <gml:upperCorner>2 2</gml:upperCorner>\n * //   </gl:Envelope>\n * // </Address>\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.Address\n * @param {Object} options - options\n * @param {Object} options.location - location\n * @param {String} options.type - type\n * @param {String} options.filter - filtres\n * @param {String} options.filter.* - Filtré en fonction des tables de geocodage interrogées\n *\n * @private\n */\nfunction Address (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Address\");\n    this.logger.trace(\"[Constructeur Address ()]\");\n\n    if (!(this instanceof Address)) {\n        throw new TypeError(\"Address constructor cannot be called as a function.\");\n    }\n\n    // param par defaut\n    this.options = options || {\n        location : {},\n        type : [\"StreetAddress\"],\n        filter : {}\n    };\n\n    // param obligatoire\n    if (!options.location) {\n        throw new Error(\"l'option 'location' n'est pas renseignée !\");\n    }\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\n/**\n * @lends module:Address#\n */\nAddress.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Address,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     *\n     * substitution des valeurs suivantes :\n     * - address :  __COUNTRYCODE__, __LOCATION__, __PLACE__, __POSTALCODE__, __ENVELOPE__\n     * - freeFormAddress : __FREEFORMADDRESSVALUE__\n     * - streetAddress : __STREET__, __BUILDING__\n     * - street : __STREETVALUE__\n     * - building : __BUILDINGVALUE__\n     * - place : __PLACEATYPE__, __PLACEVALUE__\n     * - postalCode : __POSTALCODEVALUE__\n     * - gml:envelope : __LEFT__ __BOTTOM__ __RIGHT__ __TOP__\n     *\n     * @todo gestion de l\"indentation\n     */\n    template : {\n        address : \"<Address countryCode=\\\"__COUNTRYCODE__\\\">\" +\n            \"__LOCATION__\" +\n            \"__PLACE__\" +\n            \"__POSTALCODE__\" +\n            \"__ENVELOPE__\" +\n            \"</Address>\",\n        location : {\n            freeFormAddress : \"<freeFormAddress>__FREEFORMADDRESSVALUE__</freeFormAddress>\",\n            streetAddress : {\n                container : \"<StreetAddress>\" +\n                    \"__STREET__\" +\n                    \"__BUILDING__\" +\n                    \"</StreetAddress>\",\n                building : \"<Building number=\\\"__BUILDINGVALUE__\\\"/>\",\n                street : \"<Street>__STREETVALUE__</Street>\"\n            }\n        },\n        place : \"<Place type=\\\"__PLACETYPE__\\\">__PLACEVALUE__</Place>\",\n        postalCode : \"<PostalCode>__POSTALCODEVALUE__</PostalCode>\",\n        envelope : \"<gml:Envelope>\" +\n            \"<gml:lowerCorner>__LEFT__ __BOTTOM__</gml:lowerCorner>\" +\n            \"<gml:upperCorner>__RIGHT__ __TOP__</gml:upperCorner>\" +\n            \"</gml:Envelope>\"\n    }\n\n};\n\n/**\n * toString\n *\n * @returns {String} requête\n */\nAddress.prototype.toString = function () {\n    var template = null;\n    template = this.template.address;\n    template = template.replace(/__COUNTRYCODE__/g, this.options.type);\n\n    // on a une adresse structurée ou libre ?\n    if (typeof this.options.location === \"string\") {\n        // balise freeFormeAddress\n        var tmplFreeFormAddress = this.template.location.freeFormAddress;\n        tmplFreeFormAddress = tmplFreeFormAddress.replace(/__FREEFORMADDRESSVALUE__/g, this.options.location);\n        template = template.replace(/__LOCATION__/g, tmplFreeFormAddress);\n    } else {\n        // balises Street et Building\n        var tmplBuilding = \"\";\n        var tmplStreet = \"\";\n\n        if (this.options.location.number) {\n            tmplBuilding = this.template.location.streetAddress.building;\n            tmplBuilding = tmplBuilding.replace(/__BUILDINGVALUE__/g, this.options.location.number);\n        }\n\n        if (this.options.location.street) {\n            tmplStreet = this.template.location.streetAddress.street;\n            tmplStreet = tmplStreet.replace(/__STREETVALUE__/g, this.options.location.street);\n        }\n\n        // balise streetAddress\n        var tmplStreetAddress = this.template.location.streetAddress.container;\n        tmplStreetAddress = tmplStreetAddress.replace(/__STREET__/g, tmplStreet);\n        tmplStreetAddress = tmplStreetAddress.replace(/__BUILDING__/g, tmplBuilding);\n        template = template.replace(/__LOCATION__/g, tmplStreetAddress);\n    }\n\n    // a t on un filtre de type PostalCode ?\n    var tmplPostalCode = \"\";\n    if (this.options.location.postalCode) {\n        tmplPostalCode = this.template.postalCode;\n        tmplPostalCode = tmplPostalCode.replace(/__POSTALCODEVALUE__/g, this.options.location.postalCode);\n    }\n\n    // a t on un filtre de type GML::Envelope ?\n    var tmplEnvelope = \"\";\n    if (this.options.filter) {\n        var bbox = this.options.filter.bbox;\n        if (bbox) {\n            tmplEnvelope = this.template.envelope;\n            tmplEnvelope = tmplEnvelope.replace(/__LEFT__/g, bbox.left);\n            tmplEnvelope = tmplEnvelope.replace(/__BOTTOM__/g, bbox.bottom);\n            tmplEnvelope = tmplEnvelope.replace(/__RIGHT__/g, bbox.right);\n            tmplEnvelope = tmplEnvelope.replace(/__TOP__/g, bbox.top);\n        }\n    }\n\n    // liste des filtres Place\n    var Places = [];\n\n    // a t on des filtres de type Place ?\n    var tmplPlace = \"\";\n    if (this.options.filter) {\n        var filters = this.options.filter;\n        for (var filter in filters) {\n            if (filter === \"bbox\") {\n                continue;\n            }\n            // FIXME gestion des filtres spécifiques IGN ?\n            tmplPlace = this.template.place;\n            tmplPlace = tmplPlace.replace(/__PLACETYPE__/g, filter);\n            tmplPlace = tmplPlace.replace(/__PLACEVALUE__/g, filters[filter]);\n            Places.push(tmplPlace);\n        }\n    }\n\n    // a t on un filtre de type Place dans location ?\n    var tmplPlaceCity = \"\";\n    if (this.options.location.city) {\n        tmplPlaceCity = this.template.place;\n        tmplPlaceCity = tmplPlaceCity.replace(/__PLACETYPE__/g, \"Municipality\");\n        tmplPlaceCity = tmplPlaceCity.replace(/__PLACEVALUE__/g, this.options.location.city);\n        Places.push(tmplPlaceCity);\n    }\n\n    template = template.replace(/__POSTALCODE__/g, tmplPostalCode);\n    template = template.replace(/__PLACE__/g, Places.join(\"\\n\"));\n    template = template.replace(/__ENVELOPE__/g, tmplEnvelope);\n\n    this.requestString = template;\n    return this.requestString;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Address);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Address.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Position.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Position.js ***!
  \****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * @classdesc\n * Location de type Position\n *\n * ```\n * XSD\n * Position (balise xsd) :\n *   ex. <Position><gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>50.347775 3.205098</gml:pos></gml:Point></Position>\n *   ex. <Position><gml:CircleByCenterPoint xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>48.85978570614691 2.2913572761128878</gml:pos><gml:radius>1000</gml:radius></gml:CircleByCenterPoint></Position>\n *   (au choix)\n *   element ref=\"gml:Point\"\n *   element ref=\"gml:CircleByCenterPoint\"\n *   element ref=\"gml:Polygon\"\n *   element ref=\"gml:MultiPolygon\"\n * ```\n *\n * FIXME les autres elements ne sont pas implémentés (QoP, Speed, Direction, Time, ...) ?\n *\n * ```\n * template : \"<Position>\n *                  __GMLPOINT__\n *                  __GMLFILTER__\n *             </Position>\"\n * ```\n * ```\n * GML : {\n *  pos     : \"<gml:pos>__X__ __Y__</gml:pos>\",\n *  point   : \"<gml:Point xmlns:gml=\\\"http://www.opengis.net/gml\\\">__POS__</gml:Point>\",\n *  circle  : \"<gml:CircleByCenterPoint xmlns:gml=\\\"http://www.opengis.net/gml\\\">__POS__<gml:radius>__RADIUS__</gml:radius></gml:CircleByCenterPoint>\",\n *  // not yet implemented !\n *  polygon      : \"\",\n *  multipolygon : \"\"\n * }\n * ```\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.Position\n * @param {Object} options - options données en entrée\n * @param {Object} options.position - x/y\n * @param {Object} options.filter - filtre\n * @param {Object} options.filter.circle - un cercle\n * @param {Object} options.filter.polygon - un polygone\n *\n * @private\n */\nfunction Position (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Position\");\n    this.logger.trace(\"[Constructeur Position ()]\");\n\n    if (!(this instanceof Position)) {\n        throw new TypeError(\"Position constructor cannot be called as a function.\");\n    }\n\n    // param par defaut\n    this.options = options || {};\n\n    // param obligatoire\n    if (!options.position) {\n        throw new Error(\"l'option 'position' n'est pas renseignée !\");\n    }\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\n/**\n * @lends module:Position#\n */\nPosition.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Position,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     *\n     * substitution des valeurs suivantes :\n     * __GMLPOINT__ __GMLFILTER__\n     * __X__ __Y__ __RADIUS__\n     * __XY__\n     * @todo indentation XML\n     * @todo implementation classe GML\n     */\n    template : {\n        position : \"<Position>\" +\n            \"__GMLPOINT__\" +\n            \"__GMLFILTER__\" +\n            \"</Position>\",\n        gml : {\n            point : \"<gml:Point xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:pos>__X__ __Y__</gml:pos></gml:Point>\",\n            pos : null,\n            filter : {\n                bbox : \"<gml:Envelope xmlns:gml=\\\"http://www.opengis.net/gml\\\">\" +\n                    \"<gml:lowerCorner>__LEFT__ __BOTTOM__</gml:lowerCorner>\" +\n                    \"<gml:upperCorner>__RIGHT__ __TOP__</gml:upperCorner>\" +\n                    \"</gml:Envelope>\",\n                circle : \"<gml:CircleByCenterPoint xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:pos>__X__ __Y__</gml:pos><gml:radius>__RADIUS__</gml:radius></gml:CircleByCenterPoint>\",\n                polygon : \"<gml:Polygon xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:exterior><gml:LinearRing><gml:posList>__XY__</gml:posList></gml:LinearRing></gml:exterior></gml:Polygon>\",\n                multipolygon : null\n            }\n        }\n    }\n};\n\n/**\n * toString\n *\n * @returns {String} requête\n */\nPosition.prototype.toString = function () {\n    var template = this.template.position;\n\n    var tmplGmlPoint = this.template.gml.point;\n    tmplGmlPoint = tmplGmlPoint.replace(/__X__/g, this.options.position.x);\n    tmplGmlPoint = tmplGmlPoint.replace(/__Y__/g, this.options.position.y);\n\n    var tmplGmlFilter = \"\";\n    if (this.options.filter) {\n        var filter = this.options.filter;\n\n        for (var name in filter) {\n            switch (name) {\n                case \"circle\":\n                    tmplGmlFilter = this.template.gml.filter[name];\n                    tmplGmlFilter = tmplGmlFilter.replace(/__X__/g, filter[name].x);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__Y__/g, filter[name].y);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__RADIUS__/g, filter[name].radius);\n                    break;\n                case \"bbox\":\n                    tmplGmlFilter = this.template.gml.filter[name];\n                    tmplGmlFilter = tmplGmlFilter.replace(/__LEFT__/g, filter[name].left);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__BOTTOM__/g, filter[name].bottom);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__RIGHT__/g, filter[name].right);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__TOP__/g, filter[name].top);\n                    break;\n                case \"polygon\":\n                    // FIXME implementation simple du polygone !\n                    // aucun test de fermeture du polygone, ni de gestion des trous !\n                    tmplGmlFilter = this.template.gml.filter[name];\n                    var strPoints = \"\";\n                    var lstPoints = filter[name];\n                    for (var i = 0; i < lstPoints.length; i++) {\n                        var coord = lstPoints[i];\n                        if (Array.isArray(coord)) {\n                            this.logger.error(\"Holes are not implemented !\");\n                            break;\n                        }\n                        if ((coord.x && coord.y) || (coord.x === 0 || coord.y === 0)) {\n                            strPoints += coord.x + \" \" + coord.y;\n                        }\n                        if (lstPoints.length !== i + 1) {\n                            strPoints += \" \";\n                        }\n                    }\n                    tmplGmlFilter = tmplGmlFilter.replace(/__XY__/g, strPoints);\n                    break;\n                case \"multipolygon\":\n                    this.logger.warn(\"Filter '\" + name + \"' is not yet implemented !\");\n                    break;\n                default:\n                    this.logger.error(\"This filter '\" + name + \"' is not useful !\");\n            }\n        }\n    }\n\n    template = template.replace(/__GMLPOINT__/g, tmplGmlPoint);\n    template = template.replace(/__GMLFILTER__/g, tmplGmlFilter);\n\n    this.requestString = template;\n    return this.requestString;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Position);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Position.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Preference.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Preference.js ***!
  \******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * @classdesc\n *\n * Preference (Reverse)\n *\n * FIXME liste des types de tables de geocodage\n *\n * ```\n * template : \"<ReverseGeocodePreference>__TYPE__</ReverseGeocodePreference>\"\n * ```\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.Preference\n * @param {String} type - type de table de geocodage\n *\n * @private\n *\n */\n\nfunction Preference (type) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Preference\");\n    this.logger.trace(\"[Constructeur Preference ()]\");\n\n    if (!(this instanceof Preference)) {\n        throw new TypeError(\"Preference constructor cannot be called as a function.\");\n    }\n\n    /**\n     * type de table de geocodage\n     * @type {Array.<String>}\n     */\n    this.type = type;\n}\n\n/**\n * @lends module:Preference#\n */\nPreference.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Preference,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     *\n     * substitution des valeurs suivantes :\n     *  __TYPE__\n     *\n     */\n    template : \"<ReverseGeocodePreference>__TYPE__</ReverseGeocodePreference>\"\n};\n\n/**\n * toString\n *\n * @returns {String} requête\n */\nPreference.prototype.toString = function () {\n    var Preferences = [];\n    var tmplPreference = \"\";\n    for (var idx = 0; idx < this.type.length; idx++) {\n        tmplPreference = this.template;\n        tmplPreference = tmplPreference.replace(/__TYPE__/g, this.type[idx]);\n        Preferences.push(tmplPreference);\n    }\n\n    this.strRequest = Preferences.join(\"\\n\");\n    return this.strRequest;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Preference);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvTG9jYXRpb25VdGlsaXR5U2VydmljZS9tb2RlbC9QcmVmZXJlbmNlLmpzP2I1NjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsOERBQU07QUFDeEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUseUVBQVUsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvTG9jYXRpb25VdGlsaXR5U2VydmljZS9tb2RlbC9QcmVmZXJlbmNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICpcbiAqIFByZWZlcmVuY2UgKFJldmVyc2UpXG4gKlxuICogRklYTUUgbGlzdGUgZGVzIHR5cGVzIGRlIHRhYmxlcyBkZSBnZW9jb2RhZ2VcbiAqXG4gKiBgYGBcbiAqIHRlbXBsYXRlIDogXCI8UmV2ZXJzZUdlb2NvZGVQcmVmZXJlbmNlPl9fVFlQRV9fPC9SZXZlcnNlR2VvY29kZVByZWZlcmVuY2U+XCJcbiAqIGBgYFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIEdwLkZvcm1hdHMuWExTLkxvY2F0aW9uVXRpbGl0eVNlcnZpY2UuUHJlZmVyZW5jZVxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSB0eXBlIGRlIHRhYmxlIGRlIGdlb2NvZGFnZVxuICpcbiAqIEBwcml2YXRlXG4gKlxuICovXG5cbmZ1bmN0aW9uIFByZWZlcmVuY2UgKHR5cGUpIHtcbiAgICB0aGlzLmxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoXCJQcmVmZXJlbmNlXCIpO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiW0NvbnN0cnVjdGV1ciBQcmVmZXJlbmNlICgpXVwiKTtcblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcmVmZXJlbmNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJlZmVyZW5jZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHR5cGUgZGUgdGFibGUgZGUgZ2VvY29kYWdlXG4gICAgICogQHR5cGUge0FycmF5LjxTdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG59XG5cbi8qKlxuICogQGxlbmRzIG1vZHVsZTpQcmVmZXJlbmNlI1xuICovXG5QcmVmZXJlbmNlLnByb3RvdHlwZSA9IHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgOiBQcmVmZXJlbmNlLFxuXG4gICAgLyoqXG4gICAgICogcmVxdWVzdCAob3V0KVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgcmVxdWVzdFN0cmluZyA6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBUZW1wbGF0ZSBkZSBsYSByZXF1w6p0ZS5cbiAgICAgKlxuICAgICAqIHN1YnN0aXR1dGlvbiBkZXMgdmFsZXVycyBzdWl2YW50ZXMgOlxuICAgICAqICBfX1RZUEVfX1xuICAgICAqXG4gICAgICovXG4gICAgdGVtcGxhdGUgOiBcIjxSZXZlcnNlR2VvY29kZVByZWZlcmVuY2U+X19UWVBFX188L1JldmVyc2VHZW9jb2RlUHJlZmVyZW5jZT5cIlxufTtcblxuLyoqXG4gKiB0b1N0cmluZ1xuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHJlcXXDqnRlXG4gKi9cblByZWZlcmVuY2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBQcmVmZXJlbmNlcyA9IFtdO1xuICAgIHZhciB0bXBsUHJlZmVyZW5jZSA9IFwiXCI7XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgdGhpcy50eXBlLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgdG1wbFByZWZlcmVuY2UgPSB0aGlzLnRlbXBsYXRlO1xuICAgICAgICB0bXBsUHJlZmVyZW5jZSA9IHRtcGxQcmVmZXJlbmNlLnJlcGxhY2UoL19fVFlQRV9fL2csIHRoaXMudHlwZVtpZHhdKTtcbiAgICAgICAgUHJlZmVyZW5jZXMucHVzaCh0bXBsUHJlZmVyZW5jZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJSZXF1ZXN0ID0gUHJlZmVyZW5jZXMuam9pbihcIlxcblwiKTtcbiAgICByZXR1cm4gdGhpcy5zdHJSZXF1ZXN0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJlZmVyZW5jZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/model/Preference.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/Request.js":
/*!**********************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/Request.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* jshint bitwise: false */\n\n\n/**\n * @classdesc\n *\n * Requête XLS\n *\n * @example\n * // request XSL\n * request = new Request ();\n * request.maximumResponses = 26;\n * request.methodName = \"GeocodeRequest\";\n * request.version = \"1.2\";\n * request.toString();\n * // out ->\n * // <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n * //   <!-- __LUS__ -->\n * //  </Request>\n *\n * @constructor\n * @alias Gp.Formats.XLS.Request\n * @param {Object} options - options\n * @param {Object}   options.maximumResponses - 25\n * @param {String}   options.methodName - nom de l'objet LUS, \"GeocodeRequest\" | \"ReverseGeocodeRequest\"\n * @param {String}   options.version - '1.2'\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction Request (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur Request ()]\");\n\n    if (!(this instanceof Request)) {\n        throw new TypeError(\"Request constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {\n        maximumResponses : 25,\n        methodName : null,\n        version : \"1.2\"\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\nRequest.prototype = {\n\n    /**\n     * @lends module:Request#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __MAXRESPONSES__, __METHODNAME__, __UUID__, __VERSION__\n     * __REQUESTSERVICE__\n     */\n    template : \"<Request maximumResponses=\\\"__MAXRESPONSES__\\\" methodName=\\\"__METHODNAME__\\\" requestID=\\\"__UUID__\\\" version=\\\"__VERSION__\\\">\" +\n        \"<!-- __REQUESTSERVICE__ -->\" +\n        \"</Request>\",\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Request,\n\n    /**\n     * an rfc4122 version 4 compliant guid\n     * @returns {String} guid\n     */\n    guid : function () {\n        // INFO\n        // cf. http://byronsalau.com/blog/how-to-create-a-guid-uuid-in-javascript/\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0;\n            var v = c === \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    },\n\n    /**\n     * toString\n     * @returns {String} requête\n     */\n    toString : function () {\n        var template = null;\n        template = this.template;\n        template = template.replace(/__MAXRESPONSES__/g, this.options.maximumResponses);\n        template = template.replace(/__METHODNAME__/g, this.options.methodName);\n        template = template.replace(/__UUID__/g, this.guid());\n        template = template.replace(/__VERSION__/g, this.options.version);\n\n        this.requestString = template;\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Request);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvUmVxdWVzdC5qcz9iNzllIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4REFBTTtBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7O0FBRUw7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRWUsc0VBQU8sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvUmVxdWVzdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICpcbiAqIFJlcXXDqnRlIFhMU1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXF1ZXN0IFhTTFxuICogcmVxdWVzdCA9IG5ldyBSZXF1ZXN0ICgpO1xuICogcmVxdWVzdC5tYXhpbXVtUmVzcG9uc2VzID0gMjY7XG4gKiByZXF1ZXN0Lm1ldGhvZE5hbWUgPSBcIkdlb2NvZGVSZXF1ZXN0XCI7XG4gKiByZXF1ZXN0LnZlcnNpb24gPSBcIjEuMlwiO1xuICogcmVxdWVzdC50b1N0cmluZygpO1xuICogLy8gb3V0IC0+XG4gKiAvLyA8UmVxdWVzdCBtYXhpbXVtUmVzcG9uc2VzPVwiMjZcIiBtZXRob2ROYW1lPVwiR2VvY29kZVJlcXVlc3RcIiByZXF1ZXN0SUQ9XCJ1aWQxMzQ5MDgxNDk4MzE0XzM4OFwiIHZlcnNpb249XCIxLjJcIj5cbiAqIC8vICAgPCEtLSBfX0xVU19fIC0tPlxuICogLy8gIDwvUmVxdWVzdD5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhbGlhcyBHcC5Gb3JtYXRzLlhMUy5SZXF1ZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSAgIG9wdGlvbnMubWF4aW11bVJlc3BvbnNlcyAtIDI1XG4gKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLm1ldGhvZE5hbWUgLSBub20gZGUgbCdvYmpldCBMVVMsIFwiR2VvY29kZVJlcXVlc3RcIiB8IFwiUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0XCJcbiAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMudmVyc2lvbiAtICcxLjInXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm9uc3VjY2VzcyAtIGZ1bmN0aW9uIGNhbGxiYWNrIHN1Y2Nlc3MgKFRPRE8pXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm9uZXJyb3IgICAtIGZ1bmN0aW9uIGNhbGxiYWNrIGVycm9yICAgKFRPRE8pXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gUmVxdWVzdCAob3B0aW9ucykge1xuICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcigpO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiW0NvbnN0cnVjdGV1ciBSZXF1ZXN0ICgpXVwiKTtcblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXF1ZXN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVxdWVzdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8vIG9wdGlvbnMgcGFyIGRlZmF1dFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge1xuICAgICAgICBtYXhpbXVtUmVzcG9uc2VzIDogMjUsXG4gICAgICAgIG1ldGhvZE5hbWUgOiBudWxsLFxuICAgICAgICB2ZXJzaW9uIDogXCIxLjJcIlxuICAgIH07XG5cbiAgICAvLyBldCBvbiBham91dGUgbGVzIG9wdGlvbnMgZW4gcGFyYW3DqHRyZSBhdXggb3B0aW9ucyBwYXIgZMOpZmF1dFxuICAgIGZvciAodmFyIG9wdCBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1tvcHRdID0gb3B0aW9uc1tvcHRdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZSA9IHtcblxuICAgIC8qKlxuICAgICAqIEBsZW5kcyBtb2R1bGU6UmVxdWVzdCNcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIHJlcXVlc3QgKG91dClcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIHJlcXVlc3RTdHJpbmcgOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogVGVtcGxhdGUgZGUgbGEgcmVxdcOqdGUuXG4gICAgICogc3Vic3RpdHV0aW9uIGRlcyB2YWxldXJzIHN1aXZhbnRlcyA6XG4gICAgICogX19NQVhSRVNQT05TRVNfXywgX19NRVRIT0ROQU1FX18sIF9fVVVJRF9fLCBfX1ZFUlNJT05fX1xuICAgICAqIF9fUkVRVUVTVFNFUlZJQ0VfX1xuICAgICAqL1xuICAgIHRlbXBsYXRlIDogXCI8UmVxdWVzdCBtYXhpbXVtUmVzcG9uc2VzPVxcXCJfX01BWFJFU1BPTlNFU19fXFxcIiBtZXRob2ROYW1lPVxcXCJfX01FVEhPRE5BTUVfX1xcXCIgcmVxdWVzdElEPVxcXCJfX1VVSURfX1xcXCIgdmVyc2lvbj1cXFwiX19WRVJTSU9OX19cXFwiPlwiICtcbiAgICAgICAgXCI8IS0tIF9fUkVRVUVTVFNFUlZJQ0VfXyAtLT5cIiArXG4gICAgICAgIFwiPC9SZXF1ZXN0PlwiLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0ZXVyIChhbGlhcylcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciA6IFJlcXVlc3QsXG5cbiAgICAvKipcbiAgICAgKiBhbiByZmM0MTIyIHZlcnNpb24gNCBjb21wbGlhbnQgZ3VpZFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGd1aWRcbiAgICAgKi9cbiAgICBndWlkIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJTkZPXG4gICAgICAgIC8vIGNmLiBodHRwOi8vYnlyb25zYWxhdS5jb20vYmxvZy9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvXG4gICAgICAgIHJldHVybiBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICAgICAgICAgIHZhciB2ID0gYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdG9TdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXF1w6p0ZVxuICAgICAqL1xuICAgIHRvU3RyaW5nIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSBudWxsO1xuICAgICAgICB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX19NQVhSRVNQT05TRVNfXy9nLCB0aGlzLm9wdGlvbnMubWF4aW11bVJlc3BvbnNlcyk7XG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX19NRVRIT0ROQU1FX18vZywgdGhpcy5vcHRpb25zLm1ldGhvZE5hbWUpO1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL19fVVVJRF9fL2csIHRoaXMuZ3VpZCgpKTtcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9fX1ZFUlNJT05fXy9nLCB0aGlzLm9wdGlvbnMudmVyc2lvbik7XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0U3RyaW5nID0gdGVtcGxhdGU7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RTdHJpbmc7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVxdWVzdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/Request.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/RequestHeader.js":
/*!****************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/RequestHeader.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * @classdesc\n *\n * Entête de la requête XSL\n *\n * @example\n * // header XSL\n * header = new RequestHeader ();\n * header.srsName = \"epsg:4326\";\n * header.toString();\n * // out ->\n * // <RequestHeader srsName=\"epsg:4326\"/>\n *\n * @constructor\n * @alias Gp.Formats.XLS.RequestHeader\n * @param {Object} options - options\n * @param {Object}   options.srsName - projection\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction RequestHeader (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur RequestHeader ()]\");\n\n    if (!(this instanceof RequestHeader)) {\n        throw new TypeError(\"RequestHeader constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {\n        srsName : \"EPSG:4326\"\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\nRequestHeader.prototype = {\n\n    /**\n     * @lends module:RequestHeader#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __SRSNAME__\n     */\n    template : \"<RequestHeader srsName=\\\"__SRSNAME__\\\"/>\",\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RequestHeader,\n\n    /**\n     * toString\n     * @returns {String} requête\n     */\n    toString : function () {\n        var template = null;\n        template = this.template;\n        template = template.replace(/__SRSNAME__/g, this.options.srsName);\n        this.requestString = template;\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RequestHeader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvUmVxdWVzdEhlYWRlci5qcz83ZmVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBaUQ7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4REFBTTtBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZSw0RUFBYSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9Gb3JtYXRzL1hMUy9SZXF1ZXN0SGVhZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICpcbiAqIEVudMOqdGUgZGUgbGEgcmVxdcOqdGUgWFNMXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIGhlYWRlciBYU0xcbiAqIGhlYWRlciA9IG5ldyBSZXF1ZXN0SGVhZGVyICgpO1xuICogaGVhZGVyLnNyc05hbWUgPSBcImVwc2c6NDMyNlwiO1xuICogaGVhZGVyLnRvU3RyaW5nKCk7XG4gKiAvLyBvdXQgLT5cbiAqIC8vIDxSZXF1ZXN0SGVhZGVyIHNyc05hbWU9XCJlcHNnOjQzMjZcIi8+XG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgR3AuRm9ybWF0cy5YTFMuUmVxdWVzdEhlYWRlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gICBvcHRpb25zLnNyc05hbWUgLSBwcm9qZWN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm9uc3VjY2VzcyAtIGZ1bmN0aW9uIGNhbGxiYWNrIHN1Y2Nlc3MgKFRPRE8pXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm9uZXJyb3IgICAtIGZ1bmN0aW9uIGNhbGxiYWNrIGVycm9yICAgKFRPRE8pXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gUmVxdWVzdEhlYWRlciAob3B0aW9ucykge1xuICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcigpO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiW0NvbnN0cnVjdGV1ciBSZXF1ZXN0SGVhZGVyICgpXVwiKTtcblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXF1ZXN0SGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVxdWVzdEhlYWRlciBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8vIG9wdGlvbnMgcGFyIGRlZmF1dFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge1xuICAgICAgICBzcnNOYW1lIDogXCJFUFNHOjQzMjZcIlxuICAgIH07XG5cbiAgICAvLyBldCBvbiBham91dGUgbGVzIG9wdGlvbnMgZW4gcGFyYW3DqHRyZSBhdXggb3B0aW9ucyBwYXIgZMOpZmF1dFxuICAgIGZvciAodmFyIG9wdCBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1tvcHRdID0gb3B0aW9uc1tvcHRdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5SZXF1ZXN0SGVhZGVyLnByb3RvdHlwZSA9IHtcblxuICAgIC8qKlxuICAgICAqIEBsZW5kcyBtb2R1bGU6UmVxdWVzdEhlYWRlciNcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIHJlcXVlc3QgKG91dClcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIHJlcXVlc3RTdHJpbmcgOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogVGVtcGxhdGUgZGUgbGEgcmVxdcOqdGUuXG4gICAgICogc3Vic3RpdHV0aW9uIGRlcyB2YWxldXJzIHN1aXZhbnRlcyA6XG4gICAgICogX19TUlNOQU1FX19cbiAgICAgKi9cbiAgICB0ZW1wbGF0ZSA6IFwiPFJlcXVlc3RIZWFkZXIgc3JzTmFtZT1cXFwiX19TUlNOQU1FX19cXFwiLz5cIixcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgOiBSZXF1ZXN0SGVhZGVyLFxuXG4gICAgLyoqXG4gICAgICogdG9TdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXF1w6p0ZVxuICAgICAqL1xuICAgIHRvU3RyaW5nIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSBudWxsO1xuICAgICAgICB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvX19TUlNOQU1FX18vZywgdGhpcy5vcHRpb25zLnNyc05hbWUpO1xuICAgICAgICB0aGlzLnJlcXVlc3RTdHJpbmcgPSB0ZW1wbGF0ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFN0cmluZztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXF1ZXN0SGVhZGVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/RequestHeader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService.js":
/*!***************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _AbstractService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractService */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/AbstractService.js\");\n/* harmony import */ var _RouteService_DetermineRouteRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RouteService/DetermineRouteRequest */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/DetermineRouteRequest.js\");\n/* harmony import */ var _RouteService_RouteRequestExtension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RouteService/RouteRequestExtension */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/RouteRequestExtension.js\");\n/* harmony import */ var _RouteService_RouteRequestExtension__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_RouteService_RouteRequestExtension__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n/**\n * @classdesc\n *\n * Requête de type RouteService\n * (Factory)\n *\n * XSD :\n * ----\n * [] => non implementé !\n *\n * ```\n * element name=\"DetermineRouteRequest\"\n *  [attribute name=\"provideRouteHandle\" default=\"false\"]\n *  attribute name=\"distanceUnit\"       default=\"M\"\n *      [element ref=\"xls:RouteHandle\" || element ref=\"xls:RoutePlan\"]\n *      element ref=\"xls:RoutePlan\"\n *      element ref=\"xls:RouteInstructionsRequest\"\n *      [element ref=\"xls:RouteGeometryRequest\"]\n *      [element ref=\"xls:RouteMapRequest\"]\n * ```\n * ```\n * element name=\"RoutePlan\"\n *  [attribute name=\"useRealTimeTraffic\" default=\"false\"]\n *  [attribute name=\"expectedStartTime\"  type=\"dateTime\"]\n *  [attribute name=\"expectedEndTime\"    type=\"dateTime\"]\n *      element ref=\"xls:RoutePreference\"\n *      element ref=\"xls:WayPointList\"\n *      element ref=\"xls:AvoidList\"\n * ```\n * ```\n * element name=\"RoutePreference\" => value = Fastest | Shortest | Pedestrian\n * ```\n * ```\n * element name=\"WayPointList\"\n *      element ref=\"xls:StartPoint\"\n *      element ref=\"xls:ViaPoint\" minOccurs=\"0\"\n *      element ref=\"xls:EndPoint\"\n * ```\n * ```\n * element name=\"StartPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"ViaPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"EndPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"AvoidList\"\n *      [element ref=\"xls:AOI\"]\n *      [element ref=\"xls:_Location\"] (cf. element name=\"Position\")\n *      element ref=\"xls:AvoidFeature\"\n * ```\n * ```\n * [element name=\"AOI\"]\n *      [element ref=\"gml:CircleByCenterPoint\" || element ref=\"gml:Polygon\" || element ref=\"gml:Envelope\"]\n * ```\n * ```\n * element name=\"AvoidFeature\" => value = highway | tollway | tunnel | bridge\n * ```\n * ```\n * [element name=\"RouteMapRequest\"]\n *      [element name=\"Output\"]\n *          attribute name=\"width\"\n *          attribute name=\"height\"\n *          attribute name=\"format\"\n *          attribute name=\"BGcolor\"\n *          attribute name=\"transparent\"\n *          attribute name=\"style\" => value = Overview | Maneuver\n *          element name=\"BBoxContext\" type=\"gml:EnvelopeType\"\n * ```\n * ```\n * element name=\"RouteInstructionsRequest\"\n *  [attribute name=\"format\"]           default=\"text/plain\"\n *  attribute name=\"provideGeometry\"    default=\"false\"\n *  attribute name=\"provideBoundingBox\" default=\"false\"\n * ```\n * ```\n * [element name=\"RouteGeometryRequest\"]\n *  [attribute name=\"scale\"]                  default=\"1\"\n *  [attribute name=\"provideStartingPortion\"] default=\"false\"\n *  [attribute name=\"maxPoints\"]              default=\"100\"\n *      [element name=\"BoundingBox\" type=\"gml:EnvelopeType\" ]\n * ```\n *\n * --------\n * Requête :\n * --------\n * ```\n * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n * <XLS\n * xmlns:xls=\"http://www.opengis.net/xls\"\n * xmlns:sch=\"http://www.ascc.net/xml/schematron\"\n * xmlns:gml=\"http://www.opengis.net/gml\"\n * xmlns:xlsext=\"http://www.opengis.net/xlsext\"\n * xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n * xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n * xsi:schemaLocation=\"http://www.opengis.net/xls http://schemas.opengis.net/ols/1.1.0/RouteService.xsd\"\n * version=\"1.1\" xls:lang=\"en\">\n * <RequestHeader/>\n * <Request methodName=\"RouteRequest\" requestID=\"123456789\" version=\"1.1\">\n *   <DetermineRouteRequest distanceUnit=\"KM\">\n *     <RoutePlan>\n *       <RoutePreference>Fastest</RoutePreference>\n *       <xlsext:vehicle name=\"Car\" />\n *       <WayPointList>\n *         <StartPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>2.29993 48.87228</gml:pos></gml:Point></Position>\n *         </StartPoint>\n *         <EndPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>-1.53604 47.21548</gml:pos></gml:Point></Position>\n *         </EndPoint>\n *       </WayPointList>\n *     </RoutePlan>\n *     <RouteInstructionsRequest provideGeometry=\"true\"/>\n *     <RouteGeometryRequest/>\n *   </DetermineRouteRequest>\n * </Request>\n * </XLS\n * ```\n * -----------\n * References :\n * -----------\n * - {@link https://geoportail.forge.ign.fr/jira/browse/GPP-CI}\n * - {@link https://geoportail.forge.ign.fr/jira/browse/GPP-CI-1 Specif. ols}\n * - {@link https://geoportail.forge.ign.fr/jira/browse/GPP-CI-9 Extension}\n * - {@link https://github.com/Emergya/openlayers/blob/master/lib/OpenLayers/Format/XLS/v1_2_0.js}\n *\n * @example\n * // encapsule un objet dans une coquille XSL, Factory sur les objets ''\n * rs = new RouteService ();\n * rs.addRequest (req);\n * rs.toString();\n *  ou\n * rs = new RouteService ({\n *      ...\n * });\n * rs.toString();\n *\n * @extends {Gp.Formats.XLS}\n * @constructor\n * @alias Gp.Formats.XLS.RouteService\n * @param {Object} options - options\n * @param {Object}   options.routePreference - « fastest », « shortest » ou « pedestrian »\n * @param {String}   options.startPoint - Point de départ (coordonnées exprimées en WGS84G)\n * @param {String}   options.viaPoint - Liste de points intermédiaires\n * @param {String}   options.endPoint - Point d'arrivée (coordonnées)\n * @param {Object}   options.avoidFeature - « highway », « tollway », « tunnel » ou « bridge »\n * @param {Object}   options.graph - « car »\n * @param {Object}   options.expectedStartTime - Date et heure de départ\n * @param {Object}   options.provideGeometry - true | false\n * @param {Object}   options.provideBoundingBox - true | false\n * @param {Object}   options.distanceUnit - Unité dans lesquelles la distance est exprimée (« m » ou « km »)\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @example\n * var options = {\n *      // spécifique au service\n *      startPoint: {\n *          x: 42.1121,\n *          y: 1.5557\n *      },\n *      endPoint: {\n *          x: 42.1121,\n *          y: 1.5557\n *      },\n *      viaPoint : [\n *          {x: 42.1121,y: 1.5557},\n *          {x: 42.1121,y: 1.5557},\n *          {x: 42.1121,y: 1.5557}\n *      ],\n *      provideBoundingBox : false,\n *      avoidFeature : [\"bridge\", \"tunnel\", \"tollway\"],\n *      expectedStartTime : \"2015-12-23\", // YYYY-MM-DDThh:mm:ssZ\n *      distanceUnit : \"km\",\n *      vehicle: \"car\",\n *      provideGeometry : false,\n *      routePreference : \"fastest\"\n * };\n *\n * @private\n */\nfunction RouteService (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur RouteService ()]\");\n\n    if (!(this instanceof RouteService)) {\n        throw new TypeError(\"RouteService constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe\n     */\n    this.CLASSNAME = \"RouteService\";\n\n    /**\n     * Type de classe\n     * RouteRequest par defaut\n     */\n    this.CLASSTYPE = \"RouteRequest\";\n\n    // appel du constructeur par heritage\n    _AbstractService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n}\n\n/**\n * @lends module:RouteService#\n */\nRouteService.prototype = Object.create(_AbstractService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/**\n * Constructeur (alias)\n */\nRouteService.prototype.constructor = RouteService;\n\n/**\n * (overwrite) Ajout d'un objet de type  : RouteRequest\n *\n * @param {Object} oRequest - RouteRequest\n */\nRouteService.prototype.addRequest = function (oRequest) {\n    // on controle les types acceptés\n    if (oRequest.CLASSNAME === \"DetermineRouteRequest\") {\n        this.oRequest = oRequest;\n    } else {\n        throw new Error(\"Ce n'est pas un objet de type 'Route Request' !?\");\n    }\n};\n\n/**\n * (overwrite) Ajout d'un objet de type RouteFilterExtension\n *\n * @param {Object} oFilter - RouteFilterExtension\n */\nRouteService.prototype.addFilter = function (oFilter) {\n    // gestion des extensions (vehicle)\n    if (oFilter instanceof _RouteService_RouteRequestExtension__WEBPACK_IMPORTED_MODULE_3___default.a) {\n        this.oFilter = oFilter;\n    }\n};\n\n/**\n * (overwrite) toString\n *\n * @returns {String} requête\n */\nRouteService.prototype.toString = function () {\n    // soit, on a un objet Request déjà instancié\n    // sinon, il faut le construire à partir des options à disposition\n    if (!this.oRequest) {\n        // il nous faut des options\n        if (!this.options) {\n            throw new Error(\"Les options ne sont pas renseignées, impossible de construire la requête !\");\n        }\n\n        if (this.CLASSTYPE === \"RouteRequest\") {\n            var settings = {\n                distanceUnit : this.options.distanceUnit || null,\n                provideGeometry : this.options.provideGeometry || null,\n                provideBoundingBox : this.options.provideBoundingBox || null,\n                route : {\n                    routePreference : this.options.routePreference || null,\n                    startPoint : this.options.startPoint,\n                    viaPoint : this.options.viaPoint || null,\n                    endPoint : this.options.endPoint,\n                    avoidFeature : this.options.avoidFeature || null,\n                    graph : this.options.graph || null,\n                    expectedStartTime : this.options.expectedStartTime || null\n                }\n            };\n            this.oRequest = new _RouteService_DetermineRouteRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"](settings);\n            // ajout des filtres spécifiques au service\n            if (this.oFilter) {\n                this.oRequest.addFilter(this.oFilter);\n            }\n        }\n    }\n\n    // objet indefini !?\n    if (!this.oRequest) {\n        throw new Error(\"Type de requête indefini !\");\n    }\n\n    this.strRequest = this.oRequest.toString();\n    return this.strRequest;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/DetermineRouteRequest.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/DetermineRouteRequest.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _model_RoutePlan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model/RoutePlan */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/model/RoutePlan.js\");\n\n\n\n/**\n * @classdesc\n *\n * Requête de calcul d'itinéraire\n *\n * ----\n * XSD :\n * ----\n * [] => non implementé !\n *\n * ```\n * element name=\"DetermineRouteRequest\"\n *  [attribute name=\"provideRouteHandle\" default=\"false\"]\n *  attribute name=\"distanceUnit\"       default=\"M\"\n *      [element ref=\"xls:RouteHandle\" || element ref=\"xls:RoutePlan\"]\n *      element ref=\"xls:RoutePlan\"\n *      element ref=\"xls:RouteInstructionsRequest\"\n *      [element ref=\"xls:RouteGeometryRequest\"]\n *      [element ref=\"xls:RouteMapRequest\"]\n * ```\n * ```\n * element name=\"RouteInstructionsRequest\"\n *  [attribute name=\"format\"]           default=\"text/plain\"\n *  attribute name=\"provideGeometry\"    default=\"false\"\n *  attribute name=\"provideBoundingBox\" default=\"false\"\n * ```\n * ```\n * element name=\"RouteGeometryRequest\"\n *  [attribute name=\"scale\"]                  default=\"1\"\n *  [attribute name=\"provideStartingPortion\"] default=\"false\"\n *  [attribute name=\"maxPoints\"]              default=\"100\"\n *      [element name=\"BoundingBox\" type=\"gml:EnvelopeType\" ]\n * ```\n * ```\n * [element name=\"RouteMapRequest\"]\n *      [element name=\"Output\"]\n *          [attribute name=\"width\"]\n *          [attribute name=\"height\"]\n *          [attribute name=\"format\"]\n *          [attribute name=\"BGcolor\"]\n *          [attribute name=\"transparent\"]\n *          [attribute name=\"style\"] => value = Overview | Maneuver\n *          [element name=\"BBoxContext\" type=\"gml:EnvelopeType\"]\n * ```\n *\n * --------\n * Requête :\n * --------\n * ```\n *   <DetermineRouteRequest distanceUnit=\"KM\">\n *     <RoutePlan>\n *              <RoutePreference>Fastest</RoutePreference>\n *              <xlsext:vehicle name=\"Car\" />\n *              <WayPointList>\n *                  <StartPoint>\n *                      <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>2.29993 48.87228</gml:pos></gml:Point></Position>\n *                  </StartPoint>\n *                  <EndPoint>\n *                      <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>-1.53604 47.21548</gml:pos></gml:Point></Position>\n *                  </EndPoint>\n *              </WayPointList>\n *     </RoutePlan>\n *     <RouteInstructionsRequest provideGeometry=\"true\"/>\n *     <RouteGeometryRequest/>\n *   </DetermineRouteRequest>\n * ```\n *\n * @constructor\n * @alias Gp.Formats.XLS.RouteService.DetermineRouteRequest\n * @param {Object} options - options\n * @param {Object}   options.route.routePreference - « fastest », « shortest » ou « pedestrian »\n * @param {String}   options.route.startPoint - Point de départ (coordonnées exprimées en WGS84G)\n * @param {String}   options.route.viaPoint - Liste de points intermédiaires\n * @param {String}   options.route.endPoint - Point d'arrivée (coordonnées)\n * @param {Object}   options.route.avoidFeature - « highway », « tollway », « tunnel » ou « bridge »\n * @param {Object}   options.route.vehicle - « car »\n * @param {Object}   options.route.expectedStartTime - Date et heure de départ\n * @param {Object}   options.provideGeometry - true | false\n * @param {Object}   options.provideBoundingBox - true | false\n * @param {Object}   options.distanceUnit - Unité dans lesquelles la distance est exprimée (« m » ou « km »)\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction DetermineRouteRequest (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur DetermineRouteRequest ()]\");\n\n    if (!(this instanceof DetermineRouteRequest)) {\n        throw new TypeError(\"DetermineRouteRequest constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"DetermineRouteRequest\";\n}\n\nDetermineRouteRequest.prototype = {\n\n    /**\n     * @lends module:DetermineRouteRequest#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * RoutePlan\n     * @type {Address}\n     */\n    oRoutePlan : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __DISTANCEUNIT__,\n     * __ROUTEPLAN__, __ROUTEINSTRUCTIONREQUEST__, __ROUTEGEOMETRYREQUEST__, __ROUTEMAPREQUEST__\n     * __PROVIDEGEOMETRY__, __PROVIDEBBOX__\n     */\n    template : {\n        determineRouteRequest : \"<DetermineRouteRequest distanceUnit=\\\"__DISTANCEUNIT__\\\">\" +\n            \"__ROUTEPLAN__\" +\n            \"__ROUTEINSTRUCTIONREQUEST__\" +\n            \"__ROUTEGEOMETRYREQUEST__\" +\n            \"__ROUTEMAPREQUEST__\" +\n            \"</DetermineRouteRequest>\",\n        routeInstructionRequest : \"<RouteInstructionsRequest \" +\n            \"provideGeometry=\\\"__PROVIDEGEOMETRY__\\\" \" +\n            \"provideBoundingBox=\\\"__PROVIDEBBOX__\\\" />\",\n        routeGeometryRequest : \"<RouteGeometryRequest />\",\n        routeMapRequest : \"\" // FIXME <RouteMapRequest/> not yet implemented !\n    },\n\n    /**\n     * Ajout d'un objet de type RoutePlan\n     *\n     * @param {Object} oRoutePlan - RoutePlan\n     */\n    addRoute : function (oRoutePlan) {\n        if (oRoutePlan instanceof _model_RoutePlan__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n            this.oRoutePlan = oRoutePlan;\n        }\n    },\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : DetermineRouteRequest,\n\n    /**\n     * toString\n     *\n     * @returns {String} requête\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template.determineRouteRequest;\n        template = template.replace(/__DISTANCEUNIT__/g, this.options.distanceUnit || \"KM\");\n\n        // soit on a déjà un objet RoutePlan instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oRoutePlan) {\n            var settings = this.options.route;\n\n            this.oRoutePlan = new _model_RoutePlan__WEBPACK_IMPORTED_MODULE_1__[\"default\"](settings);\n            if (!this.oRoutePlan) {\n                throw new Error(\"La construction du calcul d'initineraire n'est pas correctement definie !?\");\n            }\n        }\n\n        // routeplan\n        template = template.replace(/__ROUTEPLAN__/g, this.oRoutePlan.toString());\n\n        // instruction\n        var tmplInstruction = this.template.routeInstructionRequest;\n        tmplInstruction = tmplInstruction.replace(/__PROVIDEGEOMETRY__/g, this.options.provideGeometry || false);\n        tmplInstruction = tmplInstruction.replace(/__PROVIDEBBOX__/g, this.options.provideBoundingBox || false);\n        template = template.replace(/__ROUTEINSTRUCTIONREQUEST__/g, tmplInstruction);\n\n        // geometry\n        var tmplGeometry = this.template.routeGeometryRequest;\n        template = template.replace(/__ROUTEGEOMETRYREQUEST__/g, tmplGeometry);\n\n        // map\n        var tmplMap = this.template.routeMapRequest;\n        template = template.replace(/__ROUTEMAPREQUEST__/g, tmplMap);\n\n        this.strRequest = template;\n        return this.strRequest;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DetermineRouteRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/DetermineRouteRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/RouteRequestExtension.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/RouteRequestExtension.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * not implemented !\n *\n * Extension de type 'graphName' de l'objet RoutePlan'\n *\n * FIXME L'extension 'graphName' est intégré comme étant du standard OLS.\n *       La balise <xlsext:GraphName> viendrait surcharger le comportement de RoutePreference...\n *\n * ex. <xlsext:graphName name=\"Voiture\" />\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvRm9ybWF0cy9YTFMvUm91dGVTZXJ2aWNlL1JvdXRlUmVxdWVzdEV4dGVuc2lvbi5qcz9jYWYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9Gb3JtYXRzL1hMUy9Sb3V0ZVNlcnZpY2UvUm91dGVSZXF1ZXN0RXh0ZW5zaW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBub3QgaW1wbGVtZW50ZWQgIVxuICpcbiAqIEV4dGVuc2lvbiBkZSB0eXBlICdncmFwaE5hbWUnIGRlIGwnb2JqZXQgUm91dGVQbGFuJ1xuICpcbiAqIEZJWE1FIEwnZXh0ZW5zaW9uICdncmFwaE5hbWUnIGVzdCBpbnTDqWdyw6kgY29tbWUgw6l0YW50IGR1IHN0YW5kYXJkIE9MUy5cbiAqICAgICAgIExhIGJhbGlzZSA8eGxzZXh0OkdyYXBoTmFtZT4gdmllbmRyYWl0IHN1cmNoYXJnZXIgbGUgY29tcG9ydGVtZW50IGRlIFJvdXRlUHJlZmVyZW5jZS4uLlxuICpcbiAqIGV4LiA8eGxzZXh0OmdyYXBoTmFtZSBuYW1lPVwiVm9pdHVyZVwiIC8+XG4gKi9cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/RouteRequestExtension.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/model/RoutePlan.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/model/RoutePlan.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * @classdesc\n *  * Élément regroupant l'ensemble des données et paramètres pour le calcul d'itinéraire : points de navigation, configuration.\n *\n * ----\n * XSD :\n * ----\n * [] => non implementé !\n *\n * ```\n * element name=\"RoutePlan\"\n *  [attribute name=\"useRealTimeTraffic\" default=\"false\"]\n *  [attribute name=\"expectedStartTime\"  type=\"dateTime\"]\n *  [attribute name=\"expectedEndTime\"    type=\"dateTime\"]\n *      element ref=\"xls:RoutePreference\"\n *      element ref=\"xls:WayPointList\"\n *      element ref=\"xls:AvoidList\"\n * ```\n * ```\n * element name=\"RoutePreference\"\n *  => value = fastest | shortest | pedestrian\n * ```\n * ```\n * element name=\"WayPointList\"\n *      element ref=\"xls:StartPoint\"\n *      element ref=\"xls:ViaPoint\" minOccurs=\"0\"\n *      element ref=\"xls:EndPoint\"\n * ```\n * ```\n * element name=\"StartPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"ViaPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"EndPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"AvoidList\"\n *      [element ref=\"xls:AOI\"]\n *      [element ref=\"xls:_Location\"] (cf. element name=\"Position\")\n *      element ref=\"xls:AvoidFeature\"\n * ```\n * ```\n * [element name=\"AOI\"]\n *      [element ref=\"gml:CircleByCenterPoint\" || element ref=\"gml:Polygon\" || element ref=\"gml:Envelope\"]\n * ```\n * ```\n * element name=\"AvoidFeature\" => value = highway | tollway | tunnel | bridge\n * ```\n *\n * --------\n * Requête :\n * --------\n * ```\n *     <RoutePlan>\n *       <RoutePreference>Fastest</RoutePreference>\n *       <xlsext:vehicle name=\"Car\" />\n *       <WayPointList>\n *         <StartPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>2.29993 48.87228</gml:pos></gml:Point></Position>\n *         </StartPoint>\n *         <EndPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>-1.53604 47.21548</gml:pos></gml:Point></Position>\n *         </EndPoint>\n *       </WayPointList>\n *       <AvoidList>\n *          <AvoidFeature>highway</AvoidFeature>\n *          <AvoidFeature>tollway</AvoidFeature>\n *          <AvoidFeature>tunnel</AvoidFeature>\n *       </AvoidList>\n *     </RoutePlan>\n * ```\n * @constructor\n * @alias Gp.Formats.XLS.RouteService.RoutePlan\n * @param {Object} options - options\n *\n * @private\n */\nfunction RoutePlan (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"RoutePlan\");\n    this.logger.trace(\"[Constructeur RoutePlan ()]\");\n\n    if (!(this instanceof RoutePlan)) {\n        throw new TypeError(\"RoutePlan constructor cannot be called as a function.\");\n    }\n\n    // param par defaut\n    this.options = options || {};\n\n    // param obligatoire\n    if (!options.startPoint) {\n        throw new Error(\"l'option 'startPoint' n'est pas renseignée !\");\n    }\n\n    if (!options.endPoint) {\n        throw new Error(\"l'option 'endPoint' n'est pas renseignée !\");\n    }\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\nRoutePlan.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RoutePlan,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * - __ROUTEPREFERENCE__, __VALUEROUTEPREFERENCE__\n     * - __GRAPH__, __VALUEGRAPH__\n     * - __WAYPOINTLIST__ (lst?), __STARTPOINT__, __VIAPOINT__, __ENDPOINT__, __POINT__, __X__, __Y__\n     * - __AVOIDLIST__ (lst!), __AVOIDFEATURE__, __VALUEAVOIDFEATURE__\n     */\n    template : {\n        routePlan : \"<RoutePlan>\" +\n            \"__ROUTEPREFERENCE__\" +\n            \"__GRAPH__\" +\n            \"__WAYPOINTLIST__\" +\n            \"__AVOIDLIST__\" +\n            \"</RoutePlan>\",\n        routePreference : \"<RoutePreference>__VALUEROUTEPREFERENCE__</RoutePreference>\",\n        graph : \"<xlsext:graphName xmlns:xlsext=\\\"http://www.opengis.net/xlsext\\\" name=\\\"__VALUEGRAPH__\\\"/>\",\n        wayPointList : {\n            container : \"<WayPointList>\" +\n                \"__STARTPOINT__\" +\n                \"__VIAPOINT__\" +\n                \"__ENDPOINT__\" +\n                \"</WayPointList>\",\n            point : \"<Position><gml:Point xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:pos>__X__ __Y__</gml:pos></gml:Point></Position>\",\n            startPoint : \"<StartPoint>\" +\n                \"__POINT__\" +\n                \"</StartPoint>\",\n            endPoint : \"<EndPoint>\" +\n                \"__POINT__\" +\n                \"</EndPoint>\",\n            viaPoint : \"<ViaPoint>\" +\n                \"__POINT__\" +\n                \"</ViaPoint>\" // implémentation de plusieurs étapes...\n        },\n        avoidList : {\n            container : \"<AvoidList>\" +\n                \"__AVOIDFEATURE__\" +\n                \"</AvoidList>\",\n            avoidFeature : \"<AvoidFeature>__VALUEAVOIDFEATURE__</AvoidFeature>\"\n        }\n    },\n\n    /**\n     * toString\n     *\n     * @returns {String} requête\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template.routePlan;\n\n        // preference\n        if (this.options.routePreference) {\n            var tmplPreference = this.template.routePreference;\n            tmplPreference = tmplPreference.replace(/__VALUEROUTEPREFERENCE__/, this.options.routePreference);\n            template = template.replace(/__ROUTEPREFERENCE__/g, tmplPreference);\n        }\n        // clean preference\n        template = template.replace(/__ROUTEPREFERENCE__/g, \"\");\n\n        // exclusions\n        if (this.options.avoidFeature) {\n            var tmplAvoidList = this.template.avoidList.container;\n            var avoidFeatures = [];\n            for (var i = 0; i < this.options.avoidFeature.length; i++) {\n                var tmplAvoidFeature = this.template.avoidList.avoidFeature;\n                tmplAvoidFeature = tmplAvoidFeature.replace(/__VALUEAVOIDFEATURE__/, this.options.avoidFeature[i]);\n                avoidFeatures.push(tmplAvoidFeature);\n            }\n            tmplAvoidList = tmplAvoidList.replace(/__AVOIDFEATURE__/, avoidFeatures.join(\"\\n\"));\n            template = template.replace(/__AVOIDLIST__/g, tmplAvoidList);\n        }\n        // clean exclusions\n        template = template.replace(/__AVOIDLIST__/g, \"\");\n\n        // graph\n        if (this.options.graph) {\n            var tmplVehicle = this.template.graph;\n            tmplVehicle = tmplVehicle.replace(/__VALUEGRAPH__/, this.options.graph);\n            template = template.replace(/__GRAPH__/g, tmplVehicle);\n        }\n        // clean vehicle\n        template = template.replace(/__GRAPH__/g, \"\");\n\n        // points\n        var tmplWayPointList = this.template.wayPointList.container;\n        var tmplPoint = \"\";\n        // start\n        tmplPoint = this.template.wayPointList.point;\n        tmplPoint = tmplPoint.replace(/__X__/, this.options.startPoint.x);\n        tmplPoint = tmplPoint.replace(/__Y__/, this.options.startPoint.y);\n        tmplWayPointList = tmplWayPointList.replace(/__STARTPOINT__/,\n            this.template.wayPointList.startPoint.replace(/__POINT__/, tmplPoint));\n        // end\n        tmplPoint = this.template.wayPointList.point;\n        tmplPoint = tmplPoint.replace(/__X__/, this.options.endPoint.x);\n        tmplPoint = tmplPoint.replace(/__Y__/, this.options.endPoint.y);\n        tmplWayPointList = tmplWayPointList.replace(/__ENDPOINT__/,\n            this.template.wayPointList.endPoint.replace(/__POINT__/, tmplPoint));\n        // via\n        if (this.options.viaPoint) {\n            var points = [];\n            for (var j = 0; j < this.options.viaPoint.length; j++) {\n                var p = this.options.viaPoint[j];\n                tmplPoint = this.template.wayPointList.point;\n                tmplPoint = tmplPoint.replace(/__X__/, p.x);\n                tmplPoint = tmplPoint.replace(/__Y__/, p.y);\n                points.push(tmplPoint);\n            }\n\n            tmplWayPointList = tmplWayPointList.replace(/__VIAPOINT__/,\n                this.template.wayPointList.viaPoint.replace(/__POINT__/, points.join(\"\\n\")));\n        } else {\n            // clean viaPoint\n            tmplWayPointList = tmplWayPointList.replace(/__VIAPOINT__/, \"\");\n        }\n\n        template = template.replace(/__WAYPOINTLIST__/g, tmplWayPointList);\n\n        this.requestString = template;\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RoutePlan);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService/model/RoutePlan.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XML.js":
/*!**************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XML.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* global require */\n\n\n// import __xmldom from \"xmldom\";\n\n/**\n * @classdesc\n *\n * Classe permettant d'écrire ou de lire du XML, sous forme de document DOM,\n * éventuellement selon des clés de lecture (readers) ou d'écriture (writers) spécifiques.\n *\n * @constructor\n * @alias Gp.Formats.XML\n *\n * @param {Object} [options] - options du format XML\n *\n * @param {Object} [options.reader] - Instance d'un Reader de service (AltiResponseReader, GeocodeRequestReader, etc.)\n *      utile pour interpréter le XML lorsque sa structure est connue.\n *      Ce reader doit comporter au moins une fonction statique read (root) permettant d'initialiser la lecture.\n *\n * @param {Object} [options.writers] - writers\n *\n * @param {String} [options.xmlString] - chaîne de caractère contenant du XML à interpréter.\n *\n * @private\n */\nfunction XML (options) {\n    if (!(this instanceof XML)) {\n        throw new TypeError(\"XML constructor cannot be called as a function.\");\n    }\n\n    // FIXME : notion de singleton\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur XML ()]\");\n\n    /**\n     * Chaîne de caractères contenant le texte XML\n     * @type {String}\n     */\n    this.xmlString = null;\n\n    /**\n     * DOM Element correspondant à la structure du XML.\n     * @type {DOMElement}\n     */\n    this.xmlDoc = null;\n\n    /**\n     * Objet contenant des fonctions de lecture des différentes balises XML.\n     * @type {Object}\n     */\n    this.reader = null;\n\n    // traitement des paramètres d'options s'il y en a\n    if (options) {\n        if (options.xmlString && typeof options.xmlString === \"string\") {\n            this.xmlString = options.xmlString;\n            // Si une chaine de caractère a été passée en entrée : on la transforme aussi en XML document\n            this.xmlDoc = __getXMLDOC(options.xmlString);\n        }\n        if (options.reader) {\n            this.setReader(options.reader);\n        }\n    }\n}\n\nXML.prototype = {\n\n    /**\n     * @lends module:XML\n     */\n\n    /*\n     * Constructeur (alias)\n     */\n    constructor : XML,\n\n    /**\n     * Méthode permettant de récupérer la chaîne de caractères associée au format XML\n     *\n     * @returns {String} xmlString - la chaîne de caractères correspondant au format XML\n     */\n    getXMLString : function () {\n        return this.xmlString;\n    },\n\n    /**\n     * Méthode permettant d'attribuer une chaîne de caractères au format XML (attribut xmlString).\n     * La méthode va aussi transformer cette chaîne de caractères en document XML,\n     * afin de remplir l'attribut xmlDoc.\n     *\n     * @param {String} xmlString - la chaîne de caractères correspondant au format XML\n     */\n    setXMLString : function (xmlString) {\n        if (xmlString && typeof xmlString === \"string\") {\n            this.xmlString = xmlString;\n            this.xmlDoc = __getXMLDOC(xmlString);\n        }\n    },\n\n    /**\n     * Méthode permettant de récupérer les readers associés au format XML, s'ils ont été définis\n     *\n     * @return {Object} readers - les readers associés au format XML, s'ils existent,\n     *      sous forme d'une collection de fonctions\n     */\n    getReader : function () {\n        return this.reader;\n    },\n\n    /**\n     * Méthode permettant d'attribuer des readers, sous la forme d'un objet de fonctions (node, data),\n     *      lorsqu'ils n'ont pas été définis lors de l'instanciation par exemple (new XML (options)).\n     *\n     * @param {Object} reader - Instance d'un Reader de service (AltiResponseReader, GeocodeRequestReader, etc.)\n     *      utile pour interpréter le XML lorsque sa structure est connue.\n     *      Ce reader doit comporter au moins une fonction statique read (root) permettant d'initialiser la lecture.\n     */\n    setReader : function (reader) {\n        if (reader && reader.read && typeof reader.read === \"function\") {\n            this.reader = reader;\n        }\n    },\n\n    /**\n     * Méthode permettant de récupérer le document XML associé au format, s'il existe.\n     *\n     * @return {DOMElement} xmlDoc - le document XML (DOM document node) s'il existe\n     */\n    getXMLDoc : function () {\n        return this.xmlDoc;\n    },\n\n    /**\n     * Setter\n     */\n    setXMLDoc : function (doc) {\n        this.xmlDoc = doc;\n    },\n    /**\n     * Méthode initialisant la lecture du XML, à partir d'un XML Document :\n     *      création d'un objet JavaScript contenant les informations du XML,\n     *      sauf dans le cas où il n'existe pas de XML Document à interpréter (retourne un objet vide).\n     *\n     * @return {Object} [parserOutput] - un objet JavaScript contenant les informations du XML :\n     * - soit toutes les informations si aucun reader n'a été spécifié à la création du format\n     * - soit les informations spécifiées dans le reader.\n     */\n    parse : function () {\n        // build xml document from xmlString\n        if (!this.xmlDoc && this.xmlString) {\n            this.xmlDoc = __getXMLDOC(this.xmlString);\n        }\n        if (this.xmlDoc) {\n            var root = __getRootNode(this.xmlDoc);\n            if (root) {\n                var parserOutput;\n                // call reader if exists\n                if (this.reader && this.reader.read) {\n                    parserOutput = this.reader.read(root);\n                } else {\n                    parserOutput = {};\n                    parserOutput[root.nodeName] = __readDefault(root);\n                }\n                return parserOutput;\n            } else {\n                return {};\n            }\n        }\n    }\n\n};\n\n/**\n * Méthode de la classe (privée) permettant de créer un XML Document à partir d'une chaîne de caractères XML,\n *      en utilisant DOMParser () lorsque c'est possible.\n *      For more information, see: https://dvcs.w3.org/hg/innerhtml/raw-file/tip/index.html#the-domparser-interface\n *\n * @private\n * @memberof XML\n * @method __getXMLDOC\n * @param {String} xmlString - xml string to be converted into DOM element\n * @return {DOMElement} - the corresponding XML Document\n */\nfunction __getXMLDOC (xmlString) {\n    if (typeof window === \"undefined\") {\n        // env. nodejs\n        var DOMParser = __webpack_require__(/*! xmldom */ \"xmldom\").DOMParser; // __xmldom.DOMParser;\n        return new DOMParser().parseFromString(xmlString, \"text/xml\");\n    } else {\n        // env. browser\n\n        var parser;\n        var xmlDoc;\n        var errorMsg = \"Erreur lors du parsing de la réponse du service : XML non conforme\";\n\n        if (window.ActiveXObject) {\n            // Internet Explorer < 9\n            xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.async = false;\n            xmlDoc.loadXML(xmlString);\n            var parseError = xmlDoc.parseError;\n            if (parseError.errorCode) {\n                if (parseError.line && parseError.linepos) {\n                    errorMsg += \"( ligne \" + parseError.line + \", colonne \" + parseError.linepos;\n                }\n                if (parseError.reason) {\n                    errorMsg += \":  \" + parseError.reason + \")\";\n                }\n                throw new Error(errorMsg);\n            }\n            return xmlDoc;\n        } else if (window.DOMParser) {\n            // les autres (Chrome, Mozilla, IE >= 9)\n            parser = new window.DOMParser();\n            try {\n                xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n            } catch (e) {\n                // Internet Explorer browser raises exception if xmlString is not valid XML\n                if (e.message === \"SyntaxError\") {\n                    throw new Error(errorMsg);\n                } else {\n                    throw new Error(\"Erreur lors du parsing de la réponse du service : \" + e.message);\n                }\n            }\n            // look for parsing error in case no exception was raised\n            if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\n                var parsererror = xmlDoc.getElementsByTagName(\"parsererror\");\n                for (var i = 0; i < parsererror.length; i++) {\n                    var content = parsererror[i].innerHTML;\n                    // except in case parsererror is just because of huge xml, but parsing is done.\n                    if (content.indexOf(\"Huge input lookup\") === -1) {\n                        errorMsg += \"(\" + content + \")\";\n                        throw new Error(errorMsg);\n                    }\n                }\n            } else if (!xmlDoc.documentElement) { // may happen in chrome browser\n                throw new Error(errorMsg);\n            }\n            return xmlDoc;\n        } else {\n            // FIXME\n            throw new Error(\"Incompatible DOM Parser pour ce navigateur !\");\n        }\n    }\n}\n\n/**\n * Méthode de la classe (privée) permettant de récupérer le noeud racine du document,\n *      à partir d'un document node (nodeType=9), puis lecture de ce noeud (readNode)\n *\n * @private\n * @memberof XML\n * @method __getRootNode\n * @param {DOMElement} [xmlDoc] - a Document Node\n * @return {DOMElement} root - the document root node\n */\nfunction __getRootNode (xmlDoc) {\n    var root;\n    if (xmlDoc.nodeType === 9) {\n        // INFO : nodeType 9 represents the entire document (the root-node of the DOM tree)\n        root = xmlDoc.documentElement;\n    } else if (xmlDoc.nodeType === 1) {\n        root = xmlDoc;\n    }\n    return root;\n}\n\n/**\n * Méthode de la classe (privée) permettant de lire automatiquement un noeud XML,\n *      lorsqu'aucun reader spécifique n'a été spécifié (parser brut)\n *\n * @private\n * @memberof XML\n * @method readDefault\n * @param {DOMElement} node - a DOM element node\n * @example final data object looks like :\n *          data = {\n *              attributeName: attributeValue,\n *              childName: {\n *                  attributeName: attributeValue,\n *                  attributeName: attributeValue,\n *                  childName: {\n *                      \"textContent\": textContent\n *                  },\n *                  childName: {\n *                      childName: {\n *                          attributeName:attributeValue\n *                      }\n *                  }\n *              }\n *          }\n */\nfunction __readDefault (node) {\n    var data = {};\n\n    // if element node has attributes, set their values to data\n    if (node.attributes.length > 0) {\n        var dataAttributes = __getAttributes(node);\n        data[\"attributes\"] = dataAttributes;\n    }\n\n    // if element node has childNodes, read them and set them to data\n    if (node.hasChildNodes()) {\n        var childData = {};\n        var child;\n        var children = node.childNodes;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 3) { // TEXT_NODE\n                data[\"textContent\"] = child.nodeValue;\n            } else if (child.nodeType === 1) {\n                childData = __readDefault(child);\n\n                if (!data[child.nodeName]) {\n                    // store childData in an object\n                    data[child.nodeName] = childData;\n                } else {\n                    // in case several childNodes has the same name : store them in an array.\n                    // if data[nodeName] already exists but is not an array\n                    if (!Array.isArray(data[child.nodeName])) {\n                        var old = data[child.nodeName];\n                        data[child.nodeName] = [];\n                        data[child.nodeName].push(old);\n                    }\n                    data[child.nodeName].push(childData);\n                }\n            }\n            // TODO : manage other node types (4=CDATA, etc)\n        }\n    }\n\n    return data;\n}\n\n/**\n * Méthode de la classe (privée) permettant de récupérer les attributs d'un noeud élément\n *\n * @private\n * @memberof XML\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (XML);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XML.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Gp.js":
/*!*****************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Gp.js ***!
  \*****************************************************/
/*! exports provided: servicesVersion, servicesDate, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"servicesVersion\", function() { return servicesVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"servicesDate\", function() { return servicesDate; });\n/* harmony import */ var _Services_Services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Services/Services */ \"./node_modules/geoportal-access-lib/src/Services/Services.js\");\n/* harmony import */ var _Services_DefaultUrlService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Services/DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _Services_Alti_Response_model_AltiResponse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Services/Alti/Response/model/AltiResponse */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js\");\n/* harmony import */ var _Services_Alti_Response_model_Elevation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Services/Alti/Response/model/Elevation */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js\");\n/* harmony import */ var _Services_AutoComplete_Response_model_AutoCompleteResponse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Services/AutoComplete/Response/model/AutoCompleteResponse */ \"./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/AutoCompleteResponse.js\");\n/* harmony import */ var _Services_AutoComplete_Response_model_SuggestedLocation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Services/AutoComplete/Response/model/SuggestedLocation */ \"./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/SuggestedLocation.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_AutoConfResponse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/AutoConfResponse */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/AutoConfResponse.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Constraint__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Constraint */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Constraint.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Format__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Format */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Format.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Layer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Layer */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Layer.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Legend__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Legend */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Legend.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Metadata__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Metadata */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Metadata.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Originator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Originator */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Originator.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Service */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Service.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Style__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Style */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Style.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Territory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Territory */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Territory.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_Thematic__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/Thematic */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Thematic.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_TileMatrix__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/TileMatrix */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrix.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_TileMatrixLimit__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/TileMatrixLimit */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixLimit.js\");\n/* harmony import */ var _Services_AutoConf_Response_model_TileMatrixSet__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Services/AutoConf/Response/model/TileMatrixSet */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixSet.js\");\n/* harmony import */ var _Services_Geocode_Response_model_GeocodeResponse__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Services/Geocode/Response/model/GeocodeResponse */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodeResponse.js\");\n/* harmony import */ var _Services_Geocode_Response_model_GeocodedLocation__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Services/Geocode/Response/model/GeocodedLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodedLocation.js\");\n/* harmony import */ var _Services_Geocode_Response_model_DirectGeocodedLocation__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./Services/Geocode/Response/model/DirectGeocodedLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/DirectGeocodedLocation.js\");\n/* harmony import */ var _Services_Geocode_Response_model_ReverseGeocodedLocation__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./Services/Geocode/Response/model/ReverseGeocodedLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/ReverseGeocodedLocation.js\");\n/* harmony import */ var _Services_ProcessIsoCurve_Response_model_ProcessIsoCurveResponse__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./Services/ProcessIsoCurve/Response/model/ProcessIsoCurveResponse */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/model/ProcessIsoCurveResponse.js\");\n/* harmony import */ var _Services_Route_Response_model_RouteResponse__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./Services/Route/Response/model/RouteResponse */ \"./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteResponse.js\");\n/* harmony import */ var _Services_Route_Response_model_RouteInstruction__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./Services/Route/Response/model/RouteInstruction */ \"./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteInstruction.js\");\n/* harmony import */ var _Protocols_XHR__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Protocols/XHR */ \"./node_modules/geoportal-access-lib/src/Protocols/XHR.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../package.json */ \"./node_modules/geoportal-access-lib/package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_30___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ \"./node_modules/geoportal-access-lib/package.json\", 1);\n/**\n* Global variable Gp.\n*\n* @module Gp\n* @alias Gp\n* @description\n*\n* This is the global variable that is exposed in the browser environment.\n* Content is composed of constructor, functions and properties...\n*\n* > {@link Gp.Error Error()}\n*     - .TYPE_SRVERR : \"SERVICE_ERROR\"\n*     - .TYPE_UNKERR : \"UNKNOWN_ERROR\"\n*     - .TYPE_USEERR : \"USAGE_ERROR\"\n*\n* > {@link module:Helper Helper}\n*     - .indent()\n*     - .normalyzeParameters()\n*     - .normalyzeUrl()\n*\n* > {@link module:XHR Protocols.XHR}\n*     - .call()\n*\n* > {@link module:Services Services (objects)}\n*     - .Alti\n*         - {@link Gp.Services.Alti.Elevation .Elevation()}\n*     - {@link Gp.Services.AltiResponse .AltiResponse()}\n*     - .AutoComplete\n*         - {@link Gp.Services.AutoComplete.SuggestedLocation .SuggestedLocation()}\n*     - {@link Gp.Services.AutoCompleteResponse .AutoCompleteResponse()}\n*     - {@link Gp.Services.Config .Config()}\n*     - {@link Gp.Services.DefaultUrl .DefaultUrl()}\n*     - .Geocode\n*         - {@link Gp.Services.Geocode.GeocodedLocation .GeocodedLocation()}\n*         - {@link Gp.Services.Geocode.ReverseGeocodedLocation .ReverseGeocodedLocation()}\n*         - {@link Gp.Services.Geocode.DirectGeocodedLocation .DirectGeocodedLocation()}\n*     - {@link Gp.Services.GeocodeResponse .GeocodeResponse()}\n*     - {@link Gp.Services.GetConfigResponse .GetConfigResponse()}\n*     - {@link Gp.Services.IsoCurveResponse .IsoCurveResponse()}\n*     - .Route\n*         - {@link Gp.Services.Route.RouteInstruction .RouteInstruction()}\n*     - {@link Gp.Services.RouteResponse .RouteResponse()}\n*\n* > Services (factory)\n*     - {@link module:Services~autoComplete .autoComplete()}\n*     - {@link module:Services~geocode .geocode()}\n*     - {@link module:Services~getAltitude .getAltitude()}\n*     - {@link module:Services~getConfig .getConfig()}\n*     - {@link module:Services~isoCurve .isoCurve()}\n*     - {@link module:Services~reverseGeocode .reverseGeocode()}\n*     - {@link module:Services~route .route()}\n*\n* > servicesDate : \"YYYY-MM-DD\"\n*\n* > servicesVersion : \"X.X.X\"\n*\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Version */\nconst servicesVersion = _package_json__WEBPACK_IMPORTED_MODULE_30__.version;\n/** Publication date */\nconst servicesDate = _package_json__WEBPACK_IMPORTED_MODULE_30__.date;\n\n// on declare les ns dans root global\nvar Gp = {};\n\nGp.servicesVersion = servicesVersion;\nGp.servicesDate = servicesDate;\n\n// Export Protocols\nGp.Protocols = {};\nGp.Protocols.XHR = _Protocols_XHR__WEBPACK_IMPORTED_MODULE_27__[\"default\"];\n// Export services\nGp.Services = _Services_Services__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n// Export DefaultUrls\nGp.Services.DefaultUrl = _Services_DefaultUrlService__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n// Export Alti\nGp.Services.AltiResponse = _Services_Alti_Response_model_AltiResponse__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\nGp.Services.Alti = {};\nGp.Services.Alti.Elevation = _Services_Alti_Response_model_Elevation__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n// Export Autocomplete\nGp.Services.AutoCompleteResponse = _Services_AutoComplete_Response_model_AutoCompleteResponse__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\nGp.Services.AutoComplete = {};\nGp.Services.AutoComplete.SuggestedLocation = _Services_AutoComplete_Response_model_SuggestedLocation__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\n// Export Autoconf\nGp.Services.GetConfigResponse = _Services_AutoConf_Response_model_AutoConfResponse__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\nGp.Services.Config = {};\nGp.Services.Config.Constraint = _Services_AutoConf_Response_model_Constraint__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\nGp.Services.Config.Format = _Services_AutoConf_Response_model_Format__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\nGp.Services.Config.Layer = _Services_AutoConf_Response_model_Layer__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\nGp.Services.Config.Legend = _Services_AutoConf_Response_model_Legend__WEBPACK_IMPORTED_MODULE_10__[\"default\"];\nGp.Services.Config.Metadata = _Services_AutoConf_Response_model_Metadata__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\nGp.Services.Config.Originator = _Services_AutoConf_Response_model_Originator__WEBPACK_IMPORTED_MODULE_12__[\"default\"];\nGp.Services.Config.Service = _Services_AutoConf_Response_model_Service__WEBPACK_IMPORTED_MODULE_13__[\"default\"];\nGp.Services.Config.Style = _Services_AutoConf_Response_model_Style__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\nGp.Services.Config.Territory = _Services_AutoConf_Response_model_Territory__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\nGp.Services.Config.Thematic = _Services_AutoConf_Response_model_Thematic__WEBPACK_IMPORTED_MODULE_16__[\"default\"];\nGp.Services.Config.TileMatrix = _Services_AutoConf_Response_model_TileMatrix__WEBPACK_IMPORTED_MODULE_17__[\"default\"];\nGp.Services.Config.TileMatrixLimit = _Services_AutoConf_Response_model_TileMatrixLimit__WEBPACK_IMPORTED_MODULE_18__[\"default\"];\nGp.Services.Config.TileMatrixSet = _Services_AutoConf_Response_model_TileMatrixSet__WEBPACK_IMPORTED_MODULE_19__[\"default\"];\n// Export Geocode\nGp.Services.GeocodeResponse = _Services_Geocode_Response_model_GeocodeResponse__WEBPACK_IMPORTED_MODULE_20__[\"default\"];\nGp.Services.Geocode = {};\nGp.Services.Geocode.GeocodedLocation = _Services_Geocode_Response_model_GeocodedLocation__WEBPACK_IMPORTED_MODULE_21__[\"default\"];\nGp.Services.Geocode.DirectGeocodedLocation = _Services_Geocode_Response_model_DirectGeocodedLocation__WEBPACK_IMPORTED_MODULE_22__[\"default\"];\nGp.Services.Geocode.ReverseGeocodedLocation = _Services_Geocode_Response_model_ReverseGeocodedLocation__WEBPACK_IMPORTED_MODULE_23__[\"default\"];\n// Export IsoCurve\nGp.Services.IsoCurveResponse = _Services_ProcessIsoCurve_Response_model_ProcessIsoCurveResponse__WEBPACK_IMPORTED_MODULE_24__[\"default\"];\n// Export Route\nGp.Services.RouteResponse = _Services_Route_Response_model_RouteResponse__WEBPACK_IMPORTED_MODULE_25__[\"default\"];\nGp.Services.Route = {};\nGp.Services.Route.RouteInstruction = _Services_Route_Response_model_RouteInstruction__WEBPACK_IMPORTED_MODULE_26__[\"default\"];\n// Export Erreurs et Outils\nGp.Error = _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_28__[\"default\"];\nGp.Helper = _Utils_Helper__WEBPACK_IMPORTED_MODULE_29__[\"default\"];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Gp);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvR3AuanM/NjZhOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1Q7QUFDQSxhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFDYixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTJDO0FBQ1c7QUFDaUI7QUFDTjtBQUM4QjtBQUNOO0FBQ0w7QUFDYjtBQUNSO0FBQ0Y7QUFDRTtBQUNJO0FBQ0k7QUFDTjtBQUNKO0FBQ1E7QUFDRjtBQUNKO0FBQ1U7QUFDTjtBQUNhO0FBQ0U7QUFDWTtBQUNFO0FBQ0M7QUFDdkI7QUFDTTtBQUM5QztBQUNZO0FBQ1Y7O0FBRUY7O0FBRWxDO0FBQ08sd0JBQXdCLDJDQUFHO0FBQ2xDO0FBQ08scUJBQXFCLDJDQUFHOztBQUUvQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQix1REFBRztBQUN0QjtBQUNBLGNBQWMsMERBQVE7QUFDdEI7QUFDQSx5QkFBeUIsbUVBQVU7QUFDbkM7QUFDQSwyQkFBMkIsa0ZBQVk7QUFDdkM7QUFDQSw2QkFBNkIsK0VBQVM7QUFDdEM7QUFDQSxtQ0FBbUMsa0dBQW9CO0FBQ3ZEO0FBQ0EsNkNBQTZDLCtGQUFpQjtBQUM5RDtBQUNBLGdDQUFnQywwRkFBaUI7QUFDakQ7QUFDQSxnQ0FBZ0Msb0ZBQVU7QUFDMUMsNEJBQTRCLGdGQUFNO0FBQ2xDLDJCQUEyQiwrRUFBSztBQUNoQyw0QkFBNEIsaUZBQU07QUFDbEMsOEJBQThCLG1GQUFRO0FBQ3RDLGdDQUFnQyxxRkFBVTtBQUMxQyw2QkFBNkIsa0ZBQU87QUFDcEMsMkJBQTJCLGdGQUFLO0FBQ2hDLCtCQUErQixvRkFBUztBQUN4Qyw4QkFBOEIsbUZBQVE7QUFDdEMsZ0NBQWdDLHFGQUFFO0FBQ2xDLHFDQUFxQywwRkFBTztBQUM1QyxtQ0FBbUMsd0ZBQUc7QUFDdEM7QUFDQSw4QkFBOEIseUZBQWU7QUFDN0M7QUFDQSx1Q0FBdUMsMEZBQWdCO0FBQ3ZELDZDQUE2QyxnR0FBc0I7QUFDbkUsOENBQThDLGlHQUF1QjtBQUNyRTtBQUNBLCtCQUErQix5R0FBZ0I7QUFDL0M7QUFDQSw0QkFBNEIscUZBQWE7QUFDekM7QUFDQSxxQ0FBcUMsd0ZBQWdCO0FBQ3JEO0FBQ0EsV0FBVyxpRUFBSztBQUNoQixZQUFZLHNEQUFNOztBQUVILGlFQUFFLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL0dwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIEdsb2JhbCB2YXJpYWJsZSBHcC5cbipcbiogQG1vZHVsZSBHcFxuKiBAYWxpYXMgR3BcbiogQGRlc2NyaXB0aW9uXG4qXG4qIFRoaXMgaXMgdGhlIGdsb2JhbCB2YXJpYWJsZSB0aGF0IGlzIGV4cG9zZWQgaW4gdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4qIENvbnRlbnQgaXMgY29tcG9zZWQgb2YgY29uc3RydWN0b3IsIGZ1bmN0aW9ucyBhbmQgcHJvcGVydGllcy4uLlxuKlxuKiA+IHtAbGluayBHcC5FcnJvciBFcnJvcigpfVxuKiAgICAgLSAuVFlQRV9TUlZFUlIgOiBcIlNFUlZJQ0VfRVJST1JcIlxuKiAgICAgLSAuVFlQRV9VTktFUlIgOiBcIlVOS05PV05fRVJST1JcIlxuKiAgICAgLSAuVFlQRV9VU0VFUlIgOiBcIlVTQUdFX0VSUk9SXCJcbipcbiogPiB7QGxpbmsgbW9kdWxlOkhlbHBlciBIZWxwZXJ9XG4qICAgICAtIC5pbmRlbnQoKVxuKiAgICAgLSAubm9ybWFseXplUGFyYW1ldGVycygpXG4qICAgICAtIC5ub3JtYWx5emVVcmwoKVxuKlxuKiA+IHtAbGluayBtb2R1bGU6WEhSIFByb3RvY29scy5YSFJ9XG4qICAgICAtIC5jYWxsKClcbipcbiogPiB7QGxpbmsgbW9kdWxlOlNlcnZpY2VzIFNlcnZpY2VzIChvYmplY3RzKX1cbiogICAgIC0gLkFsdGlcbiogICAgICAgICAtIHtAbGluayBHcC5TZXJ2aWNlcy5BbHRpLkVsZXZhdGlvbiAuRWxldmF0aW9uKCl9XG4qICAgICAtIHtAbGluayBHcC5TZXJ2aWNlcy5BbHRpUmVzcG9uc2UgLkFsdGlSZXNwb25zZSgpfVxuKiAgICAgLSAuQXV0b0NvbXBsZXRlXG4qICAgICAgICAgLSB7QGxpbmsgR3AuU2VydmljZXMuQXV0b0NvbXBsZXRlLlN1Z2dlc3RlZExvY2F0aW9uIC5TdWdnZXN0ZWRMb2NhdGlvbigpfVxuKiAgICAgLSB7QGxpbmsgR3AuU2VydmljZXMuQXV0b0NvbXBsZXRlUmVzcG9uc2UgLkF1dG9Db21wbGV0ZVJlc3BvbnNlKCl9XG4qICAgICAtIHtAbGluayBHcC5TZXJ2aWNlcy5Db25maWcgLkNvbmZpZygpfVxuKiAgICAgLSB7QGxpbmsgR3AuU2VydmljZXMuRGVmYXVsdFVybCAuRGVmYXVsdFVybCgpfVxuKiAgICAgLSAuR2VvY29kZVxuKiAgICAgICAgIC0ge0BsaW5rIEdwLlNlcnZpY2VzLkdlb2NvZGUuR2VvY29kZWRMb2NhdGlvbiAuR2VvY29kZWRMb2NhdGlvbigpfVxuKiAgICAgICAgIC0ge0BsaW5rIEdwLlNlcnZpY2VzLkdlb2NvZGUuUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb24gLlJldmVyc2VHZW9jb2RlZExvY2F0aW9uKCl9XG4qICAgICAgICAgLSB7QGxpbmsgR3AuU2VydmljZXMuR2VvY29kZS5EaXJlY3RHZW9jb2RlZExvY2F0aW9uIC5EaXJlY3RHZW9jb2RlZExvY2F0aW9uKCl9XG4qICAgICAtIHtAbGluayBHcC5TZXJ2aWNlcy5HZW9jb2RlUmVzcG9uc2UgLkdlb2NvZGVSZXNwb25zZSgpfVxuKiAgICAgLSB7QGxpbmsgR3AuU2VydmljZXMuR2V0Q29uZmlnUmVzcG9uc2UgLkdldENvbmZpZ1Jlc3BvbnNlKCl9XG4qICAgICAtIHtAbGluayBHcC5TZXJ2aWNlcy5Jc29DdXJ2ZVJlc3BvbnNlIC5Jc29DdXJ2ZVJlc3BvbnNlKCl9XG4qICAgICAtIC5Sb3V0ZVxuKiAgICAgICAgIC0ge0BsaW5rIEdwLlNlcnZpY2VzLlJvdXRlLlJvdXRlSW5zdHJ1Y3Rpb24gLlJvdXRlSW5zdHJ1Y3Rpb24oKX1cbiogICAgIC0ge0BsaW5rIEdwLlNlcnZpY2VzLlJvdXRlUmVzcG9uc2UgLlJvdXRlUmVzcG9uc2UoKX1cbipcbiogPiBTZXJ2aWNlcyAoZmFjdG9yeSlcbiogICAgIC0ge0BsaW5rIG1vZHVsZTpTZXJ2aWNlc35hdXRvQ29tcGxldGUgLmF1dG9Db21wbGV0ZSgpfVxuKiAgICAgLSB7QGxpbmsgbW9kdWxlOlNlcnZpY2Vzfmdlb2NvZGUgLmdlb2NvZGUoKX1cbiogICAgIC0ge0BsaW5rIG1vZHVsZTpTZXJ2aWNlc35nZXRBbHRpdHVkZSAuZ2V0QWx0aXR1ZGUoKX1cbiogICAgIC0ge0BsaW5rIG1vZHVsZTpTZXJ2aWNlc35nZXRDb25maWcgLmdldENvbmZpZygpfVxuKiAgICAgLSB7QGxpbmsgbW9kdWxlOlNlcnZpY2Vzfmlzb0N1cnZlIC5pc29DdXJ2ZSgpfVxuKiAgICAgLSB7QGxpbmsgbW9kdWxlOlNlcnZpY2VzfnJldmVyc2VHZW9jb2RlIC5yZXZlcnNlR2VvY29kZSgpfVxuKiAgICAgLSB7QGxpbmsgbW9kdWxlOlNlcnZpY2VzfnJvdXRlIC5yb3V0ZSgpfVxuKlxuKiA+IHNlcnZpY2VzRGF0ZSA6IFwiWVlZWS1NTS1ERFwiXG4qXG4qID4gc2VydmljZXNWZXJzaW9uIDogXCJYLlguWFwiXG4qXG4qL1xuXG5pbXBvcnQgU2VydmljZXMgZnJvbSBcIi4vU2VydmljZXMvU2VydmljZXNcIjtcbmltcG9ydCBEZWZhdWx0VXJsIGZyb20gXCIuL1NlcnZpY2VzL0RlZmF1bHRVcmxTZXJ2aWNlXCI7XG5pbXBvcnQgQWx0aVJlc3BvbnNlIGZyb20gXCIuL1NlcnZpY2VzL0FsdGkvUmVzcG9uc2UvbW9kZWwvQWx0aVJlc3BvbnNlXCI7XG5pbXBvcnQgRWxldmF0aW9uIGZyb20gXCIuL1NlcnZpY2VzL0FsdGkvUmVzcG9uc2UvbW9kZWwvRWxldmF0aW9uXCI7XG5pbXBvcnQgQXV0b0NvbXBsZXRlUmVzcG9uc2UgZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbXBsZXRlL1Jlc3BvbnNlL21vZGVsL0F1dG9Db21wbGV0ZVJlc3BvbnNlXCI7XG5pbXBvcnQgU3VnZ2VzdGVkTG9jYXRpb24gZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbXBsZXRlL1Jlc3BvbnNlL21vZGVsL1N1Z2dlc3RlZExvY2F0aW9uXCI7XG5pbXBvcnQgR2V0Q29uZmlnUmVzcG9uc2UgZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvQXV0b0NvbmZSZXNwb25zZVwiO1xuaW1wb3J0IENvbnN0cmFpbnQgZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvQ29uc3RyYWludFwiO1xuaW1wb3J0IEZvcm1hdCBmcm9tIFwiLi9TZXJ2aWNlcy9BdXRvQ29uZi9SZXNwb25zZS9tb2RlbC9Gb3JtYXRcIjtcbmltcG9ydCBMYXllciBmcm9tIFwiLi9TZXJ2aWNlcy9BdXRvQ29uZi9SZXNwb25zZS9tb2RlbC9MYXllclwiO1xuaW1wb3J0IExlZ2VuZCBmcm9tIFwiLi9TZXJ2aWNlcy9BdXRvQ29uZi9SZXNwb25zZS9tb2RlbC9MZWdlbmRcIjtcbmltcG9ydCBNZXRhZGF0YSBmcm9tIFwiLi9TZXJ2aWNlcy9BdXRvQ29uZi9SZXNwb25zZS9tb2RlbC9NZXRhZGF0YVwiO1xuaW1wb3J0IE9yaWdpbmF0b3IgZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvT3JpZ2luYXRvclwiO1xuaW1wb3J0IFNlcnZpY2UgZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvU2VydmljZVwiO1xuaW1wb3J0IFN0eWxlIGZyb20gXCIuL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1N0eWxlXCI7XG5pbXBvcnQgVGVycml0b3J5IGZyb20gXCIuL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1RlcnJpdG9yeVwiO1xuaW1wb3J0IFRoZW1hdGljIGZyb20gXCIuL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1RoZW1hdGljXCI7XG5pbXBvcnQgVE0gZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGlsZU1hdHJpeFwiO1xuaW1wb3J0IFRNTGltaXQgZnJvbSBcIi4vU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGlsZU1hdHJpeExpbWl0XCI7XG5pbXBvcnQgVE1TIGZyb20gXCIuL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1RpbGVNYXRyaXhTZXRcIjtcbmltcG9ydCBHZW9jb2RlUmVzcG9uc2UgZnJvbSBcIi4vU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9HZW9jb2RlUmVzcG9uc2VcIjtcbmltcG9ydCBHZW9jb2RlZExvY2F0aW9uIGZyb20gXCIuL1NlcnZpY2VzL0dlb2NvZGUvUmVzcG9uc2UvbW9kZWwvR2VvY29kZWRMb2NhdGlvblwiO1xuaW1wb3J0IERpcmVjdEdlb2NvZGVkTG9jYXRpb24gZnJvbSBcIi4vU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9EaXJlY3RHZW9jb2RlZExvY2F0aW9uXCI7XG5pbXBvcnQgUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb24gZnJvbSBcIi4vU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9SZXZlcnNlR2VvY29kZWRMb2NhdGlvblwiO1xuaW1wb3J0IElzb0N1cnZlUmVzcG9uc2UgZnJvbSBcIi4vU2VydmljZXMvUHJvY2Vzc0lzb0N1cnZlL1Jlc3BvbnNlL21vZGVsL1Byb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlXCI7XG5pbXBvcnQgUm91dGVSZXNwb25zZSBmcm9tIFwiLi9TZXJ2aWNlcy9Sb3V0ZS9SZXNwb25zZS9tb2RlbC9Sb3V0ZVJlc3BvbnNlXCI7XG5pbXBvcnQgUm91dGVJbnN0cnVjdGlvbiBmcm9tIFwiLi9TZXJ2aWNlcy9Sb3V0ZS9SZXNwb25zZS9tb2RlbC9Sb3V0ZUluc3RydWN0aW9uXCI7XG5pbXBvcnQgWEhSIGZyb20gXCIuL1Byb3RvY29scy9YSFJcIjtcbmltcG9ydCBFcnJvciBmcm9tIFwiLi9FeGNlcHRpb25zL0Vycm9yU2VydmljZVwiO1xuaW1wb3J0IEhlbHBlciBmcm9tIFwiLi9VdGlscy9IZWxwZXJcIjtcblxuaW1wb3J0IFBrZyBmcm9tIFwiLi4vcGFja2FnZS5qc29uXCI7XG5cbi8qKiBWZXJzaW9uICovXG5leHBvcnQgY29uc3Qgc2VydmljZXNWZXJzaW9uID0gUGtnLnZlcnNpb247XG4vKiogUHVibGljYXRpb24gZGF0ZSAqL1xuZXhwb3J0IGNvbnN0IHNlcnZpY2VzRGF0ZSA9IFBrZy5kYXRlO1xuXG4vLyBvbiBkZWNsYXJlIGxlcyBucyBkYW5zIHJvb3QgZ2xvYmFsXG52YXIgR3AgPSB7fTtcblxuR3Auc2VydmljZXNWZXJzaW9uID0gc2VydmljZXNWZXJzaW9uO1xuR3Auc2VydmljZXNEYXRlID0gc2VydmljZXNEYXRlO1xuXG4vLyBFeHBvcnQgUHJvdG9jb2xzXG5HcC5Qcm90b2NvbHMgPSB7fTtcbkdwLlByb3RvY29scy5YSFIgPSBYSFI7XG4vLyBFeHBvcnQgc2VydmljZXNcbkdwLlNlcnZpY2VzID0gU2VydmljZXM7XG4vLyBFeHBvcnQgRGVmYXVsdFVybHNcbkdwLlNlcnZpY2VzLkRlZmF1bHRVcmwgPSBEZWZhdWx0VXJsO1xuLy8gRXhwb3J0IEFsdGlcbkdwLlNlcnZpY2VzLkFsdGlSZXNwb25zZSA9IEFsdGlSZXNwb25zZTtcbkdwLlNlcnZpY2VzLkFsdGkgPSB7fTtcbkdwLlNlcnZpY2VzLkFsdGkuRWxldmF0aW9uID0gRWxldmF0aW9uO1xuLy8gRXhwb3J0IEF1dG9jb21wbGV0ZVxuR3AuU2VydmljZXMuQXV0b0NvbXBsZXRlUmVzcG9uc2UgPSBBdXRvQ29tcGxldGVSZXNwb25zZTtcbkdwLlNlcnZpY2VzLkF1dG9Db21wbGV0ZSA9IHt9O1xuR3AuU2VydmljZXMuQXV0b0NvbXBsZXRlLlN1Z2dlc3RlZExvY2F0aW9uID0gU3VnZ2VzdGVkTG9jYXRpb247XG4vLyBFeHBvcnQgQXV0b2NvbmZcbkdwLlNlcnZpY2VzLkdldENvbmZpZ1Jlc3BvbnNlID0gR2V0Q29uZmlnUmVzcG9uc2U7XG5HcC5TZXJ2aWNlcy5Db25maWcgPSB7fTtcbkdwLlNlcnZpY2VzLkNvbmZpZy5Db25zdHJhaW50ID0gQ29uc3RyYWludDtcbkdwLlNlcnZpY2VzLkNvbmZpZy5Gb3JtYXQgPSBGb3JtYXQ7XG5HcC5TZXJ2aWNlcy5Db25maWcuTGF5ZXIgPSBMYXllcjtcbkdwLlNlcnZpY2VzLkNvbmZpZy5MZWdlbmQgPSBMZWdlbmQ7XG5HcC5TZXJ2aWNlcy5Db25maWcuTWV0YWRhdGEgPSBNZXRhZGF0YTtcbkdwLlNlcnZpY2VzLkNvbmZpZy5PcmlnaW5hdG9yID0gT3JpZ2luYXRvcjtcbkdwLlNlcnZpY2VzLkNvbmZpZy5TZXJ2aWNlID0gU2VydmljZTtcbkdwLlNlcnZpY2VzLkNvbmZpZy5TdHlsZSA9IFN0eWxlO1xuR3AuU2VydmljZXMuQ29uZmlnLlRlcnJpdG9yeSA9IFRlcnJpdG9yeTtcbkdwLlNlcnZpY2VzLkNvbmZpZy5UaGVtYXRpYyA9IFRoZW1hdGljO1xuR3AuU2VydmljZXMuQ29uZmlnLlRpbGVNYXRyaXggPSBUTTtcbkdwLlNlcnZpY2VzLkNvbmZpZy5UaWxlTWF0cml4TGltaXQgPSBUTUxpbWl0O1xuR3AuU2VydmljZXMuQ29uZmlnLlRpbGVNYXRyaXhTZXQgPSBUTVM7XG4vLyBFeHBvcnQgR2VvY29kZVxuR3AuU2VydmljZXMuR2VvY29kZVJlc3BvbnNlID0gR2VvY29kZVJlc3BvbnNlO1xuR3AuU2VydmljZXMuR2VvY29kZSA9IHt9O1xuR3AuU2VydmljZXMuR2VvY29kZS5HZW9jb2RlZExvY2F0aW9uID0gR2VvY29kZWRMb2NhdGlvbjtcbkdwLlNlcnZpY2VzLkdlb2NvZGUuRGlyZWN0R2VvY29kZWRMb2NhdGlvbiA9IERpcmVjdEdlb2NvZGVkTG9jYXRpb247XG5HcC5TZXJ2aWNlcy5HZW9jb2RlLlJldmVyc2VHZW9jb2RlZExvY2F0aW9uID0gUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb247XG4vLyBFeHBvcnQgSXNvQ3VydmVcbkdwLlNlcnZpY2VzLklzb0N1cnZlUmVzcG9uc2UgPSBJc29DdXJ2ZVJlc3BvbnNlO1xuLy8gRXhwb3J0IFJvdXRlXG5HcC5TZXJ2aWNlcy5Sb3V0ZVJlc3BvbnNlID0gUm91dGVSZXNwb25zZTtcbkdwLlNlcnZpY2VzLlJvdXRlID0ge307XG5HcC5TZXJ2aWNlcy5Sb3V0ZS5Sb3V0ZUluc3RydWN0aW9uID0gUm91dGVJbnN0cnVjdGlvbjtcbi8vIEV4cG9ydCBFcnJldXJzIGV0IE91dGlsc1xuR3AuRXJyb3IgPSBFcnJvcjtcbkdwLkhlbHBlciA9IEhlbHBlcjtcblxuZXhwb3J0IGRlZmF1bHQgR3A7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Gp.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Protocols/JSONP.js":
/*!******************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Protocols/JSONP.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/**\n * JSONP : Implémentation du protocole JSONP de la plateforme Géoportail\n *\n * @module JSONP\n * @private\n * @alias Gp.Protocols.JSONP\n */\n\n\n// cf. https://github.com/sobstel/jsonp.js\nvar JSONP = {\n\n    /**\n     * Construction d'un identifiant statique basé sur le timestamp,\n     * et qui s'incremente de +1 à chaque appel\n     */\n    uuid : (function () {\n        var id = Math.floor(Date.now());\n        return function () {\n            return id++;\n        };\n    })(),\n\n    /**\n     * Cette fonction réalise l'appel du service fourni via le paramètre \"options.url\"\n     * en mettant en œuvre le protocole JSONP.\n     *\n     * @method call\n     * @static\n     * @param {Object} options - parametres d'invocation du service en JSONP\n     * @param {String} options.url - URL du service à invoquer (indépendamment du protocole JSONP).\n     *  Cette URL contient déjà les paramètres du service.\n     *  Si le paramètre dédié à la mise en oeuvre du protocole JSONP (callback=xxx) n'est pas présent, il est rajouté par la fonction ;\n     *  sa valeur est déterminée en fonction du paramètre callbackName.\n     * @param {Number} [options.timeOut = 0] - Nombre de ms au bout duquel on considère que le service n'a pas répondu.\n     *  Une valeur de 0 pour ce paramètre permet de désactiver la gestion du timeOut.\n     * @param {String} [options.callbackSuffix = null] - Suffixe de la fonction de callback à rajouter sur l'URL.\n     *  Si aucun suffixe n'est spécifié (cas par défaut), on utilisera l'identifiant this.uuid () comme suffixe. Ex: \"callback1458574396582 ()\"\n     * @param {String} [options.callbackName = gp.protocol.jsonp] - Valeur du paramètre callback à rajouter sur l'URL.\n     *  Si l'URL fournie contient déjà le paramètre callback, le paramètre callbackName ne sera pas pris en compte.\n     *  La fonction de callback est créée dynamiquement par la fonction JSONP ;\n     *  elle a deux fonctions :\n     *    elle annule la condition de timeOut\n     *    puis appelle la fonction fournie par l'utilisateur via le paramètre onResponse.\n     * @param {Function} options.onResponse - Nom de la fonction qui sera appelée lors de la réception des résultats du service.\n     *  Ce paramètre sera ignoré si l'URL contient déjà le paramètre callback.\n     *  La fonction de rappel appelée sera alors celle ayant pour nom la valeur de ce paramètre.\n     * @param {Function} [options.onTimeOut] - Nom de la fonction qui sera appelée en cas de non réponse du service.\n     *  Le temps au bout duquel on considère que le service n'a pas répondu est déterminé par le paramètre timeOut.\n     *  @example\n     *  var options = {\n     *      url : 'http://localhost/some/test.json&callback=myResults',\n     *      timeOut : 100,\n     *      callbackName : 'myResults',\n     *      callbackSuffix : \"\",\n     *      onResponse : function (response) {\n     *          console.log('results : ', response);\n     *      },\n     *\n     *   };\n     *   JSONP.call(options);\n     */\n    call : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"JSONP\");\n        logger.trace(\"[JSONP::call ()]\");\n\n        // analyse parametres\n\n        if (!options) {\n            logger.error(\"missing parameter : options !\");\n            throw new Error(\"missing parameter : options !\");\n        }\n\n        if (!options.url) {\n            logger.error(\"missing parameter : options.url !\");\n            throw new Error(\"missing parameter : options.url !\");\n        }\n\n        if (!options.timeOut) {\n            logger.info(\"setting 'options.timeOut' default value\");\n            options.timeOut = 0;\n        }\n\n        // FIXME si un callback coté client a été mis en place,\n        // cette condition sur cette methode n'a pas de sens !?\n        if (!options.onResponse) {\n            logger.error(\"missing parameter : options.onResponse !\");\n            throw new Error(\"missing parameter : options.onResponse !\");\n            // FIXME doit on definir un callback interne par defaut !?\n            // options.onResponse = function (data) {\n            //    console.log(\"response callback (inner) : \", data);\n            // };\n        }\n\n        // ID du callback à utiliser : null ou string.\n        // si l'utilisateur a spécifié un suffixe pour le callback, on le récupère comme un ID (ex: options.callbackSuffix = \"\")\n        // sinon, on utilise un timestamp : this.uuid ()\n        var callbackId = (typeof options.callbackSuffix === \"string\") ? options.callbackSuffix : this.uuid();\n\n        // on recherche le parametre callback et son nom de fonction dans l'url\n        var urlHasCallbackKey = false;\n        var urlHasCallbackName = false;\n\n        var idx = options.url.indexOf(\"callback=\");\n\n        if (idx !== -1) {\n            urlHasCallbackKey = true;\n            // extraction callbackName de l'url : entre \"callback=\" et \"&\" ou fin de ligne\n            var j = options.url.indexOf(\"&\", idx);\n            if (j === -1) {\n                j = options.url.length;\n            }\n\n            // on ecrase le parametre options.callbackName s'il avait été défini\n            var callbackName = options.url.substring(idx + 9, j);\n\n            if (callbackName) {\n                urlHasCallbackName = true;\n                options.callbackName = callbackName;\n                logger.info(\"setting 'options.callbackName' value (\" + options.callbackName + \") from 'options.url' parameter\");\n            }\n        }\n\n        // on ajoute le parametre callback dans l'URL s'il n'existe pas\n        if (!urlHasCallbackKey) {\n            // gestion des autres param. et \"?\"\n            var k = options.url.indexOf(\"?\");\n            if (k === -1) {\n                // aucun param., ni de '?'\n                options.url = options.url + \"?\" + \"callback=\";\n            } else if (k === options.url.length) {\n                // uniquement le '?'\n                options.url = options.url + \"callback=\";\n            } else {\n                // le '?' et les param. existent\n                options.url = options.url + \"&\" + \"callback=\";\n            }\n            logger.info(\"setting callback default key in 'options.url' : \" + options.url);\n        }\n\n        // utilisation de la fonction callback coté client ?\n        var HasCallbackName = options.callbackName ? true : urlHasCallbackName;\n\n        // on ajoute le nom de la fonction callback dans l'URL si elle n'existe pas\n        if (!urlHasCallbackName) {\n            // fonction callback par defaut\n            if (!options.callbackName) {\n                logger.info(\"setting 'options.callbackName' default value\");\n                options.callbackName = \"callback\"; // ou \"gp.protocol.jsonp\" ?\n                // info : si on ne veut pas gerer d'ID dans le callback,\n                // options.callbackSuffix = \"\"\n                if (callbackId || callbackId === \"\") {\n                    options.callbackName += callbackId;\n                }\n            }\n            options.url = options.url.replace(\"callback=\", \"callback=\" + options.callbackName);\n            logger.info(\"setting callback function name in 'options.url' : \" + options.url);\n        }\n\n        // timeOut par defaut\n        if (!options.onTimeOut) {\n            logger.info(\"setting 'options.onTimeOut' default value\");\n            /** callback timeout par defaut */\n            options.onTimeOut = function (/* error */) {\n                console.log(\"TimeOut while invoking url : \" + options.url);\n            };\n        }\n\n        if (!HasCallbackName) {\n            var self = this;\n\n            // event du timeout\n            var onTimeOutTrigger = null;\n\n            // declenche le timeout si > à 0 !\n            if (options.timeOut > 0) {\n                onTimeOutTrigger = window.setTimeout(\n                    function () {\n                        /** fonction de reponse du service */\n                        window[options.callbackName] = function () {};\n                        options.onTimeOut();\n                        self._deleteScript(callbackId);\n                    }, options.timeOut);\n            }\n\n            // FIXME le nom de la fonction n'accepte pas de namespace !\n            // ex. Gp.Function.callback\n            /**\n            * fonction de reponse du service\n            * @param {Object} data - data\n            * @private\n            */\n            window[options.callbackName] = function (data) {\n                window.clearTimeout(onTimeOutTrigger);\n                options.onResponse(data);\n                self._deleteScript(callbackId);\n            };\n        }\n\n        this._createScript(callbackId, options.url);\n    },\n\n    /**\n    * create Script\n    * @param {String} callbackId - callback Id\n    * @param {String} url - url\n    * @private\n    */\n    _createScript : function (callbackId, url) {\n        var scriptu;\n        var scripto = document.getElementById(\"results\" + callbackId);\n\n        scriptu = document.createElement(\"script\");\n        scriptu.setAttribute(\"type\", \"text/javascript\");\n        scriptu.setAttribute(\"src\", url);\n        scriptu.setAttribute(\"charset\", \"UTF-8\");\n        scriptu.setAttribute(\"id\", \"results\" + callbackId);\n        scriptu.setAttribute(\"async\", \"true\"); // FIXME async ?\n        // head ou body ou autres ?\n        var node = document.documentElement || document.getElementsByTagName(\"head\")[0];\n        if (scripto === null) {\n            node.appendChild(scriptu);\n        } else {\n            // s'il existe déjà, on le remplace !\n            node.replaceChild(scriptu, scripto);\n        }\n    },\n\n    /**\n    * delete Script\n    * @param {String} callbackId - callback Id\n    * @private\n    */\n    _deleteScript : function (callbackId) {\n        var script = document.getElementById(\"results\" + callbackId);\n        if (script) {\n            var node = script.parentNode || document.documentElement;\n            if (!node) {\n                return;\n            }\n            node.removeChild(script);\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (JSONP);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Protocols/JSONP.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Protocols/Protocol.js":
/*!*********************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Protocols/Protocol.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var _XHR__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XHR */ \"./node_modules/geoportal-access-lib/src/Protocols/XHR.js\");\n/* harmony import */ var _JSONP__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./JSONP */ \"./node_modules/geoportal-access-lib/src/Protocols/JSONP.js\");\n/**\n * Interface de dialogue avec les webservices\n *\n * @module Protocols\n * @private\n * @alias Gp.Protocols\n */\n\n\n\n\nvar Protocol = {\n\n    /**\n     * Interface unique d\"envoi d\"une requête.\n     *\n     * @method send\n     * @static\n     * @param {Object} options - options generales\n     * @param {String} options.url      - url du service\n     * @param {String} options.method   - GET, POST, PUT, DELETE\n     * @param {String} options.protocol - XHR | JSONP\n     * @param {String} options.format   - format de la reponse du service : json, xml ou null (brute)...\n     * @param {String} options.wrap     - encapsuler la reponse du service dans du JSON : true|false (true par defaut sur le protocole JSONP)\n     * @param {String} options.callbackSuffix - suffixe de la fonction de callback (JSONP uniquement) (ex: si callbackSuffix=\"\", la fonction s'appellera \"callback\")\n     * @param {String} options.timeOut  - 0 ms\n     * @param {Boolean} options.nocache  - true|false\n     * @param {Object|String} options.data        - content (post) ou param (get)\n     * @param {Object|String} options.headers     - (post) ex. referer\n     * @param {Object|String} options.content - (post) ex. \"application/json\"\n     * @param {String} options.scope       - this (TODO)\n     * @param {Function} options.onResponse - callback\n     * @param {Function} options.onFailure - callback\n     * @param {Function} options.onTimeOut - callback\n     * @param {String} options.proxyUrl -  (TODO)\n     */\n    send : function (options) {\n        // INFO\n        // \"output\" - param est interne à la classe \"Protocol\" (parametrable via \"wrap\"), et à ajouter à l\"url\n        //      ce param est independant du service car il est géré par le filtre LUA :\n        //          ex. json|xml (json par defaut).\n        //          Ce param. permet d\"encapsuler du XML dans du JSON :\n        //              {http : {status:200, error:null},xml :\"réponse du service\"}\n        //          Utile pour les services qui ne repondent que du XML (ex. Geocodage)\n        //\n        // |-------------------------------------------------|\n        // |      \\service |      |     |                    |\n        // | output\\ format| json | xml |     remarques      |\n        // |--------\\------|------|-----|--------------------|\n        // |    json       | json | json| json/xml encapsulé |\n        // |    xml        | json | xml | param inactif      |\n        // |-------------------------------------------------|\n        // ex. le service demande une reponse native au \"format\" json et avec un \"output\" json.\n        // on a donc une reponse json encapsulé dans un json : ce qu'on ne souhaite pas !\n        // dans ce cas on ne renseigne pas output=json\n\n        // INFO\n        // \"wrap\" - choix d\"encapsuler ou non les reponses dans du JSON.\n        //      Par defaut, on encapsule uniquement les reponses sur le protocole JSONP (et qui sont en xml) !\n\n        // INFO\n        // \"callback\" - param est interne à la classe \"Protocol\" (non parametrable), et à ajouter à l\"url\n        //      ce param est independant du service car il est géré aussi par le filtre LUA :\n        //          ex. callback|null\n        //          Ce param. permet de renvoyer une reponse javascript :\n        //              callback ({http : {status:200, error:null},xml :\"réponse du service\"})\n        //          Ce param. est non renseigné par defaut car pour du JSONP, on utilise le\n        //          le protocol JSONP, et ce dernier implemente déjà le callback !\n\n        // settings par defaut\n        var settings = options || {\n            method : \"GET\",\n            // protocol : \"JSONP\",\n            protocol : \"XHR\",\n            timeOut : 0,\n            format : null,\n            wrap : true,\n            nocache : true,\n            output : \"json\",\n            callback : null,\n            callbackSuffix : null\n        };\n\n        // on determine l'environnement d'execution : browser ou non ?\n        // et on stoppe pour nodeJS... sur un protocole JSONP !\n        if (typeof window === \"undefined\" && options.protocol === \"JSONP\") {\n            console.log(\"Value (s) for parameter (s) 'protocol=JSONP (instead use XHR)' not supported to NodeJS\");\n            return;\n        }\n\n        if (options.protocol === \"XHR\" || options.format === \"json\") {\n            settings.wrap = false;\n        } else if (options.protocol === \"JSONP\" && options.format === \"xml\") {\n            settings.wrap = true;\n        }\n\n        settings.callback = (options.protocol === \"JSONP\") ? null : null; // FIXME non géré !?\n        settings.output = settings.wrap ? \"json\" : null;\n\n        // on encapsule les reponses dans un objet JSON\n        if (settings.wrap) {\n            var params = {};\n            params.output = settings.output;\n            params.callback = settings.callback;\n            delete params.callback; // FIXME non géré !?\n            settings.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].normalyzeUrl(options.url, params);\n        }\n\n        // choix de l\"implementation :\n        // XHR ou JSONP\n        switch (settings.protocol) {\n            case \"XHR\":\n                // on normalise l'url (gestion du cache)\n                if (options.method === \"GET\" && options.nocache) {\n                    settings.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].normalyzeUrl(settings.url, {\n                        t : new Date().getTime()\n                    });\n                }\n                // appel du service en XHR\n                _XHR__WEBPACK_IMPORTED_MODULE_1__[\"default\"].call(settings);\n                break;\n            case \"JSONP\":\n\n                // on normalise l'url si les params. sont renseignés dans la string|object \"data\"\n                if (settings.data) {\n                    settings.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].normalyzeUrl(settings.url, settings.data);\n                }\n\n                // appel du service en JSONP\n                _JSONP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].call(settings);\n                break;\n            default:\n                throw new Error(\"protocol not supported (XHR|JSONP) !\");\n        }\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Protocol);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Protocols/Protocol.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Protocols/XHR.js":
/*!****************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Protocols/XHR.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! es6-promise */ \"./node_modules/es6-promise/dist/es6-promise.js\");\n/* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(es6_promise__WEBPACK_IMPORTED_MODULE_2__);\n/* global Promise, require */\n\n\n\n\n// import __request from \"request\";\n// import __xmldom from \"xmldom\";\n\n/**\n * Ajax Request (use of Promises)\n *\n * @module XHR\n * @alias Gp.Protocols.XHR\n * @see dependance 'es6-promise'\n */\n\n// cf. https://xhr.spec.whatwg.org/\n// cf. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\nvar XHR = {\n\n    /**\n     * Interface unique d'envoi d'une requête.\n     *\n     * @method call\n     * @static\n     * @param {Object} settings - options generales\n     * @param {String} settings.url    - url du service\n     * @param {String} settings.method - GET, POST, PUT, DELETE\n     * @param {String} settings.format - format de la reponse du service : json, xml ou null (brute)\n     * @param {String} settings.data   - content (post) ou param (get)\n     * @param {String} settings.proxy  - proxy url\n     * @param {Object|String} settings.headers - (post) ex. referer\n     * @param {Object|String} settings.content - (post) ex. 'application/json'\n     * @param {String} settings.timeOut - timeout = 0 par defaut\n     * @param {String} settings.scope - this\n     * @param {Function} settings.onResponse - callback\n     * @param {Function} settings.onFailure  - callback\n     */\n    call : function (settings) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"XHR\");\n        logger.trace(\"[XHR::call()]\");\n\n        // FIXME\n        // To polyfill the global environment\n        es6_promise__WEBPACK_IMPORTED_MODULE_2___default.a.polyfill();\n\n        // test sur les settings obligatoires\n        if (!settings.url) {\n            throw new Error(\"missing parameter : url is not defined !\");\n        }\n\n        if (!settings.method) {\n            throw new Error(\"missing parameter : method is not defined !\");\n        }\n\n        if (!settings.format) {\n            settings.format = \"text\"; // reponse brute !\n        }\n\n        var options = {};\n        options.url = settings.url;\n        options.data = settings.data ? settings.data : null;\n        options.method = settings.method;\n        options.timeOut = settings.timeOut || 0;\n        options.scope = settings.scope || this;\n        options.proxy = settings.proxy || null;\n        options.content = settings.content || null;\n        options.headers = settings.headers || {\n            referer : \"http://localhost\"\n        };\n\n        // test sur les valeurs de 'settings.method'\n        switch (settings.method) {\n            case \"DELETE\":\n            case \"GET\":\n                break;\n            case \"PUT\":\n            case \"POST\":\n                // on force sur ces params spécifiques au mode POST\n                options.content = settings.content ? settings.content : \"application/x-www-form-urlencoded\"; // FIXME en attente des services : bascule en \"application/xml\" ou \"application/json\"\n                options.headers = settings.headers ? settings.headers : {\n                    referer : \"http://localhost\" // todo ...\n                };\n                break;\n            case \"HEAD\":\n            case \"OPTIONS\":\n                throw new Error(\"HTTP method not yet supported !\");\n            default:\n                throw new Error(\"HTTP method unknown !\");\n        }\n\n        // test sur les valeurs de 'settings.format'\n        switch (settings.format) {\n            case \"text\":\n                this.__call(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            case \"json\":\n                this.__callJSON(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            case \"xml\":\n                this.__callXML(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            default:\n                throw new Error(\"This output Format is not yet supported !\");\n        }\n    },\n\n    /**\n     * Requete\n     *\n     * @method __call\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __call : function (options) {\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"XHR\");\n        logger.trace(\"[XHR::__call()]\");\n\n        var promise = new Promise(\n            function (resolve, reject) {\n                // traitement du corps de la requête\n                var corps = (options.method === \"POST\" || options.method === \"PUT\") ? 1 : 0;\n\n                // seulement si options.data n'est pas vide (peut être un objet ou une chaine de caractères)\n                if (options.data && ((typeof options.data === \"object\" && Object.keys(options.data).length) || (typeof options.data === \"string\" && options.data.length)) && !corps) {\n                    options.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(options.url, options.data);\n                }\n\n                logger.trace(\"URL = \", options.url);\n\n                var hXHR = null;\n\n                // test on env. nodejs or browser\n                if (typeof window === \"undefined\") {\n                    // Utilisation du module :\n                    // cf. http://blog.modulus.io/node.js-tutorial-how-to-use-request-module\n\n                    var req = __webpack_require__(/*! request */ \"request\");// __request\n\n                    // mapping data avec body param. pour le mode POST ou PUT (?)\n                    if (options.data && typeof options.data === \"string\" && corps) {\n                        options.body = options.data;\n                    }\n\n                    // FIXME ERROR : self signed certificate in certificate chain\n                    options.rejectUnauthorized = false;\n\n                    req(options, function (error, response, body) {\n                        if (!error && response.statusCode === 200 && body) {\n                            resolve(body);\n                        } else {\n                            reject(\"Errors Occured on Http Request (nodejs) : \" + error);\n                        }\n                    });\n                } else {\n                    if (window.XMLHttpRequest) {\n                        logger.trace(\"XMLHttpRequest\");\n\n                        hXHR = new XMLHttpRequest();\n                        hXHR.open(options.method, options.url, true); // async\n                        hXHR.overrideMimeType = options.content;\n\n                        // gestion du timeout\n                        var onTimeOutTrigger = null;\n                        if (options.timeOut > 0) {\n                            // FIXME le timeout interne ne me permet pas de declencher le bon message...\n                            // hXHR.timeout = options.timeOut;\n                            logger.trace(\"XHR - TimeOut actif !\");\n                            /**\n                             * Description\n                             *\n                             * @method onTimeOutTrigger\n                             * @private\n                             */\n                            onTimeOutTrigger = window.setTimeout(\n                                function () {\n                                    var message = \"TimeOut Occured on Http Request with XMLHttpRequest !\";\n                                    reject({\n                                        message : message,\n                                        status : -1\n                                    });\n                                }, options.timeOut);\n                        }\n\n                        if (corps) {\n                            // headers, data, content of data\n                            // cf. https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#dom-xmlhttprequest-setrequestheader\n                            logger.trace(\"data = \", options.data);\n                            hXHR.setRequestHeader(\"Content-type\", options.content);\n                            // FIXME refused to set unsafe header content-length javascript\n                            // hXHR.setRequestHeader (\"Content-length\", options.data.length);\n                            // hXHR.setRequestHeader (\"Referer\", options.headers.referer);\n                        }\n\n                        /**\n                         * On Error\n                         * FIXME ne se declenche pas !?\n                         *\n                         * @param {Object} e - Event\n                         * @method onerror\n                         * @private\n                         */\n                        hXHR.onerror = function (e) {\n                            console.log(e);\n                            reject(new Error(\"Errors Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * On Timeout\n                         * FIXME ne se declenche pas !?\n                         *\n                         * @param {Object} e - Event\n                         * @method ontimeout\n                         * @private\n                         */\n                        hXHR.ontimeout = function (e) {\n                            console.log(e);\n                            reject(new Error(\"TimeOut Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * Description\n                         *\n                         * @method onreadystatechange\n                         * @private\n                         */\n                        hXHR.onreadystatechange = function (e) {\n                            if (hXHR.readyState === 4) { // DONE\n                                if (hXHR.status === 200) {\n                                    window.clearTimeout(onTimeOutTrigger);\n                                    resolve(hXHR.response);\n                                } else {\n                                    var message = \"Errors Occured on Http Request (status : '\" + e.target.statusText + \"' | url : '\" + e.target.responseURL + \"')\";\n                                    var status = e.target.status;\n                                    reject({\n                                        message : message,\n                                        status : status\n                                    });\n                                }\n                            }\n                        };\n\n                        // gestion du content data\n                        var data4xhr = (options.data && corps) ? options.data : null;\n\n                        hXHR.send(data4xhr);\n                    } else if (window.XDomainRequest) {\n                        // worked in Internet Explorer 8–10 only !\n                        logger.trace(\"XDomainRequest\");\n\n                        hXHR = new XDomainRequest();\n                        hXHR.open(options.method, options.url);\n\n                        hXHR.overrideMimeType = options.content;\n\n                        if (options.timeOut > 0) {\n                            hXHR.timeout = options.timeout;\n                            logger.trace(\"XHR - TimeOut actif !\");\n                        }\n\n                        if (corps) {\n                            // headers, data, content of data\n                            // cf. https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#dom-xmlhttprequest-setrequestheader\n                            hXHR.setRequestHeader(\"Content-type\", options.content);\n                            // FIXME refused to set unsafe header content-length javascript\n                            // hXHR.setRequestHeader (\"Content-length\", options.data.length);\n                            // hXHR.setRequestHeader (\"Referer\", options.headers.referer);\n                        }\n\n                        /**\n                         * Description\n                         *\n                         * @method onerror\n                         * @private\n                         */\n                        hXHR.onerror = function () {\n                            reject(new Error(\"Errors Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * Description\n                         *\n                         * @method ontimeout\n                         * @private\n                         */\n                        hXHR.ontimeout = function () {\n                            reject(new Error(\"TimeOut Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * On Load\n                         *\n                         * @method onload\n                         * @private\n                         */\n                        hXHR.onload = function (e) {\n                            if (hXHR.status === 200) {\n                                resolve(hXHR.responseText);\n                            } else {\n                                var message = \"Errors Occured on Http Request (status : '\" + e.target.statusText + \"' | url : '\" + e.target.responseURL + \"')\";\n                                var status = e.target.status;\n                                reject({\n                                    message : message,\n                                    status : status\n                                });\n                            }\n                        };\n\n                        var data4xdr = (options.data && corps) ? options.data : null;\n\n                        hXHR.send(data4xdr);\n                    } else {\n                        throw new Error(\"CORS not supported\");\n                    }\n                }\n            }\n        );\n\n        return promise;\n    },\n\n    /**\n     * Requete avec parser JSON\n     *\n     * @method __callJSON\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __callJSON : function (options) {\n        return this.__call(options)\n            .then(JSON.parse)\n            .catch(function (error) {\n                console.log(\"_callJSON failed on : \", options.url, error);\n                // FIXME pas d'exception, laissons le fil se derouler...\n                // throw error;\n            });\n    },\n\n    /**\n     * Requete avec parser XML\n     *\n     * @method __callXML\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __callXML : function (options) {\n        return this.__call(options)\n            .then(function (response) {\n                var xmlDoc;\n\n                // test on env. nodejs or browser\n                if (typeof window === \"undefined\") {\n                    var DOMParser = __webpack_require__(/*! xmldom */ \"xmldom\").DOMParser; // __xmldom.DOMParser\n                    xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n                } else {\n                    if (window.DOMParser) {\n                        var parser = new window.DOMParser();\n                        xmlDoc = parser.parseFromString(response, \"text/xml\");\n                    } else { // IE\n                        xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n                        xmlDoc.async = false;\n                        xmlDoc.loadXML(response);\n                    }\n                }\n\n                return xmlDoc;\n            })\n            .catch(function (error) {\n                console.log(\"__callXML failed on : \", options.url, error);\n                // FIXME pas d'exception, laissons le fil se derouler...\n                // throw error;\n            });\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (XHR);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Protocols/XHR.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js":
/*!*********************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _Request_AltiRequestFactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Request/AltiRequestFactory */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js\");\n/* harmony import */ var _Response_AltiResponseFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Response/AltiResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js\");\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n *\n * Appel du service d'altimétrie du Géoportail\n *\n * @todo gestion du parma. output et callback\n * @todo outputFormat (REST) et format (WPS)\n * @todo La reponse JSON peut encapsuler un XML !\n *\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.Alti\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {Array.<Object>} options.positions - Tableau ({lon:float,lat:float}) contenant les coordonnées des points (CRS:84)\n *      dont on veut connaître les altitudes (ou à partir desquelles on va calculer le profil).\n *      Chaque élément du tableau est un objet JavaScript avec deux attributs : lon et lat, qui sont des flottants.\n *      Minimum 2 éléments si on souhaite calculer un profil altimétrique (ElevationLine).\n *      Maximum 50 éléments.\n *\n * @param {String} options.outputFormat - Le format de la réponse du service alti : 'xml' ou 'json'.\n *      Ce paramètre déterminera l'extension '.xml' ou '.json' du service dans le cas de l'API REST,\n *      ou la valeur du paramètre 'format' dans le cas de la norme WPS.\n *      Nécessaire si serverUrl est renseigné, et qu'on souhaite passer par l'API REST,\n *      pour connaître le format dans lequel sera fournie la réponse (pour son traitement).\n *      Non nécessaire pour la norme WPS. Par défaut, ce paramètre vaut 'json'.\n *\n * @param {Number} [options.sampling] - Nombre de points à utiliser pour déterminer le tracé d'un profil altimétrique, compris entre 2 et 5000.\n *      A spécifier lorsqu'on souhaite accéder à cette fonctionnalité.\n *      Dans ce cas, les points fournis en entrée (au minimum de deux) servent à déterminer l'axe planimétrique\n *      le long duquel le profil doit être calculé.\n *      Si le paramètre sampling n'est pas spécifié ou moins de deux points sont fournis,\n *      c'est le service Elevation qui sera interrogé (altitudes simples calculées pour les points fournis).\n *      Une valeur de sampling strictement inférieure à 2 déclenchera un échantillonnage avec la valeur par défaut du service (3 points).\n *\n * @param {String} [options.api] - Manière d'accéder au service : 'REST' (via l'API REST) ou 'WPS' (via la norme WPS).\n *      Par défaut, on utilise l'API REST.\n *\n * @param {Boolean} [options.zonly] - Permet de ne récupérer que les altitudes en sortie s'il vaut 'true'.\n *      Vaut 'false' par défaut.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      positions : [{lon:, lat:}, {lon:, lat:}],\n *      outputFormat : 'json' // json|xml\n *      sampling : 3,\n *      api : 'REST', // REST|WPS\n *      zonly : false // false|true\n *   };\n *\n * @private\n */\nfunction Alti (options) {\n    if (!(this instanceof Alti)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"Alti\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"Alti\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Gp.Services.Alti\");\n    this.logger.trace(\"[Constructeur Alti (options)]\");\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    if (!options.positions) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"positions\"));\n    }\n\n    if (options.positions.length === 0) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"positions\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.positions = options.positions;\n\n    // format de réponse du service : \"json\" ou \"xml\" (valeur par défaut), en minuscule !\n    this.options.outputFormat = (typeof options.outputFormat === \"string\") ? options.outputFormat.toLowerCase() : \"xml\";\n\n    // sampling\n    this.options.sampling = options.sampling || null;\n\n    // type d'api utilisé pour requeter le service, en majuscule !\n    this.options.api = (typeof options.api === \"string\") ? options.api.toUpperCase() : \"REST\";\n\n    // l'api ne peut être interrogée qu'en GET.\n    if (this.options.api === \"REST\") {\n        this.options.httpMethod = \"GET\";\n    }\n\n    // param. zonly\n    this.options.zonly = options.zonly || false;\n\n    // gestion de l'url du service par defaut\n    // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n    // en fonction du type d'api, REST ou WPS, du format de reponse demandé (outputFormat)\n    // ainsi que sur le type de service (profil ou elevation)\n    if (!this.options.serverUrl) {\n        var lstUrlByDefault = _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Alti.url(this.options.apiKey);\n        var urlFound = null;\n        switch (this.options.api) {\n            case \"WPS\":\n                urlFound = lstUrlByDefault.wps;\n                break;\n            case \"REST\":\n                var key = (options.sampling ? \"profil\" : \"elevation\") + \"-\" + this.options.outputFormat;\n                urlFound = lstUrlByDefault[key];\n                break;\n            default:\n                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_UNKNOWN\", \"api\"));\n        }\n\n        if (!urlFound) {\n            throw new Error(\"Url by default not found !\");\n        }\n        this.options.serverUrl = urlFound;\n        this.logger.trace(\"Server URL by default : \" + this.options.serverUrl);\n    }\n\n    // gestion du type de service\n    // si l'extension de l'url est .json ou .xml, on surcharge le format de sortie (outputFormat)\n    var idx = this.options.serverUrl.lastIndexOf(\".\");\n    if (idx !== -1) {\n        var extension = this.options.serverUrl.substring(idx + 1);\n        if (extension && extension.length < 5) { // FIXME extension de moins de 4 car. ...\n            this.logger.trace(\"Server Extension URL : \" + extension);\n            switch (extension.toLowerCase()) {\n                case \"json\":\n                case \"xml\":\n                    this.options.outputFormat = extension.toLowerCase();\n                    break;\n                default:\n                    throw new Error(\"type of service : unknown or unsupported (json or xml) !\");\n            }\n        }\n    }\n}\n\n/**\n * @lends module:Alti#\n */\nAlti.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/**\n * Constructeur (alias)\n */\nAlti.prototype.constructor = Alti;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAlti.prototype.buildRequest = function (error, success) {\n    // utilisation en mode callback\n    var options = {\n        httpMethod : this.options.httpMethod,\n        // callback\n        onSuccess : function (result) {\n            // sauvegarde de la requete !\n            this.request = result;\n            success.call(this, this.request);\n        },\n        onError : error,\n        scope : this,\n        // spécifique au service :\n        positions : this.options.positions,\n        outputFormat : this.options.outputFormat,\n        sampling : this.options.sampling,\n        api : this.options.api,\n        zonly : this.options.zonly\n    };\n\n    _Request_AltiRequestFactory__WEBPACK_IMPORTED_MODULE_5__[\"default\"].build(options);\n};\n\n/**\n * Analyse de la reponse (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAlti.prototype.analyzeResponse = function (error, success) {\n    // INFO\n    // Factory pour masquer la complexité du retour du service qui renvoie soit\n    //  - une 'string' qui contient du XML ou JSON natif en mode XHR\n    //  - un objet JSON qui est natif ou encapsulé\n\n    if (this.response) {\n        var options = {\n            response : this.response,\n            outputFormat : this.options.outputFormat, // utile pour parser la string en mode XHR : JSON ou XML !\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        _Response_AltiResponseFactory__WEBPACK_IMPORTED_MODULE_6__[\"default\"].build(options);\n    } else {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Alti);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Response_model_AltiResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Response/model/AltiResponse */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js\");\n/* harmony import */ var _Response_model_Elevation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Response/model/Elevation */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js\");\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service Altimétrique du Géoportail\n *      (calcul altimétrique simple ou profil altimétrique d'une courbe),\n *      lorsque le paramètre output = xml,\n *      afin de récupérer les élévations retournées.\n *\n * @module AltiResponseReader\n * @alias Gp.Services.Alti.Formats.AltiResponseReader\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n/**\n *\n * Objet AltiResponseReader\n *\n * @member {Object} AltiResponseReader\n *\n * @property {Object} AltiResponseReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} AltiResponseReader.READERS.elevations -  Lecture d'un noeud \"elevations\" de la réponse XML\n *      du service alti, correspondant logiquement à la racine du document\n *      (contient un ou plusieurs childNodes correspondant chacun à une élévation retournée)\n *\n * @property {Method} AltiResponseReader.READERS.elevation - ecture d'un noeud \"elevation\" de la réponse xml du service alti.\n *      (contient un ou 4 childNode (s) correspondant à l'altitude (z) et éventuellement lat, lon, et acc)\n *\n * @property {Method} AltiResponseReader.READERS.lat - Lecture d'un noeud \"lat\" de la réponse xml du service alti.\n *      (contient une valeur de latitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.lon - Lecture d'un noeud \"lon\" de la réponse xml du service alti.\n *      (contient une valeur de longitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.z - Lecture d'un noeud \"z\" de la réponse xml du service alti.\n *      (contient une valeur d'altitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.acc - Lecture d'un noeud \"acc\" de la réponse xml du service alti.\n *      (contient une valeur de précision, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.exceptionreport - Lecture d'un noeud \"ExceptionReport\" de la réponse xml du service alti.\n *\n * @property {Method} AltiResponseReader.READERS.exception - Lecture d'un noeud \"Exception\" de la réponse xml du service alti.\n *\n * @property {Method} AltiResponseReader.read - Méthode permettant de lancer la lecture d'une réponse XML du service altimétrique,\n *      à l'aide des readers de la classe.\n *\n */\nvar AltiResponseReader = {};\n\nAltiResponseReader.READERS = {\n\n    /**\n     * Lecture d'un noeud \"elevations\" de la réponse XML du service alti, correspondant logiquement à la racine du document\n     *      (contient un ou plusieurs childNodes correspondant chacun à une élévation retournée)\n     *\n     * @param {DOMElement} root - racine de la réponse XML\n     * @static\n     * @memberof AltiResponseReader\n     * @returns {Object} Retourne un objet de type AltiResponse\n     */\n    elevations : function (root) {\n        // INFO : on passe en paramètre l'objet en entrée elevations, vide, à remplir.\n        var altiResponse = new _Response_model_AltiResponse__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n        if (root.hasChildNodes()) {\n            var children = root.childNodes;\n            var child;\n            var elevation;\n\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n\n                if (AltiResponseReader.READERS[child.nodeName]) {\n                    elevation = AltiResponseReader.READERS[child.nodeName](child);\n                    altiResponse.elevations.push(elevation);\n                }\n            }\n        }\n\n        return altiResponse;\n    },\n\n    /**\n     * Lecture d'un noeud \"elevation\" de la réponse xml du service alti.\n     *      (contient un ou 4 childNode (s) correspondant à l'altitude (z) et éventuellement lat, lon, et acc)\n     *\n     * @param {DOMElement} node - noeud elevation à lire pour récupérer les informations de l'élévation retournée (z [, lon, lat, acc])\n     * @return {Array} elevationResponse - format de la réponse en sortie, instance de AltiResponse\n     * @static\n     * @memberof AltiResponseReader\n     */\n    elevation : function (node) {\n        var elevation = new _Response_model_Elevation__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (AltiResponseReader.READERS[child.nodeName]) {\n                    // INFO : on passe en paramètre l'objet en entrée elevation, vide, à remplir.\n                    AltiResponseReader.READERS[child.nodeName](child, elevation);\n                }\n            }\n        }\n        return elevation;\n    },\n\n    /**\n     * Lecture d'un noeud \"lat\" de la réponse xml du service alti.\n     *      (contient une valeur de latitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la latitude\n     * @param {Object} elevation - objet dans lequel stocker la latitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    lat : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.lat = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : latitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"lon\" de la réponse xml du service alti.\n     *      (contient une valeur de longitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la longitude\n     * @param {Object} elevation - objet dans lequel stocker la longitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    lon : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.lon = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : longitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"z\" de la réponse xml du service alti.\n     *      (contient une valeur d'altitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'altitude\n     * @param {Object} elevation - objet dans lequel stocker l'altitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    z : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            if (elevation) {\n                elevation.z = parseFloat(textNode.nodeValue);\n            } else {\n                elevation = new _Response_model_Elevation__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                elevation.z = parseFloat(textNode.nodeValue);\n                return elevation;\n            }\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : altitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"acc\" de la réponse xml du service alti.\n     *      (contient une valeur de précision, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la précision\n     * @param {Object} elevation - objet dans lequel stocker la précision retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    acc : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.acc = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : précision (acc) attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"ExceptionReport\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} exceptionReport - objet contenant l'exception\n     * @static\n     * @memberof AltiResponseReader\n     */\n    exceptionreport : function (node) {\n        var response = {};\n\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = AltiResponseReader.READERS.exception(child);\n                }\n            }\n        }\n\n        return response;\n    },\n\n    /**\n     * Lecture d'un noeud \"Exception\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} exceptionReport - objet contenant l'exception, avec deux attributs :\n     *      {String} exceptionReport.exceptionCode - qui contient l'identifiant du code de l'exception\n     *      {String} exceptionReport.exception - qui contient le message de l'exception\n     * @static\n     * @memberof AltiResponseReader\n     */\n    exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    },\n\n    /**\n     * Lecture d'un noeud \"Error\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} error - objet contenant l'exception\n     * @static\n     */\n    error : function (node) {\n        var response = {\n            error : {}\n        };\n        // get error code and description\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                var textNode;\n                // get error code\n                if (child.nodeType === 1 && child.nodeName === \"code\") { // 1 === node.ELEMENT_NODE\n                    textNode = child.firstChild;\n                    if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n                        response.error.code = textNode.nodeValue;\n                    }\n                }\n                // get error description\n                if (child.nodeType === 1 && child.nodeName === \"description\") { // 1 === node.ELEMENT_NODE\n                    textNode = child.firstChild;\n                    if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n                        response.error.description = textNode.nodeValue;\n                    }\n                }\n            }\n        }\n        return response;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service altimétrique,\n *      à l'aide des readers de la classe.\n *\n * @method AltiResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @static\n * @memberof AltiResponseReader\n */\nAltiResponseReader.read = function (root) {\n    if (root.nodeName === \"elevations\") {\n        var altiResponse = AltiResponseReader.READERS.elevations(root);\n        return altiResponse;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        var exceptionReport = AltiResponseReader.READERS.exceptionreport(root);\n        return exceptionReport;\n    } else if (root.nodeName === \"error\") {\n        var error = AltiResponseReader.READERS.error(root);\n        return error;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiResponseReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _AltiRequestREST__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AltiRequestREST */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js\");\n/* harmony import */ var _AltiRequestWPS__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AltiRequestWPS */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js\");\n/**\n * Creation d'une requête en REST ou WPS\n * (Factory)\n *\n * @module AltiRequestFactory\n * @alias Gp.Services.Alti.Request.AltiRequestFactory\n * @private\n */\n\n\n\n\n\nvar AltiRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      httpMethod : 'GET', // GET|POST\n     *      onSuccess : function (response) {},\n     *      onError : function (error) {},\n     *      scope : this,\n     *      positions : [{lon:, lat:}, {lon:, lat:}],\n     *      outputFormat : 'json' // json|xml\n     *      sampling : 3,\n     *      api : 'REST', // REST|WPS\n     *      zonly : false // false|true\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiRequestFactory\");\n        logger.trace([\"AltiRequestFactory::build()\"]);\n\n        var request = null;\n\n        // on factorise les options par groupe;\n        // - global,\n        // - param, les params pour les data inputs\n        // - wps, les param du service\n        // - callback\n\n        var settings = {\n            // ajout des valeurs par defaut spécifiques au service\n            type : options.sampling ? \"Profil\" : \"Elevation\",\n            method : options.httpMethod,\n            param : {\n                positions : null,\n                delimiter : null, // FIXME par defaut, on ne le met pas en place car ça fait planter la requête !?\n                indent : null, // par defaut\n                crs : null, // par defaut\n                format : null, // (only to POST)\n                sampling : null, // (only use by Profil)\n                zonly : null // (only use by Elevation)\n            }\n        };\n\n        // surcharge des valeurs obligatoires\n        settings.param.positions = options.positions;\n        settings.param.format = options.outputFormat;\n        settings.param.sampling = options.sampling;\n        settings.param.zonly = options.zonly;\n\n        // gestion des callback\n        var bOnError = !!((options.onError !== null && typeof options.onError === \"function\"));\n        var bOnSuccess = !!((options.onSuccess !== null && typeof options.onSuccess === \"function\"));\n\n        var message = null;\n        switch (options.api) {\n            case \"REST\":\n                // FIXME les exceptions ne sont pas 'catchées' sur le constructeur !\n                var myReq = new _AltiRequestREST__WEBPACK_IMPORTED_MODULE_2__[\"default\"](settings);\n                if (!myReq.processRequestString()) {\n                    message = \"Error in process request (rest) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                request = myReq.requestString;\n                break;\n            case \"WPS\":\n                // ajout des valeurs par defaut spécifiques au service WPS\n                settings.wps = {\n                    service : null, // par defaut\n                    version : null, // par defaut\n                    identifier : null, // par defaut\n                    rawdataoutput : null, // par defaut\n                    request : null // par defaut\n                };\n\n                request = _AltiRequestWPS__WEBPACK_IMPORTED_MODULE_3__[\"default\"].build(settings);\n                if (!request) {\n                    message = \"Error in process request (wps) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                break;\n            default:\n                message = \"Type of API is not supported by service (REST or WPS) !\";\n                if (bOnError) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                    return;\n                }\n                throw new Error(message);\n        }\n\n        if (bOnSuccess) {\n            options.onSuccess.call(options.scope, request);\n        }\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequestFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXF1ZXN0L0FsdGlSZXF1ZXN0RmFjdG9yeS5qcz9kZDE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ1E7QUFDWjtBQUNGOztBQUU5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLHlDQUF5QztBQUN6QztBQUNBLDBCQUEwQixXQUFXLEdBQUcsV0FBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOERBQU07QUFDM0I7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdEQUFlO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxnRUFBWTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCLHVEQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxnRUFBWTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGdFQUFZO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUsaUZBQWtCLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVxdWVzdC9BbHRpUmVxdWVzdEZhY3RvcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0aW9uIGQndW5lIHJlcXXDqnRlIGVuIFJFU1Qgb3UgV1BTXG4gKiAoRmFjdG9yeSlcbiAqXG4gKiBAbW9kdWxlIEFsdGlSZXF1ZXN0RmFjdG9yeVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkFsdGkuUmVxdWVzdC5BbHRpUmVxdWVzdEZhY3RvcnlcbiAqIEBwcml2YXRlXG4gKi9cbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uLy4uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuaW1wb3J0IEVycm9yU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vRXhjZXB0aW9ucy9FcnJvclNlcnZpY2VcIjtcbmltcG9ydCBBbHRpUmVxdWVzdFJFU1QgZnJvbSBcIi4vQWx0aVJlcXVlc3RSRVNUXCI7XG5pbXBvcnQgQWx0aVJlcXVlc3RXUFMgZnJvbSBcIi4vQWx0aVJlcXVlc3RXUFNcIjtcblxudmFyIEFsdGlSZXF1ZXN0RmFjdG9yeSA9IHtcblxuICAgIC8qKlxuICAgICAqIGludGVyZmFjZSB1bmlxdWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGRlZmluaWVzIGRhbnMgbGUgY29tcG9zYW50IEFsdGlcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICAgIGh0dHBNZXRob2QgOiAnR0VUJywgLy8gR0VUfFBPU1RcbiAgICAgKiAgICAgIG9uU3VjY2VzcyA6IGZ1bmN0aW9uIChyZXNwb25zZSkge30sXG4gICAgICogICAgICBvbkVycm9yIDogZnVuY3Rpb24gKGVycm9yKSB7fSxcbiAgICAgKiAgICAgIHNjb3BlIDogdGhpcyxcbiAgICAgKiAgICAgIHBvc2l0aW9ucyA6IFt7bG9uOiwgbGF0On0sIHtsb246LCBsYXQ6fV0sXG4gICAgICogICAgICBvdXRwdXRGb3JtYXQgOiAnanNvbicgLy8ganNvbnx4bWxcbiAgICAgKiAgICAgIHNhbXBsaW5nIDogMyxcbiAgICAgKiAgICAgIGFwaSA6ICdSRVNUJywgLy8gUkVTVHxXUFNcbiAgICAgKiAgICAgIHpvbmx5IDogZmFsc2UgLy8gZmFsc2V8dHJ1ZVxuICAgICAqICAgfTtcbiAgICAgKlxuICAgICAqL1xuICAgIGJ1aWxkIDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbG9nZ2VyXG4gICAgICAgIHZhciBsb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiQWx0aVJlcXVlc3RGYWN0b3J5XCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoW1wiQWx0aVJlcXVlc3RGYWN0b3J5OjpidWlsZCgpXCJdKTtcblxuICAgICAgICB2YXIgcmVxdWVzdCA9IG51bGw7XG5cbiAgICAgICAgLy8gb24gZmFjdG9yaXNlIGxlcyBvcHRpb25zIHBhciBncm91cGU7XG4gICAgICAgIC8vIC0gZ2xvYmFsLFxuICAgICAgICAvLyAtIHBhcmFtLCBsZXMgcGFyYW1zIHBvdXIgbGVzIGRhdGEgaW5wdXRzXG4gICAgICAgIC8vIC0gd3BzLCBsZXMgcGFyYW0gZHUgc2VydmljZVxuICAgICAgICAvLyAtIGNhbGxiYWNrXG5cbiAgICAgICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICAgICAgLy8gYWpvdXQgZGVzIHZhbGV1cnMgcGFyIGRlZmF1dCBzcMOpY2lmaXF1ZXMgYXUgc2VydmljZVxuICAgICAgICAgICAgdHlwZSA6IG9wdGlvbnMuc2FtcGxpbmcgPyBcIlByb2ZpbFwiIDogXCJFbGV2YXRpb25cIixcbiAgICAgICAgICAgIG1ldGhvZCA6IG9wdGlvbnMuaHR0cE1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtIDoge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9ucyA6IG51bGwsXG4gICAgICAgICAgICAgICAgZGVsaW1pdGVyIDogbnVsbCwgLy8gRklYTUUgcGFyIGRlZmF1dCwgb24gbmUgbGUgbWV0IHBhcyBlbiBwbGFjZSBjYXIgw6dhIGZhaXQgcGxhbnRlciBsYSByZXF1w6p0ZSAhP1xuICAgICAgICAgICAgICAgIGluZGVudCA6IG51bGwsIC8vIHBhciBkZWZhdXRcbiAgICAgICAgICAgICAgICBjcnMgOiBudWxsLCAvLyBwYXIgZGVmYXV0XG4gICAgICAgICAgICAgICAgZm9ybWF0IDogbnVsbCwgLy8gKG9ubHkgdG8gUE9TVClcbiAgICAgICAgICAgICAgICBzYW1wbGluZyA6IG51bGwsIC8vIChvbmx5IHVzZSBieSBQcm9maWwpXG4gICAgICAgICAgICAgICAgem9ubHkgOiBudWxsIC8vIChvbmx5IHVzZSBieSBFbGV2YXRpb24pXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3VyY2hhcmdlIGRlcyB2YWxldXJzIG9ibGlnYXRvaXJlc1xuICAgICAgICBzZXR0aW5ncy5wYXJhbS5wb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9ucztcbiAgICAgICAgc2V0dGluZ3MucGFyYW0uZm9ybWF0ID0gb3B0aW9ucy5vdXRwdXRGb3JtYXQ7XG4gICAgICAgIHNldHRpbmdzLnBhcmFtLnNhbXBsaW5nID0gb3B0aW9ucy5zYW1wbGluZztcbiAgICAgICAgc2V0dGluZ3MucGFyYW0uem9ubHkgPSBvcHRpb25zLnpvbmx5O1xuXG4gICAgICAgIC8vIGdlc3Rpb24gZGVzIGNhbGxiYWNrXG4gICAgICAgIHZhciBiT25FcnJvciA9ICEhKChvcHRpb25zLm9uRXJyb3IgIT09IG51bGwgJiYgdHlwZW9mIG9wdGlvbnMub25FcnJvciA9PT0gXCJmdW5jdGlvblwiKSk7XG4gICAgICAgIHZhciBiT25TdWNjZXNzID0gISEoKG9wdGlvbnMub25TdWNjZXNzICE9PSBudWxsICYmIHR5cGVvZiBvcHRpb25zLm9uU3VjY2VzcyA9PT0gXCJmdW5jdGlvblwiKSk7XG5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuYXBpKSB7XG4gICAgICAgICAgICBjYXNlIFwiUkVTVFwiOlxuICAgICAgICAgICAgICAgIC8vIEZJWE1FIGxlcyBleGNlcHRpb25zIG5lIHNvbnQgcGFzICdjYXRjaMOpZXMnIHN1ciBsZSBjb25zdHJ1Y3RldXIgIVxuICAgICAgICAgICAgICAgIHZhciBteVJlcSA9IG5ldyBBbHRpUmVxdWVzdFJFU1Qoc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIGlmICghbXlSZXEucHJvY2Vzc1JlcXVlc3RTdHJpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJFcnJvciBpbiBwcm9jZXNzIHJlcXVlc3QgKHJlc3QpICFcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJPbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBteVJlcS5yZXF1ZXN0U3RyaW5nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIldQU1wiOlxuICAgICAgICAgICAgICAgIC8vIGFqb3V0IGRlcyB2YWxldXJzIHBhciBkZWZhdXQgc3DDqWNpZmlxdWVzIGF1IHNlcnZpY2UgV1BTXG4gICAgICAgICAgICAgICAgc2V0dGluZ3Mud3BzID0ge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlIDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uIDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyIDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICByYXdkYXRhb3V0cHV0IDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0IDogbnVsbCAvLyBwYXIgZGVmYXV0XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBBbHRpUmVxdWVzdFdQUy5idWlsZChzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIGluIHByb2Nlc3MgcmVxdWVzdCAod3BzKSAhXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZShtZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVHlwZSBvZiBBUEkgaXMgbm90IHN1cHBvcnRlZCBieSBzZXJ2aWNlIChSRVNUIG9yIFdQUykgIVwiO1xuICAgICAgICAgICAgICAgIGlmIChiT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYk9uU3VjY2Vzcykge1xuICAgICAgICAgICAgb3B0aW9ucy5vblN1Y2Nlc3MuY2FsbChvcHRpb25zLnNjb3BlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFsdGlSZXF1ZXN0RmFjdG9yeTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/AltiElevationRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js\");\n/* harmony import */ var _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/AltiProfilRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js\");\n/* jshint multistr : true */\n\n\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des requêtes de type REST sur le service altimetrique.\n *\n * @todo Le service Alti n'implemente pas le POST !?\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiRequestREST\n * @param {Object} options - options\n * @param {Object}   options.param.positions - tableau de coordonnées lon/lat\n * @param {String}   options.param.delimiter - '|'\n * @param {Boolean}  options.param.indent - false|true\n * @param {String}   options.param.crs - 'CRS:84'\n * @param {String}   options.param.sampling - 3\n * @param {Boolean}  options.param.zonly - false|true\n * @param {String}   options.param.format - \"JSON|XML\"\n * @param {String}   options.type - \"Profil|Elevation\"\n * @param {String}   options.method - GET|POST\n *\n * @example\n *      var options = {\n *           type : 'Profil', // Elevation\n *           method : 'GET',  // par defaut\n *           param : {\n *               positions : [\n *                   {lon:'1.11', lat:'1.11'},\n *                   {lon:'1.10', lat:'1.10'},\n *                   {lon:'1.12', lat:'1.12'}\n *               ],\n *               delimiter : \";\",         // par defaut\n *               indent    : true,        // par defaut\n *               crs       : 'EPSG:4326', // par defaut\n *               format    : 'json',      // par defaut (only to POST)\n *               sampling  : 3 ,          // par defaut (only use by Profil)\n *               zonly     : false        // par defaut (only use by Elevation)\n *           }\n *      };\n *\n *      var result;\n *      try {\n *          var obj = new AltiRequestREST (options);\n *          if (! obj.processRequestString ()) {\n *              throw new Error(\"Request empty !?\")\n *          }\n *          result = obj.requestString;\n *      } catch (e) {\n *          // exceptions...\n *      }\n * @private\n */\nfunction AltiRequestREST (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiRequestREST\");\n    this.logger.trace(\"[Constructeur AltiRequestREST ()]\");\n\n    if (!(this instanceof AltiRequestREST)) {\n        throw new TypeError(\"AltiRequestREST constructor cannot be called as a function.\");\n    }\n\n    this.options = options || {};\n\n    // existance des options\n    if (!this.options) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"options\"));\n    }\n\n    // type de requete : Altitude ou Profil\n    // (param. à determiner en fonction des parametres d'entrée)\n    if (!this.options.type) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"type (Elevation or Profil)\"));\n    }\n\n    // construction du modele de requête\n    // (test du type d'objet candidat)\n    this.DataObject = null;\n    switch (this.options.type) {\n        case \"Elevation\":\n            this.DataObject = new _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.options.param);\n            break;\n        case \"Profil\":\n            this.DataObject = new _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.options.param);\n            break;\n        default:\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_TYPE\", \"type (Elevation or Profil)\"));\n    }\n\n    /**\n     * methode.\n     * Par defaut, \"GET\".\n     */\n    this.method = this.options.method || \"GET\";\n}\n\nAltiRequestREST.prototype = {\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AltiRequestREST,\n\n    /**\n     * Template de la requête.\n     */\n    template : {\n        get : {\n            // FIXME on retire le param 'delimiter' : &delimiter='__DELIMITER__'\n            value : \"lon=__LON__&lat=__LAT__&indent=__INDENT__&crs='__CRS__'\",\n            input : {\n                point : \"&zonly=__ZONLY__\",\n                profil : \"&sampling=__SAMPLING__\"\n            }\n        },\n        post : {\n            // FIXME on retire le param 'delimiter' : delimiter='__DELIMITER__'\\n\\\n            value : \"lon=__LON__\\n\" +\n                \"lat=__LAT__\\n\" +\n                \"indent=__INDENT__\\n\" +\n                \"crs='__CRS__'\\n\",\n            input : {\n                point : \"zonly=__ZONLY__\",\n                profil : \"sampling=__SAMPLING__\"\n            }\n        }\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out : lon=0.2367,2.1570&lat=48.0551,46.6077&delimiter=,&indent=true&zonly=true&crs='CRS:84'\n     * // POST out : Not yet supported method POST !\n     * @returns {String}\n     */\n    processRequestString : function () {\n        this.logger.trace(\"AltiRequestREST::processRequestString ()\");\n\n        var template = \"\";\n        if (this.method === \"POST\") {\n            template = this.template.post.value;\n        } else if (this.method === \"GET\") {\n            template = this.template.get.value;\n        }\n\n        template = template.replace(/__LON__/g, this.DataObject.getLon());\n        template = template.replace(/__LAT__/g, this.DataObject.getLat());\n        // FIXME on retire le param 'delimiter'\n        // template = template.replace(/__DELIMITER__/g, this.DataObject.delimiter);\n        template = template.replace(/__INDENT__/g, this.DataObject.indent);\n        template = template.replace(/__CRS__/g, this.DataObject.crs);\n\n        // ajout +\n        template = template + this.__addDataInputs();\n        this.logger.trace(\"traduction tmpl\", template);\n\n        // sauvegarde\n        this.requestString = template;\n\n        return this.requestString;\n    },\n\n    /**\n     * Ajout de parametres spécifiques (ex. zonly)\n     *\n     * @returns {String}\n     */\n    __addDataInputs : function () {\n        this.logger.trace(\"AltiRequestREST::addDataInput ()\");\n\n        var myTemplate;\n        if (this.method === \"POST\") {\n            myTemplate = this.template.post;\n        } else if (this.method === \"GET\") {\n            myTemplate = this.template.get;\n        } else {\n            throw new Error(\"No other HTTP method supported by the service !\");\n        }\n\n        var tmpl = null;\n        if (this.DataObject.CLASSNAME === \"AltiElevationRequest\") {\n            tmpl = myTemplate.input.point;\n            return tmpl.replace(/__ZONLY__/g, this.DataObject.zonly);\n        } else if (this.DataObject.CLASSNAME === \"AltiProfilRequest\") {\n            tmpl = myTemplate.input.profil;\n            return tmpl.replace(/__SAMPLING__/g, this.DataObject.sampling);\n        } else {\n            throw new Error(\"No other object supported than elevation or profil !?\");\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequestREST);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Formats_WPS__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Formats/WPS */ \"./node_modules/geoportal-access-lib/src/Formats/WPS.js\");\n/* harmony import */ var _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/AltiElevationRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js\");\n/* harmony import */ var _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/AltiProfilRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js\");\n/**\n * Classe d'interface des requêtes de type WPS sur le service altimetrique.\n * (Factory)\n *\n * @module Gp.Services.Alti.Request.AltiRequestWPS\n * @alias Gp.Services.Alti.Request.AltiRequestWPS\n * @private\n */\n\n\n\n\n\n\nvar AltiRequestWPS = {\n\n    /**\n     * Interface unique de construction de la requête.\n     *\n     * @method build\n     * @param {Object} options - options\n     * @param {Object}   options.param.positions - tableau de coordonnées lon/lat\n     * @param {String}   options.param.delimiter - '|'\n     * @param {Boolean}  options.param.indent - false|true\n     * @param {String}   options.param.crs - 'CRS:84'\n     * @param {String}   options.param.sampling - 3\n     * @param {Boolean}  options.param.zonly - false|true\n     * @param {String}   options.param.format - \"JSON|XML\" (only to POST)\n     * @param {String}   options.wps.service - \"WPS\"\n     * @param {String}   options.wps.version - \"1.0.0\"\n     * @param {String}   options.wps.identifier - \"gs:WPSElevation|gs:WPSLineElevation\"\n     * @param {String}   options.wps.rawdataoutput - \"result\"\n     * @param {String}   options.wps.request - \"Execute\"\n     * @param {String}   options.type - \"Profil|Elevation\"\n     * @param {String}   options.method - GET|POST\n     * @example\n     *      var options = {\n     *           type : 'Profil', // Elevation\n     *           method : 'GET',  // par defaut\n     *           param : {\n     *               positions : [\n     *                   {lon:'1.11', lat:'1.11'},\n     *                   {lon:'1.10', lat:'1.10'},\n     *                   {lon:'1.12', lat:'1.12'}\n     *               ],\n     *               delimiter : \";\",         // par defaut\n     *               indent    : true,        // par defaut\n     *               crs       : 'EPSG:4326', // par defaut\n     *               format    : 'json',      // par defaut (only to POST)\n     *               sampling  : 3 ,          // par defaut (only use by Profil)\n     *               zonly     : false,       // par defaut (only use by Elevation)\n     *           },\n     *           wps : {\n     *                 service : 'WPS',         // par defaut\n     *                 version : '1.0.0',       // par defaut\n     *                 identifier : 'gs:WPS',   // par defaut, Elevation = gs:WPSElevation, Profil = gs:WPSLineElevation\n     *                 rawdataoutput : 'result',// par defaut\n     *                 request : 'Execute'      // par defaut\n     *           }\n     *       };\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiRequestWPS\");\n        logger.trace([\"AltiRequestWPS::build()\"]);\n\n        // existance des options\n        if (!options) {\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"options\"));\n        }\n\n        // type de requete : Altitude ou Profil\n        // (param. à determiner en fonction des parametres d'entrée)\n        if (!options.type) {\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"type (Elevation or Profil)\"));\n        }\n\n        // construction du modele de requête\n        // (test du type d'objet candidat)\n        var DataObject = null;\n        switch (options.type) {\n            case \"Elevation\":\n                // surcharge\n                options.wps.identifier = \"gs:WPSElevation\";\n                DataObject = new _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_3__[\"default\"](options.param);\n                break;\n            case \"Profil\":\n                // surcharge\n                options.wps.identifier = \"gs:WPSLineElevation\";\n                DataObject = new _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_4__[\"default\"](options.param);\n                break;\n            default:\n                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_TYPE\", \"type (Elevation or Profil)\"));\n        }\n\n        // construction de la requête WPS\n        var settings = {\n            data : DataObject,\n            method : options.method,\n            param : options.wps\n        };\n\n        var rqstWPS = new _Formats_WPS__WEBPACK_IMPORTED_MODULE_2__[\"default\"](settings);\n\n        if (!rqstWPS.processRequestString()) {\n            throw new Error(\"Enable to process request !\");\n        }\n\n        return rqstWPS.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequestWPS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXF1ZXN0L0FsdGlSZXF1ZXN0V1BTLmpzPzQzNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvRDtBQUNIO0FBQ1Y7QUFDeUI7QUFDTjs7QUFFMUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsdUJBQXVCO0FBQ2pELDBCQUEwQix1QkFBdUI7QUFDakQsMEJBQTBCO0FBQzFCO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4REFBTTtBQUMzQjs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCLGdFQUFDO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnRUFBQztBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtRUFBb0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0VBQWlCO0FBQ2xEO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0VBQUM7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQixvREFBRzs7QUFFN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZSw2RUFBYyxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9BbHRpL1JlcXVlc3QvQWx0aVJlcXVlc3RXUFMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsYXNzZSBkJ2ludGVyZmFjZSBkZXMgcmVxdcOqdGVzIGRlIHR5cGUgV1BTIHN1ciBsZSBzZXJ2aWNlIGFsdGltZXRyaXF1ZS5cbiAqIChGYWN0b3J5KVxuICpcbiAqIEBtb2R1bGUgR3AuU2VydmljZXMuQWx0aS5SZXF1ZXN0LkFsdGlSZXF1ZXN0V1BTXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuQWx0aS5SZXF1ZXN0LkFsdGlSZXF1ZXN0V1BTXG4gKiBAcHJpdmF0ZVxuICovXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcbmltcG9ydCBfIGZyb20gXCIuLi8uLi8uLi9VdGlscy9NZXNzYWdlc1Jlc291cmNlc1wiO1xuaW1wb3J0IFdQUyBmcm9tIFwiLi4vLi4vLi4vRm9ybWF0cy9XUFNcIjtcbmltcG9ydCBBbHRpRWxldmF0aW9uUmVxdWVzdCBmcm9tIFwiLi9tb2RlbC9BbHRpRWxldmF0aW9uUmVxdWVzdFwiO1xuaW1wb3J0IEFsdGlQcm9maWxSZXF1ZXN0IGZyb20gXCIuL21vZGVsL0FsdGlQcm9maWxSZXF1ZXN0XCI7XG5cbnZhciBBbHRpUmVxdWVzdFdQUyA9IHtcblxuICAgIC8qKlxuICAgICAqIEludGVyZmFjZSB1bmlxdWUgZGUgY29uc3RydWN0aW9uIGRlIGxhIHJlcXXDqnRlLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBidWlsZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgIG9wdGlvbnMucGFyYW0ucG9zaXRpb25zIC0gdGFibGVhdSBkZSBjb29yZG9ubsOpZXMgbG9uL2xhdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMucGFyYW0uZGVsaW1pdGVyIC0gJ3wnXG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgb3B0aW9ucy5wYXJhbS5pbmRlbnQgLSBmYWxzZXx0cnVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgb3B0aW9ucy5wYXJhbS5jcnMgLSAnQ1JTOjg0J1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMucGFyYW0uc2FtcGxpbmcgLSAzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgb3B0aW9ucy5wYXJhbS56b25seSAtIGZhbHNlfHRydWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLnBhcmFtLmZvcm1hdCAtIFwiSlNPTnxYTUxcIiAob25seSB0byBQT1NUKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMud3BzLnNlcnZpY2UgLSBcIldQU1wiXG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgb3B0aW9ucy53cHMudmVyc2lvbiAtIFwiMS4wLjBcIlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMud3BzLmlkZW50aWZpZXIgLSBcImdzOldQU0VsZXZhdGlvbnxnczpXUFNMaW5lRWxldmF0aW9uXCJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLndwcy5yYXdkYXRhb3V0cHV0IC0gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMud3BzLnJlcXVlc3QgLSBcIkV4ZWN1dGVcIlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMudHlwZSAtIFwiUHJvZmlsfEVsZXZhdGlvblwiXG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgb3B0aW9ucy5tZXRob2QgLSBHRVR8UE9TVFxuICAgICAqIEBleGFtcGxlXG4gICAgICogICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICAgICAgICAgdHlwZSA6ICdQcm9maWwnLCAvLyBFbGV2YXRpb25cbiAgICAgKiAgICAgICAgICAgbWV0aG9kIDogJ0dFVCcsICAvLyBwYXIgZGVmYXV0XG4gICAgICogICAgICAgICAgIHBhcmFtIDoge1xuICAgICAqICAgICAgICAgICAgICAgcG9zaXRpb25zIDogW1xuICAgICAqICAgICAgICAgICAgICAgICAgIHtsb246JzEuMTEnLCBsYXQ6JzEuMTEnfSxcbiAgICAgKiAgICAgICAgICAgICAgICAgICB7bG9uOicxLjEwJywgbGF0OicxLjEwJ30sXG4gICAgICogICAgICAgICAgICAgICAgICAge2xvbjonMS4xMicsIGxhdDonMS4xMid9XG4gICAgICogICAgICAgICAgICAgICBdLFxuICAgICAqICAgICAgICAgICAgICAgZGVsaW1pdGVyIDogXCI7XCIsICAgICAgICAgLy8gcGFyIGRlZmF1dFxuICAgICAqICAgICAgICAgICAgICAgaW5kZW50ICAgIDogdHJ1ZSwgICAgICAgIC8vIHBhciBkZWZhdXRcbiAgICAgKiAgICAgICAgICAgICAgIGNycyAgICAgICA6ICdFUFNHOjQzMjYnLCAvLyBwYXIgZGVmYXV0XG4gICAgICogICAgICAgICAgICAgICBmb3JtYXQgICAgOiAnanNvbicsICAgICAgLy8gcGFyIGRlZmF1dCAob25seSB0byBQT1NUKVxuICAgICAqICAgICAgICAgICAgICAgc2FtcGxpbmcgIDogMyAsICAgICAgICAgIC8vIHBhciBkZWZhdXQgKG9ubHkgdXNlIGJ5IFByb2ZpbClcbiAgICAgKiAgICAgICAgICAgICAgIHpvbmx5ICAgICA6IGZhbHNlLCAgICAgICAvLyBwYXIgZGVmYXV0IChvbmx5IHVzZSBieSBFbGV2YXRpb24pXG4gICAgICogICAgICAgICAgIH0sXG4gICAgICogICAgICAgICAgIHdwcyA6IHtcbiAgICAgKiAgICAgICAgICAgICAgICAgc2VydmljZSA6ICdXUFMnLCAgICAgICAgIC8vIHBhciBkZWZhdXRcbiAgICAgKiAgICAgICAgICAgICAgICAgdmVyc2lvbiA6ICcxLjAuMCcsICAgICAgIC8vIHBhciBkZWZhdXRcbiAgICAgKiAgICAgICAgICAgICAgICAgaWRlbnRpZmllciA6ICdnczpXUFMnLCAgIC8vIHBhciBkZWZhdXQsIEVsZXZhdGlvbiA9IGdzOldQU0VsZXZhdGlvbiwgUHJvZmlsID0gZ3M6V1BTTGluZUVsZXZhdGlvblxuICAgICAqICAgICAgICAgICAgICAgICByYXdkYXRhb3V0cHV0IDogJ3Jlc3VsdCcsLy8gcGFyIGRlZmF1dFxuICAgICAqICAgICAgICAgICAgICAgICByZXF1ZXN0IDogJ0V4ZWN1dGUnICAgICAgLy8gcGFyIGRlZmF1dFxuICAgICAqICAgICAgICAgICB9XG4gICAgICogICAgICAgfTtcbiAgICAgKi9cbiAgICBidWlsZCA6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIC8vIGxvZ2dlclxuICAgICAgICB2YXIgbG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcihcIkFsdGlSZXF1ZXN0V1BTXCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoW1wiQWx0aVJlcXVlc3RXUFM6OmJ1aWxkKClcIl0pO1xuXG4gICAgICAgIC8vIGV4aXN0YW5jZSBkZXMgb3B0aW9uc1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfLmdldE1lc3NhZ2UoXCJQQVJBTV9FTVBUWVwiLCBcIm9wdGlvbnNcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHlwZSBkZSByZXF1ZXRlIDogQWx0aXR1ZGUgb3UgUHJvZmlsXG4gICAgICAgIC8vIChwYXJhbS4gw6AgZGV0ZXJtaW5lciBlbiBmb25jdGlvbiBkZXMgcGFyYW1ldHJlcyBkJ2VudHLDqWUpXG4gICAgICAgIGlmICghb3B0aW9ucy50eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXy5nZXRNZXNzYWdlKFwiUEFSQU1fRU1QVFlcIiwgXCJ0eXBlIChFbGV2YXRpb24gb3IgUHJvZmlsKVwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zdHJ1Y3Rpb24gZHUgbW9kZWxlIGRlIHJlcXXDqnRlXG4gICAgICAgIC8vICh0ZXN0IGR1IHR5cGUgZCdvYmpldCBjYW5kaWRhdClcbiAgICAgICAgdmFyIERhdGFPYmplY3QgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkVsZXZhdGlvblwiOlxuICAgICAgICAgICAgICAgIC8vIHN1cmNoYXJnZVxuICAgICAgICAgICAgICAgIG9wdGlvbnMud3BzLmlkZW50aWZpZXIgPSBcImdzOldQU0VsZXZhdGlvblwiO1xuICAgICAgICAgICAgICAgIERhdGFPYmplY3QgPSBuZXcgQWx0aUVsZXZhdGlvblJlcXVlc3Qob3B0aW9ucy5wYXJhbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiUHJvZmlsXCI6XG4gICAgICAgICAgICAgICAgLy8gc3VyY2hhcmdlXG4gICAgICAgICAgICAgICAgb3B0aW9ucy53cHMuaWRlbnRpZmllciA9IFwiZ3M6V1BTTGluZUVsZXZhdGlvblwiO1xuICAgICAgICAgICAgICAgIERhdGFPYmplY3QgPSBuZXcgQWx0aVByb2ZpbFJlcXVlc3Qob3B0aW9ucy5wYXJhbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfLmdldE1lc3NhZ2UoXCJQQVJBTV9UWVBFXCIsIFwidHlwZSAoRWxldmF0aW9uIG9yIFByb2ZpbClcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc3RydWN0aW9uIGRlIGxhIHJlcXXDqnRlIFdQU1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBkYXRhIDogRGF0YU9iamVjdCxcbiAgICAgICAgICAgIG1ldGhvZCA6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgcGFyYW0gOiBvcHRpb25zLndwc1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBycXN0V1BTID0gbmV3IFdQUyhzZXR0aW5ncyk7XG5cbiAgICAgICAgaWYgKCFycXN0V1BTLnByb2Nlc3NSZXF1ZXN0U3RyaW5nKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVuYWJsZSB0byBwcm9jZXNzIHJlcXVlc3QgIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBycXN0V1BTLnJlcXVlc3RTdHJpbmc7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWx0aVJlcXVlc3RXUFM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _AltiRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AltiRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js\");\n\n\n\n\n/**\n * @classdesc\n *\n * Classe de gestion des param. des requêtes de type POINT du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiElevationRequest\n * @param {Object} options - options\n * @param {Boolean}  options.zonly - false|true\n *\n * @private\n */\nfunction AltiElevationRequest (options) {\n    if (!(this instanceof AltiElevationRequest)) {\n        throw new TypeError(\"AltiElevationRequest constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"AltiElevationRequest\";\n\n    // appel du constructeur par heritage\n    _AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur AltiElevationRequest ()]\");\n\n    /**\n     * Z uniquement.\n     * true|false\n     */\n    this.zonly = this.options.zonly || false; // test des options héritées !\n}\n\n/**\n * @lends module:AltiElevationRequest#\n */\n\nAltiElevationRequest.prototype = Object.create(_AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype, {\n\n    /**\n     * Setter/getter pour \"zonly\"\n     */\n    zonly : {\n        /** getter */\n        get : function () {\n            return this._zonly;\n        },\n        /** setter */\n        set : function (z) {\n            this._zonly = z;\n        }\n    }\n\n});\n\n/**\n * Constructeur (alias)\n */\nAltiElevationRequest.prototype.constructor = AltiElevationRequest;\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Array}\n */\nAltiElevationRequest.prototype.getData = function () {\n    // par glop..., appel de AltiRequest::getData () !\n    var map = [];\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    // map.push({k : \"delimiter\", v : this.delimiter}); // FIXME on retire le param \"delimiter\"\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"zonly\",\n        v : this.zonly\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiElevationRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXF1ZXN0L21vZGVsL0FsdGlFbGV2YXRpb25SZXF1ZXN0LmpzPzNkM2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUN1RDtBQUNmOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLG9EQUFXOztBQUVmLGtCQUFrQiw4REFBTTtBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDLG9EQUFXOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsb0NBQW9DLEVBQUU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVlLG1GQUFvQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9BbHRpL1JlcXVlc3QvbW9kZWwvQWx0aUVsZXZhdGlvblJlcXVlc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uLy4uLy4uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuaW1wb3J0IEFsdGlSZXF1ZXN0IGZyb20gXCIuL0FsdGlSZXF1ZXN0XCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICpcbiAqIENsYXNzZSBkZSBnZXN0aW9uIGRlcyBwYXJhbS4gZGVzIHJlcXXDqnRlcyBkZSB0eXBlIFBPSU5UIGR1IHNlcnZpY2UgYWx0aW1ldHJpcXVlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkFsdGkuUmVxdWVzdC5BbHRpRWxldmF0aW9uUmVxdWVzdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zXG4gKiBAcGFyYW0ge0Jvb2xlYW59ICBvcHRpb25zLnpvbmx5IC0gZmFsc2V8dHJ1ZVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEFsdGlFbGV2YXRpb25SZXF1ZXN0IChvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFsdGlFbGV2YXRpb25SZXF1ZXN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQWx0aUVsZXZhdGlvblJlcXVlc3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb20gZGUgbGEgY2xhc3NlIChoZXJpdGFnZSlcbiAgICAgKi9cbiAgICB0aGlzLkNMQVNTTkFNRSA9IFwiQWx0aUVsZXZhdGlvblJlcXVlc3RcIjtcblxuICAgIC8vIGFwcGVsIGR1IGNvbnN0cnVjdGV1ciBwYXIgaGVyaXRhZ2VcbiAgICBBbHRpUmVxdWVzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5sb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKCk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCJbQ29uc3RydWN0ZXVyIEFsdGlFbGV2YXRpb25SZXF1ZXN0ICgpXVwiKTtcblxuICAgIC8qKlxuICAgICAqIFogdW5pcXVlbWVudC5cbiAgICAgKiB0cnVlfGZhbHNlXG4gICAgICovXG4gICAgdGhpcy56b25seSA9IHRoaXMub3B0aW9ucy56b25seSB8fCBmYWxzZTsgLy8gdGVzdCBkZXMgb3B0aW9ucyBow6lyaXTDqWVzICFcbn1cblxuLyoqXG4gKiBAbGVuZHMgbW9kdWxlOkFsdGlFbGV2YXRpb25SZXF1ZXN0I1xuICovXG5cbkFsdGlFbGV2YXRpb25SZXF1ZXN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQWx0aVJlcXVlc3QucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIvZ2V0dGVyIHBvdXIgXCJ6b25seVwiXG4gICAgICovXG4gICAgem9ubHkgOiB7XG4gICAgICAgIC8qKiBnZXR0ZXIgKi9cbiAgICAgICAgZ2V0IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3pvbmx5O1xuICAgICAgICB9LFxuICAgICAgICAvKiogc2V0dGVyICovXG4gICAgICAgIHNldCA6IGZ1bmN0aW9uICh6KSB7XG4gICAgICAgICAgICB0aGlzLl96b25seSA9IHo7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pO1xuXG4vKipcbiAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gKi9cbkFsdGlFbGV2YXRpb25SZXF1ZXN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFsdGlFbGV2YXRpb25SZXF1ZXN0O1xuXG4vKipcbiAqIFRhYmxlYXUgZGUgY2xlZnMvdmFsZXVycyBwb3VyIHBhcmFtLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuQWx0aUVsZXZhdGlvblJlcXVlc3QucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcGFyIGdsb3AuLi4sIGFwcGVsIGRlIEFsdGlSZXF1ZXN0OjpnZXREYXRhICgpICFcbiAgICB2YXIgbWFwID0gW107XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJsb25cIixcbiAgICAgICAgdiA6IHRoaXMuZ2V0TG9uKClcbiAgICB9KTtcbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcImxhdFwiLFxuICAgICAgICB2IDogdGhpcy5nZXRMYXQoKVxuICAgIH0pO1xuICAgIC8vIG1hcC5wdXNoKHtrIDogXCJkZWxpbWl0ZXJcIiwgdiA6IHRoaXMuZGVsaW1pdGVyfSk7IC8vIEZJWE1FIG9uIHJldGlyZSBsZSBwYXJhbSBcImRlbGltaXRlclwiXG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJpbmRlbnRcIixcbiAgICAgICAgdiA6IHRoaXMuaW5kZW50XG4gICAgfSk7XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJjcnNcIixcbiAgICAgICAgdiA6IHRoaXMuY3JzXG4gICAgfSk7XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJ6b25seVwiLFxuICAgICAgICB2IDogdGhpcy56b25seVxuICAgIH0pO1xuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwiZm9ybWF0XCIsXG4gICAgICAgIHYgOiB0aGlzLmZvcm1hdFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hcDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFsdGlFbGV2YXRpb25SZXF1ZXN0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js ***!
  \************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _AltiRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AltiRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js\");\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes de type PROFIL du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiProfilRequest\n * @param {Object}   options - options\n * @param {String}   options.sampling - 3\n *\n * @private\n */\nfunction AltiProfilRequest (options) {\n    if (!(this instanceof AltiProfilRequest)) {\n        throw new TypeError(\"AltiProfilRequest constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"AltiProfilRequest\";\n\n    // appel du constructeur par heritage\n    _AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur AltiProfilRequest ()]\");\n\n    /**\n     * Sampling\n     * Par defaut, 3\n     */\n    this.sampling = this.options.sampling || 3; // test des options héritées !\n}\n\n/**\n * @lends module:AltiProfilRequest#\n */\n\nAltiProfilRequest.prototype = Object.create(_AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype, {\n\n    /**\n     * Setter/getter pour \"sampling\"\n     */\n    sampling : {\n        /** getter */\n        get : function () {\n            return this._sampling;\n        },\n        /** setter */\n        set : function (value) {\n            this._sampling = value;\n        }\n    }\n});\n\n/**\n * Constructeur (alias)\n */\nAltiProfilRequest.prototype.constructor = AltiProfilRequest;\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]}\n */\nAltiProfilRequest.prototype.getData = function () {\n    // par glop..., appel de AltiRequest::getData () !\n    var map = [];\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    // map.push({k : \"delimiter\", v : this.delimiter}); // FIXME on retire le param \"delimiter\"\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"sampling\",\n        v : this.sampling\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiProfilRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXF1ZXN0L21vZGVsL0FsdGlQcm9maWxSZXF1ZXN0LmpzP2FmZjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUN1RDtBQUNmOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxvREFBVzs7QUFFZixrQkFBa0IsOERBQU07QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDRDQUE0QyxvREFBVzs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsb0NBQW9DLEVBQUU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVlLGdGQUFpQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9BbHRpL1JlcXVlc3QvbW9kZWwvQWx0aVByb2ZpbFJlcXVlc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uLy4uLy4uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuaW1wb3J0IEFsdGlSZXF1ZXN0IGZyb20gXCIuL0FsdGlSZXF1ZXN0XCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogQ2xhc3NlIGRlIGdlc3Rpb24gZGVzIHBhcmFtLiBkZXMgcmVxdcOqdGVzIGRlIHR5cGUgUFJPRklMIGR1IHNlcnZpY2UgYWx0aW1ldHJpcXVlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkFsdGkuUmVxdWVzdC5BbHRpUHJvZmlsUmVxdWVzdFxuICogQHBhcmFtIHtPYmplY3R9ICAgb3B0aW9ucyAtIG9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMuc2FtcGxpbmcgLSAzXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gQWx0aVByb2ZpbFJlcXVlc3QgKG9wdGlvbnMpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQWx0aVByb2ZpbFJlcXVlc3QpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBbHRpUHJvZmlsUmVxdWVzdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vbSBkZSBsYSBjbGFzc2UgKGhlcml0YWdlKVxuICAgICAqL1xuICAgIHRoaXMuQ0xBU1NOQU1FID0gXCJBbHRpUHJvZmlsUmVxdWVzdFwiO1xuXG4gICAgLy8gYXBwZWwgZHUgY29uc3RydWN0ZXVyIHBhciBoZXJpdGFnZVxuICAgIEFsdGlSZXF1ZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLmxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIltDb25zdHJ1Y3RldXIgQWx0aVByb2ZpbFJlcXVlc3QgKCldXCIpO1xuXG4gICAgLyoqXG4gICAgICogU2FtcGxpbmdcbiAgICAgKiBQYXIgZGVmYXV0LCAzXG4gICAgICovXG4gICAgdGhpcy5zYW1wbGluZyA9IHRoaXMub3B0aW9ucy5zYW1wbGluZyB8fCAzOyAvLyB0ZXN0IGRlcyBvcHRpb25zIGjDqXJpdMOpZXMgIVxufVxuXG4vKipcbiAqIEBsZW5kcyBtb2R1bGU6QWx0aVByb2ZpbFJlcXVlc3QjXG4gKi9cblxuQWx0aVByb2ZpbFJlcXVlc3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShBbHRpUmVxdWVzdC5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIFNldHRlci9nZXR0ZXIgcG91ciBcInNhbXBsaW5nXCJcbiAgICAgKi9cbiAgICBzYW1wbGluZyA6IHtcbiAgICAgICAgLyoqIGdldHRlciAqL1xuICAgICAgICBnZXQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2FtcGxpbmc7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBzZXR0ZXIgKi9cbiAgICAgICAgc2V0IDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zYW1wbGluZyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogQ29uc3RydWN0ZXVyIChhbGlhcylcbiAqL1xuQWx0aVByb2ZpbFJlcXVlc3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWx0aVByb2ZpbFJlcXVlc3Q7XG5cbi8qKlxuICogVGFibGVhdSBkZSBjbGVmcy92YWxldXJzIHBvdXIgcGFyYW0uXG4gKlxuICogQHJldHVybnMge09iamVjdFtdfVxuICovXG5BbHRpUHJvZmlsUmVxdWVzdC5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwYXIgZ2xvcC4uLiwgYXBwZWwgZGUgQWx0aVJlcXVlc3Q6OmdldERhdGEgKCkgIVxuICAgIHZhciBtYXAgPSBbXTtcbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcImxvblwiLFxuICAgICAgICB2IDogdGhpcy5nZXRMb24oKVxuICAgIH0pO1xuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwibGF0XCIsXG4gICAgICAgIHYgOiB0aGlzLmdldExhdCgpXG4gICAgfSk7XG4gICAgLy8gbWFwLnB1c2goe2sgOiBcImRlbGltaXRlclwiLCB2IDogdGhpcy5kZWxpbWl0ZXJ9KTsgLy8gRklYTUUgb24gcmV0aXJlIGxlIHBhcmFtIFwiZGVsaW1pdGVyXCJcbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcImluZGVudFwiLFxuICAgICAgICB2IDogdGhpcy5pbmRlbnRcbiAgICB9KTtcbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcImNyc1wiLFxuICAgICAgICB2IDogdGhpcy5jcnNcbiAgICB9KTtcbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcInNhbXBsaW5nXCIsXG4gICAgICAgIHYgOiB0aGlzLnNhbXBsaW5nXG4gICAgfSk7XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJmb3JtYXRcIixcbiAgICAgICAgdiA6IHRoaXMuZm9ybWF0XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWFwO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQWx0aVByb2ZpbFJlcXVlc3Q7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiRequest\n * @param {Object} options - options\n * @param {Object}   options.positions - tableau de coordonnées lon/lat\n * @param {String}   options.delimiter - \"|\"\n * @param {Boolean}  options.indent - false|true\n * @param {String}   options.crs - \"CRS:84\"\n * @param {String}   options.format - \"JSON|XML\"\n *\n * @private\n */\nfunction AltiRequest (options) {\n    if (!(this instanceof AltiRequest)) {\n        throw new TypeError(\"AltiRequest constructor cannot be called as a function.\");\n    }\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur AltiRequest ()]\");\n\n    /**\n     * Options en paramêtres du constructeur.\n     */\n    this.options = options || {};\n\n    /**\n     * Liste des coordonnées.\n     * @example\n     * var c = [{lon : \"\", lat : \"\"}, {lon : \"\", lat : \"\"}];\n     */\n    this.positions = this.options.positions || [];\n\n    /**\n     * Caractère de séparation.\n     * Par defaut, \"|\".\n     */\n    this.delimiter = this.options.delimiter || \"|\";\n\n    /**\n     * Indentation.\n     * true|false\n     */\n    this.indent = this.options.indent || false;\n\n    /**\n     * Projection.\n     * Par defaut, CRS:84.\n     */\n    this.crs = this.options.crs || \"CRS:84\";\n\n    /**\n     * format de sortie.\n     * Par defaut, \"json\".\n     */\n    this.format = this.options.format || \"json\";\n}\n\n/**\n * CLASSNAME\n */\nAltiRequest.CLASSNAME = \"AltiRequest\";\n\nAltiRequest.prototype = {\n\n    /**\n     * @lends module:AltiRequest#\n     */\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AltiRequest,\n\n    /**\n     * Ajout d\"une liste de coordonnées.\n     *\n     * @param {Object[]} lstPosition - liste de positions\n     * @example\n     * obj.setPositions ([{lon : \"0.15\", lat : \"0.15\"}, {lon : \"1.15\", lat : \"1.15\"}]);\n     */\n    setPositions : function (lstPosition) {\n        var positions = [];\n        for (var i = 0; i < lstPosition.length; i++) {\n            var o = lstPosition[i];\n            if (o.lon && o.lat) {\n                positions.push(o);\n            }\n        }\n\n        this.positions = positions;\n    },\n\n    /**\n     * Liste des coordonnées.\n     *\n     * @param {Int} pos - position\n     * @returns {positions}\n     * @example\n     * obj.getPositions ();  // [{lon : \"\", lat : \"\"}, {lon : \"\", lat : \"\"}]\n     * obj.getPositions (0); // [{lon : \"\", lat : \"\"}]\n     */\n    getPositions : function (pos) {\n        // FIXME test if not a number !?\n        if (!pos) {\n            return this.positions;\n        }\n\n        var index = this.positions.length - 1;\n        if (pos > index || pos < index) {\n            this.logger.warn(\"index out of range !\");\n            return this.positions;\n        }\n\n        return this.positions[pos];\n    },\n\n    /**\n     * Ajout d\"une liste de coordonnées.\n     *\n     * @param {Object[]} lstPosition - liste de positions\n     * @example\n     * obj.addPositions ([{lon : \"0.15\", lat : \"0.15\"}, {lon : \"1.15\", lat : \"1.15\"}]);\n     */\n    addPositions : function (lstPosition) {\n        for (var i = 0; i < lstPosition.length; i++) {\n            var o = lstPosition[i];\n            if (o.lon && o.lat) {\n                this.positions.push(lstPosition[i]);\n            }\n        }\n    },\n\n    /**\n     * Retourne la liste des longitudes avec un caractère de séparation.\n     *\n     * @returns {String} - une liste de longitudes\n     * @example\n     * // out : 0.2367|2.1570|43.789|...\n     */\n    getLon : function () {\n        var lstLon = [];\n        for (var i = 0; i < this.positions.length; i++) {\n            lstLon.push(this.positions[i].lon);\n        }\n        this.logger.trace(lstLon);\n        return lstLon.join(this.delimiter);\n    },\n\n    /**\n     * Retourne la liste des lattitudes avec un caractère de séparation.\n     *\n     * @returns {String} - une liste de lattitudes\n     * @example\n     * // out : 0.2367|2.1570|43.789|...\n     */\n    getLat : function () {\n        var lstLat = [];\n        for (var i = 0; i < this.positions.length; i++) {\n            lstLat.push(this.positions[i].lat);\n        }\n        this.logger.trace(lstLat);\n        return lstLat.join(this.delimiter);\n    }\n\n};\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]}\n */\nAltiRequest.prototype.getData = function () {\n    var map = [];\n\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    map.push({\n        k : \"delimiter\",\n        v : this.delimiter\n    });\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Formats_XML__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Formats/XML */ \"./node_modules/geoportal-access-lib/src/Formats/XML.js\");\n/* harmony import */ var _Formats_AltiResponseReader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Formats/AltiResponseReader */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js\");\n/* harmony import */ var _model_AltiResponse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model/AltiResponse */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js\");\n/* harmony import */ var _model_Elevation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./model/Elevation */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module AltiResponseFactory\n * @private\n * @alias Gp.Services.Alti.Response.AltiResponseFactory\n */\n\n\n\n\n\n\n\n\nvar AltiResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiResponseFactory\");\n        logger.trace([\"AltiResponseFactory::build()\"]);\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                switch (options.outputFormat) {\n                    case \"xml\":\n                        logger.trace(\"analyze response : xml\");\n\n                        try {\n                            var p = new _Formats_XML__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                                reader : _Formats_AltiResponseReader__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n                            });\n\n                            if (typeof options.response === \"string\") {\n                                p.setXMLString(options.response);\n                            } else {\n                                p.setXMLDoc(options.response);\n                            }\n\n                            data = p.parse();\n\n                            if (!data) {\n                                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION_2\"));\n                            }\n                        } catch (e) {\n                            var message = e.message;\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", message),\n                                status : 200,\n                                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        break;\n\n                    case \"json\":\n                        logger.trace(\"analyze response : json\");\n                        logger.trace(\"analyze response : \", typeof options.response);\n\n                        var JSONResponse;\n                        if (typeof options.response === \"string\") {\n                            JSONResponse = JSON.parse(options.response);\n                        } else {\n                            JSONResponse = options.response;\n                        }\n\n                        // le service renvoie t il une erreur ?\n                        if (JSONResponse.error) {\n                            // ex. {\"error\": {\"code\": \"BAD_PARAMETER\",\"description\": \"The values () cannot be parsed as a valid longitude (double value such as -180 < lat < 180).\"}}\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", JSONResponse.error.description),\n                                status : 200,\n                                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        // analyse de la reponse\n                        if (JSONResponse) {\n                            var elevations = JSONResponse.elevations;\n                            var altiResponse = new _model_AltiResponse__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n                            var elevation;\n                            if (Array.isArray(elevations) && elevations.length) {\n                                for (var i = 0; i < elevations.length; i++) {\n                                    elevation = new _model_Elevation__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n\n                                    if (typeof elevations[i] === \"object\") {\n                                        // elevations[i] est un objet elevation\n                                        if (elevations[i].lon) {\n                                            elevation.lon = elevations[i].lon;\n                                        }\n                                        if (elevations[i].lat) {\n                                            elevation.lat = elevations[i].lat;\n                                        }\n                                        if (elevations[i].z) {\n                                            elevation.z = elevations[i].z;\n                                        }\n                                        if (elevations[i].acc) {\n                                            elevation.acc = elevations[i].acc;\n                                        }\n                                    } else if (typeof elevations[i] === \"number\") {\n                                        // elevations[i] est un nombre, dans le cas de zonly=true notamment\n                                        elevation.z = elevations[i];\n                                    }\n\n                                    if (Array.isArray(altiResponse.elevations)) {\n                                        altiResponse.elevations.push(elevation);\n                                    }\n                                }\n                            }\n                            data = altiResponse;\n                        }\n\n                        if (!data) {\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE_2\"),\n                                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_UNKERR,\n                                status : -1\n                            }));\n                            return;\n                        }\n                        break;\n\n                    default:\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                            message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_FORMAT_2\"),\n                            type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_UNKERR,\n                            status : -1\n                        }));\n                        return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                } else if (data.error) {\n                    var errorMess = data.error.description;\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", errorMess),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiResponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js ***!
  \********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Response object for {@link module:Services~getAltitude Gp.Services.getAltitude ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Array.<Gp.Services.Alti.Elevation>} elevations - Elevations array.\n *\n * @namespace\n * @alias Gp.Services.AltiResponse\n */\nfunction AltiResponse () {\n    if (!(this instanceof AltiResponse)) {\n        throw new TypeError(\"AltiResponse constructor cannot be called as a function.\");\n    }\n\n    this.elevations = [];\n}\n\nAltiResponse.prototype = {\n\n    constructor : AltiResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiResponse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXNwb25zZS9tb2RlbC9BbHRpUmVzcG9uc2UuanM/NmY2MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0Esd0JBQXdCLDZEQUE2RDtBQUNyRjtBQUNBLGNBQWMsbUNBQW1DO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFZSwyRUFBWSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9BbHRpL1Jlc3BvbnNlL21vZGVsL0FsdGlSZXNwb25zZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVzcG9uc2Ugb2JqZWN0IGZvciB7QGxpbmsgbW9kdWxlOlNlcnZpY2VzfmdldEFsdGl0dWRlIEdwLlNlcnZpY2VzLmdldEFsdGl0dWRlICgpfSBpbnZvY2F0aW9uIHdoZW4gc3VjY2Vzc2Z1bC4gUmVjZWl2ZWQgYXMgdGhlIGFyZ3VtZW50IG9mIG9uU3VjY2VzcyBjYWxsYmFjayBmdW5jdGlvbi5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxHcC5TZXJ2aWNlcy5BbHRpLkVsZXZhdGlvbj59IGVsZXZhdGlvbnMgLSBFbGV2YXRpb25zIGFycmF5LlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5BbHRpUmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gQWx0aVJlc3BvbnNlICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQWx0aVJlc3BvbnNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQWx0aVJlc3BvbnNlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5lbGV2YXRpb25zID0gW107XG59XG5cbkFsdGlSZXNwb25zZS5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IEFsdGlSZXNwb25zZVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBbHRpUmVzcG9uc2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Single elevation object returned by underlying web service. Contains at least, one elevation (z). May also contain point coordinates and elevation accuracy if \"zonly\" parameter wasn't set to true.\n *\n * @property {Float} lat - Point latitude. (only if zonly=false)\n * @property {Float} lon - Point longitude. (only if zonly=false)\n * @property {Float} z - Point elevation.\n * @property {Float} acc - Accuracy of elevation for this point. (only if zonly=false)\n *\n * @namespace\n * @alias Gp.Services.Alti.Elevation\n */\nfunction Elevation () {\n    if (!(this instanceof Elevation)) {\n        throw new TypeError(\"Elevation constructor cannot be called as a function.\");\n    }\n\n    this.z = null;\n}\n\nElevation.prototype = {\n\n    constructor : Elevation\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Elevation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXNwb25zZS9tb2RlbC9FbGV2YXRpb24uanM/YzY2OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsTUFBTTtBQUNwQixjQUFjLE1BQU07QUFDcEIsY0FBYyxNQUFNO0FBQ3BCLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUsd0VBQVMsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXNwb25zZS9tb2RlbC9FbGV2YXRpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogU2luZ2xlIGVsZXZhdGlvbiBvYmplY3QgcmV0dXJuZWQgYnkgdW5kZXJseWluZyB3ZWIgc2VydmljZS4gQ29udGFpbnMgYXQgbGVhc3QsIG9uZSBlbGV2YXRpb24gKHopLiBNYXkgYWxzbyBjb250YWluIHBvaW50IGNvb3JkaW5hdGVzIGFuZCBlbGV2YXRpb24gYWNjdXJhY3kgaWYgXCJ6b25seVwiIHBhcmFtZXRlciB3YXNuJ3Qgc2V0IHRvIHRydWUuXG4gKlxuICogQHByb3BlcnR5IHtGbG9hdH0gbGF0IC0gUG9pbnQgbGF0aXR1ZGUuIChvbmx5IGlmIHpvbmx5PWZhbHNlKVxuICogQHByb3BlcnR5IHtGbG9hdH0gbG9uIC0gUG9pbnQgbG9uZ2l0dWRlLiAob25seSBpZiB6b25seT1mYWxzZSlcbiAqIEBwcm9wZXJ0eSB7RmxvYXR9IHogLSBQb2ludCBlbGV2YXRpb24uXG4gKiBAcHJvcGVydHkge0Zsb2F0fSBhY2MgLSBBY2N1cmFjeSBvZiBlbGV2YXRpb24gZm9yIHRoaXMgcG9pbnQuIChvbmx5IGlmIHpvbmx5PWZhbHNlKVxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5BbHRpLkVsZXZhdGlvblxuICovXG5mdW5jdGlvbiBFbGV2YXRpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFbGV2YXRpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFbGV2YXRpb24gY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLnogPSBudWxsO1xufVxuXG5FbGV2YXRpb24ucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBFbGV2YXRpb25cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgRWxldmF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoComplete/AutoComplete.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoComplete/AutoComplete.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _Response_AutoCompleteResponseFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Response/AutoCompleteResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/AutoCompleteResponseFactory.js\");\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'autocomplétion du Géoportail :\n * envoi de la requête construite selon les paramètres en options,\n * éventuellement parsing et analyse  de la réponse,\n * retour d'une réponse en paramètre de la fonction onSuccess.\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.AutoComplete\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} options.text - La chaîne de caractère à compléter.\n *      Cette chaîne n'est pas \"URL encodée\".\n *      C'est l'API qui s'occupe de l'encoder pour l'inclure dans la requête.\n *\n * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Type de l'objet recherché.\n *      Le service d'autocomplétion du Géoportail permet de rechercher des toponymes 'PostionOfInterest' et/ou des adresses postales 'StreetAddress'.\n *      D'autres types pourront être rajoutés selon l'évolution du service.\n *      Par défaut, type = ['StreetAddress'].\n *\n * @param {Array.<String>} [options.filterOptions.territory] - Limitation de la zone de recherche de localisants.\n *      Le service d'autocomplétion du Géoportail permet de limiter la recherche à la métropole et la Corse : options.filterOptions.territory = ['METROPOLE'],\n *      DOMS TOMS : options.filterOptions.territory = ['DOMTOM'], ou à une liste de départements : options.filterOptions.territory = ['31', '34']\n *      Pas de valeur par défaut.\n *      La valeur par défaut est donc celle du service.\n *      Le service d'autocomplétion du Géoportail renvoie toutes les informations quand aucun territoire n'est spécifié.\n *\n * @param {Number} [options.maximumResponses = 10] - Nombre de réponses maximal que l'on souhaite recevoir.\n *      Pas de valeur par défaut.\n *      La valeur par défaut sera donc celle du service : 10.\n *\n * @example\n *   var options = {\n *      // options communes aux services\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      text : \"\",\n *      filterOptions : {\n *          type : [\"StreetAddress\"],\n *          territory : ['METROPOLE', 'DOMTOM', '31']\n *      },\n *      maximumResponses : 10\n *   };\n * @private\n */\nfunction AutoComplete (options) {\n    if (!(this instanceof AutoComplete)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"AutoComplete\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"AutoComplete\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLogger(\"Gp.Services.AutoComplete\");\n    this.logger.trace(\"[Constructeur AutoComplete (options)]\");\n\n    if (!options.text) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getMessage(\"PARAM_MISSING\", \"text\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.text = options.text;\n\n    // on definit des filtres par defaut\n    if (!options.filterOptions || typeof options.filterOptions !== \"object\") {\n        this.options.filterOptions = options.filterOptions = {\n            territory : [],\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // FIXME ECMAScript 5 support (valable pour un objet uniquement !)\n    // ceci permet de tester le cas où : object = {}\n    if (Object.keys(options.filterOptions).length === 0) {\n        this.options.filterOptions = {\n            territory : [],\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    this.options.filterOptions.type = options.filterOptions.type || [\"StreetAddress\"];\n    this.options.filterOptions.territory = options.filterOptions.territory || [];\n    this.options.maximumResponses = options.maximumResponses || 10;\n\n    // INFO\n    // le service ne repond pas en mode POST (405 Method Not Allowed)\n    if (this.options.protocol === \"XHR\" && this.options.httpMethod === \"POST\") {\n        this.logger.warn(\"Le service ne gére pas le mode d'interrogation en POST, on bascule sur du GET !\");\n        this.options.httpMethod = \"GET\"; // on surcharge !\n    }\n\n    // attributs d'instances\n\n    /**\n     * Format forcé de la réponse du service : \"json\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"json\";\n}\n\n/**\n * @lends module:AutoComplete#\n */\n\nAutoComplete.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nAutoComplete.prototype.constructor = AutoComplete;\n\n/**\n * (overwrite)\n * Création de la requête\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAutoComplete.prototype.buildRequest = function (error, success) {\n    // ex.\n    // http://wxs.ign.fr/CLEF/ols/apis/completion?\n    // text=Brie-Comt&\n    // type=StreetAddress,PositionOfInterest&\n    // territory=METROPOLE&\n    // maximumResponses=10\n\n    // traitement des param KPV sous forme de tableau\n    var territories = \"\";\n    if (this.options.filterOptions.territory) {\n        territories = this.options.filterOptions.territory.join(\";\");\n    }\n\n    var types = \"\";\n    if (this.options.filterOptions.type) {\n        types = this.options.filterOptions.type.join(\",\");\n    }\n\n    // normalisation de la requete avec param KPV\n    this.request = _Utils_Helper__WEBPACK_IMPORTED_MODULE_4__[\"default\"].normalyzeParameters({\n        text : encodeURIComponent(this.options.text),\n        type : types,\n        terr : territories,\n        maximumResponses : this.options.maximumResponses\n    });\n\n    (!this.request)\n        ? error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_5__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getMessage(\"SERVICE_REQUEST_BUILD\")))\n        : success.call(this, this.request);\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback de succès de l'analyse de la réponse\n */\nAutoComplete.prototype.analyzeResponse = function (error, success) {\n    if (this.response) {\n        var options = {\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onSuccess : success,\n            onError : error,\n            scope : this\n        };\n\n        _Response_AutoCompleteResponseFactory__WEBPACK_IMPORTED_MODULE_1__[\"default\"].build(options);\n    } else {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_5__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoComplete);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoComplete/AutoComplete.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/AutoCompleteResponseFactory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/AutoCompleteResponseFactory.js ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _model_AutoCompleteResponse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/AutoCompleteResponse */ \"./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/AutoCompleteResponse.js\");\n/* harmony import */ var _model_SuggestedLocation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/SuggestedLocation */ \"./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/SuggestedLocation.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module AutoCompleteResponseFactory\n * @private\n * @alias Gp.Services.AutoComplete.Response.AutoCompleteResponseFactory\n */\n\n\n\n\n\n\nvar AutoCompleteResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AutoCompleteResponseFactory\");\n        logger.trace([\"AutoCompleteResponseFactory::build()\"]);\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                var JSONResponse;\n                if (typeof options.response === \"string\") {\n                    JSONResponse = JSON.parse(options.response);\n                } else {\n                    JSONResponse = options.response;\n                }\n\n                // analyse de la réponse\n                if (JSONResponse) {\n                    // le service renvoie t il une erreur ?\n                    if (JSONResponse.error) {\n                        // ex. ?\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                            message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", JSONResponse.error.description),\n                            status : JSONResponse.error.code,\n                            type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n                        }));\n                        return;\n                    }\n\n                    // création de l'objet réponse\n                    data = new _model_AutoCompleteResponse__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n                    // boucle sur les résultats de l'autocomplétion\n                    if (JSONResponse.results && Array.isArray(JSONResponse.results)) {\n                        var suggestedLocation;\n\n                        for (var i = 0; i < JSONResponse.results.length; i++) {\n                            var result = JSONResponse.results[i];\n                            suggestedLocation = new _model_SuggestedLocation__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n\n                            if (suggestedLocation) {\n                                if (result && result.country === \"StreetAddress\") {\n                                    suggestedLocation.street = result.street;\n                                    suggestedLocation.type = \"StreetAddress\";\n                                } else if (result && result.country === \"PositionOfInterest\") {\n                                    suggestedLocation.poi = result.street;\n                                    suggestedLocation.kind = result.kind;\n                                    suggestedLocation.type = \"PositionOfInterest\";\n                                }\n\n                                if (suggestedLocation.position) {\n                                    suggestedLocation.position.x = result.x;\n                                    suggestedLocation.position.y = result.y;\n                                }\n\n                                suggestedLocation.commune = result.city;\n                                suggestedLocation.fullText = result.fulltext;\n                                suggestedLocation.postalCode = result.zipcode;\n                                suggestedLocation.classification = result.classification;\n                            }\n                            // Ajout du résultat au tableau reverseGeocodedLocations de geocodedLocation\n                            data.suggestedLocations.push(suggestedLocation);\n                        }\n                    } else {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_FORMAT_3\")));\n                        return;\n                    }\n\n                    if (!data.suggestedLocations.length) {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_FORMAT_3\")));\n                        return;\n                    }\n                }\n\n                if (!data) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE_2\"),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_UNKERR,\n                        status : -1\n                    }));\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            // si la réponse (xmlString) est vide, on appelle le callback d'erreur\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        // si tout s'est bien passé, on appelle le callback de succès\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoCompleteResponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/AutoCompleteResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/AutoCompleteResponse.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/AutoCompleteResponse.js ***!
  \************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Response object for {@link module:Services~autoComplete Gp.Services.autoComplete ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Array.<Gp.Services.AutoComplete.SuggestedLocation>} suggestedLocations - SuggestedLocations array.\n *\n * @namespace\n * @alias Gp.Services.AutoCompleteResponse\n */\nfunction AutoCompleteResponse () {\n    if (!(this instanceof AutoCompleteResponse)) {\n        throw new TypeError(\"AutoCompleteResponse constructor cannot be called as a function.\");\n    }\n\n    this.suggestedLocations = [];\n}\n\nAutoCompleteResponse.prototype = {\n\n    constructor : AutoCompleteResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoCompleteResponse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbXBsZXRlL1Jlc3BvbnNlL21vZGVsL0F1dG9Db21wbGV0ZVJlc3BvbnNlLmpzPzA3ZjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBLHdCQUF3QiwrREFBK0Q7QUFDdkY7QUFDQSxjQUFjLG1EQUFtRDtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUsbUZBQW9CLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0F1dG9Db21wbGV0ZS9SZXNwb25zZS9tb2RlbC9BdXRvQ29tcGxldGVSZXNwb25zZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVzcG9uc2Ugb2JqZWN0IGZvciB7QGxpbmsgbW9kdWxlOlNlcnZpY2VzfmF1dG9Db21wbGV0ZSBHcC5TZXJ2aWNlcy5hdXRvQ29tcGxldGUgKCl9IGludm9jYXRpb24gd2hlbiBzdWNjZXNzZnVsLiBSZWNlaXZlZCBhcyB0aGUgYXJndW1lbnQgb2Ygb25TdWNjZXNzIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEdwLlNlcnZpY2VzLkF1dG9Db21wbGV0ZS5TdWdnZXN0ZWRMb2NhdGlvbj59IHN1Z2dlc3RlZExvY2F0aW9ucyAtIFN1Z2dlc3RlZExvY2F0aW9ucyBhcnJheS5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuQXV0b0NvbXBsZXRlUmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gQXV0b0NvbXBsZXRlUmVzcG9uc2UgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBdXRvQ29tcGxldGVSZXNwb25zZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkF1dG9Db21wbGV0ZVJlc3BvbnNlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5zdWdnZXN0ZWRMb2NhdGlvbnMgPSBbXTtcbn1cblxuQXV0b0NvbXBsZXRlUmVzcG9uc2UucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBBdXRvQ29tcGxldGVSZXNwb25zZVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBdXRvQ29tcGxldGVSZXNwb25zZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/AutoCompleteResponse.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/SuggestedLocation.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/SuggestedLocation.js ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Single SuggestedLocation Object returned by underlying web service.\n * Each suggested location represents a street address (\"StreetAddress\") or a place name (\"PositionOfInterest\").\n *\n * @property {String} type - Suggested location type : \"StreetAddress\" ou \"PositionOfInterest\"\n * @property {Gp.Point} position - Position of the suggested location given in requested coordinates system.\n * @property {String} commune - Suggested municipality\n * @property {String} fullText - Full text representation of the suggested location.\n * @property {String} postalCode - Suggested location postcode\n * @property {Integer} classification - Number used to classify the importance of the place where is the suggested location from 1 (most important) to 7 (less important).\n * @property {String} street - Street name of the suggested location (\"StreetAddress\" only).\n * @property {String} kind - Nature of the suggested location : \"prefecture\", \"monument\", \"commune\", ... for instance (\"PositionOfInterest\" only).\n *\n * @namespace\n * @alias Gp.Services.AutoComplete.SuggestedLocation\n */\nfunction SuggestedLocation () {\n    if (!(this instanceof SuggestedLocation)) {\n        throw new TypeError(\"SuggestedLocation constructor cannot be called as a function.\");\n    }\n\n    /* REPONSE :\n        {\n           \"status\" : \"OK\",\n           \"results\" : [\n              {\n                 \"country\":\"PositionOfInterest\",\n                 \"x\":-1.559185,\n                 \"y\":47.952603,\n                 \"city\":\"Brie\",\n                 \"zipcode\":\"35150\",\n                 \"street\":\"corbe\",\n                 \"kind\":\"Lieu-dit habité\",\n                 \"fulltext\":\"corbe, 35150 Brie\",\n                 \"classification\":6\n              },\n              {\n                 \"country\":\"StreetAddress\",\n                 \"x\":1.538295,\n                 \"y\":43.19646,\n                 \"city\":\"Brie\",\n                 \"zipcode\":\"09700\",\n                 \"street\":\"courreste\",\n                 \"kind\":\"\",\n                 \"fulltext\":\"courreste, 09700 Brie\",\n                 \"classification\":7\n              }\n           ]\n        }\n    */\n\n    /* REPONSE EN ERREUR\n        {\n            status : \"ERROR\",\n            results : [ ]\n        }\n    */\n\n    /**\n     * Suggested location type : \"StreetAddress\" ou \"PositionOfInterest\"\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * Position of the suggested location given in requested coordinates system.\n     * @type {Gp.Point}\n     */\n    this.position = {\n        x : null,\n        y : null\n    };\n\n    /**\n     * Suggested municipality\n     * @type {String}\n     */\n    this.commune = null;\n\n    /**\n     * Full text representation of the suggested location.\n     * @type {String}\n     */\n    this.fullText = null;\n\n    /**\n     * Suggested location postcode\n     * @type {Number}\n     */\n    this.postalCode = null;\n\n    /**\n     * Number used to classify the importance of the place where is the suggested location from 1 (most important) to 7 (less important).\n     * @type {Integer}\n     */\n    this.classification = null;\n\n    /**\n     * Street name of the suggested location (\"StreetAddress\" only).\n     * @type {String}\n     */\n    this.street = null;\n\n    /**\n     * Place name of the suggested location (\"PositionOfInterest\" only).\n     * @type {String}\n     */\n    this.poi = null;\n\n    /**\n     * Nature of the suggested location : \"prefecture\", \"monument\", \"commune\", ... for instance (\"PositionOfInterest\" only).\n     * @type {String}\n     */\n    this.kind = null;\n}\n\nSuggestedLocation.prototype = {\n\n    constructor : SuggestedLocation\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SuggestedLocation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbXBsZXRlL1Jlc3BvbnNlL21vZGVsL1N1Z2dlc3RlZExvY2F0aW9uLmpzP2FjZjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLFNBQVM7QUFDdkIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFZSxnRkFBaUIsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbXBsZXRlL1Jlc3BvbnNlL21vZGVsL1N1Z2dlc3RlZExvY2F0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFNpbmdsZSBTdWdnZXN0ZWRMb2NhdGlvbiBPYmplY3QgcmV0dXJuZWQgYnkgdW5kZXJseWluZyB3ZWIgc2VydmljZS5cbiAqIEVhY2ggc3VnZ2VzdGVkIGxvY2F0aW9uIHJlcHJlc2VudHMgYSBzdHJlZXQgYWRkcmVzcyAoXCJTdHJlZXRBZGRyZXNzXCIpIG9yIGEgcGxhY2UgbmFtZSAoXCJQb3NpdGlvbk9mSW50ZXJlc3RcIikuXG4gKlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHR5cGUgLSBTdWdnZXN0ZWQgbG9jYXRpb24gdHlwZSA6IFwiU3RyZWV0QWRkcmVzc1wiIG91IFwiUG9zaXRpb25PZkludGVyZXN0XCJcbiAqIEBwcm9wZXJ0eSB7R3AuUG9pbnR9IHBvc2l0aW9uIC0gUG9zaXRpb24gb2YgdGhlIHN1Z2dlc3RlZCBsb2NhdGlvbiBnaXZlbiBpbiByZXF1ZXN0ZWQgY29vcmRpbmF0ZXMgc3lzdGVtLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGNvbW11bmUgLSBTdWdnZXN0ZWQgbXVuaWNpcGFsaXR5XG4gKiBAcHJvcGVydHkge1N0cmluZ30gZnVsbFRleHQgLSBGdWxsIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHN1Z2dlc3RlZCBsb2NhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwb3N0YWxDb2RlIC0gU3VnZ2VzdGVkIGxvY2F0aW9uIHBvc3Rjb2RlXG4gKiBAcHJvcGVydHkge0ludGVnZXJ9IGNsYXNzaWZpY2F0aW9uIC0gTnVtYmVyIHVzZWQgdG8gY2xhc3NpZnkgdGhlIGltcG9ydGFuY2Ugb2YgdGhlIHBsYWNlIHdoZXJlIGlzIHRoZSBzdWdnZXN0ZWQgbG9jYXRpb24gZnJvbSAxIChtb3N0IGltcG9ydGFudCkgdG8gNyAobGVzcyBpbXBvcnRhbnQpLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHN0cmVldCAtIFN0cmVldCBuYW1lIG9mIHRoZSBzdWdnZXN0ZWQgbG9jYXRpb24gKFwiU3RyZWV0QWRkcmVzc1wiIG9ubHkpLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGtpbmQgLSBOYXR1cmUgb2YgdGhlIHN1Z2dlc3RlZCBsb2NhdGlvbiA6IFwicHJlZmVjdHVyZVwiLCBcIm1vbnVtZW50XCIsIFwiY29tbXVuZVwiLCAuLi4gZm9yIGluc3RhbmNlIChcIlBvc2l0aW9uT2ZJbnRlcmVzdFwiIG9ubHkpLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5BdXRvQ29tcGxldGUuU3VnZ2VzdGVkTG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gU3VnZ2VzdGVkTG9jYXRpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdWdnZXN0ZWRMb2NhdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1Z2dlc3RlZExvY2F0aW9uIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgLyogUkVQT05TRSA6XG4gICAgICAgIHtcbiAgICAgICAgICAgXCJzdGF0dXNcIiA6IFwiT0tcIixcbiAgICAgICAgICAgXCJyZXN1bHRzXCIgOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6XCJQb3NpdGlvbk9mSW50ZXJlc3RcIixcbiAgICAgICAgICAgICAgICAgXCJ4XCI6LTEuNTU5MTg1LFxuICAgICAgICAgICAgICAgICBcInlcIjo0Ny45NTI2MDMsXG4gICAgICAgICAgICAgICAgIFwiY2l0eVwiOlwiQnJpZVwiLFxuICAgICAgICAgICAgICAgICBcInppcGNvZGVcIjpcIjM1MTUwXCIsXG4gICAgICAgICAgICAgICAgIFwic3RyZWV0XCI6XCJjb3JiZVwiLFxuICAgICAgICAgICAgICAgICBcImtpbmRcIjpcIkxpZXUtZGl0IGhhYml0w6lcIixcbiAgICAgICAgICAgICAgICAgXCJmdWxsdGV4dFwiOlwiY29yYmUsIDM1MTUwIEJyaWVcIixcbiAgICAgICAgICAgICAgICAgXCJjbGFzc2lmaWNhdGlvblwiOjZcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjpcIlN0cmVldEFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgXCJ4XCI6MS41MzgyOTUsXG4gICAgICAgICAgICAgICAgIFwieVwiOjQzLjE5NjQ2LFxuICAgICAgICAgICAgICAgICBcImNpdHlcIjpcIkJyaWVcIixcbiAgICAgICAgICAgICAgICAgXCJ6aXBjb2RlXCI6XCIwOTcwMFwiLFxuICAgICAgICAgICAgICAgICBcInN0cmVldFwiOlwiY291cnJlc3RlXCIsXG4gICAgICAgICAgICAgICAgIFwia2luZFwiOlwiXCIsXG4gICAgICAgICAgICAgICAgIFwiZnVsbHRleHRcIjpcImNvdXJyZXN0ZSwgMDk3MDAgQnJpZVwiLFxuICAgICAgICAgICAgICAgICBcImNsYXNzaWZpY2F0aW9uXCI6N1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICovXG5cbiAgICAvKiBSRVBPTlNFIEVOIEVSUkVVUlxuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXMgOiBcIkVSUk9SXCIsXG4gICAgICAgICAgICByZXN1bHRzIDogWyBdXG4gICAgICAgIH1cbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU3VnZ2VzdGVkIGxvY2F0aW9uIHR5cGUgOiBcIlN0cmVldEFkZHJlc3NcIiBvdSBcIlBvc2l0aW9uT2ZJbnRlcmVzdFwiXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gb2YgdGhlIHN1Z2dlc3RlZCBsb2NhdGlvbiBnaXZlbiBpbiByZXF1ZXN0ZWQgY29vcmRpbmF0ZXMgc3lzdGVtLlxuICAgICAqIEB0eXBlIHtHcC5Qb2ludH1cbiAgICAgKi9cbiAgICB0aGlzLnBvc2l0aW9uID0ge1xuICAgICAgICB4IDogbnVsbCxcbiAgICAgICAgeSA6IG51bGxcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3VnZ2VzdGVkIG11bmljaXBhbGl0eVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jb21tdW5lID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEZ1bGwgdGV4dCByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3VnZ2VzdGVkIGxvY2F0aW9uLlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5mdWxsVGV4dCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTdWdnZXN0ZWQgbG9jYXRpb24gcG9zdGNvZGVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucG9zdGFsQ29kZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgdXNlZCB0byBjbGFzc2lmeSB0aGUgaW1wb3J0YW5jZSBvZiB0aGUgcGxhY2Ugd2hlcmUgaXMgdGhlIHN1Z2dlc3RlZCBsb2NhdGlvbiBmcm9tIDEgKG1vc3QgaW1wb3J0YW50KSB0byA3IChsZXNzIGltcG9ydGFudCkuXG4gICAgICogQHR5cGUge0ludGVnZXJ9XG4gICAgICovXG4gICAgdGhpcy5jbGFzc2lmaWNhdGlvbiA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTdHJlZXQgbmFtZSBvZiB0aGUgc3VnZ2VzdGVkIGxvY2F0aW9uIChcIlN0cmVldEFkZHJlc3NcIiBvbmx5KS5cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3RyZWV0ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFBsYWNlIG5hbWUgb2YgdGhlIHN1Z2dlc3RlZCBsb2NhdGlvbiAoXCJQb3NpdGlvbk9mSW50ZXJlc3RcIiBvbmx5KS5cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucG9pID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE5hdHVyZSBvZiB0aGUgc3VnZ2VzdGVkIGxvY2F0aW9uIDogXCJwcmVmZWN0dXJlXCIsIFwibW9udW1lbnRcIiwgXCJjb21tdW5lXCIsIC4uLiBmb3IgaW5zdGFuY2UgKFwiUG9zaXRpb25PZkludGVyZXN0XCIgb25seSkuXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmtpbmQgPSBudWxsO1xufVxuXG5TdWdnZXN0ZWRMb2NhdGlvbi5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IFN1Z2dlc3RlZExvY2F0aW9uXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdWdnZXN0ZWRMb2NhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoComplete/Response/model/SuggestedLocation.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/AutoConf.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/AutoConf.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _Response_AutoConfResponseFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Response/AutoConfResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/AutoConfResponseFactory.js\");\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'autoconfiguration du Géoportail\n *\n * @private\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.AutoConf\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} [options.layerId] - Le nom de l'agrégat (couche) dont on veut connaître les informations détaillées.\n *      La présence de cette propriété implique l'utilisation de la deuxième opération du service pour accéder aux informations d'une couche aggrégée.\n *      Dans ce cas, la fonction effectuera quand même dans un premier temps la récupération des informations de l'auto-\n *      configuration complète, sauf si un premier appel à l'autoconf a déjà été fait avec cette clé (i.e. si la variable globale est définie\n *      pour la clé de contrat). Elle ira ensuite chercher les informations des couches agrégées, qui seront ajoutées à la variable globale Gp.Config.\n *\n * @example\n *   var options = {\n *      // options communes aux services\n *      apiKey : \"apikey\",\n *      protocol : 'JSONP', // JSONP|XHR\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      layerId : \"ORTHOIMAGERY.ORTHOPHOTOS.3D$GEOPORTAIL:OGC:WMTS@aggregate\"\n *   };\n */\nfunction AutoConf (options) {\n    if (!(this instanceof AutoConf)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"AutoConf\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"AutoConf\";\n\n    // Autoconf default protocol remains JSONP (#see http://ignf.github.io/geoportal-access-lib/latest/jsdoc/tutorial-optimize-getconfig.html)\n    if (!options) {\n        options = {};\n    }\n    options.protocol = options.protocol || \"JSONP\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Gp.Services.AutoConf\");\n    this.logger.trace(\"[Constructeur AutoConf (options)]\");\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    // gestion de l'url du service par defaut\n    if (!this.options.serverUrl) {\n        // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n        // en fonction du nombre de clés en entrée et du paramètre layerId\n        if (!this.options.serverUrl) {\n            var lstUrlByDefault = _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].AutoConf.url(this.options.apiKey);\n\n            if (!this.options.layerId) {\n                // cas d'une autoconf simple\n                if (Array.isArray(this.options.apiKey) && this.options.apiKey.length > 0) {\n                    // cas d'un tableau de clés en entrée\n                    this.options.serverUrl = lstUrlByDefault.apiKeys;\n                } else {\n                    this.options.serverUrl = lstUrlByDefault.apiKey;\n                }\n            } else {\n                // cas d'une autoconf pour des couches aggrégées\n                this.options.serverUrl = lstUrlByDefault.aggregate + this.options.layerId;\n            }\n        }\n    }\n\n    // INFO\n    // le service ne repond pas en mode POST (405 Method Not Allowed)\n    if (this.options.protocol === \"XHR\" && this.options.httpMethod === \"POST\") {\n        this.logger.warn(\"Le service ne gére pas le mode d'interrogation en POST, on bascule sur du GET !\");\n        this.options.httpMethod = \"GET\"; // on surcharge !\n    }\n\n    // #####################\n    // attributs d'instances\n    // #####################\n\n    /**\n     * Format forcé de la réponse du service : \"xml\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"xml\";\n}\n\n/**\n * @lends module:AutoConf#\n */\n\nAutoConf.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nAutoConf.prototype.constructor = AutoConf;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback de succès de la création de la requête\n */\nAutoConf.prototype.buildRequest = function (error, success) {\n    var scope = typeof window !== \"undefined\" ? window : {};\n\n    if (scope.Gp && scope.Gp.Config && scope.Gp.Config.generalOptions && scope.Gp.Config.layers) {\n        if (scope.Gp.Config.generalOptions.apiKeys[this.options.apiKey]) {\n            if (this.options.layerId) { // cas d'une autoconf + détaillée sur une couche agrégée\n                if (scope.Gp.Config.layers[this.options.layerId] && scope.Gp.Config.layers[this.options.layerId].aggregatedLayers) {\n                    this.logger.warn(\"Gp.Config existe déjà pour cette clé et cette couche\");\n                    this.options.onSuccess.call(this, scope.Gp.Config);\n                    return;\n                }\n            } else {\n                this.logger.warn(\"Gp.Config existe déjà pour cette clé\");\n                this.options.onSuccess.call(this, scope.Gp.Config);\n                return;\n            }\n        }\n    }\n\n    // requete par defaut\n    this.request = \"\";\n\n    // gestion de l'autoconf local\n    // Le fichier en local doit respecter le format de sortie du service.\n    //  - En XHR, le format est en xml\n    //  - En JSONP, le format est en xml encapsulé dans un json avec une fonction de callback\n    //    ex. callback ({\"http\":{\"status\":200,\"error\":null},\"xml\":\"...\"})\n    var bLocal;\n    if (this.options.serverUrl.indexOf(\"http://\") === -1) {\n        bLocal = true;\n    } else {\n        bLocal = false;\n    }\n\n    // FIXME param. KVP optionnel sur un service uniquement (pas sur un autoconf local !)\n    if (!bLocal && this.layerId) {\n        this.request = _Utils_Helper__WEBPACK_IMPORTED_MODULE_2__[\"default\"].normalyzeParameters({\n            layerId : this.layerId\n        });\n    }\n\n    // normalement pas d'erreur d'autoconf...\n    (this.request || this.request === \"\")\n        ? success.call(this, this.request)\n        : error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_REQUEST_BUILD\")));\n};\n\n/**\n * Analyse de la reponse (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback de succès de l'analyse de la réponse\n */\nAutoConf.prototype.analyzeResponse = function (error, success) {\n    if (this.response) {\n        var options = {\n            layerId : this.options.layerId,\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onSuccess : success,\n            onError : error,\n            scope : this\n        };\n\n        _Response_AutoConfResponseFactory__WEBPACK_IMPORTED_MODULE_6__[\"default\"].build(options);\n    } else {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoConf);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/AutoConf.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Formats/AutoConfResponseReader.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Formats/AutoConfResponseReader.js ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Response_model_AutoConfResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Response/model/AutoConfResponse */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/AutoConfResponse.js\");\n/* harmony import */ var _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Response/model/Constraint */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Constraint.js\");\n/* harmony import */ var _Response_model_Format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Response/model/Format */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Format.js\");\n/* harmony import */ var _Response_model_Layer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Response/model/Layer */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Layer.js\");\n/* harmony import */ var _Response_model_Legend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Response/model/Legend */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Legend.js\");\n/* harmony import */ var _Response_model_Metadata__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Response/model/Metadata */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Metadata.js\");\n/* harmony import */ var _Response_model_Originator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Response/model/Originator */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Originator.js\");\n/* harmony import */ var _Response_model_Service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Response/model/Service */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Service.js\");\n/* harmony import */ var _Response_model_Style__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Response/model/Style */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Style.js\");\n/* harmony import */ var _Response_model_Territory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Response/model/Territory */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Territory.js\");\n/* harmony import */ var _Response_model_Thematic__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Response/model/Thematic */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Thematic.js\");\n/* harmony import */ var _Response_model_TileMatrixSet__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Response/model/TileMatrixSet */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixSet.js\");\n/* harmony import */ var _Response_model_TileMatrix__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../Response/model/TileMatrix */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrix.js\");\n/* harmony import */ var _Response_model_TileMatrixLimit__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../Response/model/TileMatrixLimit */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixLimit.js\");\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service d'autoconfiguration du Géoportail\n *      afin de récupérer les informations retournées.\n * @module AutoConfResponseReader\n * @private\n * @alias Gp.Services.AutoConf.Formats.AutoConfResponseReader\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar AutoConfResponseReader = {};\n\n/**\n * version du service d'autoconf\n */\nAutoConfResponseReader.VERSION = \"1.1.0\";\n\n/**\n * Objet stockant les différents namespaces et les URI associées\n */\nAutoConfResponseReader.NAMESPACES = {\n    xmlns : \"http://www.opengis.net/context\",\n    gpp : \"http://api.ign.fr/geoportail\",\n    ows : \"http://www.opengis.net/ows/1.1\",\n    sld : \"http://www.opengis.net/sld\",\n    wmts : \"http://www.opengis.net/wmts/1.0\",\n    xlink : \"http://www.w3.org/1999/xlink\",\n    xsi : \"http://www.w3.org/2001/XMLSchema-instance\"\n};\n\n/**\n * Localisation (URL) du schema de définition du XML (XSD)\n */\nAutoConfResponseReader.SCHEMALOCATION = [\n    \"http://www.opengis.net/context http://wxs.ign.fr/schemas/extContext.xsd http://api.ign.fr/geoportail http://wxs.ign.fr/schemas/autoconf/autoconf.xsd\",\n    \"http://www.opengis.net/context http://wxs.ign.fr/schemas/extContext.xsd http://api.ign.fr/geoportail http://wxs.ign.fr/schemas/autoconf.xsd\"\n];\n\n/**\n * Namespace par défaut du format\n */\nAutoConfResponseReader.DEFAULTPREFIX = \"context\";\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n */\nAutoConfResponseReader.READERS = {\n\n    context : {\n\n        /** ViewContext */\n        ViewContext : function (viewContextNode) {\n            // info : balise \"racine\" de la réponse de l'autoconf\n\n            // vérification de la version du service, et des namespaces de l'en-tête\n            __checkServiceAttributes(viewContextNode);\n\n            // create AutoConfResponse\n            var config = new _Response_model_AutoConfResponse__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n            __getChildNodes(viewContextNode, config);\n\n            return config;\n        },\n\n        // info : /General/Title\n        // ou : /LayerList/Layer/Title\n        /** Title */\n        Title : function (titleNode, data) {\n            if (data && data.generalOptions) { // cas de la variable config générale\n                data.generalOptions.title = __getChildValue(titleNode);\n            } else if (data && data.lyr) { // cas d'une layer\n                data.lyr.title = __getChildValue(titleNode);\n            }\n        },\n\n        // info : /LayerList/Layer/Abstract\n        /** Abstract */\n        Abstract : function (node, data) {\n            if (data && data.lyr) {\n                data.lyr.description = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Services/Server\n        // ou : /LayerList/Server\n        /** Server */\n        Server : function (node, data) {\n            var serverId = node.getAttribute(\"service\");\n            var title = node.getAttribute(\"title\");\n            var version = node.getAttribute(\"version\");\n            if (serverId) {\n                if (data && data.services && typeof data.services === \"object\" && !data.services[serverId]) {\n                    // on est dans la balise Services\n                    var s = new _Response_model_Service__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n                    s.title = title;\n                    s.version = version;\n                    // récupération de l'url du service, dans une balise enfant \"OnlineResource\"\n                    __getChildNodes(node, s);\n                    // ajout du service à la variable config\n                    data.services[serverId] = s;\n                } else if (data && data.lyr) {\n                    // on est dans la balise Layer\n                    if (!data.lyr.serviceParams) {\n                        // si l'objet serviceParams n'a pas encore été créé, on le crée.\n                        data.lyr.serviceParams = {};\n                    }\n                    data.lyr.serviceParams.id = serverId;\n                    data.lyr.serviceParams.version = version;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Services/Server/OnlineResource\n        // ou : /LayerList/Layer/Server/OnlineResource\n        // ou : /LayerList/Layer/Extention/gpp:Layer/gpp:QuickLook/OnlineResource\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend/gpp:LegendURL/OnlineResource\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:MetadataURL/OnlineResource\n        /** OnlineResource */\n        OnlineResource : function (node, service) {\n            if (service && service.hasOwnProperty(\"serverUrl\")) {\n                service.serverUrl = node.getAttribute(\"xlink:href\");\n            }\n        },\n\n        // info : /LayerList\n        /** LayerList */\n        LayerList : function (layerListNode, config) {\n            // liste de balises \"layer\"\n            __getChildNodes(layerListNode, config);\n\n            if (config && config.layers && config.generalOptions && config.services) {\n                // récupération des clés et des couches associées\n                for (var lyr in config.layers) {\n                    if (config.layers.hasOwnProperty(lyr)) {\n                        var layerConfig = config.layers[lyr];\n\n                        // récupération de la clé associée\n                        var apiKeys = layerConfig.apiKeys;\n                        if (apiKeys && Array.isArray(apiKeys)) {\n                            for (var i = 0; i < apiKeys.length; i++) {\n                                // pour chaque clé API, on ajoute la couche\n                                var key = apiKeys[i];\n                                if (config.generalOptions.apiKeys) {\n                                    if (!config.generalOptions.apiKeys[key] || !Array.isArray(config.generalOptions.apiKeys[key])) {\n                                        config.generalOptions.apiKeys[key] = [];\n                                    }\n                                    config.generalOptions.apiKeys[key].push(lyr);\n                                }\n                            }\n                        }\n\n                        // récupération du service associé\n                        var serviceParams = layerConfig.serviceParams;\n                        if (serviceParams && serviceParams.id) {\n                            if (!config.services[serviceParams.id]) {\n                                var s = new _Response_model_Service__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n                                if (serviceParams.serverUrl) {\n                                    s.serverUrl = serviceParams.serverUrl;\n                                }\n                                if (serviceParams.version) {\n                                    s.version = serviceParams.version;\n                                }\n                                config.services[serviceParams.id] = s;\n                            }\n                        }\n\n                        // récupération de la projection associée (dans le cas d'une couche WMTS)\n                        if (layerConfig.wmtsOptions && layerConfig.wmtsOptions.tileMatrixSetLink && config.tileMatrixSets) {\n                            var tmsLink = layerConfig.wmtsOptions.tileMatrixSetLink;\n                            var tileMatrixSets = config.tileMatrixSets;\n                            for (var tms in tileMatrixSets) {\n                                if (tileMatrixSets.hasOwnProperty(tms) && tms === tmsLink) {\n                                    layerConfig.defaultProjection = tileMatrixSets[tms].projection;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        // info : /LayerList/Layer\n        /** Layer */\n        Layer : function (layerNode, config) {\n            if (config && config.layers) {\n                var lyrData = {\n                    lyr : new _Response_model_Layer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](),\n                    lyrId : null\n                };\n\n                var hidden = layerNode.getAttribute(\"hidden\");\n                if (hidden === \"1\") {\n                    lyrData.lyr.hidden = true;\n                } else {\n                    lyrData.lyr.hidden = false;\n                }\n\n                var queryable = layerNode.getAttribute(\"queryable\");\n                if (queryable === \"1\") {\n                    lyrData.lyr.queryable = true;\n                } else {\n                    lyrData.lyr.queryable = false;\n                }\n\n                // on peut avoir les balises : Server, Name, Title, Abstract, DataURL, MetadataURL,\n                // sld:MinScaleDenominator, sld:MaxScaleDenominator, SRS, FormatList, StyleList\n                // DimensionList, Extension\n                __getChildNodes(layerNode, lyrData);\n\n                // si on a bien récupéré l'identifiant de la couche, on s'en sert pour l'ajouter au tableau associatif des couches disponibles\n                if (lyrData.lyrId) {\n                    // Dans le cas des services, on modifie le contexte de l'identifiant.\n                    if (lyrData.lyr.serviceParams && lyrData.lyr.serviceParams.id) {\n                        var serviceid = lyrData.lyr.serviceParams.id;\n                        if (serviceid.toUpperCase().indexOf(\"OPENLS\") !== -1 || serviceid.toUpperCase().indexOf(\"ELEVATION\") !== -1) {\n                            // Il faut changer l'identifiant de la ressource.\n                            var resourceId = lyrData.lyrId.split(\"$\")[0];\n                            lyrData.lyrId = resourceId + \"$\" + serviceid;\n                        }\n                    }\n\n                    // on ajoute l'information dans les attributs de la couche\n                    lyrData.lyr.layerId = lyrData.lyrId;\n                    // et dans le tableau Gp.Config.layers\n                    config.layers[lyrData.lyrId] = lyrData.lyr;\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Name\n        /** TODO : jsdoc block */\n        Name : function (node, lyrData) {\n            if (lyrData && lyrData.lyr) {\n                lyrData.lyr.name = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/SRS (dans le cas des couches WMS ou WFS)\n        /** TODO : jsdoc block */\n        SRS : function (node, lyrData) {\n            // on récupère la projection de la couche (SRS)\n            if (lyrData && lyrData.lyr) {\n                lyrData.lyr.defaultProjection = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/FormatList/Format\n        /** TODO : jsdoc block */\n        Format : function (node, lyrData) {\n            if (lyrData && lyrData.lyr) {\n                var f = new _Response_model_Format__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n                var current = node.getAttribute(\"current\");\n                if (current === \"1\") {\n                    f.current = true;\n                } else {\n                    f.current = false;\n                }\n                f.name = __getChildValue(node);\n                // si on n'a pas encore ajouté de format, on crée le tableau vide\n                if (!lyrData.lyr.formats || !Array.isArray(lyrData.lyr.formats)) {\n                    lyrData.lyr.formats = [];\n                }\n                lyrData.lyr.formats.push(f);\n            }\n        },\n\n        // info : /LayerList/Layer/StyleList/Style\n        /** TODO : jsdoc block */\n        Style : function (node, lyrData) {\n            if (lyrData && lyrData.lyr) {\n                var s = new _Response_model_Style__WEBPACK_IMPORTED_MODULE_8__[\"default\"]();\n                var current = node.getAttribute(\"current\");\n                if (current === \"1\" || current === 1) {\n                    s.current = true;\n                } else {\n                    s.current = false;\n                }\n                if (node.hasChildNodes) {\n                    var children = node.childNodes;\n                    var child;\n                    var childName;\n                    for (var i = 0; i < children.length; i++) {\n                        child = children[i];\n                        if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                            childName = child.localName || child.baseName || child.nodeName;\n                            if (childName === \"Name\") {\n                                s.name = __getChildValue(child);\n                            } else if (childName === \"Title\") {\n                                s.title = __getChildValue(child);\n                            } else if (childName === \"URL\") {\n                                s.url = __getChildValue(child);\n                            }\n                        }\n                    }\n                }\n                // si on n'a pas encore ajouté de style, on crée le tableau vide\n                if (!lyrData.lyr.styles || !Array.isArray(lyrData.lyr.styles)) {\n                    lyrData.lyr.styles = [];\n                }\n                lyrData.lyr.styles.push(s);\n            }\n        },\n\n        // info : /LayerList/Layer/DimensionList/Dimension\n        /** TODO : jsdoc block */\n        Dimension : function (node, lyrData) {\n            // possède des attributs obligatoires : name, units, unitSymbol et userValue\n            // et d'autres attributs facultatifs : default, multipleValues, nearestValue, current\n            var name = node.getAttribute(\"name\");\n            var dim = __getChildValue(node);\n            if (lyrData && lyrData.lyr) {\n                // si on n'a pas encore ajouté de dimension, on crée l'objet vide\n                if (!lyrData.lyr.dimensions) {\n                    lyrData.lyr.dimensions = {};\n                }\n                if (name === \"Type\") {\n                    lyrData.lyr.dimensions.type = dim;\n                } else if (name === \"VisibilityRange\") {\n                    lyrData.lyr.dimensions.visibilityRange = dim;\n                } else if (name === \"VisibilityMode \") {\n                    lyrData.lyr.dimensions.visibilityMode = dim;\n                } else if (name === \"GeometricType\") {\n                    lyrData.lyr.dimensions.geometricType = dim;\n                } else if (name === \"NoDataValue\") {\n                    lyrData.lyr.dimensions.noDataValue = dim;\n                }\n            }\n        }\n\n    },\n\n    gpp : {\n\n        // info : /General/Extension/gpp:General/gpp:Theme\n        /** TODO : jsdoc block */\n        Theme : function (themeNode, config) {\n            if (config && config.generalOptions && config.generalOptions.hasOwnProperty(\"theme\")) {\n                config.generalOptions.theme = __getChildValue(themeNode);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:defaultGMLGFIStyleUrl\n        /** TODO : jsdoc block */\n        defaultGMLGFIStyleUrl : function (node, config) {\n            if (config && config.generalOptions && config.generalOptions.hasOwnProperty(\"defaultGMLGFIStyle\")) {\n                config.generalOptions.defaultGMLGFIStyle = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory\n        /** TODO : jsdoc block */\n        Territory : function (territoryNode, config) {\n            // info : Information to configure the API for this territory\n            var tid = territoryNode.getAttribute(\"id\");\n            if (tid) {\n                // create a new Territory\n                var t = new _Response_model_Territory__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n\n                var isDefault = territoryNode.getAttribute(\"default\");\n                if (isDefault === \"1\") {\n                    t.isDefault = true;\n                } else {\n                    t.isDefault = false;\n                }\n                // read territory informations\n                __getChildNodes(territoryNode, t);\n                // add territory to config\n                if (config && config.territories && typeof config.territories === \"object\") {\n                    config.territories[tid] = t;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:defaultCRS\n        /** TODO : jsdoc block */\n        defaultCRS : function (node, territory) {\n            // info : Identifier for the default Coordinate Reference System (CRS).\n            if (territory && territory.hasOwnProperty(\"defaultCRS\")) {\n                territory.defaultCRS = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:AdditionalCRS\n        // ou : /LayerList/Extension/gpp:Layer/gpp:AdditionalCRS\n        /** TODO : jsdoc block */\n        AdditionalCRS : function (node, data) {\n            // info : Identifier for additional Coordinate Reference System (CRS).\n            // info : data peut être une instance de Territory.js, ou une instance de Layer.js\n            var addCRS = __getChildValue(node);\n            if (addCRS && data) {\n                if (Array.isArray(data.additionalCRS)) { // cas d'un territoire\n                    data.additionalCRS.push(addCRS);\n                } else { // cas d'une couche\n                    // si le tableau n'est pas encore créé\n                    if (!data.additionalProjections || !Array.isArray(data.additionalProjections)) {\n                        data.additionalProjections = [];\n                    }\n                    data.additionalProjections.push(addCRS);\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:DefaultLayer\n        /** TODO : jsdoc block */\n        DefaultLayer : function (node, territory) {\n            var lyr = node.getAttribute(\"layerId\");\n            if (lyr && territory && Array.isArray(territory.defaultLayers)) {\n                territory.defaultLayers.push(lyr);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:BoundingBox\n        // ou : /LayerList/Extension/gpp:Layer/gpp:BoundingBox\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Constraints/gpp:Constraint/gpp:BoundingBox\n        // ou : /LayerList/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/gpp:Constraint/gpp:BoundingBox\n        /** TODO : jsdoc block */\n        BoundingBox : function (node, data) {\n            if (data) {\n                var values = __getChildValue(node).split(\",\");\n                if (values.length === 4) {\n                    // get bbox coordinates (wgs84)\n                    var bbox = {\n                        left : parseFloat(values[0]),\n                        right : parseFloat(values[2]),\n                        top : parseFloat(values[3]),\n                        bottom : parseFloat(values[1])\n                    };\n                    // get temporal extent params (constraint or layer)\n                    var minT = node.getAttribute(\"minT\");\n                    var maxT = node.getAttribute(\"maxT\");\n\n                    if (data.hasOwnProperty(\"geoBBOX\")) { // cas d'un territoire\n                        data.geoBBOX = bbox;\n                    } else if (data.hasOwnProperty(\"bbox\")) { // cas d'une constraint\n                        if (data.bbox.left || data.bbox.right || data.bbox.top || data.bbox.bottom) {\n                            // si on a déjà une bbox, il faut stocker d'autres contraintes\n                            if (!data.multiConstraints) {\n                                data.multiConstraints = [];\n                            }\n                            var newConstraint = new _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                            newConstraint.bbox = bbox;\n                            newConstraint.temporalExtent = [minT, maxT];\n                            data.multiConstraints.push(newConstraint);\n                        } else {\n                            // contrainte classique\n                            data.bbox = bbox;\n                            data.temporalExtent = [minT, maxT];\n                        }\n                    } else { // cas d'une layer\n                        if (!data.globalConstraint) {\n                            data.globalConstraint = new _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                        }\n                        data.globalConstraint.bbox = bbox;\n                        data.globalConstraint.temporalExtent = [minT, maxT];\n                    }\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:Resolution\n        /** TODO : jsdoc block */\n        Resolution : function (node, territory) {\n            // info : The default resolution to display on this territory, in CRS coordinate system\n            var res = __getChildValue(node);\n            if (res && territory && territory.defaultOptions && territory.defaultOptions.hasOwnProperty(\"resolution\")) {\n                territory.defaultOptions.resolution = parseFloat(res);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:Center/gpp:x\n        /** TODO : jsdoc block */\n        x : function (node, territory) {\n            var lon = __getChildValue(node);\n            if (lon && territory && territory.geoCenter && territory.geoCenter.hasOwnProperty(\"lon\")) {\n                territory.geoCenter.lon = parseFloat(lon);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:Center/gpp:y\n        /** TODO : jsdoc block */\n        y : function (node, territory) {\n            var lat = __getChildValue(node);\n            if (lat && territory && territory.geoCenter && territory.geoCenter.hasOwnProperty(\"lat\")) {\n                territory.geoCenter.lat = parseFloat(lat);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Resolutions\n        /** TODO : jsdoc block */\n        Resolutions : function (resNode, config) {\n            // info : List of resolutions in CRS:84 (comma separated values)\n            if (config && config.generalOptions && config.generalOptions.hasOwnProperty(\"wgs84Resolutions\")) {\n                config.generalOptions.wgs84Resolutions = __getChildValue(resNode).split(\",\");\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer\n        /** TODO : jsdoc block */\n        Layer : function (node, lyrData) {\n            // attributs : id, opacity, order, visibleInCatalog, aggregate, more\n            if (lyrData && lyrData.hasOwnProperty(\"lyrId\") && lyrData.lyr) {\n                lyrData.lyrId = node.getAttribute(\"id\");\n                var aggregate = node.getAttribute(\"aggregate\");\n                var more = node.getAttribute(\"more\");\n                if (aggregate || more) {\n                    lyrData.lyr.isAggregate = true;\n                }\n                __getChildNodes(node, lyrData.lyr);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Constraints/gpp:Constraint\n        // ou : /LayerList/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/gpp:Constraint\n        /** TODO : jsdoc block */\n        Constraint : function (node, data) {\n            var c = new _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n            __getChildNodes(node, c);\n            if (data) {\n                // on peut être dans le cas d'un originator ou d'une layer, tous les deux ont l'attribut constraints\n                if (!data.constraints || !Array.isArray(data.constraints)) {\n                    data.constraints = [];\n                }\n\n                // cas de plusieurs contraintes (par ex différents territoires)\n                if (c.multiConstraints && Array.isArray(c.multiConstraints)) {\n                    // on récupère la première contrainte, stockée normalement\n                    var constraint = new _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                    constraint.crs = c.crs;\n                    constraint.bbox = c.bbox;\n                    constraint.minScaleDenominator = c.minScaleDenominator;\n                    constraint.maxScaleDenominator = c.maxScaleDenominator;\n                    constraint.temporalExtent = c.temporalExtent;\n                    data.constraints.push(constraint);\n\n                    // puis on récupère les autres contraintes, à partir de multiConstraints\n                    for (var i = 0; i < c.multiConstraints.length; i++) {\n                        constraint = new _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                        constraint.crs = c.crs;\n                        constraint.minScaleDenominator = c.minScaleDenominator;\n                        constraint.maxScaleDenominator = c.maxScaleDenominator;\n                        constraint.bbox = c.multiConstraints[i].bbox;\n                        constraint.temporalExtent = c.multiConstraints[i].temporalExtent;\n                        data.constraints.push(constraint);\n                    }\n                } else {\n                    // cas d'une contrainte classique\n                    data.constraints.push(c);\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/gpp:Constraint/gpp:CRS\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Constraints/gpp:Constraint/gpp:CRS\n        /** TODO : jsdoc block */\n        CRS : function (node, data) {\n            // nothing to do.\n            if (data && data.hasOwnProperty(\"crs\")) {\n                data.crs = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Thematics/gpp:Thematic\n        /** TODO : jsdoc block */\n        Thematic : function (node, lyr) {\n            if (lyr) {\n                var t = new _Response_model_Thematic__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\n                t.inspire = false;\n                t.name = __getChildValue(node);\n                // si aucune thématique n'a été ajoutée, on crée le tableau vide\n                if (!lyr.thematics || !Array.isArray(lyr.thematics)) {\n                    lyr.thematics = [];\n                }\n                lyr.thematics.push(t);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Thematics/gpp:InspireThematic\n        /** TODO : jsdoc block */\n        InspireThematic : function (node, lyr) {\n            if (lyr) {\n                var t = new _Response_model_Thematic__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\n                t.inspire = true;\n                t.name = __getChildValue(node);\n                // si aucune thématique n'a été ajoutée, on crée le tableau vide\n                if (!lyr.thematics || !Array.isArray(lyr.thematics)) {\n                    lyr.thematics = [];\n                }\n                lyr.thematics.push(t);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator\n        /** TODO : jsdoc block */\n        Originator : function (node, lyr) {\n            if (lyr) {\n                // info : contient des balises Attribution, Logo, URL, et Constraints\n                var o = new _Response_model_Originator__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n                o.name = node.getAttribute(\"name\");\n                __getChildNodes(node, o);\n                // si aucun originator n'a été ajouté, on crée le tableau vide\n                if (!lyr.originators || !Array.isArray(lyr.originators)) {\n                    lyr.originators = [];\n                }\n                lyr.originators.push(o);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Attribution\n        /** TODO : jsdoc block */\n        Attribution : function (node, originator) {\n            if (originator && originator.hasOwnProperty(\"attribution\")) {\n                originator.attribution = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Logo\n        /** TODO : jsdoc block */\n        Logo : function (node, originator) {\n            if (originator && originator.hasOwnProperty(\"logo\")) {\n                originator.logo = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:URL\n        /** TODO : jsdoc block */\n        URL : function (node, originator) {\n            if (originator && originator.hasOwnProperty(\"url\")) {\n                originator.url = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend\n        /** TODO : jsdoc block */\n        Legend : function (node, lyr) {\n            // 2 balises : sld:MinScaleDenominator et gpp:LegendURL\n            var l = new _Response_model_Legend__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n            __getChildNodes(node, l);\n            if (lyr) {\n                // si aucune légende n'a encore été ajoutée, on crée le tableau vide\n                if (!lyr.legends || !Array.isArray(lyr.legends)) {\n                    lyr.legends = [];\n                }\n                lyr.legends.push(l);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend/gpp:LegendURL\n        /** TODO : jsdoc block */\n        LegendURL : function (node, legend) {\n            if (legend && legend.hasOwnProperty(\"format\")) {\n                legend.format = node.getAttribute(\"format\");\n                if (node.hasChildNodes) {\n                    var child = node.childNodes[0];\n                    var childName = child.localName || child.baseName || child.nodeName;\n                    if (childName === \"OnlineResource\" && legend.hasOwnProperty(\"url\")) {\n                        legend.url = child.getAttribute(\"xlink:href\");\n                    }\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:QuickLook\n        /** TODO : jsdoc block */\n        QuickLook : function (node, lyr) {\n            // info : contient une balise OnlineResource avec l'url dans l'attribut \"xlink:href\"\n            if (node.hasChildNodes) {\n                var child = node.childNodes[0];\n                var childName = child.localName || child.baseName || child.nodeName;\n                if (childName === \"OnlineResource\" && lyr) {\n                    lyr.quicklookUrl = child.getAttribute(\"xlink:href\");\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:MetadataURL\n        /** TODO : jsdoc block */\n        MetadataURL : function (node, lyr) {\n            if (lyr) {\n                // info : contient une balise OnlineResource avec l'url dans l'attribut \"xlink:href\"\n                var m = new _Response_model_Metadata__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n                m.format = node.getAttribute(\"format\");\n                if (node.hasChildNodes) {\n                    var child = node.childNodes[0];\n                    var childName = child.localName || child.baseName || child.nodeName;\n                    if (childName === \"OnlineResource\") {\n                        m.url = child.getAttribute(\"xlink:href\");\n                    }\n                }\n                // si aucune metadata n'a été ajoutée, on crée le tableau vide\n                if (!lyr.metadata && !Array.isArray(lyr.metadata)) {\n                    lyr.metadata = [];\n                }\n                lyr.metadata.push(m);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Keys/gpp:Key\n        /** TODO : jsdoc block */\n        Key : function (node, lyr) {\n            if (lyr) {\n                // récupération de la clé API\n                var key = node.getAttribute(\"id\");\n                // si on n'a pas encore ajouté de clé, on crée le tableau vide\n                if (!lyr.apiKeys || !Array.isArray(lyr.apiKeys)) {\n                    lyr.apiKeys = [];\n                }\n                lyr.apiKeys.push(key);\n\n                // récupération de l'url du service avec la clé API\n                var serverUrl = __getChildValue(node);\n                if (!lyr.serviceParams) {\n                    lyr.serviceParams = {};\n                }\n                if (!lyr.serviceParams.serverUrl) {\n                    lyr.serviceParams.serverUrl = {};\n                }\n                if (!lyr.serviceParams.serverUrl[key]) {\n                    lyr.serviceParams.serverUrl[key] = serverUrl;\n                }\n            }\n        }\n\n    },\n\n    ows : {\n        /** TODO : jsdoc block */\n        Identifier : function (node, data) {\n            if (data && data.hasOwnProperty(\"TMS\")) { // dans le cas d'un TileMatrixSet\n                data.identifier = __getChildValue(node);\n            } else if (data && data.hasOwnProperty(\"matrixId\")) { // dans le cas d'une TileMatrix\n                data.matrixId = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        SupportedCRS : function (node, tmsData) {\n            if (tmsData && tmsData.TMS && tmsData.TMS.hasOwnProperty(\"projection\")) {\n                tmsData.TMS.projection = __getChildValue(node);\n            }\n        }\n    },\n\n    sld : {\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/sld:MinScaleDenominator\n        // ou : /LayerList/Layer/sld:MinScaleDenominator\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/sld:MinScaleDenominator\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend/sld:MinScaleDenominator\n        /** TODO : jsdoc block */\n        MinScaleDenominator : function (node, data) {\n            var minScale = __getChildValue(node);\n            if (minScale && data) {\n                if (data.hasOwnProperty(\"defaultOptions\")) { // cas d'un territoire\n                    data.defaultOptions.minScaleDenominator = parseFloat(minScale);\n                } else if (data.lyr) { // cas d'une layer\n                    if (!data.lyr.globalConstraint) {\n                        data.lyr.globalConstraint = new _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                    }\n                    data.lyr.globalConstraint.minScaleDenominator = parseFloat(minScale);\n                } else if (data.hasOwnProperty(\"minScaleDenominator\")) { // cas d'une contrainte ou d'une légende\n                    data.minScaleDenominator = parseFloat(minScale);\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/sld:MaxScaleDenominator\n        // ou : /LayerList/Layer/sld:MaxScaleDenominator\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/sld:MaxScaleDenominator\n        /** TODO : jsdoc block */\n        MaxScaleDenominator : function (node, data) {\n            var maxScale = __getChildValue(node);\n            if (maxScale && data) {\n                if (data.hasOwnProperty(\"defaultOptions\")) { // cas d'un territoire\n                    data.defaultOptions.maxScaleDenominator = parseFloat(maxScale);\n                } else if (data.lyr) { // cas d'une layer\n                    if (!data.lyr.globalConstraint) {\n                        data.lyr.globalConstraint = new _Response_model_Constraint__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                    }\n                    data.lyr.globalConstraint.maxScaleDenominator = parseFloat(maxScale);\n                } else if (data.hasOwnProperty(\"maxScaleDenominator\")) { // cas d'une contrainte\n                    data.maxScaleDenominator = parseFloat(maxScale);\n                }\n            }\n        }\n    },\n\n    wmts : {\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits\n        /** TODO : jsdoc block */\n        TileMatrixSetLimits : function (node, lyr) {\n            // info : contient des balises wmts:TileMatrixLimits\n            if (lyr) {\n                var limits = {};\n                // on récupère les limites dans les balises TileMatrixLimits\n                __getChildNodes(node, limits);\n\n                if (!lyr.wmtsOptions) {\n                    lyr.wmtsOptions = {};\n                }\n                lyr.wmtsOptions.tileMatrixSetLimits = limits;\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits/wmts:TileMatrixLimits\n        /** TODO : jsdoc block */\n        TileMatrixLimits : function (node, limits) {\n            var limit = new _Response_model_TileMatrixLimit__WEBPACK_IMPORTED_MODULE_13__[\"default\"]();\n            var limitId;\n            if (node.hasChildNodes) {\n                var children = node.childNodes;\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n                    var childName = child.localName || child.baseName || child.nodeName;\n                    if (childName === \"TileMatrix\") {\n                        limitId = __getChildValue(child);\n                    } else if (childName === \"MinTileRow\") {\n                        limit.minTileRow = __getChildValue(child);\n                    } else if (childName === \"MaxTileRow\") {\n                        limit.maxTileRow = __getChildValue(child);\n                    } else if (childName === \"MinTileCol\") {\n                        limit.minTileCol = __getChildValue(child);\n                    } else if (childName === \"MaxTileCol\") {\n                        limit.maxTileCol = __getChildValue(child);\n                    }\n                }\n                if (limitId && limits && !limits[limitId]) {\n                    limits[limitId] = limit;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet\n        // ou : // info : /LayerList/Layer/Extension/gpp:Layer/wmts:TileMatrixSetLink/wmts:TileMatrixSet\n        /** TODO : jsdoc block */\n        TileMatrixSet : function (node, data) {\n            // info : Describes a particular set of tile matrices.\n\n            if (data && data.tileMatrixSets) { // les tileMatrixSets de General\n                // nouvel objet TileMatrixSet\n                var tmsData = {};\n                tmsData.TMS = new _Response_model_TileMatrixSet__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\n                tmsData.resolutions = [];\n\n                // lecture des informations du TMS\n                __getChildNodes(node, tmsData);\n\n                // récupération des identifiants des niveaux de matrice (pour faciliter l'accès au WMTS via les API carto)\n                var tileMatrices = tmsData.TMS.tileMatrices;\n                for (var tm in tileMatrices) {\n                    if (tileMatrices.hasOwnProperty(tm)) {\n                        tmsData.TMS.matrixIds.push(tm);\n                    }\n                }\n\n                if (tmsData.TMS.getProjection() === \"IGNF:WGS84G\" || tmsData.TMS.getProjection() === \"EPSG:4326\") {\n                    if (data.generalOptions && Array.isArray(data.generalOptions.wgs84Resolutions)) {\n                        var wgs84Resolutions = data.generalOptions.wgs84Resolutions;\n                        for (var i = 0; i < wgs84Resolutions.length; i++) {\n                            // info : les résolutions stockées dans wgs84Resolutions, issues de l'autoconf, sont des string\n                            tmsData.resolutions[i] = parseFloat(wgs84Resolutions[i]);\n                        }\n                    }\n                }\n\n                // tri des résolutions (par ordre décroissant cette fois)\n                if (Array.isArray(tmsData.resolutions) && tmsData.resolutions.sort !== undefined) {\n                    tmsData.resolutions.sort(\n                        function (x, y) {\n                            return y - x;\n                        }\n                    );\n                }\n                tmsData.TMS.nativeResolutions = tmsData.resolutions;\n\n                // ajout du TileMatrixSet à la variable config\n                data.tileMatrixSets[tmsData.identifier] = tmsData.TMS;\n            } else { // le TileMatrixSetLink d'une couche (layer)\n                if (data && !data.wmtsOptions) {\n                    data.wmtsOptions = {};\n                }\n                // ajout du lien vers le TMS\n                data.wmtsOptions.tileMatrixSetLink = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix\n        /** TODO : jsdoc block */\n        TileMatrix : function (node, tmsData) {\n            // info : Describes a particular tile matrix.\n\n            if (tmsData) {\n                // nouveau niveau de matrice : TileMatrix\n                var tileMatrix = new _Response_model_TileMatrix__WEBPACK_IMPORTED_MODULE_12__[\"default\"]();\n\n                // lecture des information du TileMatrix\n                __getChildNodes(node, tileMatrix);\n\n                // calcul de la résolution associée au dénominateur d'échelle du niveau de pyramide, selon la projection.\n                if (tmsData.TMS && tmsData.TMS.getProjection()) {\n                    var proj = tmsData.TMS.getProjection();\n                    if (proj === \"EPSG:3857\" || proj === \"EPSG:2154\") {\n                        // calcul de la résolution associée, en m/px\n                        // en se basant sur une \"taille standard de pixel\" de 0.28mm*0.28mm (standard WMTS 1.0)\n                        var r = tileMatrix.scaleDenominator * 0.00028;\n                        if (tmsData.resolutions && Array.isArray(tmsData.resolutions)) {\n                            tmsData.resolutions.push(r);\n                        }\n                    }\n                }\n\n                // ajout du TileMatrix au TileMatrixSet\n                if (tmsData.TMS && tmsData.TMS.tileMatrices) {\n                    tmsData.TMS.tileMatrices[tileMatrix.matrixId] = tileMatrix;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:ScaleDenominator\n        /** TODO : jsdoc block */\n        ScaleDenominator : function (node, tileMatrix) {\n            var scale = __getChildValue(node);\n            if (scale && tileMatrix && tileMatrix.hasOwnProperty(\"scaleDenominator\")) {\n                tileMatrix.scaleDenominator = parseFloat(scale);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:TopLeftCorner\n        /** TODO : jsdoc block */\n        TopLeftCorner : function (node, tileMatrix) {\n            var values = __getChildValue(node).split(\" \");\n            if (values && tileMatrix) {\n                tileMatrix.topLeftCorner = {};\n                tileMatrix.topLeftCorner.x = parseFloat(values[0]);\n                tileMatrix.topLeftCorner.y = parseFloat(values[1]);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:TileWidth\n        /** TODO : jsdoc block */\n        TileWidth : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"tileWidth\")) {\n                tileMatrix.tileWidth = parseInt(value, 10);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:TileHeight\n        /** TODO : jsdoc block */\n        TileHeight : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"tileHeight\")) {\n                tileMatrix.tileHeight = parseInt(value, 10);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:MatrixWidth\n        /** TODO : jsdoc block */\n        MatrixWidth : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"matrixWidth\")) {\n                tileMatrix.matrixWidth = parseInt(value, 10);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:MatrixHeight\n        /** TODO : jsdoc block */\n        MatrixHeight : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"matrixHeight\")) {\n                tileMatrix.matrixHeight = parseInt(value, 10);\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    serviceException : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"exception\") {\n                    response.exceptionReport = AutoConfResponseReader.READERS[\"exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"code\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service d'autoconf,\n *      à l'aide des READERS de la classe.\n *\n * @method AutoConfResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @return {Object} config|exceptionReport : l'objet contenant les informations de la réponse XML,\n *      sous la forme d'un objet AutoConfResponse, ou un objet littéral exceptionReport si le service a renvoyé une exception.\n * @static\n * @memberof AutoConfResponseReader\n */\nAutoConfResponseReader.read = function (root) {\n    if (root.nodeName === \"ViewContext\") {\n        var nsPrefix = root.prefix || AutoConfResponseReader.DEFAULTPREFIX;\n        var config = AutoConfResponseReader.READERS[nsPrefix][root.nodeName](root);\n        return config;\n    } else if (root.nodeName === \"serviceException\") {\n        var exceptionReport = AutoConfResponseReader.READERS[root.nodeName](root);\n        return exceptionReport;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/**\n * Récupération des attributs d'un noeud élément\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/**\n * Récupération des noeuds enfants (seulement de type ELEMENT), à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n        var childPrefix;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n                childPrefix = child.prefix || AutoConfResponseReader.DEFAULTPREFIX;\n\n                if (AutoConfResponseReader.READERS[childPrefix][childName]) {\n                    var reader = AutoConfResponseReader.READERS[childPrefix][childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode.nodeType === 3 || textNode.nodeType === 4) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Vérification des attributs du service, dans la balise XLS de la réponse :\n *      version, namespaces, et namespace par défaut doivent correspondre à ceux attendus.\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __checkServiceAttributes\n * @param {DOMElement} viewContextNode - a DOM node, corresponding to XLS first tag.\n */\nfunction __checkServiceAttributes (viewContextNode) {\n    if (viewContextNode.attributes.length > 0) {\n        // on récupère et parcourt les attributs de la balise XLS de la réponse\n        var xlsAttributes = __getAttributes(viewContextNode);\n        for (var att in xlsAttributes) {\n            if (xlsAttributes.hasOwnProperty(att)) {\n                // vérification de la version\n                if (att === \"version\") {\n                    if (xlsAttributes[\"version\"] !== AutoConfResponseReader.VERSION) {\n                        console.log(\"[AutoConfResponseReader] autoconf version is not the expected one : there may be errors in parsing\");\n                        return;\n                    }\n                }\n\n                // on vérifie que l'uri du namespace par défaut est bien celle que l'on attend\n                if (att === \"xmlns\") {\n                    if (xlsAttributes[att] !== AutoConfResponseReader.NAMESPACES.xmlns) {\n                        console.log(\"[AutoConfResponseReader] autoconf response default namespace is not the expected one\");\n                        return;\n                    }\n                    continue;\n                }\n\n                var prefix = att.split(\":\")[0];\n                var ns = att.split(\":\")[1];\n\n                // si on a un autre xmlns, on vérifie aussi les URI\n                if (prefix === \"xmlns\" && ns) {\n                    // si l'attribut correspond à un namespace défini dans le reader\n                    if (AutoConfResponseReader.NAMESPACES[ns]) {\n                        // il faut que les URI correspondent aussi.\n                        if (AutoConfResponseReader.NAMESPACES[ns] !== xlsAttributes[att]) {\n                            console.log(\"[AutoConfResponseReader] autoconf response \" + att + \" namespace is not the expected one\");\n                            return;\n                        }\n                    }\n                }\n\n                // pour finir on vérifie la localisation du schema XSD du service\n                if (ns === \"schemaLocation\") {\n                    if (xlsAttributes[att] !== AutoConfResponseReader.SCHEMALOCATION[0] && xlsAttributes[att] !== AutoConfResponseReader.SCHEMALOCATION[1]) {\n                        console.log(\"[AutoConfResponseReader] autoconf response schema location is not the expected one\");\n                        return;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoConfResponseReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Formats/AutoConfResponseReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/AutoConfResponseFactory.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/AutoConfResponseFactory.js ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Formats_XML__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Formats/XML */ \"./node_modules/geoportal-access-lib/src/Formats/XML.js\");\n/* harmony import */ var _Formats_AutoConfResponseReader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Formats/AutoConfResponseReader */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/Formats/AutoConfResponseReader.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML\n *\n * @module AutoConfReponseFactory\n * @private\n * @alias Gp.Services.AutoConf.Response.AutoConfResponseFactory\n * @todo gérer le cas du JSONP qui encapsule du XML ?\n */\n\n\n\n\n\n\nvar AutoConfReponseFactory = {\n\n    /**\n     * interface unique\n     * Fabrique d'analyse des réponses (xml) du service d'autoconfiguration.\n     * Création d'un format XML, auquel on associe un reader et une chaîne XML, et qui renverra un objet JavaScript correspondant.\n     * Si une erreur est levée lors de l'analyse, ou si l'objet est vide ou contient une exception : appel de la fonction de callback onError\n     * Sinon, appel de la fonction de callback onSuccess (définies dans Autoconf.analyzeResponse)\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant AutoConf\n     *\n     * @example\n     *   var options = {\n     *      layerId :\n     *      response :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AutoConfResponseFactory\");\n        logger.trace([\"AutoConfResponseFactory::build()\"]);\n\n        // data de type AutoConfResponse\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                data = options.response;\n            } else {\n                try {\n                    var p = new _Formats_XML__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                        reader : _Formats_AutoConfResponseReader__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n                    });\n\n                    if (typeof options.response === \"string\") {\n                        p.setXMLString(options.response);\n                    } else {\n                        p.setXMLDoc(options.response);\n                    }\n\n                    data = p.parse();\n                } catch (e) {\n                    // si une exception a été levée, on appelle le callback d'erreur avec le message renvoyé\n                    var message = e.message;\n                    if (typeof options.response === \"string\") {\n                        message += \"\\n (raw response service'\" + options.response + \"')\";\n                    } else {\n                        message += \"\\n (raw response service'\" + options.response.documentElement.innerHTML + \"')\";\n                    }\n\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", message),\n                        status : 200,\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n                    }));\n                    return;\n                }\n\n                // Si la réponse est vide, on appelle le callback d'erreur\n                var isEmpty = true;\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        isEmpty = false;\n                    }\n                }\n                if (isEmpty) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY_2\")));\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service, on appelle le callback d'erreur\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            // si la réponse (xmlString) est vide, on appelle le callback d'erreur\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        // définition de la variable globale Gp.Config à partir de la réponse\n        var scope = typeof window !== \"undefined\" ? window : {};\n\n        if (!scope.Gp) {\n            scope.Gp = {};\n        }\n        if (!scope.Gp.Config) {\n            scope.Gp.Config = data;\n        } else {\n            this.mergeConfig(scope.Gp.Config, data, options.layerId);\n        }\n\n        // si tout s'est bien passé, on appelle le callback de succès\n        options.onSuccess.call(options.scope, scope.Gp.Config);\n    },\n\n    /**\n     * Fonction utilisée dans le cas où l'autoconfiguration est appelée plusieurs fois\n     * (par exemple pour des clés différentes ou pour des infos sur une couche agrégée)\n     *\n     * @method mergeConfig\n     * @static\n     * @param {Object} GpConfig - Variable Gp.Config préexistante\n     * @param {Object} data - la nouvelle réponse de l'autoconf, à fusionner avec GpConfig\n     * @param {String} [layerId] - l'identifiant d'une couche agrégée dans le cas d'une 2è opération de l'autoconf\n     */\n    mergeConfig : function (GpConfig, data, layerId) {\n        if (data && GpConfig) {\n            // on boucle sur les propriétés (generalOptions, layers, projections, services, tileMatrixSets, territories)\n            for (var prop in data) {\n                if (data.hasOwnProperty(prop)) {\n                    // on récupère la nouvelle clé dans generalOptions\n                    if (prop === \"generalOptions\") {\n                        for (var key in data[prop].apiKeys) {\n                            if (data[prop].apiKeys.hasOwnProperty(key) && !GpConfig.generalOptions.apiKeys[key]) {\n                                GpConfig.generalOptions.apiKeys[key] = data[prop].apiKeys[key];\n                            }\n                        }\n                        // on récupère les nouveaux objets (TMS, layers, projections...)\n                    } else {\n                        if (GpConfig[prop]) {\n                            for (var obj in data[prop]) {\n                                if (data[prop].hasOwnProperty(obj) && !GpConfig[prop][obj]) {\n                                    GpConfig[prop][obj] = data[prop][obj];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // dans le cas d'une autoconf pour une couche agrégée, on récupère l'info\n            if (layerId) {\n                var aggregatedLayers = [];\n\n                for (var lyr in data.layers) {\n                    if (data.layers.hasOwnProperty(lyr)) {\n                        aggregatedLayers.push(lyr);\n                    }\n                }\n\n                if (GpConfig.layers[layerId]) {\n                    GpConfig.layers[layerId].aggregatedLayers = aggregatedLayers;\n                }\n            }\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoConfReponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/AutoConfResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/AutoConfResponse.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/AutoConfResponse.js ***!
  \****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Response object for {@link module:Services~getConfig Gp.Services.getConfig ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Object} generalOptions - General properties for default map configuration resources.\n * @property {Object} generalOptions.apiKeys - Object that associates apiKey (s) with an array of resources IDs availables with that key.\n * @property {String} generalOptions.title - Underlying web service Title.\n * @property {String} generalOptions.defaultGMLGFIStyle - XSL URL used by default to translate an XML GetFeatureInfo response into an HTML array.\n * @property {String} generalOptions.theme - default theme (FIXME : for what ?)\n * @property {Array.<Float>} generalOptions.wgs84Resolutions - geographical resolutions Array for each [zoom level of the Geoportal platform]{@link http://api.ign.fr/tech-docs-js/webmaster/layers.html#Geoportal_resolutions} from 0 to 21. Expressed in degrees/pixel.\n * @property {Object} layers - Associative array mapping resources availables IDs (keys) with their properties (values given as {@link Gp.Services.Config.Layer}).\n * @property {Object} territories - Associative array mapping french territories IDs (keys) with their properties (values given as {@link Gp.Services.Config.Territory}).\n * @property {Object} tileMatrixSets - Associative Array mapping TileMatrixSets IDs (keys) availables with their properties (values given as {@link Gp.Services.Config.TileMatrixSet}).\n * @property {Object} services - Associative Array mapping Geoportal web services IDs (keys) availables with their properties (values given as {@link Gp.Services.Config.Service}).\n *\n * @namespace\n * @alias Gp.Services.GetConfigResponse\n */\nfunction AutoConfResponse () {\n    if (!(this instanceof AutoConfResponse)) {\n        throw new TypeError(\"AutoConfResponse constructor cannot be called as a function.\");\n    }\n\n    this.generalOptions = {\n        apiKeys : {},\n        title : null,\n        defaultGMLGFIStyle : null,\n        theme : null,\n        wgs84Resolutions : []\n    };\n\n    this.layers = {};\n\n    this.territories = {};\n\n    this.tileMatrixSets = {};\n\n    this.services = {};\n}\n\nAutoConfResponse.prototype = {\n\n    /*\n     * Constructor (alias)\n     */\n    constructor : AutoConfResponse,\n\n    /**\n     * Check if config is loaded for a given key\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {Boolean} isConfLoaded - true if config is already loaded, false otherwise\n     */\n    isConfLoaded : function (apiKey) {\n        if (!apiKey) {\n            return;\n        }\n        if (this.generalOptions.apiKeys[apiKey]) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns an array of Geoportal layers identifiers, corresponding to an API contract key.\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {Array} apiKeys - Array of geoportal layers identifiers\n     */\n    getLayersId : function (apiKey) {\n        return this.generalOptions.apiKeys[apiKey];\n    },\n\n    /**\n     * Returns an associative array of Geoportal layers configurations, corresponding to an API contract key.\n     * If no key is specified, all layers from configuration are returned.\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {Object} layers - Object which properties are layers identifiers, and corresponding\n     *      values are instances of <Gp.Services.Config.Layer>.\n     */\n    getLayersConf : function (apiKey) {\n        var layers = {};\n        var layersIdArray = this.getLayersId(apiKey);\n        if (layersIdArray) {\n            for (var i = 0; i < layersIdArray.length; i++) {\n                var lyrId = layersIdArray[i];\n                layers[lyrId] = this.layers[lyrId];\n            }\n        }\n        return layers;\n    },\n\n    /**\n     * Returns a geoportal layer configuration, given its identifier\n     *\n     * @param {String} layerId - Geoportal layer identifier (e.g. \"GEOGRAPHICALGRIDSYSTEMS.MAPS$GEOPORTAIL:OGC:WMTS\")\n     * @return {Object} layer - Layer configuration : instance of {@link Gp.Services.Config.Layer}\n     */\n    getLayerConf : function (layerId) {\n        if (!this.layers) {\n            return;\n        }\n        return this.layers[layerId];\n    },\n\n    /**\n     * Returns an associative array of Tile Matrix Sets configurations.\n     *\n     * @return {Object} tileMatrixSets - Object which properties are TMS identifiers,\n     *      and corresponding values are instances of {@link Gp.Services.Config.TileMatrixSet}.\n     */\n    getTileMatrixSets : function () {\n        return this.tileMatrixSets;\n    },\n\n    /**\n     * Returns a Tile Matrix Sets configuration, given its identifier.\n     *\n     * @param {String} tmsID - Tile Matrix Set identifier (e.g. : \"PM\")\n     * @return {Object} tileMatrixSet - Tile Matrix Set configuration, instance of {@link Gp.Services.Config.TileMatrixSet}\n     */\n    getTMSConf : function (tmsID) {\n        if (!this.tileMatrixSets) {\n            return;\n        }\n        return this.tileMatrixSets[tmsID];\n    },\n\n    /**\n     * Returns an associative array of territories configurations.\n     *\n     * @return {Object} territories - Object which properties are territory identifiers,\n     *      and corresponding values are instances of {@link Gp.Services.Config.Territory}.\n     */\n    getTerritories : function () {\n        return this.territories;\n    },\n\n    /**\n     * Returns a territory configuration, given its identifier.\n     *\n     * @param {String} territoryID - territory identifier (e.g. \"FXX\")\n     * @return {Object} territory - Territory configuration, instance of {@link Gp.Services.Config.Territory}\n     */\n    getTerritoryConf : function (territoryID) {\n        if (!this.territories) {\n            return;\n        }\n        return this.territories[territoryID];\n    },\n\n    /**\n     * Returns an associative array of services configurations.\n     *\n     * @return {Object} services - Object which properties are services identifiers,\n     *      and corresponding values are instances of {@link Gp.Services.Config.Service}.\n     */\n    getServices : function () {\n        return this.services;\n    },\n\n    /**\n     * Returns a service configuration, given its identifier.\n     *\n     * @param {String} serviceID - service identifier (e.g. \"OGC:WMTS\")\n     * @return {Object} service - service configuration, instance of {@link Gp.Services.Config.Service}\n     */\n    getServiceConf : function (serviceID) {\n        if (!this.services) {\n            return;\n        }\n        return this.services[serviceID];\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AutoConfResponse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/AutoConfResponse.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Constraint.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Constraint.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n *\n * Object used to express a geographical (BBOX, scale) and temporal constraint.\n *\n * @property {String} crs - Coordinates System ID used to express coordinates contraints.\n * @property {Gp.BBox} bbox - Constraint Bounding Box.\n * @property {Number} minScaleDenominator - Minimum scale denominator where constraint applies.\n * @property {Number} maxScaleDenominator - Maximum scale denominator where constraint applies.\n * @property {Array.<String>} temporalExtent - Array expressing the time interval of the constraint [minT, maxT]. Dates are expressed in the [ISO-8601]{@link https://en.wikipedia.org/wiki/ISO_8601} way.\n *\n * @namespace\n * @alias Gp.Services.Config.Constraint\n */\n\nfunction Constraint () {\n    if (!(this instanceof Constraint)) {\n        throw new TypeError(\"Constraint constructor cannot be called as a function.\");\n    }\n\n    this.crs = null;\n\n    this.bbox = {\n        left : null,\n        right : null,\n        top : null,\n        bottom : null\n    };\n\n    this.minScaleDenominator = null;\n\n    this.maxScaleDenominator = null;\n\n    this.temporalExtent = [null, null];\n}\n\nConstraint.prototype = {\n\n    constructor : Constraint\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Constraint);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvQ29uc3RyYWludC5qcz82NWZkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxlQUFlLDJIQUEySCw2Q0FBNkM7QUFDck07QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUseUVBQVUsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvQ29uc3RyYWludC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKlxuICogT2JqZWN0IHVzZWQgdG8gZXhwcmVzcyBhIGdlb2dyYXBoaWNhbCAoQkJPWCwgc2NhbGUpIGFuZCB0ZW1wb3JhbCBjb25zdHJhaW50LlxuICpcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBjcnMgLSBDb29yZGluYXRlcyBTeXN0ZW0gSUQgdXNlZCB0byBleHByZXNzIGNvb3JkaW5hdGVzIGNvbnRyYWludHMuXG4gKiBAcHJvcGVydHkge0dwLkJCb3h9IGJib3ggLSBDb25zdHJhaW50IEJvdW5kaW5nIEJveC5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtaW5TY2FsZURlbm9taW5hdG9yIC0gTWluaW11bSBzY2FsZSBkZW5vbWluYXRvciB3aGVyZSBjb25zdHJhaW50IGFwcGxpZXMuXG4gKiBAcHJvcGVydHkge051bWJlcn0gbWF4U2NhbGVEZW5vbWluYXRvciAtIE1heGltdW0gc2NhbGUgZGVub21pbmF0b3Igd2hlcmUgY29uc3RyYWludCBhcHBsaWVzLlxuICogQHByb3BlcnR5IHtBcnJheS48U3RyaW5nPn0gdGVtcG9yYWxFeHRlbnQgLSBBcnJheSBleHByZXNzaW5nIHRoZSB0aW1lIGludGVydmFsIG9mIHRoZSBjb25zdHJhaW50IFttaW5ULCBtYXhUXS4gRGF0ZXMgYXJlIGV4cHJlc3NlZCBpbiB0aGUgW0lTTy04NjAxXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMX0gd2F5LlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Db25maWcuQ29uc3RyYWludFxuICovXG5cbmZ1bmN0aW9uIENvbnN0cmFpbnQgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb25zdHJhaW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ29uc3RyYWludCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMuY3JzID0gbnVsbDtcblxuICAgIHRoaXMuYmJveCA9IHtcbiAgICAgICAgbGVmdCA6IG51bGwsXG4gICAgICAgIHJpZ2h0IDogbnVsbCxcbiAgICAgICAgdG9wIDogbnVsbCxcbiAgICAgICAgYm90dG9tIDogbnVsbFxuICAgIH07XG5cbiAgICB0aGlzLm1pblNjYWxlRGVub21pbmF0b3IgPSBudWxsO1xuXG4gICAgdGhpcy5tYXhTY2FsZURlbm9taW5hdG9yID0gbnVsbDtcblxuICAgIHRoaXMudGVtcG9yYWxFeHRlbnQgPSBbbnVsbCwgbnVsbF07XG59XG5cbkNvbnN0cmFpbnQucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBDb25zdHJhaW50XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnN0cmFpbnQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Constraint.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Format.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Format.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a format to use with Geoportal resources.\n *\n * @property {Boolean} current - If true, then this format is used by default.\n * @property {String} name - Format mime-type.\n *\n * @namespace\n * @alias Gp.Services.Config.Format\n */\n\nfunction Format () {\n    if (!(this instanceof Format)) {\n        throw new TypeError(\"Format constructor cannot be called as a function.\");\n    }\n\n    this.current = null;\n\n    this.name = null;\n}\n\nFormat.prototype = {\n\n    constructor : Format\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Format);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvRm9ybWF0LmpzPzgxZDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUscUVBQU0sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvRm9ybWF0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE9iamVjdCB1c2VkIHRvIGRlc2NyaWJlIGEgZm9ybWF0IHRvIHVzZSB3aXRoIEdlb3BvcnRhbCByZXNvdXJjZXMuXG4gKlxuICogQHByb3BlcnR5IHtCb29sZWFufSBjdXJyZW50IC0gSWYgdHJ1ZSwgdGhlbiB0aGlzIGZvcm1hdCBpcyB1c2VkIGJ5IGRlZmF1bHQuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbmFtZSAtIEZvcm1hdCBtaW1lLXR5cGUuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkNvbmZpZy5Gb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBGb3JtYXQgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGb3JtYXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGb3JtYXQgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgdGhpcy5uYW1lID0gbnVsbDtcbn1cblxuRm9ybWF0LnByb3RvdHlwZSA9IHtcblxuICAgIGNvbnN0cnVjdG9yIDogRm9ybWF0XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1hdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Format.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Layer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Layer.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe geoportal resource (WMTS, WMS, WFS layers, geocoding resources or elevation service) parameters. Properties may be used or not depending on the resource type.\n *\n * @property {String} name - name of the resource to use with the webservice that serves it (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS\").\n * @property {String} title - Human readable name for the resource.\n * @property {String} description - Resource description.\n * @property {String} layerId - Unique resource Identifier (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS$GEOPORTAIL:OGC:WMTS\")\n * @property {String} quicklookUrl - Image URL for the resource.\n * @property {Object} serviceParams - Informations about the webservice that serves the resource (OpenLS, WFS, WMTS)\n * @property {String} serviceParams.id - Web Service identifier (\"OGC:WMTS\", \"OGC:OPENLS;ReverseGeocode\", etc...)\n * @property {Object} serviceParams.serverUrl - Associative array mapping geoportal access key (keys) with their properties (URLs of the web service, with the geoportal access key).\n * @property {String} serviceParams.version - webservice version.\n * @property {String} defaultProjection - coordinates system ID used by default for the resource (WMS or WFS layer) or of the TileMatrixSet used by the WMTS layer.\n * @property {Array.<String>} additionalProjections - additional coordinates systems IDs availables for the resource, others than the default one (see defaultProjection) (WMS and WFS layers only).\n * @property {Array.<Gp.Services.Config.Format>} formats - Formats availables for the resource.\n * @property {Array.<Gp.Services.Config.Legend>} legends - Informations about legends associated to the resource.\n * @property {Array.<Gp.Services.Config.Metadata>} metadata - Informations about metadata associated to the resource.\n * @property {Array.<Gp.Services.Config.Style>} styles - Informations about styles availables for the resources (WMS, WFS and WMTS only).\n * @property {Array.<Gp.Services.Config.Thematic>} thematics - Informations about thematics associated to the resource.\n * @property {Gp.Services.Config.Constraint} globalConstraint - geographical constraint for the resource.\n * @property {Array.<Gp.Services.Config.Constraint>} constraints - additionnal geographical constraints for the resource.\n * @property {Array.<Gp.Services.Config.Originator>} originators - Informations about originator of the resource.\n * @property {Object} wmtsOptions - Informations associated to WMTS resources.\n * @property {String} wmtsOptions.tileMatrixSetLink - TileMatrixSet identifier used by the resource (see {@link Gp.Services.Config.TileMatrixSet})\n * @property {Gp.Services.Config.TileMatrixLimit} wmtsOptions.tileMatrixSetLimits - limits of the resource for that TileMAtrixSet.\n * @property {Boolean} queryable - true if a getFeatureInfo request may be done for the resource (WMS or WMTS only).\n * @property {Boolean} hidden - true if the resource is not visible.\n * @property {Boolean} isAggregate - true if the resource is an aggregate of other resources (@see aggregatedLayers).\n * @property {Array.<String>} aggregatedLayers - Layers IDs composing the being described aggregated layer.\n * @property {Array.<String>} apiKeys - Array of access keys that grant access to that resource.\n * @property {Object} dimensions - Dimensions informations associated with the resource.\n * @property {String} dimensions.type\n * @property {String} dimensions.visibilityRange\n * @property {String} dimensions.visibilityMode\n * @property {String} dimensions.noDataValue\n * @property {String} dimensions.geometricType\n *\n * @namespace\n * @alias Gp.Services.Config.Layer\n */\nfunction Layer () {\n    if (!(this instanceof Layer)) {\n        throw new TypeError(\"Layer constructor cannot be called as a function.\");\n    }\n\n    // info : une instance de la classe Layer n'a aucune propriété au départ,.\n    // les attributs possibles sont documentés ci-dessus,\n    // et seront implémentés au fur et à mesure de la lecture de la réponse de l'autoconf, lorsque l'information est rencontrée.\n}\n\nLayer.prototype = {\n\n    constructor : Layer,\n\n    /**\n     * Returns the layer name\n     *\n     * @returns {String} name - name of the resource to use with the webservice that serves it (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS\").\n     */\n    getName : function () {\n        return this.name;\n    },\n\n    /**\n     * Returns the layer title\n     *\n     * @returns {String} title - Human readable name for the resource.\n     */\n    getTitle : function () {\n        return this.title;\n    },\n\n    /**\n     * Returns the layer description\n     *\n     * @returns {String} description - Resource description.\n     */\n    getDescription : function () {\n        return this.description;\n    },\n\n    /**\n     * Returns the layer identifier\n     *\n     * @returns {String} layerId - Unique resource Identifier (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS$GEOPORTAIL:OGC:WMTS\")\n     */\n    getLayerId : function () {\n        return this.layerId;\n    },\n\n    /**\n     * Returns the layer quicklookUrl\n     *\n     * @returns {String} quicklookUrl - Image URL for the resource.\n     */\n    getQuicklookUrl : function () {\n        return this.quicklookUrl;\n    },\n\n    /**\n     * Returns the layer default projection\n     *\n     * @returns {String} defaultProjection - coordinates system ID used by default for the resource (WMS or WFS layer) or of the TileMatrixSet used by the WMTS layer.\n     */\n    getDefaultProjection : function () {\n        return this.defaultProjection;\n    },\n\n    /**\n     * Returns the layer projections\n     *\n     * @returns {Array.<String>} projections - coordinates systems IDs availables for the resource, including the default one.\n     */\n    getProjections : function () {\n        var projections = [];\n        projections.push(this.defaultProjection);\n        var proj = projections.concat(this.additionalProjections);\n        return proj;\n    },\n\n    /**\n     * Returns the global BBOX\n     *\n     * @returns {Gp.BBox} bbox - the layer global bounding box, expressed in CRS system.\n     */\n    getBBOX : function () {\n        if (!this.globalConstraint) {\n            return;\n        }\n        return this.globalConstraint.bbox;\n    },\n\n    /**\n     * Returns the layer minimum scale denominator\n     *\n     * @returns {Number} minScaleDenominator - minimum scale denominator for this layer\n     */\n    getMinScaleDenominator : function () {\n        if (!this.globalConstraint) {\n            return;\n        }\n        return this.globalConstraint.minScaleDenominator;\n    },\n\n    /**\n     * Returns the layer maximum scale denominator\n     *\n     * @returns {Number} maxScaleDenominator - maximum scale denominator for this layer\n     */\n    getMaxScaleDenominator : function () {\n        if (!this.globalConstraint) {\n            return;\n        }\n        return this.globalConstraint.maxScaleDenominator;\n    },\n\n    /**\n     * Returns layer Tile Matrix Set identifier if exists\n     *\n     * @returns {String} tileMatrixSetLink - Tile Matrix Set identifier (for instance : \"PM\")\n     */\n    getTMSID : function () {\n        if (this.wmtsOptions) {\n            return this.wmtsOptions.tileMatrixSetLink;\n        }\n    },\n\n    /**\n     * Returns information about the webservice that serves the resource\n     *\n     * @returns {Object} serviceParams - Information about the webservice that serves the resource (OpenLS, WFS, WMTS)\n     */\n    getServiceParams : function () {\n        return this.serviceParams;\n    },\n\n    /**\n     * Returns Geoportal server url for a given key\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {String} serverUrl - general URL of the web service (with the geoportal access key)\n     */\n    getServerUrl : function (apiKey) {\n        if (!apiKey || !this.serviceParams || !this.serviceParams.serverUrl) {\n            return;\n        }\n        return this.serviceParams.serverUrl[apiKey];\n    },\n\n    /**\n     * Returns information about legends associated to the resource.\n     *\n     * @returns {Array.<Gp.Services.Config.Legend>} legends - Informations about legends associated to the resource.\n     */\n    getLegends : function () {\n        return this.legends;\n    },\n\n    /**\n     * Returns information about metadata associated to the resource.\n     *\n     * @returns {Array.<Gp.Services.Config.Metadata>} metadata - Informations about metadata associated to the resource.\n     */\n    getMetadata : function () {\n        return this.metadata;\n    },\n\n    /**\n     * Returns information about styles availables for the resources (WMS, WFS and WMTS only).\n     *\n     * @returns {Array.<Gp.Services.Config.Style>} styles - Informations about styles availables for the resources (WMS, WFS and WMTS only).\n     */\n    getStyles : function () {\n        return this.styles;\n    },\n\n    /**\n     * Returns layer default style\n     *\n     * @returns {String} styleName - style identifier (eg : \"normal\", \"bdparcellaire\", ...)\n     */\n    getDefaultStyle : function () {\n        if (!this.styles) {\n            return;\n        }\n        var style;\n        var s = this.styles;\n        for (var i = 0; i < s.length; i++) {\n            if (s[i].current === true) {\n                style = s[i].name;\n                break;\n            }\n        }\n        return style;\n    },\n\n    /**\n     * Returns information about thematics associated to the resource.\n     *\n     * @returns {Array.<Gp.Services.Config.Thematic>} thematics - Informations about thematics associated to the resource.\n     */\n    getThematics : function () {\n        return this.thematics;\n    },\n\n    /**\n     * Returns layer default format\n     *\n     * @returns {String} formatName - Format mime-type. (eg. \"image/jpeg\")\n     */\n    getDefaultFormat : function () {\n        if (!this.formats) {\n            return;\n        }\n        var format;\n        var f = this.formats;\n        for (var i = 0; i < f.length; i++) {\n            if (f[i].current === true) {\n                format = f[i].name;\n                break;\n            }\n        }\n        return format;\n    },\n\n    /**\n     * Returns information about geographical or temporal constraints for the resource\n     *\n     * @returns {Array.<Gp.Services.Config.Constraint>} constraints - Informations about geographical or temporal constraints for the resource\n     */\n    getConstraints : function () {\n        return this.constraints;\n    },\n\n    /**\n     * Returns information about originators of this resource\n     *\n     * @returns {Array.<Gp.Services.Config.Originator>} originators - Informations about originators of this resource\n     */\n    getOriginators : function () {\n        return this.originators;\n    },\n\n    /**\n     * Returns information about dimensions associated with this resource\n     *\n     * @returns {Object} dimensions - Dimensions informations associated with the resource.\n     */\n    getDimensions : function () {\n        return this.dimensions;\n    },\n\n    /**\n     * Returns information about aggregated layers composing the being described layer, in case the resource is an aggregate of other resources.\n     *\n     * @returns {Object} aggregatedLayers - Layers IDs composing the being described aggregated layer.\n     */\n    getAggregatedLayers : function () {\n        if (this.isAggregate) {\n            return this.aggregatedLayers;\n        } else {\n\n        }\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Layer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Layer.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Legend.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Legend.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a legend file associated with a geoportal resource (WMTS, WMS, WFS layers).\n *\n * @property {String} format - mime-type of the legend file.\n * @property {String} url - legend file URL\n * @property {Number} minScaleDenominator - minimum scale denominator where this legend applies.\n *\n * @namespace\n * @alias Gp.Services.Config.Legend\n */\n\nfunction Legend () {\n    if (!(this instanceof Legend)) {\n        throw new TypeError(\"Legend constructor cannot be called as a function.\");\n    }\n\n    this.format = null;\n\n    this.url = null;\n\n    this.minScaleDenominator = null;\n}\n\nLegend.prototype = {\n\n    constructor : Legend\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Legend);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvTGVnZW5kLmpzPzMxMzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVlLHFFQUFNLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL0xlZ2VuZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBPYmplY3QgdXNlZCB0byBkZXNjcmliZSBhIGxlZ2VuZCBmaWxlIGFzc29jaWF0ZWQgd2l0aCBhIGdlb3BvcnRhbCByZXNvdXJjZSAoV01UUywgV01TLCBXRlMgbGF5ZXJzKS5cbiAqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZm9ybWF0IC0gbWltZS10eXBlIG9mIHRoZSBsZWdlbmQgZmlsZS5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB1cmwgLSBsZWdlbmQgZmlsZSBVUkxcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtaW5TY2FsZURlbm9taW5hdG9yIC0gbWluaW11bSBzY2FsZSBkZW5vbWluYXRvciB3aGVyZSB0aGlzIGxlZ2VuZCBhcHBsaWVzLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Db25maWcuTGVnZW5kXG4gKi9cblxuZnVuY3Rpb24gTGVnZW5kICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTGVnZW5kKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTGVnZW5kIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtYXQgPSBudWxsO1xuXG4gICAgdGhpcy51cmwgPSBudWxsO1xuXG4gICAgdGhpcy5taW5TY2FsZURlbm9taW5hdG9yID0gbnVsbDtcbn1cblxuTGVnZW5kLnByb3RvdHlwZSA9IHtcblxuICAgIGNvbnN0cnVjdG9yIDogTGVnZW5kXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IExlZ2VuZDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Legend.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Metadata.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Metadata.js ***!
  \********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a metadata file associated with a geoportal resource.\n *\n * @property {String} format - mime-type of the metadata file.\n * @property {String} url - metadata file URL\n *\n * @namespace\n * @alias Gp.Services.Config.Metadata\n */\n\nfunction Metadata () {\n    if (!(this instanceof Metadata)) {\n        throw new TypeError(\"Metadata constructor cannot be called as a function.\");\n    }\n\n    this.format = null;\n\n    this.url = null;\n}\n\nMetadata.prototype = {\n\n    constructor : Metadata\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Metadata);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvTWV0YWRhdGEuanM/MjUyZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFZSx1RUFBUSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9BdXRvQ29uZi9SZXNwb25zZS9tb2RlbC9NZXRhZGF0YS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBPYmplY3QgdXNlZCB0byBkZXNjcmliZSBhIG1ldGFkYXRhIGZpbGUgYXNzb2NpYXRlZCB3aXRoIGEgZ2VvcG9ydGFsIHJlc291cmNlLlxuICpcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBmb3JtYXQgLSBtaW1lLXR5cGUgb2YgdGhlIG1ldGFkYXRhIGZpbGUuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdXJsIC0gbWV0YWRhdGEgZmlsZSBVUkxcbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuQ29uZmlnLk1ldGFkYXRhXG4gKi9cblxuZnVuY3Rpb24gTWV0YWRhdGEgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNZXRhZGF0YSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk1ldGFkYXRhIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtYXQgPSBudWxsO1xuXG4gICAgdGhpcy51cmwgPSBudWxsO1xufVxuXG5NZXRhZGF0YS5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IE1ldGFkYXRhXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1ldGFkYXRhO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Metadata.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Originator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Originator.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe an Originator of geoportal resource.\n *\n * @property {String} name - originator name\n * @property {String} attribution - originator full name\n * @property {String} logo - originator logo file URL\n * @property {String} url - originator web site URL\n * @property {Array.<Gp.Services.Config.Constraint>} constraints - where and when the originator applies for the ressource.\n *\n * @namespace\n * @alias Gp.Services.Config.Originator\n */\n\nfunction Originator () {\n    if (!(this instanceof Originator)) {\n        throw new TypeError(\"Originator constructor cannot be called as a function.\");\n    }\n\n    this.name = null;\n\n    this.attribution = null;\n\n    this.logo = null;\n\n    this.url = null;\n\n    this.constraints = [];\n}\n\nOriginator.prototype = {\n\n    constructor : Originator\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Originator);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvT3JpZ2luYXRvci5qcz81ZTYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsc0NBQXNDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUseUVBQVUsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvT3JpZ2luYXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBPYmplY3QgdXNlZCB0byBkZXNjcmliZSBhbiBPcmlnaW5hdG9yIG9mIGdlb3BvcnRhbCByZXNvdXJjZS5cbiAqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbmFtZSAtIG9yaWdpbmF0b3IgbmFtZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGF0dHJpYnV0aW9uIC0gb3JpZ2luYXRvciBmdWxsIG5hbWVcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBsb2dvIC0gb3JpZ2luYXRvciBsb2dvIGZpbGUgVVJMXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdXJsIC0gb3JpZ2luYXRvciB3ZWIgc2l0ZSBVUkxcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEdwLlNlcnZpY2VzLkNvbmZpZy5Db25zdHJhaW50Pn0gY29uc3RyYWludHMgLSB3aGVyZSBhbmQgd2hlbiB0aGUgb3JpZ2luYXRvciBhcHBsaWVzIGZvciB0aGUgcmVzc291cmNlLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Db25maWcuT3JpZ2luYXRvclxuICovXG5cbmZ1bmN0aW9uIE9yaWdpbmF0b3IgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPcmlnaW5hdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT3JpZ2luYXRvciBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMubmFtZSA9IG51bGw7XG5cbiAgICB0aGlzLmF0dHJpYnV0aW9uID0gbnVsbDtcblxuICAgIHRoaXMubG9nbyA9IG51bGw7XG5cbiAgICB0aGlzLnVybCA9IG51bGw7XG5cbiAgICB0aGlzLmNvbnN0cmFpbnRzID0gW107XG59XG5cbk9yaWdpbmF0b3IucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBPcmlnaW5hdG9yXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9yaWdpbmF0b3I7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Originator.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Service.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Service.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a web service of the geoportal platform.\n *\n * @property {String} title - Web service name\n * @property {Object} serverUrl - Associative array mapping geoportal access key (keys) with their properties (URLs of the web service, with the geoportal access key).\n * @property {String} version - web service version.\n *\n * @namespace\n * @alias Gp.Services.Config.Service\n */\nfunction Service () {\n    if (!(this instanceof Service)) {\n        throw new TypeError(\"Service constructor cannot be called as a function.\");\n    }\n\n    this.title = null;\n\n    this.serverUrl = null;\n\n    this.version = null;\n}\n\nService.prototype = {\n\n    constructor : Service\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Service);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvU2VydmljZS5qcz9hZmU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVlLHNFQUFPLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1NlcnZpY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogT2JqZWN0IHVzZWQgdG8gZGVzY3JpYmUgYSB3ZWIgc2VydmljZSBvZiB0aGUgZ2VvcG9ydGFsIHBsYXRmb3JtLlxuICpcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0aXRsZSAtIFdlYiBzZXJ2aWNlIG5hbWVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBzZXJ2ZXJVcmwgLSBBc3NvY2lhdGl2ZSBhcnJheSBtYXBwaW5nIGdlb3BvcnRhbCBhY2Nlc3Mga2V5IChrZXlzKSB3aXRoIHRoZWlyIHByb3BlcnRpZXMgKFVSTHMgb2YgdGhlIHdlYiBzZXJ2aWNlLCB3aXRoIHRoZSBnZW9wb3J0YWwgYWNjZXNzIGtleSkuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdmVyc2lvbiAtIHdlYiBzZXJ2aWNlIHZlcnNpb24uXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkNvbmZpZy5TZXJ2aWNlXG4gKi9cbmZ1bmN0aW9uIFNlcnZpY2UgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXJ2aWNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU2VydmljZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMudGl0bGUgPSBudWxsO1xuXG4gICAgdGhpcy5zZXJ2ZXJVcmwgPSBudWxsO1xuXG4gICAgdGhpcy52ZXJzaW9uID0gbnVsbDtcbn1cblxuU2VydmljZS5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IFNlcnZpY2VcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VydmljZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Service.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Style.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Style.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a style that may be used for a geoportal resource.\n *\n * @property {String} name - Style identifier (eg : \"normal\", \"bdparcellaire\", ...)\n * @property {String} title - human readable name of the style.\n * @property {Boolean} current - true if this is the default style.\n * @property {String} url - Url Style (eg: vectortile).\n *\n * @namespace\n * @alias Gp.Services.Config.Style\n */\n\nfunction Style () {\n    if (!(this instanceof Style)) {\n        throw new TypeError(\"Style constructor cannot be called as a function.\");\n    }\n\n    this.name = null;\n\n    this.title = null;\n\n    this.current = null;\n\n    this.url = null;\n}\n\nStyle.prototype = {\n\n    constructor : Style\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Style);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvU3R5bGUuanM/MDFkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVlLG9FQUFLLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1N0eWxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE9iamVjdCB1c2VkIHRvIGRlc2NyaWJlIGEgc3R5bGUgdGhhdCBtYXkgYmUgdXNlZCBmb3IgYSBnZW9wb3J0YWwgcmVzb3VyY2UuXG4gKlxuICogQHByb3BlcnR5IHtTdHJpbmd9IG5hbWUgLSBTdHlsZSBpZGVudGlmaWVyIChlZyA6IFwibm9ybWFsXCIsIFwiYmRwYXJjZWxsYWlyZVwiLCAuLi4pXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdGl0bGUgLSBodW1hbiByZWFkYWJsZSBuYW1lIG9mIHRoZSBzdHlsZS5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gY3VycmVudCAtIHRydWUgaWYgdGhpcyBpcyB0aGUgZGVmYXVsdCBzdHlsZS5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB1cmwgLSBVcmwgU3R5bGUgKGVnOiB2ZWN0b3J0aWxlKS5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuQ29uZmlnLlN0eWxlXG4gKi9cblxuZnVuY3Rpb24gU3R5bGUgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHlsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN0eWxlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gbnVsbDtcblxuICAgIHRoaXMudGl0bGUgPSBudWxsO1xuXG4gICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcblxuICAgIHRoaXMudXJsID0gbnVsbDtcbn1cblxuU3R5bGUucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBTdHlsZVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdHlsZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Style.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Territory.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Territory.js ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe properties of a french territory covered by geoportal resources.\n *\n * @property {Boolean} isDefault - if this territory is to use by default.\n * @property {String} defaultCRS - Identifier of the coordinates system to use by default for that territory.\n * @property {Array.<String>} additionalCRS - Identifiers of additional coordinates systems availables for that territory.\n * @property {Array.<String>} defaultLayers - Identifiers of layers to load by default for that territory.\n * @property {Object} defaultOptions - options to use by default for that territory.\n * @property {Number} defaultOptions.resolution - resolution to use by default for that territory (in meter per pixel).\n * @property {Number} defaultOptions.minScaleDenominator - minimum scaleDenominator accessible for that territory.\n * @property {Number} defaultOptions.maxScaleDenominator - maximum scaleDenominator accessible for that territory.\n * @property {Gp.BBox} geoBBox - Bounding Box of the territory (expressed in geographical coordinates)\n * @property {Object} geoCenter - center of the territory (expressed in geographical coordinates)\n * @property {Float} geoCenter.lon - center longitude\n * @property {Float} geoCenter.lat - center latitude\n *\n * @namespace\n * @alias Gp.Services.Config.Territory\n */\nfunction Territory () {\n    if (!(this instanceof Territory)) {\n        throw new TypeError(\"Territory constructor cannot be called as a function.\");\n    }\n\n    this.isDefault = null;\n\n    this.defaultCRS = null;\n\n    this.additionalCRS = [];\n\n    this.geoBBOX = {\n        left : null,\n        right : null,\n        top : null,\n        bottom : null\n    };\n\n    this.geoCenter = {\n        lon : null,\n        lat : null\n    };\n\n    this.defaultOptions = {\n        resolution : null,\n        minScaleDenominator : null,\n        maxScaleDenominator : null\n    };\n\n    this.defaultLayers = [];\n}\n\nTerritory.prototype = {\n\n    constructor : Territory\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Territory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGVycml0b3J5LmpzPzI4ZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsZUFBZTtBQUM3QixjQUFjLGVBQWU7QUFDN0IsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QixjQUFjLE9BQU87QUFDckIsY0FBYyxNQUFNO0FBQ3BCLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUsd0VBQVMsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGVycml0b3J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE9iamVjdCB1c2VkIHRvIGRlc2NyaWJlIHByb3BlcnRpZXMgb2YgYSBmcmVuY2ggdGVycml0b3J5IGNvdmVyZWQgYnkgZ2VvcG9ydGFsIHJlc291cmNlcy5cbiAqXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzRGVmYXVsdCAtIGlmIHRoaXMgdGVycml0b3J5IGlzIHRvIHVzZSBieSBkZWZhdWx0LlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRlZmF1bHRDUlMgLSBJZGVudGlmaWVyIG9mIHRoZSBjb29yZGluYXRlcyBzeXN0ZW0gdG8gdXNlIGJ5IGRlZmF1bHQgZm9yIHRoYXQgdGVycml0b3J5LlxuICogQHByb3BlcnR5IHtBcnJheS48U3RyaW5nPn0gYWRkaXRpb25hbENSUyAtIElkZW50aWZpZXJzIG9mIGFkZGl0aW9uYWwgY29vcmRpbmF0ZXMgc3lzdGVtcyBhdmFpbGFibGVzIGZvciB0aGF0IHRlcnJpdG9yeS5cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPFN0cmluZz59IGRlZmF1bHRMYXllcnMgLSBJZGVudGlmaWVycyBvZiBsYXllcnMgdG8gbG9hZCBieSBkZWZhdWx0IGZvciB0aGF0IHRlcnJpdG9yeS5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkZWZhdWx0T3B0aW9ucyAtIG9wdGlvbnMgdG8gdXNlIGJ5IGRlZmF1bHQgZm9yIHRoYXQgdGVycml0b3J5LlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IGRlZmF1bHRPcHRpb25zLnJlc29sdXRpb24gLSByZXNvbHV0aW9uIHRvIHVzZSBieSBkZWZhdWx0IGZvciB0aGF0IHRlcnJpdG9yeSAoaW4gbWV0ZXIgcGVyIHBpeGVsKS5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBkZWZhdWx0T3B0aW9ucy5taW5TY2FsZURlbm9taW5hdG9yIC0gbWluaW11bSBzY2FsZURlbm9taW5hdG9yIGFjY2Vzc2libGUgZm9yIHRoYXQgdGVycml0b3J5LlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IGRlZmF1bHRPcHRpb25zLm1heFNjYWxlRGVub21pbmF0b3IgLSBtYXhpbXVtIHNjYWxlRGVub21pbmF0b3IgYWNjZXNzaWJsZSBmb3IgdGhhdCB0ZXJyaXRvcnkuXG4gKiBAcHJvcGVydHkge0dwLkJCb3h9IGdlb0JCb3ggLSBCb3VuZGluZyBCb3ggb2YgdGhlIHRlcnJpdG9yeSAoZXhwcmVzc2VkIGluIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcylcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBnZW9DZW50ZXIgLSBjZW50ZXIgb2YgdGhlIHRlcnJpdG9yeSAoZXhwcmVzc2VkIGluIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcylcbiAqIEBwcm9wZXJ0eSB7RmxvYXR9IGdlb0NlbnRlci5sb24gLSBjZW50ZXIgbG9uZ2l0dWRlXG4gKiBAcHJvcGVydHkge0Zsb2F0fSBnZW9DZW50ZXIubGF0IC0gY2VudGVyIGxhdGl0dWRlXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkNvbmZpZy5UZXJyaXRvcnlcbiAqL1xuZnVuY3Rpb24gVGVycml0b3J5ICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVGVycml0b3J5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGVycml0b3J5IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5pc0RlZmF1bHQgPSBudWxsO1xuXG4gICAgdGhpcy5kZWZhdWx0Q1JTID0gbnVsbDtcblxuICAgIHRoaXMuYWRkaXRpb25hbENSUyA9IFtdO1xuXG4gICAgdGhpcy5nZW9CQk9YID0ge1xuICAgICAgICBsZWZ0IDogbnVsbCxcbiAgICAgICAgcmlnaHQgOiBudWxsLFxuICAgICAgICB0b3AgOiBudWxsLFxuICAgICAgICBib3R0b20gOiBudWxsXG4gICAgfTtcblxuICAgIHRoaXMuZ2VvQ2VudGVyID0ge1xuICAgICAgICBsb24gOiBudWxsLFxuICAgICAgICBsYXQgOiBudWxsXG4gICAgfTtcblxuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgIHJlc29sdXRpb24gOiBudWxsLFxuICAgICAgICBtaW5TY2FsZURlbm9taW5hdG9yIDogbnVsbCxcbiAgICAgICAgbWF4U2NhbGVEZW5vbWluYXRvciA6IG51bGxcbiAgICB9O1xuXG4gICAgdGhpcy5kZWZhdWx0TGF5ZXJzID0gW107XG59XG5cblRlcnJpdG9yeS5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IFRlcnJpdG9yeVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZXJyaXRvcnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Territory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Thematic.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Thematic.js ***!
  \********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a thematic\n *\n * @property {String} name - Thematic name\n * @property {Boolean} inspire - true if the thematic name is an [INSPIRE one]{@link http://inspire.ec.europa.eu/index.cfm/pageid/2/list/7}.\n *\n * @namespace\n * @alias Gp.Services.Config.Thematic\n */\n\nfunction Thematic () {\n    if (!(this instanceof Thematic)) {\n        throw new TypeError(\"Thematic constructor cannot be called as a function.\");\n    }\n\n    this.inspire = null;\n\n    this.name = null;\n}\n\nThematic.prototype = {\n\n    constructor : Thematic\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Thematic);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGhlbWF0aWMuanM/YTJhMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLFFBQVEseURBQXlELDREQUE0RDtBQUMzSTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVlLHVFQUFRLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1RoZW1hdGljLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE9iamVjdCB1c2VkIHRvIGRlc2NyaWJlIGEgdGhlbWF0aWNcbiAqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbmFtZSAtIFRoZW1hdGljIG5hbWVcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaW5zcGlyZSAtIHRydWUgaWYgdGhlIHRoZW1hdGljIG5hbWUgaXMgYW4gW0lOU1BJUkUgb25lXXtAbGluayBodHRwOi8vaW5zcGlyZS5lYy5ldXJvcGEuZXUvaW5kZXguY2ZtL3BhZ2VpZC8yL2xpc3QvN30uXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkNvbmZpZy5UaGVtYXRpY1xuICovXG5cbmZ1bmN0aW9uIFRoZW1hdGljICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVGhlbWF0aWMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVtYXRpYyBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMuaW5zcGlyZSA9IG51bGw7XG5cbiAgICB0aGlzLm5hbWUgPSBudWxsO1xufVxuXG5UaGVtYXRpYy5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IFRoZW1hdGljXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1hdGljO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/Thematic.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrix.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrix.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a TileMatrix.\n *\n * @property {String} matrixId - matrix Identifier\n * @property {Number} matrixHeight - Number of tiles from the top to the bottom of the matrix.\n * @property {Number} matrixWidth - Number of tiles from the left to the right of the matrix.\n * @property {Number} scaleDenominator - Scale denominator associated to that matrix.\n * @property {Number} tileHeight - tile height in number of pixels\n * @property {Number} tileWidth - tile width in number of pixels\n * @property {Gp.Point} topLeftCorner - Top Left Corner Point of the matrix expressed in the tileMatrixSet coordinates system.\n *\n * @namespace\n * @alias Gp.Services.Config.TileMatrix\n */\n\nfunction TileMatrix () {\n    if (!(this instanceof TileMatrix)) {\n        throw new TypeError(\"TileMatrix constructor cannot be called as a function.\");\n    }\n\n    this.matrixId = null;\n\n    this.matrixHeight = null;\n\n    this.matrixWidth = null;\n\n    this.scaleDenominator = null;\n\n    this.tileHeight = null;\n\n    this.tileWidth = null;\n\n    this.topLeftCorner = null;\n}\n\nTileMatrix.prototype = {\n\n    constructor : TileMatrix,\n\n    /**\n     * Returns top left corner point of the matrix\n     *\n     * @returns {Gp.Point} topLeftCorner - Top Left Corner Point of the matrix expressed in the tileMatrixSet coordinates system.\n     */\n    getTopLeftCorner : function () {\n        return this.topLeftCorner;\n    },\n\n    /**\n     * Returns Scale denominator associated to that matrix.\n     *\n     * @returns {Number} scaleDenominator - Scale denominator associated to that matrix.\n     */\n    getScaleDenominator : function () {\n        return this.scaleDenominator;\n    },\n\n    /**\n     * Returns tile height of matrix\n     *\n     * @returns {Number} tileHeight - tile height in number of pixels\n     */\n    getTileHeight : function () {\n        return this.tileHeight;\n    },\n\n    /**\n     * Returns tile width of matrix\n     *\n     * @returns {Number} tileWidth - tile width in number of pixels\n     */\n    getTileWidth : function () {\n        return this.tileWidth;\n    },\n\n    /**\n     * Returns matrix height (number of tiles)\n     *\n     * @returns {Number} matrixHeight - Number of tiles from the top to the bottom of the matrix.\n     */\n    getMatrixHeight : function () {\n        return this.matrixHeight;\n    },\n\n    /**\n     * Returns matrix width (number of tiles)\n     *\n     * @returns {Number} matrixWidth - Number of tiles from the left to the right of the matrix.\n     */\n    getMatrixWidth : function () {\n        return this.matrixWidth;\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TileMatrix);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGlsZU1hdHJpeC5qcz9hMWZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVlLHlFQUFVLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1RpbGVNYXRyaXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogT2JqZWN0IHVzZWQgdG8gZGVzY3JpYmUgYSBUaWxlTWF0cml4LlxuICpcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBtYXRyaXhJZCAtIG1hdHJpeCBJZGVudGlmaWVyXG4gKiBAcHJvcGVydHkge051bWJlcn0gbWF0cml4SGVpZ2h0IC0gTnVtYmVyIG9mIHRpbGVzIGZyb20gdGhlIHRvcCB0byB0aGUgYm90dG9tIG9mIHRoZSBtYXRyaXguXG4gKiBAcHJvcGVydHkge051bWJlcn0gbWF0cml4V2lkdGggLSBOdW1iZXIgb2YgdGlsZXMgZnJvbSB0aGUgbGVmdCB0byB0aGUgcmlnaHQgb2YgdGhlIG1hdHJpeC5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzY2FsZURlbm9taW5hdG9yIC0gU2NhbGUgZGVub21pbmF0b3IgYXNzb2NpYXRlZCB0byB0aGF0IG1hdHJpeC5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0aWxlSGVpZ2h0IC0gdGlsZSBoZWlnaHQgaW4gbnVtYmVyIG9mIHBpeGVsc1xuICogQHByb3BlcnR5IHtOdW1iZXJ9IHRpbGVXaWR0aCAtIHRpbGUgd2lkdGggaW4gbnVtYmVyIG9mIHBpeGVsc1xuICogQHByb3BlcnR5IHtHcC5Qb2ludH0gdG9wTGVmdENvcm5lciAtIFRvcCBMZWZ0IENvcm5lciBQb2ludCBvZiB0aGUgbWF0cml4IGV4cHJlc3NlZCBpbiB0aGUgdGlsZU1hdHJpeFNldCBjb29yZGluYXRlcyBzeXN0ZW0uXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkNvbmZpZy5UaWxlTWF0cml4XG4gKi9cblxuZnVuY3Rpb24gVGlsZU1hdHJpeCAoKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRpbGVNYXRyaXgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaWxlTWF0cml4IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5tYXRyaXhJZCA9IG51bGw7XG5cbiAgICB0aGlzLm1hdHJpeEhlaWdodCA9IG51bGw7XG5cbiAgICB0aGlzLm1hdHJpeFdpZHRoID0gbnVsbDtcblxuICAgIHRoaXMuc2NhbGVEZW5vbWluYXRvciA9IG51bGw7XG5cbiAgICB0aGlzLnRpbGVIZWlnaHQgPSBudWxsO1xuXG4gICAgdGhpcy50aWxlV2lkdGggPSBudWxsO1xuXG4gICAgdGhpcy50b3BMZWZ0Q29ybmVyID0gbnVsbDtcbn1cblxuVGlsZU1hdHJpeC5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IFRpbGVNYXRyaXgsXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRvcCBsZWZ0IGNvcm5lciBwb2ludCBvZiB0aGUgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7R3AuUG9pbnR9IHRvcExlZnRDb3JuZXIgLSBUb3AgTGVmdCBDb3JuZXIgUG9pbnQgb2YgdGhlIG1hdHJpeCBleHByZXNzZWQgaW4gdGhlIHRpbGVNYXRyaXhTZXQgY29vcmRpbmF0ZXMgc3lzdGVtLlxuICAgICAqL1xuICAgIGdldFRvcExlZnRDb3JuZXIgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvcExlZnRDb3JuZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgU2NhbGUgZGVub21pbmF0b3IgYXNzb2NpYXRlZCB0byB0aGF0IG1hdHJpeC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IHNjYWxlRGVub21pbmF0b3IgLSBTY2FsZSBkZW5vbWluYXRvciBhc3NvY2lhdGVkIHRvIHRoYXQgbWF0cml4LlxuICAgICAqL1xuICAgIGdldFNjYWxlRGVub21pbmF0b3IgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjYWxlRGVub21pbmF0b3I7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGlsZSBoZWlnaHQgb2YgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSB0aWxlSGVpZ2h0IC0gdGlsZSBoZWlnaHQgaW4gbnVtYmVyIG9mIHBpeGVsc1xuICAgICAqL1xuICAgIGdldFRpbGVIZWlnaHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVIZWlnaHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGlsZSB3aWR0aCBvZiBtYXRyaXhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IHRpbGVXaWR0aCAtIHRpbGUgd2lkdGggaW4gbnVtYmVyIG9mIHBpeGVsc1xuICAgICAqL1xuICAgIGdldFRpbGVXaWR0aCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZVdpZHRoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG1hdHJpeCBoZWlnaHQgKG51bWJlciBvZiB0aWxlcylcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IG1hdHJpeEhlaWdodCAtIE51bWJlciBvZiB0aWxlcyBmcm9tIHRoZSB0b3AgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbWF0cml4LlxuICAgICAqL1xuICAgIGdldE1hdHJpeEhlaWdodCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0cml4SGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG1hdHJpeCB3aWR0aCAobnVtYmVyIG9mIHRpbGVzKVxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn0gbWF0cml4V2lkdGggLSBOdW1iZXIgb2YgdGlsZXMgZnJvbSB0aGUgbGVmdCB0byB0aGUgcmlnaHQgb2YgdGhlIG1hdHJpeC5cbiAgICAgKi9cbiAgICBnZXRNYXRyaXhXaWR0aCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0cml4V2lkdGg7XG4gICAgfVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUaWxlTWF0cml4O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrix.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixLimit.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixLimit.js ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Object used to describe a layer extent on a Tile Matrix.\n *\n * @property {Number} minTileCol - minimum column index where tile can be found on the Tile matrix.\n * @property {Number} maxTileCol - maximum column index where tile can be found on the Tile matrix.\n * @property {Number} minTileRow - minimum row index where tile can be found on the Tile matrix.\n * @property {Number} maxTileCol - maximum row index where tile can be found on the Tile matrix.\n *\n * @namespace\n * @alias Gp.Services.Config.TileMatrixLimit\n */\n\nfunction TileMatrixLimit () {\n    if (!(this instanceof TileMatrixLimit)) {\n        throw new TypeError(\"TileMatrixLimit constructor cannot be called as a function.\");\n    }\n\n    this.minTileRow = null;\n\n    this.maxTileRow = null;\n\n    this.minTileCol = null;\n\n    this.maxTileCol = null;\n}\n\n/**\n * @lends module:Autoconf/Response/TileMatrixLimit\n */\nTileMatrixLimit.prototype = {\n\n    constructor : TileMatrixLimit\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TileMatrixLimit);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGlsZU1hdHJpeExpbWl0LmpzP2QwMjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVlLDhFQUFlLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0F1dG9Db25mL1Jlc3BvbnNlL21vZGVsL1RpbGVNYXRyaXhMaW1pdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBPYmplY3QgdXNlZCB0byBkZXNjcmliZSBhIGxheWVyIGV4dGVudCBvbiBhIFRpbGUgTWF0cml4LlxuICpcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtaW5UaWxlQ29sIC0gbWluaW11bSBjb2x1bW4gaW5kZXggd2hlcmUgdGlsZSBjYW4gYmUgZm91bmQgb24gdGhlIFRpbGUgbWF0cml4LlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IG1heFRpbGVDb2wgLSBtYXhpbXVtIGNvbHVtbiBpbmRleCB3aGVyZSB0aWxlIGNhbiBiZSBmb3VuZCBvbiB0aGUgVGlsZSBtYXRyaXguXG4gKiBAcHJvcGVydHkge051bWJlcn0gbWluVGlsZVJvdyAtIG1pbmltdW0gcm93IGluZGV4IHdoZXJlIHRpbGUgY2FuIGJlIGZvdW5kIG9uIHRoZSBUaWxlIG1hdHJpeC5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtYXhUaWxlQ29sIC0gbWF4aW11bSByb3cgaW5kZXggd2hlcmUgdGlsZSBjYW4gYmUgZm91bmQgb24gdGhlIFRpbGUgbWF0cml4LlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Db25maWcuVGlsZU1hdHJpeExpbWl0XG4gKi9cblxuZnVuY3Rpb24gVGlsZU1hdHJpeExpbWl0ICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVGlsZU1hdHJpeExpbWl0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGlsZU1hdHJpeExpbWl0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy5taW5UaWxlUm93ID0gbnVsbDtcblxuICAgIHRoaXMubWF4VGlsZVJvdyA9IG51bGw7XG5cbiAgICB0aGlzLm1pblRpbGVDb2wgPSBudWxsO1xuXG4gICAgdGhpcy5tYXhUaWxlQ29sID0gbnVsbDtcbn1cblxuLyoqXG4gKiBAbGVuZHMgbW9kdWxlOkF1dG9jb25mL1Jlc3BvbnNlL1RpbGVNYXRyaXhMaW1pdFxuICovXG5UaWxlTWF0cml4TGltaXQucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBUaWxlTWF0cml4TGltaXRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpbGVNYXRyaXhMaW1pdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixLimit.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixSet.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixSet.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n *\n * Object used to describe a TileMatrix set (for WMTS use).\n *\n * @property {Array.<String>} matrixIds - Array of IDs for each TileMatrix of the set.\n * @property {Array.<Gp.Services.Config.TileMatrix>} tileMatrices - Array of TileMatrix descriptions.\n * @property {Array.<Float>} nativeResolutions - Array of resolutions (in meter per pixel) applying for each TileMatrix of the set.\n * @property {String} projection - Identifier of the Cordinates System used for the tileMatrixSet.\n *\n * @namespace\n * @alias Gp.Services.Config.TileMatrixSet\n */\nfunction TileMatrixSet () {\n    if (!(this instanceof TileMatrixSet)) {\n        throw new TypeError(\"TileMatrixSet constructor cannot be called as a function.\");\n    }\n\n    this.projection = null;\n\n    this.nativeResolutions = [];\n\n    this.matrixIds = [];\n\n    this.tileMatrices = {};\n}\n\nTileMatrixSet.prototype = {\n\n    constructor : TileMatrixSet,\n\n    /**\n     * Returns Tile Matrix Set resolutions\n     *\n     * @returns {Array} nativeResolutions - Array of resolutions (in meter per pixel) applying for each TileMatrix of the set.\n     */\n    getResolutions : function () {\n        return this.nativeResolutions;\n    },\n\n    /**\n     * Returns Tile Matrix Set identifiers\n     *\n     * @returns {Array} matrixIds - Array of IDs for each TileMatrix of the set.\n     */\n    getMatrixIds : function () {\n        return this.matrixIds;\n    },\n\n    /**\n     * Returns Tile Matrix Set projection\n     *\n     * @returns {String} projection - Identifier of the Cordinates System used for the tileMatrixSet.\n     */\n    getProjection : function () {\n        return this.projection;\n    },\n\n    /**\n     * Returns Tile Matrices descriptions.\n     *\n     * @returns {Array.<Gp.Services.Config.TileMatrix>} tileMatrices - Array of TileMatrix descriptions.\n     */\n    getTileMatrices : function () {\n        return this.tileMatrices;\n    },\n\n    /**\n     * Returns top left corner point of matrices\n     *\n     * @returns {Gp.Point} topLeftCorner - Top Left Corner Point of TMS matrices, expressed in the tileMatrixSet coordinates system.\n     */\n    getTopLeftCorner : function () {\n        var topLeftCorner;\n        var matrices = this.getTileMatrices();\n        if (matrices) {\n            for (var id in matrices) {\n                if (matrices.hasOwnProperty(id)) {\n                    topLeftCorner = matrices[id].topLeftCorner;\n                    break;\n                }\n            }\n        }\n        return topLeftCorner;\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TileMatrixSet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGlsZU1hdHJpeFNldC5qcz82NDI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGVBQWU7QUFDN0IsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyxjQUFjO0FBQzVCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHNDQUFzQztBQUN2RDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRWUsNEVBQWEsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQXV0b0NvbmYvUmVzcG9uc2UvbW9kZWwvVGlsZU1hdHJpeFNldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKlxuICogT2JqZWN0IHVzZWQgdG8gZGVzY3JpYmUgYSBUaWxlTWF0cml4IHNldCAoZm9yIFdNVFMgdXNlKS5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxTdHJpbmc+fSBtYXRyaXhJZHMgLSBBcnJheSBvZiBJRHMgZm9yIGVhY2ggVGlsZU1hdHJpeCBvZiB0aGUgc2V0LlxuICogQHByb3BlcnR5IHtBcnJheS48R3AuU2VydmljZXMuQ29uZmlnLlRpbGVNYXRyaXg+fSB0aWxlTWF0cmljZXMgLSBBcnJheSBvZiBUaWxlTWF0cml4IGRlc2NyaXB0aW9ucy5cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZsb2F0Pn0gbmF0aXZlUmVzb2x1dGlvbnMgLSBBcnJheSBvZiByZXNvbHV0aW9ucyAoaW4gbWV0ZXIgcGVyIHBpeGVsKSBhcHBseWluZyBmb3IgZWFjaCBUaWxlTWF0cml4IG9mIHRoZSBzZXQuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvamVjdGlvbiAtIElkZW50aWZpZXIgb2YgdGhlIENvcmRpbmF0ZXMgU3lzdGVtIHVzZWQgZm9yIHRoZSB0aWxlTWF0cml4U2V0LlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Db25maWcuVGlsZU1hdHJpeFNldFxuICovXG5mdW5jdGlvbiBUaWxlTWF0cml4U2V0ICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVGlsZU1hdHJpeFNldCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRpbGVNYXRyaXhTZXQgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb2plY3Rpb24gPSBudWxsO1xuXG4gICAgdGhpcy5uYXRpdmVSZXNvbHV0aW9ucyA9IFtdO1xuXG4gICAgdGhpcy5tYXRyaXhJZHMgPSBbXTtcblxuICAgIHRoaXMudGlsZU1hdHJpY2VzID0ge307XG59XG5cblRpbGVNYXRyaXhTZXQucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBUaWxlTWF0cml4U2V0LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBUaWxlIE1hdHJpeCBTZXQgcmVzb2x1dGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gbmF0aXZlUmVzb2x1dGlvbnMgLSBBcnJheSBvZiByZXNvbHV0aW9ucyAoaW4gbWV0ZXIgcGVyIHBpeGVsKSBhcHBseWluZyBmb3IgZWFjaCBUaWxlTWF0cml4IG9mIHRoZSBzZXQuXG4gICAgICovXG4gICAgZ2V0UmVzb2x1dGlvbnMgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJlc29sdXRpb25zO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFRpbGUgTWF0cml4IFNldCBpZGVudGlmaWVyc1xuICAgICAqXG4gICAgICogQHJldHVybnMge0FycmF5fSBtYXRyaXhJZHMgLSBBcnJheSBvZiBJRHMgZm9yIGVhY2ggVGlsZU1hdHJpeCBvZiB0aGUgc2V0LlxuICAgICAqL1xuICAgIGdldE1hdHJpeElkcyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0cml4SWRzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFRpbGUgTWF0cml4IFNldCBwcm9qZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBwcm9qZWN0aW9uIC0gSWRlbnRpZmllciBvZiB0aGUgQ29yZGluYXRlcyBTeXN0ZW0gdXNlZCBmb3IgdGhlIHRpbGVNYXRyaXhTZXQuXG4gICAgICovXG4gICAgZ2V0UHJvamVjdGlvbiA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBUaWxlIE1hdHJpY2VzIGRlc2NyaXB0aW9ucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtBcnJheS48R3AuU2VydmljZXMuQ29uZmlnLlRpbGVNYXRyaXg+fSB0aWxlTWF0cmljZXMgLSBBcnJheSBvZiBUaWxlTWF0cml4IGRlc2NyaXB0aW9ucy5cbiAgICAgKi9cbiAgICBnZXRUaWxlTWF0cmljZXMgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVNYXRyaWNlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0b3AgbGVmdCBjb3JuZXIgcG9pbnQgb2YgbWF0cmljZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtHcC5Qb2ludH0gdG9wTGVmdENvcm5lciAtIFRvcCBMZWZ0IENvcm5lciBQb2ludCBvZiBUTVMgbWF0cmljZXMsIGV4cHJlc3NlZCBpbiB0aGUgdGlsZU1hdHJpeFNldCBjb29yZGluYXRlcyBzeXN0ZW0uXG4gICAgICovXG4gICAgZ2V0VG9wTGVmdENvcm5lciA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvcExlZnRDb3JuZXI7XG4gICAgICAgIHZhciBtYXRyaWNlcyA9IHRoaXMuZ2V0VGlsZU1hdHJpY2VzKCk7XG4gICAgICAgIGlmIChtYXRyaWNlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaWQgaW4gbWF0cmljZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0cmljZXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcExlZnRDb3JuZXIgPSBtYXRyaWNlc1tpZF0udG9wTGVmdENvcm5lcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3BMZWZ0Q29ybmVyO1xuICAgIH1cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGlsZU1hdHJpeFNldDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/AutoConf/Response/model/TileMatrixSet.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/CommonService.js":
/*!*************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/CommonService.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Protocols_Protocol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Protocols/Protocol */ \"./node_modules/geoportal-access-lib/src/Protocols/Protocol.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _DefaultUrlService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../package.json */ \"./node_modules/geoportal-access-lib/package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_6___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../package.json */ \"./node_modules/geoportal-access-lib/package.json\", 1);\n\n\n\n\n\n\n// package.json (extract version)\n\n\n/**\n * @classdesc\n * Composant Service\n *\n * @constructor\n * @alias Gp.Services.CommonService\n * @param {Object} options - options communes à tous les services\n *\n * @param {String} options.apiKey - Clef d'accès à la plateforme Géoportail,\n *      nécessaire pour franchir la couche de contrôle des accès pour avoir une réponse du service invoqué.\n *      Plusieurs clefs peuvent être passées dans le cas de l'invocation du service d'autoconfiguration.\n *      Si ce paramètre n'est pas renseigné, alors le paramètre serverUrl doit être renseigné (comprenant alors, si nécessaire la clef API).\n *\n * @param {String} options.serverUrl - URL d'accès au service.\n *      Permet de forcer l'utilisation d'un service équivalent déployé derrière une éventuelle autre URL d'accès.\n *      Si ce paramètre est renseigné alors, le paramètre apiKey est ignoré.\n *\n * @param {String} [options.protocol] - Le protocole à utiliser pour récupérer les informations du service :\n *      peut valoir 'JSONP' ou 'XHR'.\n *      Par défaut, c'est le protocole XHR qui sera utilisé.\n *      Attention, le protocole JSONP n'est pas valide dans un environnement NodeJS (Utilisation du mode XHR).\n *\n * @param {Boolean} [options.ssl] - Indique si l'on souhaite intérroger les services en https.\n *      Ce paramètre ne fonctionne que pour une utilisation hors navigateur (ex. NodeJS).\n *      Sur un navigateur, le protocole est automatiquement extrait de l'url du site...\n *      Par défaut, on utilise le protocole http (ssl=false).\n *\n * @param {String} [options.proxyURL] - Le proxy à utiliser pour pallier au problème de cross-domain dans le cas d'une requête XHR.\n *      Utile si le paramètre 'protocol' vaut 'XHR', il ne sera pas pris en compte si protocol vaut JSONP.\n *\n * @param {String} [options.callbackSuffix] - Suffixe de la fonction de callback à utiliser, dans le cas du protocole JSONP.\n *      Par défaut, la fonction de callback portera un nom du type \"callback\"+ID, où ID est soit un identifiant unique généré à chaque requête,\n *      soit le paramètre callbackSuffix s'il est spécifié. Par exemple, si callbackSuffix=\"_2\", la fonction sera \"callback_2 ()\".\n *      Utile pour utiliser une réponse déjà encapsulée dans une fonction de callback, dont le nom est connu (ex : chargement de l'autoconfiguration en local)\n *      Utile seulement si le paramètre 'protocol' vaut 'JSONP', il ne sera pas pris en compte si protocol vaut 'XHR'.\n *\n * @param {String} [options.httpMethod] - La méthode HTTP\n *      à utiliser dans le cas d'une requête XHR : peut valoir 'GET' ou 'POST'.\n *      Non pris en compte si 'protocol' vaut JSONP qui fonctionne obligatoirement en GET.\n *      Par défaut, c'est la méthode GET qui est utilisée.\n *\n * @param {String} [options.contentType] - Content-Type de la requete\n *      à utiliser dans le cas d'une requête XHR en mode POST.\n *      Non pris en compte si 'protocol' vaut JSONP et/ou la méthode HTTP vaut GET.\n *      Par défaut, c'est la méthode GET qui est utilisée donc on n'utilise pas de Content-Type.\n *\n * @param {Number} [options.timeOut] - Délai d'attente maximal (en ms) de la réponse du service (à partir de l'envoi de la requête).\n *      Par défaut, aucun timeOut n'est pris en compte (timeoutDelay= 0).\n *\n * @param {Boolean} [options.rawResponse] - Indique si l'on souhaite que la réponse du service ne soit pas parsée par l'API avant d'être restituée.\n *      (Cf. paramètre « onSuccess » pour plus de détails).\n *\n * @param {Function} [options.onSuccess] - Fonction appelée lorsque le service répond correctement à la requête\n *      (code HTTP 200, sans message d'erreur).\n *      Cette fonction prend en paramètre la réponse du service,\n *      soit sous la forme d'un Object Javascript formaté par le parseur dédié à la syntaxe du service (comportement par défaut) ;\n *      soit brute au format String non prétraité si le paramètre « rawResponse » a été précisé avec la valeur « true ».\n *\n * @param {Function} [options.onFailure] - Fonction appelée lorsque le service ne répond pas correctement\n *      (code HTTP de retour différent de 200 ou pas de réponse).\n *\n * @param {Function} [options.onBeforeParse] - Fonction appelée avant le parsing de la réponse\n *      Permet de modifier la réponse avant parsing et la fonction doit retourner une String.\n *      Cette fonction prend en paramètre la réponse telle que renvoyée par le service\n *      (cad au format json ou xml).\n *      Pour le JSONP, si le paramètre \"rawResponse\" a été précisé avec la valeur \"true\",\n *      la fonction prend en paramètre un Object JavaScript contenant la réponse XML.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      ssl : false,\n *      proxyURL : null,\n *      callbackName : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      onBeforeParse : function (rawResponse) {}\n *   };\n * @private\n */\nfunction CommonService (options) {\n    if (!(this instanceof CommonService)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\"));\n    }\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"CommonService\");\n    this.logger.trace(\"[Constructeur CommonService (options)]\");\n\n    // #####################\n    // récupération des options par défaut pour les paramètres optionnels\n    // #####################\n\n    /**\n     * Options du service\n     * @type {Object}\n     */\n    this.options = {\n        // protocol : \"JSONP\",\n        protocol : \"XHR\",\n        ssl : true,\n        proxyURL : \"\",\n        // callbackName : \"\",\n        callbackSuffix : null,\n        httpMethod : \"GET\",\n        timeOut : 0,\n        rawResponse : false,\n        scope : this,\n        /**\n        * callback par defaut pour la reponse\n        * @param {Object} response - response\n        * @private\n        */\n        onSuccess : function (response) {\n            console.log(\"onSuccess - la reponse est la suivante : \", response);\n        },\n        /**\n        * callback par defaut pour les erreurs\n        * @param {Object} error - error\n        * @private\n        */\n        onFailure : function (error) {\n            if (error.status === 200 || !error.status) {\n                console.log(\"onFailure : \", error.message);\n            } else {\n                console.log(\"onFailure - Erreur (\", error.status, \") : \", error.message);\n            }\n        }\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    // gestion des clefs API\n    if (!this.options.apiKey && !this.options.serverUrl) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_MISSING\", \"apiKey\", \"serverUrl\"));\n    }\n\n    // modification de la fonction de callback onSuccess dans le cas où la réponse brute est demandée\n    if (this.options.rawResponse && !this.options.onSuccess) {\n        /**\n        * callback par defaut pour la reponse\n        * @param {Object} response - response\n        * @private\n        */\n        this.options.onSuccess = function (response) {\n            console.log(\"onSuccess - la réponse brute du service est la suivante : \", response);\n        };\n    }\n\n    // gestion du callback onSuccess\n    var bOnSuccess = !!((this.options.onSuccess !== null && typeof this.options.onSuccess === \"function\"));\n    if (!bOnSuccess) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_MISSING\", \"onSuccess()\"));\n    }\n\n    // gestion de l'url du service par defaut\n    if (!this.options.serverUrl) {\n        // INFO\n        // gestion de l'url du service par defaut pour les services qui ne possèdent qu'une seul url par defaut\n        // les cas particuliers des services avec plusieurs urls (ex. Alti) devront être traité dans la classe du composant\n        // donc si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n        _DefaultUrlService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ssl = this.options.ssl;\n        var urlByDefault = _DefaultUrlService__WEBPACK_IMPORTED_MODULE_5__[\"default\"][this.CLASSNAME].url(this.options.apiKey);\n        if (typeof urlByDefault === \"string\") {\n            this.options.serverUrl = urlByDefault;\n        } else {\n            this.logger.trace(\"URL par defaut à determiner au niveau du composant...\");\n        }\n    }\n\n    // FIXME nettoyage des KVP dans l'url du service\n    // if (this.options.serverUrl) {\n    //     // INFO\n    //     // si l'url est renseignée, il faut la nettoyer de tous ses KVP\n    //     // ex. on ne veut pas de params. 'callback' ou 'output' car ceci declencherait\n    //     // des opérations d'encapsulations des reponses légèrement farfelues ...\n    //     var urlsource = this.options.serverUrl;\n    //     var urlparts = urlsource.split(\"?\");\n    //     this.options.serverUrl = urlparts[0];\n    // }\n\n    // gestion de la methode HTTP\n    this.options.httpMethod = (typeof options.httpMethod === \"string\") ? options.httpMethod.toUpperCase() : \"GET\";\n\n    switch (this.options.httpMethod) {\n        case \"POST\":\n        case \"GET\":\n            break;\n        case \"PUT\":\n        case \"DELETE\":\n        case \"HEAD\":\n        case \"OPTIONS\":\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_NOT_SUPPORT\", \"httpMethod\"));\n        default:\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_UNKNOWN\", \"httpMethod\"));\n    }\n\n    // gestion du protocole\n    // this.options.protocol = (typeof options.protocol === \"string\" ) ? options.protocol.toUpperCase() : \"JSONP\";\n    this.options.protocol = (typeof options.protocol === \"string\") ? options.protocol.toUpperCase() : \"XHR\";\n\n    switch (this.options.protocol) {\n        case \"JSONP\":\n        case \"XHR\":\n            break;\n        default:\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_UNKNOWN\", \"protocol\"));\n    }\n\n    // on determine l'environnement d'execution : browser ou non ?\n    // et on lance une exception sur l'utilisation du protocole JSONP pour nodeJS...\n    if (typeof window === \"undefined\" && this.options.protocol === \"JSONP\") {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_NOT_SUPPORT_NODEJS\", \"protocol=JSONP (instead use XHR)\"));\n    }\n\n    // le protocole JSONP ne fonctionne qu'en GET.\n    if (this.options.protocol === \"JSONP\") {\n        this.options.httpMethod = \"GET\";\n    }\n\n    // gestion du cache\n    this.options.nocache = options.nocache || false;\n\n    // #####################\n    // attributs d'instances\n    // #####################\n\n    /**\n     * Format de réponse du service\n     */\n    this.options.outputFormat = null;\n    /**\n     * Requête envoyée au service\n     */\n    this.request = null;\n    /**\n     * Reponse du service\n     */\n    this.response = null;\n}\n\n/**\n * @lends module:CommonService\n */\nCommonService.prototype = {\n\n    /*\n     * Constructeur (alias)\n     */\n    constructor : CommonService,\n\n    /**\n     * Appel du service Géoportail\n     */\n    call : function () {\n        /* jshint validthis : true */\n        this.logger.trace(\"CommonService::call ()\");\n\n        var context = this;\n        /** fonction d'execution */\n        function run () {\n            this.logger.trace(\"CommonService::run ()\");\n            this.buildRequest.call(context, onError, onBuildRequest);\n        }\n\n        run.call(context);\n\n        // callback de fin de construction de la requête\n        function onBuildRequest (result) {\n            this.logger.trace(\"CommonService::onBuildRequest : \", result);\n            this.callService.call(context, onError, onCallService);\n        }\n\n        // callback de fin d'appel au service\n        function onCallService (result) {\n            this.logger.trace(\"CommonService::onCallService : \", result);\n            this.analyzeResponse.call(context, onError, onAnalyzeResponse);\n        }\n\n        // callback de fin de lecture de la reponse\n        function onAnalyzeResponse (result) {\n            this.logger.trace(\"CommonService::onAnalyzeResponse : \", result);\n            if (result) {\n                this.options.onSuccess.call(this, result);\n            } else {\n                return onError.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"Analyse de la reponse en échec !?\"));\n            }\n        }\n\n        // callback de gestion des erreurs : renvoit un objet de type ErrorService\n        function onError (error) {\n            this.logger.trace(\"CommonService::onError()\");\n            // error : l'objet est du type ErrorService ou Error\n            var e = error;\n            if (!(e instanceof _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"])) {\n                e = new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](error.message);\n            }\n            this.options.onFailure.call(this, e);\n        }\n    },\n\n    /**\n     * Création de la requête\n     * @param {Function} error - callback\n     * @param {Function} success - callback\n     */\n    buildRequest : function (error, success) {\n        // INFO\n        this.logger.error(\"overwritten method !\");\n        // retourne l'objet 'this.request'\n        if (error) {\n            error.call(this, \"This method must be overwritten !\");\n        }\n        success.call(this, \"This method must be overwritten !\");\n    },\n\n    /**\n     * Appel du service\n     * @param {Function} error - callback\n     * @param {Function} success - callback\n     */\n    callService : function (error, success) {\n        // INFO\n        // retourne l'objet 'this.response'\n\n        // NOTES\n        //  Pour le mode XHR, on recupère une reponse sous forme d'un json ou xml (#document).\n        //  Pour le mode JSONP, on a toujours un objet JSON mais sous 2 formes :\n        //      - natif\n        //      - XML encapsulé :\n        //          {http : {status:200, error:null},xml :'réponse du service'}\n        //          {http : {status:400, error:'reponse du service'},xml :null}\n        //  En XHR, la reponse est directement sauvegardée dans 'this.response'.\n        //  Par contre, en JSONP, on doit analyser la reponse (status ou non vide),\n        //  et ne renvoyer que le contenu (xml ou l'objet)\n\n        // gestion de la proxification du service\n        var strUrlProxified = null;\n        var strData = this.request;\n\n        // a t on mis en place un proxy ?\n        // la proxyfication est valable uniquement en mode XHR !\n        var bUrlProxified = !!((this.options.proxyURL && this.options.protocol === \"XHR\"));\n\n        // rajout de l'option gpbibaccess\n        // INFO : acces au numero de version de package.conf aprés compilation !\n        this.options.serverUrl = _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(this.options.serverUrl, {\n            \"gp-access-lib\" : _package_json__WEBPACK_IMPORTED_MODULE_6__.version\n        }, false);\n\n        // si le proxy est renseigné, on proxifie l'url du service\n        if (bUrlProxified) {\n            if (this.options.httpMethod === \"GET\") {\n                strUrlProxified = this.options.proxyURL + _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(this.options.serverUrl, this.request, true);\n                strData = null;\n            }\n\n            if (this.options.httpMethod === \"POST\") {\n                strUrlProxified = this.options.proxyURL + _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(this.options.serverUrl, null, true);\n                strData = this.request;\n            }\n        }\n\n        // contexte du composant spécifique !\n        var self = this;\n\n        var options = {\n            url : strUrlProxified || this.options.serverUrl,\n            method : this.options.httpMethod,\n            protocol : this.options.protocol,\n            timeOut : this.options.timeOut || 0,\n            format : this.options.outputFormat, // ceci declenche le parsing de la reponse du service, mais on souhaite toujours une reponse brute (string) !\n            nocache : this.options.nocache || false, // ceci permet d'ajouter un timestamp dans la requête\n            wrap : this.options.protocol !== \"XHR\", // ceci declenche l'encapsulation de la reponse XML du service dans du JSON, mais pas en mode XHR !\n            callbackSuffix : this.options.callbackSuffix,\n            // callbackName : this.options.callbackName || null,\n            data : strData,\n            headers : null, // TODO...\n            content : this.options.contentType || \"application/xml\",\n            scope : this.options.scope || this,\n            // callback de reponse\n            onResponse : function (response) {\n                self.logger.trace(\"callService::onResponse()\");\n\n                // le contenu de la reponse à renvoyer !\n                var content = null;\n\n                // XHR : on renvoie toujours la reponse brute du service (json ou xml)\n                // au parser du composant...\n                if (self.options.protocol === \"XHR\") {\n                    self.logger.trace(\"Response XHR\", response);\n                    content = response; // par defaut, la reponse du service  !\n                }\n\n                // JSONP : on pre-analyse la reponse brute du service (encapsuler ou pas)\n                // avant de l'envoyer au parser du composant...\n                if (self.options.protocol === \"JSONP\") {\n                    self.logger.trace(\"Response JSON\", response);\n                    if (response) {\n                        if (response.http) {\n                            // reponse encapsulée :\n                            // ex. reponse du service en xml\n                            // > {http : {status:200, error:null},xml :'réponse du service'}\n                            if (response.http.status !== 200) {\n                                error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n                                    status : response.http.status,\n                                    message : response.http.error,\n                                    type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].TYPE_SRVERR\n                                }));\n                                return;\n                            } else {\n                                content = response.xml; // par defaut !\n                                if (self.options.rawResponse) {\n                                    content = response;\n                                }\n                            }\n                        } else {\n                            // reponse non encapsulée :\n                            // ex. reponse du service en json ou xml\n                            content = response;\n                        }\n                    } else {\n                        error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"Le contenu de la reponse est vide !?\"));\n                        return;\n                    }\n                }\n\n                // si on souhaite parser la reponse du service\n                if (typeof self.options.onBeforeParse === \"function\") {\n                    var newResponse = self.options.onBeforeParse(content);\n                    if (typeof newResponse === \"string\") {\n                        // la reponse parsée par l'utilisateur est retournée sous\n                        // forme de string !\n                        content = newResponse;\n                    }\n                }\n                // sauvegarde de la reponse dans l'objet parent (CommonService)\n                self.response = content;\n                // on renvoie la reponse...\n                success.call(self, content);\n            },\n            // callback des erreurs\n            onFailure : function (e) {\n                self.logger.trace(\"callService::onFailure()\");\n                // on est forcement sur une erreur levée par un service !\n                e.type = _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].TYPE_SRVERR;\n                error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](e));\n            },\n            // callback de timeOut\n            onTimeOut : function () {\n                self.logger.trace(\"callService::onTimeOut()\");\n                error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"TimeOut!\"));\n            }\n        };\n\n        _Protocols_Protocol__WEBPACK_IMPORTED_MODULE_3__[\"default\"].send(options);\n    },\n\n    /**\n     * Analyse de la réponse\n     * @param {Function} error - callback\n     * @param {Function} success - callback\n     */\n    analyzeResponse : function (error, success) {\n        // INFO\n        this.logger.error(\"overwritten method !\");\n        // retourne l'objet spécifique au type de composant (json)\n        if (error) {\n            error.call(this, \"This method must be overwritten !\");\n        }\n        success.call(this, \"This method must be overwritten !\");\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CommonService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/CommonService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// cette classe contient les URLs par defaut des services.\n//  DefaultUrlService.Alti.url(key)[elevation-json]\n//  DefaultUrlService.Alti.url(key)[elevation-xml]\n//  DefaultUrlService.Alti.url(key)[profil-json]\n//  DefaultUrlService.Alti.url(key)[profil-xml]\n//  DefaultUrlService.Alti.url(key)[wps]\n//  DefaultUrlService.ProcessIsoCurve.url(key)\n//  DefaultUrlService.AutoComplete.url(key)\n//  DefaultUrlService.ReverseGeocode.url(key)\n//  DefaultUrlService.AutoConf.url(key)[apiKey]\n//  DefaultUrlService.AutoConf.url(key)[apiKeys]\n//  DefaultUrlService.AutoConf.url(key)[aggregate]\n//  DefaultUrlService.Geocode.url(key)\n//  DefaultUrlService.Route.url(key)\n\n// Example :\n//\n// DefaultUrlService.Alti.url('efe4r54tj4uy5i78o7545eaz7e87a')[elevation-json]\n//  output {String} -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevation.json\n//\n// DefaultUrlService.Alti.url('efe4r54tj4uy5i78o7545eaz7e87a')\n// output {Object|String}\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevation.json\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevation.xml\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevationLine.json\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevationLine.xml\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/wps\n//\n// ssl by default.\n//\n// Force to not do ssl :\n// DefaultUrlService.ssl = false;\n//\n// DefaultUrlService.AutoComplete.url('efe4r54tj4uy5i78o7545eaz7e87a')\n// output {Object|String}\n// -> https://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/ols/apis/completion\n\n// constantes internes\nvar HOSTNAME = \"wxs.ign.fr\";\n\n/**\n * Default Geoportal web services URLs access.\n *\n * @namespace\n * @alias Gp.Services.DefaultUrl\n */\nvar DefaultUrlService = {\n\n    /** if set true, require the use of https protocol */\n    ssl : true,\n\n    /**\n    * base url of services (ssl protocol management)\n    * @param {String} key - key\n    * @param {String} path - path\n    * @returns {String} url\n    */\n    url : function (key, path) {\n        // comportement par défaut => https\n        // sinon, il est fixé par l'option 'ssl' (false => http)\n        var _protocol;\n        if (DefaultUrlService.ssl === false) {\n            _protocol = \"http://\";\n        } else {\n            _protocol = \"https://\";\n        }\n\n        return _protocol + HOSTNAME.concat(\"/\", key, path);\n    },\n\n    /**\n     * Elevation web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns elevation service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"elevation-json\", \"elevation-xml\", \"profil-json\" or \"profil-xml\").\n     */\n    Alti : {\n        _key : {\n            // rest\n            \"elevation-json\" : \"/alti/rest/elevation.json\",\n            \"elevation-xml\" : \"/alti/rest/elevation.xml\",\n            \"profil-json\" : \"/alti/rest/elevationLine.json\",\n            \"profil-xml\" : \"/alti/rest/elevationLine.xml\",\n            // other\n            wps : \"/alti/wps\"\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return {\n                // rest\n                \"elevation-json\" : DefaultUrlService.url(key, this._key[\"elevation-json\"]),\n                \"elevation-xml\" : DefaultUrlService.url(key, this._key[\"elevation-xml\"]),\n                \"profil-json\" : DefaultUrlService.url(key, this._key[\"profil-json\"]),\n                \"profil-xml\" : DefaultUrlService.url(key, this._key[\"profil-xml\"]),\n                // other\n                wps : DefaultUrlService.url(key, this._key[\"wps\"])\n            };\n        }\n    },\n    /**\n     * IsoCurve web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns isocurve service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"iso-json\" or \"iso-xml\").\n     */\n    ProcessIsoCurve : {\n        _key : {\n            \"iso-json\" : \"/isochrone/isochrone.json\", // rest (geoconcept)\n            \"iso-xml\" : \"/isochrone/isochrone.xml\" // rest (geoconcept)\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return {\n                \"iso-json\" : DefaultUrlService.url(key, this._key[\"iso-json\"]),\n                \"iso-xml\" : DefaultUrlService.url(key, this._key[\"iso-xml\"])\n            };\n        }\n    },\n    /**\n     * Autocompletion web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns autocomplete service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    AutoComplete : {\n        _key : \"/ols/apis/completion\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Reverse geocoding web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns reverse geocoding service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    ReverseGeocode : {\n        _key : \"/geoportail/ols\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Autoconfiguration web service access\n     *\n     * @member {Object}\n     * @property {Function} url ([key1,...]) - Returns autoconfiguration service default urls with geoportal access key (s) given as a String array parameter. The result is a javascript object with different urls given the access mode (\"apiKey\", \"apiKeys\" or \"aggregate\").\n     */\n    AutoConf : {\n        _key : {\n            apiKey : \"/autoconf\",\n            apiKeys : \"/autoconf?keys=%KEYS%\",\n            aggregate : \"/autoconf/id/\"\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            var keys = \"\";\n            if (Array.isArray(key) && key.length > 0) {\n                keys = key[0];\n                for (var i = 1; i < key.length; i++) {\n                    keys += \",\" + key[i];\n                }\n            }\n            return {\n                apiKey : DefaultUrlService.url(key, this._key[\"apiKey\"]), // une seule clé\n                apiKeys : DefaultUrlService.url(key[0], this._key[\"apiKeys\"]).replace(\"%KEYS%\", keys), // autoconf de plusieurs clés\n                aggregate : DefaultUrlService.url(key, this._key[\"aggregate\"])\n            };\n        }\n    },\n    /**\n     * Geocoding web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns geocoding service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    Geocode : {\n        _key : \"/geoportail/ols\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Routing web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns routing service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"route-json\" or \"route-xml\").\n     */\n    Route : {\n        _key : {\n            ols : \"/itineraire/ols\", // openLS\n            \"route-json\" : \"/itineraire/rest/route.json\", // rest (geoconcept)\n            \"route-xml\" : \"/itineraire/rest/route.xml\" // rest (geoconcept)\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return {\n                ols : DefaultUrlService.url(key, this._key[\"ols\"]),\n                \"route-json\" : DefaultUrlService.url(key, this._key[\"route-json\"]),\n                \"route-xml\" : DefaultUrlService.url(key, this._key[\"route-xml\"])\n            };\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DefaultUrlService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/DirectGeocodeResponseReader.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/DirectGeocodeResponseReader.js ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Response_model_GeocodeResponse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Response/model/GeocodeResponse */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodeResponse.js\");\n/* harmony import */ var _Response_model_DirectGeocodedLocation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Response/model/DirectGeocodedLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/DirectGeocodedLocation.js\");\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service de géocodage direct du Géoportail\n *      afin de récupérer les résultats retournés.\n * @module DirectGeocodeResponseReader\n * @alias Gp.Services.Geocode.Formats.DirectGeocodeResponseReader\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n/**\n * @member DirectGeocodeResponseReader\n */\nvar DirectGeocodeResponseReader = {};\n\n/**\n * @property {String} DirectGeocodeResponseReader.VERSION - version du service de géocodage\n */\nDirectGeocodeResponseReader.VERSION = \"1.2\";\n\n/**\n * Objet stockant les différents namespaces et les URI associées\n */\nDirectGeocodeResponseReader.NAMESPACES = {\n    xmlns : \"http://www.opengis.net/xls\",\n    gml : \"http://www.opengis.net/gml\",\n    xls : \"http://www.opengis.net/xls\",\n    xlsext : \"http://www.opengis.net/xlsext\",\n    xsi : \"http://www.w3.org/2001/XMLSchema-instance\"\n};\n\n/**\n * Localisation (URL) du schema de définition du XML (XSD)\n */\nDirectGeocodeResponseReader.SCHEMALOCATION = \"http://wxs.ign.fr/schemas/olsAll.xsd\";\n\n/**\n * Namespace par défaut du format\n */\nDirectGeocodeResponseReader.DEFAULTPREFIX = \"xls\";\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n */\nDirectGeocodeResponseReader.READERS = {\n\n    xls : {\n\n        /** TODO : jsdoc block */\n        XLS : function (root) {\n            var geocodeResponse = new _Response_model_GeocodeResponse__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\n            // vérification de la version du service, et des namespaces de l'en-tête\n            __checkServiceAttributes(root);\n\n            // puis lancement de la lecture de l'ensemble des noeuds, en bouclant sur les childNodes\n            __getChildNodes(root, geocodeResponse);\n\n            return geocodeResponse;\n        },\n\n        /** TODO : jsdoc block */\n        GeocodedAddress : function (node, geocodeResponse) {\n            var geocodedLocation = new _Response_model_DirectGeocodedLocation__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n            __getChildNodes(node, geocodedLocation);\n\n            // Ajout du résultat au tableau geocodedLocations de geocodeReponse\n            if (geocodeResponse && Array.isArray(geocodeResponse.locations)) {\n                geocodeResponse.locations.push(geocodedLocation);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        GeocodeMatchCode : function (node, geocodedLocation) {\n            var acc = node.getAttribute(\"accuracy\");\n            if (acc && geocodedLocation) {\n                geocodedLocation.accuracy = parseFloat(acc);\n            }\n            var matchType = node.getAttribute(\"matchType\");\n            if (matchType && geocodedLocation) {\n                geocodedLocation.matchType = matchType;\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Address : function (node, geocodedLocation) {\n            var countrycode = node.getAttribute(\"countryCode\");\n            if (geocodedLocation && countrycode) {\n                geocodedLocation.type = countrycode;\n            }\n            // on va récupérer les autres informations (StreetAddress, place, postalCode...)\n            __getChildNodes(node, geocodedLocation);\n        },\n\n        /** TODO : jsdoc block */\n        freeFormAddress : function (node, geocodedLocation) {\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                geocodedLocation.placeAttributes.freeform = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Building : function (node, geocodedLocation) {\n            var num = node.getAttribute(\"number\");\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (num) {\n                    geocodedLocation.placeAttributes.number = num;\n                } else if (node.getAttribute(\"buildingName\")) {\n                    geocodedLocation.placeAttributes.number = node.getAttribute(\"buildingName\");\n                } else if (node.getAttribute(\"subdivision\")) {\n                    geocodedLocation.placeAttributes.number = node.getAttribute(\"subdivision\");\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Street : function (node, geocodedLocation) {\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                // in case of a streetAddress result : street represents the street name\n                if (geocodedLocation.type === \"StreetAddress\") {\n                    geocodedLocation.placeAttributes.street = __getChildValue(node);\n\n                    // in case of a cadastral parcel result : street represents the cadastral parcel identifier\n                } else if (geocodedLocation.type === \"CadastralParcel\") {\n                    geocodedLocation.placeAttributes.cadastralParcel = __getChildValue(node);\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Place : function (node, geocodedLocation) {\n            var placeType = node.getAttribute(\"type\");\n            var placeName = __getChildValue(node);\n\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (placeType === \"Municipality\") {\n                    geocodedLocation.placeAttributes.municipality = placeName;\n                } else if (placeType === \"Bbox\") {\n                    var values = placeName.split(\";\");\n                    if (values.length === 4) {\n                        geocodedLocation.placeAttributes.bbox = {\n                            left : parseFloat(values[0]),\n                            right : parseFloat(values[2]),\n                            top : parseFloat(values[1]),\n                            bottom : parseFloat(values[3])\n                        };\n                    }\n                } else if (placeType === \"Commune\") {\n                    geocodedLocation.placeAttributes.commune = placeName;\n                } else if (placeType === \"Departement\") {\n                    geocodedLocation.placeAttributes.department = placeName;\n                } else if (placeType === \"INSEE\") {\n                    geocodedLocation.placeAttributes.insee = placeName;\n                } else if (placeType === \"Qualite\") {\n                    geocodedLocation.placeAttributes.quality = placeName;\n                } else if (placeType === \"Territoire\") {\n                    geocodedLocation.placeAttributes.territory = placeName;\n                } else if (placeType === \"ID\") {\n                    geocodedLocation.placeAttributes.ID = placeName;\n                } else if (placeType === \"ID_TR\") {\n                    geocodedLocation.placeAttributes.IDTR = placeName;\n                } else if (placeType === \"Importance\") {\n                    geocodedLocation.placeAttributes.importance = parseInt(placeName, 10);\n                } else if (placeType === \"Nature\") {\n                    geocodedLocation.placeAttributes.nature = placeName;\n                } else if (placeType === \"Numero\") {\n                    geocodedLocation.placeAttributes.number = placeName;\n                } else if (placeType === \"Feuille\") {\n                    geocodedLocation.placeAttributes.sheet = placeName;\n                } else if (placeType === \"Section\") {\n                    geocodedLocation.placeAttributes.section = placeName;\n                } else if (placeType === \"CommuneAbsorbee\") {\n                    geocodedLocation.placeAttributes.absorbedCity = placeName;\n                } else if (placeType === \"Arrondissement\") {\n                    if (placeName) {\n                        geocodedLocation.placeAttributes.arrondissement = placeName;\n                    }\n                } else if (placeType === \"Type\") {\n                    geocodedLocation.placeAttributes.origin = placeName;\n                } else if (placeType === \"Prefecture\") {\n                    geocodedLocation.placeAttributes.prefecture = placeName;\n                } else if (placeType === \"InseeRegion\") {\n                    geocodedLocation.placeAttributes.inseeRegion = placeName;\n                } else if (placeType === \"InseeDepartment\") {\n                    geocodedLocation.placeAttributes.inseeDepartment = placeName;\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        PostalCode : function (node, geocodedLocation) {\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                geocodedLocation.placeAttributes.postalCode = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Error : function (node) {\n            // on imagine qu'on a une balise ainsi :\n            // <Error message=\"Message...\" errorCode=\"InternalServerError\"/>\n            var srvMess = node.getAttribute(\"message\");\n            var errorCode = node.getAttribute(\"errorCode\");\n            var message = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                \"(\" + errorCode + \") : \" + srvMess);\n            throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                message : message,\n                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TYPE_SRVERR\n            });\n        }\n    },\n\n    gml : {\n\n        /** TODO : jsdoc block */\n        pos : function (node, geocodedLocation) {\n            var pos = __getChildValue(node);\n            if (geocodedLocation && pos) {\n                geocodedLocation.position = {\n                    x : parseFloat(pos.split(\" \")[0]),\n                    y : parseFloat(pos.split(\" \")[1])\n                };\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    ExceptionReport : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = DirectGeocodeResponseReader.READERS[\"Exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    Exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service de géocodage,\n *      à l'aide des READERS de la classe.\n *\n * @method DirectGeocodeResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @return {Object} geocodeResponse|exceptionReport : l'objet contenant les informations de la réponse XML,\n *      sous la forme d'un objet GeocodeResponse, ou un objet littéral exceptionReport si le service a renvoyé une exception.\n * @static\n * @memberof DirectGeocodeResponseReader\n */\nDirectGeocodeResponseReader.read = function (root) {\n    if (root.nodeName === \"XLS\") {\n        var nsPrefix = root.prefix;\n        if (!nsPrefix) {\n            nsPrefix = DirectGeocodeResponseReader.DEFAULTPREFIX;\n        }\n        var geocodeResponse = DirectGeocodeResponseReader.READERS[nsPrefix][root.nodeName](root);\n        return geocodeResponse;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        var exceptionReport = DirectGeocodeResponseReader.READERS[root.nodeName](root);\n        return exceptionReport;\n    } else {\n        var mess = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE\", root.nodeName);\n        throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            message : mess,\n            type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TYPE_UNKERR,\n            status : 200\n        });\n    }\n};\n\n/**\n * Récupération des attributs d'un noeud élément\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/**\n * Récupération des noeuds enfants à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n        var childPrefix;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n                childPrefix = child.prefix || DirectGeocodeResponseReader.DEFAULTPREFIX;\n\n                if (DirectGeocodeResponseReader.READERS[childPrefix][childName]) {\n                    var reader = DirectGeocodeResponseReader.READERS[childPrefix][childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Vérification des attributs du service, dans la balise XLS de la réponse :\n *      version, namespaces, et namespace par défaut doivent correspondre à ceux attendus.\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __checkServiceAttributes\n * @param {DOMElement} XLSNode - a DOM node, corresponding to XLS first tag.\n */\nfunction __checkServiceAttributes (XLSNode) {\n    if (XLSNode.attributes.length > 0) {\n        // on récupère et parcourt les attributs de la balise XLS de la réponse\n        var xlsAttributes = __getAttributes(XLSNode);\n        for (var att in xlsAttributes) {\n            if (xlsAttributes.hasOwnProperty(att)) {\n                // vérification de la version\n                if (att === \"version\") {\n                    if (xlsAttributes[\"version\"] !== DirectGeocodeResponseReader.VERSION) {\n                        console.log(\"[DirectGeocodeResponseReader] geocode version is not the expected one : there may be errors in parsing\");\n                        return;\n                    }\n                }\n\n                // on vérifie que l'uri du namespace par défaut est bien celle que l'on attend\n                if (att === \"xmlns\") {\n                    if (xlsAttributes[att] !== DirectGeocodeResponseReader.NAMESPACES[DirectGeocodeResponseReader.DEFAULTPREFIX]) {\n                        console.log(\"[DirectGeocodeResponseReader] geocode response default namespace is not the expected one\");\n                        return;\n                    }\n                    continue;\n                }\n\n                var prefix = att.split(\":\")[0];\n                var ns = att.split(\":\")[1];\n\n                // si on a un autre xmlns, on vérifie aussi les URI\n                if (prefix === \"xmlns\" && ns) {\n                    // si l'attribut correspond à un namespace défini dans le reader\n                    if (DirectGeocodeResponseReader.NAMESPACES[ns]) {\n                        // il faut que les URI correspondent aussi.\n                        if (DirectGeocodeResponseReader.NAMESPACES[ns] !== xlsAttributes[att]) {\n                            console.log(\"[DirectGeocodeResponseReader] geocode response \" + att + \" namespace is not the expected one\");\n                            return;\n                        }\n                    }\n                }\n\n                // pour finir on vérifie la localisation du schema XSD du service\n                if (ns === \"schemaLocation\") {\n                    if (DirectGeocodeResponseReader.SCHEMALOCATION !== xlsAttributes[att]) {\n                        console.log(\"[DirectGeocodeResponseReader] geocode response schema location is not the expected one\");\n                        return;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DirectGeocodeResponseReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/DirectGeocodeResponseReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/ReverseGeocodeResponseReader.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/ReverseGeocodeResponseReader.js ***!
  \********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Response_model_GeocodeResponse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Response/model/GeocodeResponse */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodeResponse.js\");\n/* harmony import */ var _Response_model_ReverseGeocodedLocation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Response/model/ReverseGeocodedLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/ReverseGeocodedLocation.js\");\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service de géocodage inverse du Géoportail\n *      afin de récupérer les résultats retournés.\n * @module ReverseGeocodeResponseReader\n * @alias Gp.Services.Geocode.Formats.ReverseGeocodeResponseReader\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n/**\n * Objet ReverseGeocodeResponseReader\n * @member {Object} ReverseGeocodeResponseReader\n *\n * @property {String} ReverseGeocodeResponseReader.VERSION - Version du service de géocodage\n *\n * @property {Object} ReverseGeocodeResponseReader.NAMESPACES - Objet stockant les différents namespaces et les URI associées\n *\n * @property {String} ReverseGeocodeResponseReader.SCHEMALOCATION - Localisation (URL) du schema de définition du XML (XSD)\n *\n * @property {String} ReverseGeocodeResponseReader.DEFAULTPREFIX - Namespace par défaut du format\n *\n * @property {Object} ReverseGeocodeResponseReader.READERS - Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} ReverseGeocodeResponseReader.read - Méthode permettant de lancer la lecture d'une réponse XML du service de géocodage,\n *      à l'aide des READERS de la classe.\n *\n */\n\nvar ReverseGeocodeResponseReader = {};\n\n/**\n * version du service de géocodage\n */\nReverseGeocodeResponseReader.VERSION = \"1.2\";\n\n/**\n * Objet stockant les différents namespaces et les URI associées\n */\nReverseGeocodeResponseReader.NAMESPACES = {\n    xmlns : \"http://www.opengis.net/xls\",\n    gml : \"http://www.opengis.net/gml\",\n    xls : \"http://www.opengis.net/xls\",\n    xlsext : \"http://www.opengis.net/xlsext\",\n    xsi : \"http://www.w3.org/2001/XMLSchema-instance\"\n};\n\n/**\n * Localisation (URL) du schema de définition du XML (XSD)\n */\nReverseGeocodeResponseReader.SCHEMALOCATION = \"http://wxs.ign.fr/schemas/olsAll.xsd\";\n\n/**\n * Namespace par défaut du format\n */\nReverseGeocodeResponseReader.DEFAULTPREFIX = \"xls\";\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n */\nReverseGeocodeResponseReader.READERS = {\n\n    xls : {\n\n        /** TODO : jsdoc block */\n        XLS : function (root) {\n            var reverseGeocodeResponse = new _Response_model_GeocodeResponse__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\n            // vérification de la version du service, et des namespaces de l'en-tête\n            __checkServiceAttributes(root);\n\n            // puis lancement de la lecture de l'ensemble des noeuds, en bouclant sur les childNodes\n            __getChildNodes(root, reverseGeocodeResponse);\n\n            return reverseGeocodeResponse;\n        },\n\n        /** TODO : jsdoc block */\n        ReverseGeocodedLocation : function (node, reverseGeocodeResponse) {\n            var reverseGeocodedLocation = new _Response_model_ReverseGeocodedLocation__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n            __getChildNodes(node, reverseGeocodedLocation);\n\n            // Ajout du résultat au tableau locations de reverseGeocodeResponse\n            if (reverseGeocodeResponse && Array.isArray(reverseGeocodeResponse.locations)) {\n                reverseGeocodeResponse.locations.push(reverseGeocodedLocation);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Address : function (node, reverseGeocodedLocation) {\n            var countrycode = node.getAttribute(\"countryCode\");\n            if (reverseGeocodedLocation && countrycode) {\n                reverseGeocodedLocation.type = countrycode;\n            }\n            // on va récupérer les autres informations (StreetAddress, place, postalCode...)\n            __getChildNodes(node, reverseGeocodedLocation);\n        },\n\n        /** TODO : jsdoc block */\n        Building : function (node, reverseGeocodedLocation) {\n            var num = node.getAttribute(\"number\");\n            if (reverseGeocodedLocation && reverseGeocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (num) {\n                    reverseGeocodedLocation.placeAttributes.number = num;\n                } else if (node.getAttribute(\"buildingName\")) {\n                    reverseGeocodedLocation.placeAttributes.number = node.getAttribute(\"buildingName\");\n                } else if (node.getAttribute(\"subdivision\")) {\n                    reverseGeocodedLocation.placeAttributes.number = node.getAttribute(\"subdivision\");\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Street : function (node, reverseGeocodedLocation) {\n            // in case of a streetAddress result : street represents the street name\n            if (reverseGeocodedLocation.type === \"StreetAddress\") {\n                reverseGeocodedLocation.placeAttributes.street = __getChildValue(node);\n\n                // in case of a cadastral parcel result : street represents the cadastral parcel identifier\n            } else if (reverseGeocodedLocation.type === \"CadastralParcel\") {\n                reverseGeocodedLocation.placeAttributes.cadastralParcel = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Place : function (node, reverseGeocodedLocation) {\n            var placeType = node.getAttribute(\"type\");\n            var placeName = __getChildValue(node);\n\n            if (reverseGeocodedLocation && reverseGeocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (placeType === \"Municipality\") {\n                    reverseGeocodedLocation.placeAttributes.municipality = placeName;\n                } else if (placeType === \"Bbox\") {\n                    var values = placeName.split(\";\");\n                    if (values.length === 4) {\n                        reverseGeocodedLocation.placeAttributes.bbox = {\n                            left : parseFloat(values[0]),\n                            right : parseFloat(values[2]),\n                            top : parseFloat(values[1]),\n                            bottom : parseFloat(values[3])\n                        };\n                    }\n                } else if (placeType === \"Commune\") {\n                    reverseGeocodedLocation.placeAttributes.commune = placeName;\n                } else if (placeType === \"Departement\") {\n                    reverseGeocodedLocation.placeAttributes.department = placeName;\n                } else if (placeType === \"INSEE\") {\n                    reverseGeocodedLocation.placeAttributes.insee = placeName;\n                } else if (placeType === \"Qualite\") {\n                    reverseGeocodedLocation.placeAttributes.quality = placeName;\n                } else if (placeType === \"Territoire\") {\n                    reverseGeocodedLocation.placeAttributes.territory = placeName;\n                } else if (placeType === \"ID\") {\n                    reverseGeocodedLocation.placeAttributes.ID = placeName;\n                } else if (placeType === \"ID_TR\") {\n                    reverseGeocodedLocation.placeAttributes.IDTR = placeName;\n                } else if (placeType === \"Importance\") {\n                    reverseGeocodedLocation.placeAttributes.importance = parseInt(placeName, 10);\n                } else if (placeType === \"Nature\") {\n                    reverseGeocodedLocation.placeAttributes.nature = placeName;\n                } else if (placeType === \"Numero\") {\n                    reverseGeocodedLocation.placeAttributes.number = placeName;\n                } else if (placeType === \"Feuille\") {\n                    reverseGeocodedLocation.placeAttributes.sheet = placeName;\n                } else if (placeType === \"Section\") {\n                    reverseGeocodedLocation.placeAttributes.section = placeName;\n                } else if (placeType === \"CommuneAbsorbee\") {\n                    reverseGeocodedLocation.placeAttributes.absorbedCity = placeName;\n                } else if (placeType === \"Arrondissement\") {\n                    if (placeName) {\n                        reverseGeocodedLocation.placeAttributes.arrondissement = placeName;\n                    }\n                } else if (placeType === \"Type\") {\n                    reverseGeocodedLocation.placeAttributes.origin = placeName;\n                } else if (placeType === \"Prefecture\") {\n                    reverseGeocodedLocation.placeAttributes.prefecture = placeName;\n                } else if (placeType === \"InseeRegion\") {\n                    reverseGeocodedLocation.placeAttributes.inseeRegion = placeName;\n                } else if (placeType === \"InseeDepartment\") {\n                    reverseGeocodedLocation.placeAttributes.inseeDepartment = placeName;\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        PostalCode : function (node, reverseGeocodedLocation) {\n            if (reverseGeocodedLocation && reverseGeocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                reverseGeocodedLocation.placeAttributes.postalCode = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        SearchCentreDistance : function (node, reverseGeocodedLocation) {\n            if (reverseGeocodedLocation) {\n                reverseGeocodedLocation.searchCenterDistance = parseFloat(node.getAttribute(\"value\"));\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Error : function (node) {\n            // <Error message=\"For input string : &quot;2,45&quot;\" errorCode=\"InternalServerError\"/>\n            var srvMess = node.getAttribute(\"message\");\n            var errorCode = node.getAttribute(\"errorCode\");\n            var message = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                \"(\" + errorCode + \") : \" + srvMess);\n            throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                message : message,\n                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TYPE_SRVERR\n            });\n        }\n    },\n\n    gml : {\n\n        /** TODO : jsdoc block */\n        pos : function (node, reverseGeocodedLocation) {\n            var pos = __getChildValue(node);\n            if (reverseGeocodedLocation && pos) {\n                reverseGeocodedLocation.position = {\n                    x : parseFloat(pos.split(\" \")[0]),\n                    y : parseFloat(pos.split(\" \")[1])\n                };\n            }\n        }\n    },\n\n    xlsext : {\n        /** TODO : jsdoc block */\n        ExtendedGeocodeMatchCode : function (node, reverseGeocodedLocation) {\n            if (reverseGeocodedLocation) {\n                reverseGeocodedLocation.matchType = __getChildValue(node);\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    ExceptionReport : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = ReverseGeocodeResponseReader.READERS[\"Exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    Exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service de géocodage,\n *      à l'aide des READERS de la classe.\n *\n * @method ReverseGeocodeResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @return {Object} geocodeResponse|exceptionReport : l'objet contenant les informations de la réponse XML,\n *      sous la forme d'un objet GeocodeResponse, ou un objet littéral exceptionReport si le service a renvoyé une exception.\n * @static\n * @memberof ReverseGeocodeResponseReader\n */\nReverseGeocodeResponseReader.read = function (root) {\n    if (root.nodeName === \"XLS\") {\n        var nsPrefix = root.prefix;\n        if (!nsPrefix) {\n            nsPrefix = ReverseGeocodeResponseReader.DEFAULTPREFIX;\n        }\n        var geocodeResponse = ReverseGeocodeResponseReader.READERS[nsPrefix][root.nodeName](root);\n        return geocodeResponse;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        var exceptionReport = ReverseGeocodeResponseReader.READERS[root.nodeName](root);\n        return exceptionReport;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/**\n * Récupération des attributs d'un noeud élément\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/**\n * Récupération des noeuds enfants à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n        var childPrefix;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n                childPrefix = child.prefix || ReverseGeocodeResponseReader.DEFAULTPREFIX;\n\n                if (ReverseGeocodeResponseReader.READERS[childPrefix][childName]) {\n                    var reader = ReverseGeocodeResponseReader.READERS[childPrefix][childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Vérification des attributs du service, dans la balise XLS de la réponse :\n *      version, namespaces, et namespace par défaut doivent correspondre à ceux attendus.\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __checkServiceAttributes\n * @param {DOMElement} XLSNode - a DOM node, corresponding to XLS first tag.\n */\nfunction __checkServiceAttributes (XLSNode) {\n    if (XLSNode.attributes.length > 0) {\n        // on récupère et parcourt les attributs de la balise XLS de la réponse\n        var xlsAttributes = __getAttributes(XLSNode);\n        for (var att in xlsAttributes) {\n            if (xlsAttributes.hasOwnProperty(att)) {\n                // vérification de la version\n                if (att === \"version\") {\n                    if (xlsAttributes[\"version\"] !== ReverseGeocodeResponseReader.VERSION) {\n                        console.log(\"[ReverseGeocodeResponseReader] geocode version is not the expected one : there may be errors in parsing\");\n                        return;\n                    }\n                }\n\n                // on vérifie que l'uri du namespace par défaut est bien celle que l'on attend\n                if (att === \"xmlns\") {\n                    if (xlsAttributes[att] !== ReverseGeocodeResponseReader.NAMESPACES[ReverseGeocodeResponseReader.DEFAULTPREFIX]) {\n                        console.log(\"[ReverseGeocodeResponseReader] geocode response default namespace is not the expected one\");\n                        return;\n                    }\n                    continue;\n                }\n\n                var prefix = att.split(\":\")[0];\n                var ns = att.split(\":\")[1];\n\n                // si on a un autre xmlns, on vérifie aussi les URI\n                if (prefix === \"xmlns\" && ns) {\n                    // si l'attribut correspond à un namespace défini dans le reader\n                    if (ReverseGeocodeResponseReader.NAMESPACES[ns]) {\n                        // il faut que les URI correspondent aussi.\n                        if (ReverseGeocodeResponseReader.NAMESPACES[ns] !== xlsAttributes[att]) {\n                            console.log(\"[ReverseGeocodeResponseReader] geocode response \" + att + \" namespace is not the expected one\");\n                            return;\n                        }\n                    }\n                }\n\n                // pour finir on vérifie la localisation du schema XSD du service\n                if (ns === \"schemaLocation\") {\n                    if (ReverseGeocodeResponseReader.SCHEMALOCATION !== xlsAttributes[att]) {\n                        console.log(\"[ReverseGeocodeResponseReader] geocode response schema location is not the expected one\");\n                        return;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReverseGeocodeResponseReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/ReverseGeocodeResponseReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Geocode.js":
/*!***************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Geocode.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _Request_DirectGeocodeRequestFactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Request/DirectGeocodeRequestFactory */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/DirectGeocodeRequestFactory.js\");\n/* harmony import */ var _Response_DirectGeocodeResponseFactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Response/DirectGeocodeResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/DirectGeocodeResponseFactory.js\");\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service de géocodage direct du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n *\n *\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.Geocode\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String|Object} options.location - Nom de l'adresse, du toponyme, de l'unité administrative ou de la parcelle cadastrale recherchée.\n *      Sous forme de String, la propriété permet de faire une recherche déstructurée.\n *      Sous forme d'objet, la propriété permet de structurer la recherche.\n *      Dans ce cas, les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Number} [options.location.number] - Numéro du bâtiment de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *      @param {String} [options.location.street] - Nom de la rue de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *      @param {String} [options.location.city] - Nom de la ville de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *      @param {Number} [options.location.postalCode] - Numéro du code postal de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *\n * @param {Object} [options.filterOptions] - Les propriétés possibles de cet objet sont décrites ci-après.\n * @param {Object} [options.filterOptions.bbox] - Emprise dans laquelle on souhaite effectuer la recherche.\n *      Les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Float} options.filterOptions.bbox.left - Abscisse du côté gauche de la BBOX\n *      @param {Float} options.filterOptions.bbox.right - Abscisse du côté droit de la BBOX\n *      @param {Float} options.filterOptions.bbox.top - Ordonnée supérieure de la BBOX\n *      @param {Float} options.filterOptions.bbox.bottom - Ordonnée inférieure de la BBOX\n *\n * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Type de l'objet recherché.\n *      Le service de géocodage du Géoportail permet de rechercher des 'PostionOfInterest' pour des toponymes, des 'StreetAddress'\n *      pour des adresses postales, et/ou des 'CadastralParcel' pour des parcelles cadastrales.\n *      D'autres types pourront être rajoutés selon l'évolution du service.\n *      Par défaut, type = ['StreetAddress'].\n *\n * @param {String} [options.filterOptions.[proprietes du filtre]] - Critère supplémentaire pour filtrer la recherche sous la forme\n *      d'un couple clé/valeur à définir selon les possibilités du serveur ajouté à la requête.\n *      Le service de géocodage du Géoportail permet de filtrer tous les résultats avec les propriétés :\n *          \"municipality\", \"insee\", et \"department\".\n *      Il permet aussi de filtrer les adresses postales avec les propriétés :\n *          \"quality\", \"ID\", \"ID_TR\" et \"territory\".\n *      Il permet de filtrer les toponymes avec les propriétés :\n *          \"importance\", \"nature\" et \"territory\".\n *      Enfin, il permet de filtrer les parcelles cadastrales avec les propriétés :\n *          \"sheet\", \"section\", et \"absorbedcity\". Pas de valeur par défaut.\n *\n * @param {Number} [options.maximumResponses] - Nombre de réponses maximal que l'on souhaite recevoir.\n *      Pas de valeur par défaut.\n *      Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 25.\n *\n * @param {Boolean} [options.returnFreeForm] - Indique si l'on souhaite en réponse un localisant concaténée plutôt que structuré.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 'false'.\n *\n * @param {String} [options.srs] - Système de coordonnées dans lequel les paramètres géographiques en entrée et la réponse du service sont exprimés.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 'EPSG:4326'.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      positions : [{lon:, lat:}, {lon:, lat:}],\n *      (...)\n *   };\n * @private\n */\nfunction Geocode (options) {\n    if (!(this instanceof Geocode)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"Geocode\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"Geocode\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Gp.Services.Geocode\");\n    this.logger.trace(\"[Constructeur Geocode (options)]\");\n\n    if (!options.location) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"location\"));\n    }\n\n    // FIXME ECMAScript 5 support\n    if (typeof options.location === \"object\" && Object.keys(options.location).length === 0) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"location\"));\n    } else if (typeof options.location === \"string\" && options.location.length === 0) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"location\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.location = options.location;\n\n    // on definit des filtres apr defaut\n    if (!options.filterOptions || typeof options.filterOptions !== \"object\") {\n        this.options.filterOptions = options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // FIXME ECMAScript 5 support (valable pour un objet uniquement !)\n    // ceci permet de tester le cas où 'options.filterOptions' : {}\n    if (Object.keys(options.filterOptions).length === 0) {\n        this.options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    var filter = Object.keys(options.filterOptions);\n    for (var i = 0; i < filter.length; i++) {\n        var key = filter[i];\n        // on transforme certains filtres qui pourraient être numériques en string\n        var filtersCouldBeNumberList = [\"department\", \"number\", \"postalCode\", \"insee\", \"importance\", \"ID\", \"IDTR\", \"absorbedCity\", \"sheet\", \"section\", \"inseeRegion\", \"inseeDepartment\"];\n        if (filtersCouldBeNumberList.indexOf(key) !== -1 && typeof options.filterOptions[key] !== \"string\") {\n            options.filterOptions[key] = options.filterOptions[key].toString();\n        }\n        // on supprime les filtres vides\n        if (!options.filterOptions[key]) {\n            delete this.options.filterOptions[key];\n        }\n    }\n\n    this.options.filterOptions.type = options.filterOptions.type || [\"StreetAddress\"];\n    this.options.maximumResponses = options.maximumResponses || 25;\n    this.options.returnFreeForm = options.returnFreeForm || false;\n    this.options.srs = options.srs || \"EPSG:4326\";\n\n    // attributs d'instances\n\n    /**\n     * Format forcé de la réponse du service : \"xml\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"xml\";\n}\n\n/**\n * @lends module:Geocode#\n */\nGeocode.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nGeocode.prototype.constructor = Geocode;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nGeocode.prototype.buildRequest = function (error, success) {\n    var options = {\n        httpMethod : this.options.httpMethod,\n        // options specifiques du service\n        location : this.options.location,\n        returnFreeForm : this.options.returnFreeForm,\n        filterOptions : this.options.filterOptions,\n        srs : this.options.srs,\n        maximumResponses : this.options.maximumResponses\n    };\n\n    this.request = _Request_DirectGeocodeRequestFactory__WEBPACK_IMPORTED_MODULE_4__[\"default\"].build(options);\n\n    // on teste si la requete a bien été construite !\n    (!this.request)\n        ? error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_REQUEST_BUILD\")))\n        : success.call(this, this.request);\n};\n\n/**\n * Analyse de la reponse (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nGeocode.prototype.analyzeResponse = function (error, success) {\n    /* INFO :\n         Etape 1 : Création de la requête\n            -> Appel du format OpenLS pour créer une requête à partir des paramètres (par exemple)\n              (soit directement une URL si GET, soit une requête XML si POST)\n            /!\\ tester si apiKey && serverUrl => on ne garde que serverUrl\n            -> stockage de la requête dans this.request\n         Etape 2 : Envoi de la requête selon le bon protocole\n            -> appel du protocol JSONP ou XHR, et envoi (par ex send ()) (this.protocol)\n            -> récupération de la réponse xml dans la fonction onSuccess () (this.response)\n            -> si code HTTP 200 et pas de message d'erreur : etape 3\n            -> si code HTTP != 200 : lancement de la fonction de callback onFailure avec le message d'erreur\n         Etape 3 : Analyse de la réponse xml et construction du JSON (si rawResponse === false )\n            -> appel du parser pour récupérer le xmlDocument\n            -> appel du reader OpenLS pour lire les éléments et récupérer l'objet JSON\n               correspondant au type de géocodage (défini dans les specs)\n         Etape 4 : Lancement de la fonction de callback onSuccess avec la réponse :\n            -> xmlResponse (si rawResponse === true)\n            -> ou geocodedLocations\n    */\n\n    if (this.response) {\n        var options = {\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        _Response_DirectGeocodeResponseFactory__WEBPACK_IMPORTED_MODULE_5__[\"default\"].build(options);\n    } else {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Geocode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9HZW9jb2RlLmpzP2Q1NWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDaUQ7QUFDSDtBQUNXO0FBQ1o7QUFDbUM7QUFDRzs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QixnQkFBZ0IsTUFBTTtBQUN0QixnQkFBZ0IsTUFBTTtBQUN0QixnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBLFdBQVcsZUFBZTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyx1Q0FBdUM7QUFDdkM7QUFDQSxzQkFBc0IsV0FBVyxHQUFHLFdBQVc7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdFQUFDO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLHNEQUFhOztBQUVqQixrQkFBa0IsOERBQU07QUFDeEI7O0FBRUE7QUFDQSx3QkFBd0IsZ0VBQUM7QUFDekI7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixnRUFBQztBQUN6QixLQUFLO0FBQ0wsd0JBQXdCLGdFQUFDO0FBQ3pCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLG1CQUFtQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msc0RBQWE7QUFDL0M7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiw0RUFBMkI7O0FBRTlDO0FBQ0E7QUFDQSwrQkFBK0IsZ0VBQVksQ0FBQyxnRUFBQztBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSw4RUFBNEI7QUFDcEMsS0FBSztBQUNMLDZCQUE2QixnRUFBWSxDQUFDLGdFQUFDO0FBQzNDO0FBQ0E7O0FBRWUsc0VBQU8sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9HZW9jb2RlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcbmltcG9ydCBfIGZyb20gXCIuLi8uLi9VdGlscy9NZXNzYWdlc1Jlc291cmNlc1wiO1xuaW1wb3J0IEVycm9yU2VydmljZSBmcm9tIFwiLi4vLi4vRXhjZXB0aW9ucy9FcnJvclNlcnZpY2VcIjtcbmltcG9ydCBDb21tb25TZXJ2aWNlIGZyb20gXCIuLi9Db21tb25TZXJ2aWNlXCI7XG5pbXBvcnQgRGlyZWN0R2VvY29kZVJlcXVlc3RGYWN0b3J5IGZyb20gXCIuL1JlcXVlc3QvRGlyZWN0R2VvY29kZVJlcXVlc3RGYWN0b3J5XCI7XG5pbXBvcnQgRGlyZWN0R2VvY29kZVJlc3BvbnNlRmFjdG9yeSBmcm9tIFwiLi9SZXNwb25zZS9EaXJlY3RHZW9jb2RlUmVzcG9uc2VGYWN0b3J5XCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogQXBwZWwgZHUgc2VydmljZSBkZSBnw6lvY29kYWdlIGRpcmVjdCBkdSBHw6lvcG9ydGFpbCA6XG4gKiAgICAgZW52b2kgZGUgbGEgcmVxdcOqdGUgY29uc3RydWl0ZSBzZWxvbiBsZXMgcGFyYW3DqHRyZXMgZW4gb3B0aW9ucyxcbiAqICAgICDDqXZlbnR1ZWxsZW1lbnQgcGFyc2luZyBldCBhbmFseXNlICBkZSBsYSByw6lwb25zZSxcbiAqICAgICByZXRvdXIgZCd1bmUgcsOpcG9uc2UgZW4gcGFyYW3DqHRyZSBkZSBsYSBmb25jdGlvbiBvblN1Y2Nlc3MuXG4gKlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMge0dwLlNlcnZpY2VzLkNvbW1vblNlcnZpY2V9XG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBzcMOpY2lmaXF1ZXMgYXUgc2VydmljZSAoKyBsZXMgb3B0aW9ucyBoZXJpdMOpZXMpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBvcHRpb25zLmxvY2F0aW9uIC0gTm9tIGRlIGwnYWRyZXNzZSwgZHUgdG9wb255bWUsIGRlIGwndW5pdMOpIGFkbWluaXN0cmF0aXZlIG91IGRlIGxhIHBhcmNlbGxlIGNhZGFzdHJhbGUgcmVjaGVyY2jDqWUuXG4gKiAgICAgIFNvdXMgZm9ybWUgZGUgU3RyaW5nLCBsYSBwcm9wcmnDqXTDqSBwZXJtZXQgZGUgZmFpcmUgdW5lIHJlY2hlcmNoZSBkw6lzdHJ1Y3R1csOpZS5cbiAqICAgICAgU291cyBmb3JtZSBkJ29iamV0LCBsYSBwcm9wcmnDqXTDqSBwZXJtZXQgZGUgc3RydWN0dXJlciBsYSByZWNoZXJjaGUuXG4gKiAgICAgIERhbnMgY2UgY2FzLCBsZXMgcHJvcHJpw6l0w6lzIHBvc3NpYmxlcyBkZSBjZXQgb2JqZXQgc29udCBkw6ljcml0ZXMgY2ktYXByw6hzLlxuICogICAgICBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubG9jYXRpb24ubnVtYmVyXSAtIE51bcOpcm8gZHUgYsOidGltZW50IGRlIGwnYWRyZXNzZSByZWNoZXJjaMOpZSwgZGFucyBsZSBjYXMgZCd1bmUgcmVjaGVyY2hlIHN0cnVjdHVyw6llXG4gKiAgICAgIChzaSBvcHRpb25zLmxvY2F0aW9uIGVzdCB1biBvYmpldCBKYXZhc2NyaXB0KS5cbiAqICAgICAgQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmxvY2F0aW9uLnN0cmVldF0gLSBOb20gZGUgbGEgcnVlIGRlIGwnYWRyZXNzZSByZWNoZXJjaMOpZSwgZGFucyBsZSBjYXMgZCd1bmUgcmVjaGVyY2hlIHN0cnVjdHVyw6llXG4gKiAgICAgIChzaSBvcHRpb25zLmxvY2F0aW9uIGVzdCB1biBvYmpldCBKYXZhc2NyaXB0KS5cbiAqICAgICAgQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmxvY2F0aW9uLmNpdHldIC0gTm9tIGRlIGxhIHZpbGxlIGRlIGwnYWRyZXNzZSByZWNoZXJjaMOpZSwgZGFucyBsZSBjYXMgZCd1bmUgcmVjaGVyY2hlIHN0cnVjdHVyw6llXG4gKiAgICAgIChzaSBvcHRpb25zLmxvY2F0aW9uIGVzdCB1biBvYmpldCBKYXZhc2NyaXB0KS5cbiAqICAgICAgQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmxvY2F0aW9uLnBvc3RhbENvZGVdIC0gTnVtw6lybyBkdSBjb2RlIHBvc3RhbCBkZSBsJ2FkcmVzc2UgcmVjaGVyY2jDqWUsIGRhbnMgbGUgY2FzIGQndW5lIHJlY2hlcmNoZSBzdHJ1Y3R1csOpZVxuICogICAgICAoc2kgb3B0aW9ucy5sb2NhdGlvbiBlc3QgdW4gb2JqZXQgSmF2YXNjcmlwdCkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmZpbHRlck9wdGlvbnNdIC0gTGVzIHByb3ByacOpdMOpcyBwb3NzaWJsZXMgZGUgY2V0IG9iamV0IHNvbnQgZMOpY3JpdGVzIGNpLWFwcsOocy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5maWx0ZXJPcHRpb25zLmJib3hdIC0gRW1wcmlzZSBkYW5zIGxhcXVlbGxlIG9uIHNvdWhhaXRlIGVmZmVjdHVlciBsYSByZWNoZXJjaGUuXG4gKiAgICAgIExlcyBwcm9wcmnDqXTDqXMgcG9zc2libGVzIGRlIGNldCBvYmpldCBzb250IGTDqWNyaXRlcyBjaS1hcHLDqHMuXG4gKiAgICAgIEBwYXJhbSB7RmxvYXR9IG9wdGlvbnMuZmlsdGVyT3B0aW9ucy5iYm94LmxlZnQgLSBBYnNjaXNzZSBkdSBjw7R0w6kgZ2F1Y2hlIGRlIGxhIEJCT1hcbiAqICAgICAgQHBhcmFtIHtGbG9hdH0gb3B0aW9ucy5maWx0ZXJPcHRpb25zLmJib3gucmlnaHQgLSBBYnNjaXNzZSBkdSBjw7R0w6kgZHJvaXQgZGUgbGEgQkJPWFxuICogICAgICBAcGFyYW0ge0Zsb2F0fSBvcHRpb25zLmZpbHRlck9wdGlvbnMuYmJveC50b3AgLSBPcmRvbm7DqWUgc3Vww6lyaWV1cmUgZGUgbGEgQkJPWFxuICogICAgICBAcGFyYW0ge0Zsb2F0fSBvcHRpb25zLmZpbHRlck9wdGlvbnMuYmJveC5ib3R0b20gLSBPcmRvbm7DqWUgaW5mw6lyaWV1cmUgZGUgbGEgQkJPWFxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IFtvcHRpb25zLmZpbHRlck9wdGlvbnMudHlwZSA9IFwiU3RyZWV0QWRkcmVzc1wiXSAtIFR5cGUgZGUgbCdvYmpldCByZWNoZXJjaMOpLlxuICogICAgICBMZSBzZXJ2aWNlIGRlIGfDqW9jb2RhZ2UgZHUgR8Opb3BvcnRhaWwgcGVybWV0IGRlIHJlY2hlcmNoZXIgZGVzICdQb3N0aW9uT2ZJbnRlcmVzdCcgcG91ciBkZXMgdG9wb255bWVzLCBkZXMgJ1N0cmVldEFkZHJlc3MnXG4gKiAgICAgIHBvdXIgZGVzIGFkcmVzc2VzIHBvc3RhbGVzLCBldC9vdSBkZXMgJ0NhZGFzdHJhbFBhcmNlbCcgcG91ciBkZXMgcGFyY2VsbGVzIGNhZGFzdHJhbGVzLlxuICogICAgICBEJ2F1dHJlcyB0eXBlcyBwb3Vycm9udCDDqnRyZSByYWpvdXTDqXMgc2Vsb24gbCfDqXZvbHV0aW9uIGR1IHNlcnZpY2UuXG4gKiAgICAgIFBhciBkw6lmYXV0LCB0eXBlID0gWydTdHJlZXRBZGRyZXNzJ10uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmZpbHRlck9wdGlvbnMuW3Byb3ByaWV0ZXMgZHUgZmlsdHJlXV0gLSBDcml0w6hyZSBzdXBwbMOpbWVudGFpcmUgcG91ciBmaWx0cmVyIGxhIHJlY2hlcmNoZSBzb3VzIGxhIGZvcm1lXG4gKiAgICAgIGQndW4gY291cGxlIGNsw6kvdmFsZXVyIMOgIGTDqWZpbmlyIHNlbG9uIGxlcyBwb3NzaWJpbGl0w6lzIGR1IHNlcnZldXIgYWpvdXTDqSDDoCBsYSByZXF1w6p0ZS5cbiAqICAgICAgTGUgc2VydmljZSBkZSBnw6lvY29kYWdlIGR1IEfDqW9wb3J0YWlsIHBlcm1ldCBkZSBmaWx0cmVyIHRvdXMgbGVzIHLDqXN1bHRhdHMgYXZlYyBsZXMgcHJvcHJpw6l0w6lzIDpcbiAqICAgICAgICAgIFwibXVuaWNpcGFsaXR5XCIsIFwiaW5zZWVcIiwgZXQgXCJkZXBhcnRtZW50XCIuXG4gKiAgICAgIElsIHBlcm1ldCBhdXNzaSBkZSBmaWx0cmVyIGxlcyBhZHJlc3NlcyBwb3N0YWxlcyBhdmVjIGxlcyBwcm9wcmnDqXTDqXMgOlxuICogICAgICAgICAgXCJxdWFsaXR5XCIsIFwiSURcIiwgXCJJRF9UUlwiIGV0IFwidGVycml0b3J5XCIuXG4gKiAgICAgIElsIHBlcm1ldCBkZSBmaWx0cmVyIGxlcyB0b3BvbnltZXMgYXZlYyBsZXMgcHJvcHJpw6l0w6lzIDpcbiAqICAgICAgICAgIFwiaW1wb3J0YW5jZVwiLCBcIm5hdHVyZVwiIGV0IFwidGVycml0b3J5XCIuXG4gKiAgICAgIEVuZmluLCBpbCBwZXJtZXQgZGUgZmlsdHJlciBsZXMgcGFyY2VsbGVzIGNhZGFzdHJhbGVzIGF2ZWMgbGVzIHByb3ByacOpdMOpcyA6XG4gKiAgICAgICAgICBcInNoZWV0XCIsIFwic2VjdGlvblwiLCBldCBcImFic29yYmVkY2l0eVwiLiBQYXMgZGUgdmFsZXVyIHBhciBkw6lmYXV0LlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhpbXVtUmVzcG9uc2VzXSAtIE5vbWJyZSBkZSByw6lwb25zZXMgbWF4aW1hbCBxdWUgbCdvbiBzb3VoYWl0ZSByZWNldm9pci5cbiAqICAgICAgUGFzIGRlIHZhbGV1ciBwYXIgZMOpZmF1dC5cbiAqICAgICAgU2kgbGUgc2VydmV1ciBjb25zdWx0w6kgZXN0IGNlbHVpIGR1IEfDqW9wb3J0YWlsLCBsYSB2YWxldXIgcGFyIGTDqWZhdXQgc2VyYSBkb25jIGNlbGxlIGR1IHNlcnZpY2UgOiAyNS5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnJldHVybkZyZWVGb3JtXSAtIEluZGlxdWUgc2kgbCdvbiBzb3VoYWl0ZSBlbiByw6lwb25zZSB1biBsb2NhbGlzYW50IGNvbmNhdMOpbsOpZSBwbHV0w7R0IHF1ZSBzdHJ1Y3R1csOpLlxuICogICAgICBQYXMgZGUgdmFsZXVyIHBhciBkw6lmYXV0LiBTaSBsZSBzZXJ2ZXVyIGNvbnN1bHTDqSBlc3QgY2VsdWkgZHUgR8Opb3BvcnRhaWwsIGxhIHZhbGV1ciBwYXIgZMOpZmF1dCBzZXJhIGRvbmMgY2VsbGUgZHUgc2VydmljZSA6ICdmYWxzZScuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnNyc10gLSBTeXN0w6htZSBkZSBjb29yZG9ubsOpZXMgZGFucyBsZXF1ZWwgbGVzIHBhcmFtw6h0cmVzIGfDqW9ncmFwaGlxdWVzIGVuIGVudHLDqWUgZXQgbGEgcsOpcG9uc2UgZHUgc2VydmljZSBzb250IGV4cHJpbcOpcy5cbiAqICAgICAgUGFzIGRlIHZhbGV1ciBwYXIgZMOpZmF1dC4gU2kgbGUgc2VydmV1ciBjb25zdWx0w6kgZXN0IGNlbHVpIGR1IEfDqW9wb3J0YWlsLCBsYSB2YWxldXIgcGFyIGTDqWZhdXQgc2VyYSBkb25jIGNlbGxlIGR1IHNlcnZpY2UgOiAnRVBTRzo0MzI2Jy5cbiAqXG4gKiBAZXhhbXBsZVxuICogICB2YXIgb3B0aW9ucyA9IHtcbiAqICAgICAgYXBpS2V5IDogbnVsbCxcbiAqICAgICAgc2VydmVyVXJsIDogJ2h0dHA6Ly9sb2NhbGhvc3Qvc2VydmljZS8nLFxuICogICAgICBwcm90b2NvbCA6ICdKU09OUCcsIC8vIEpTT05QfFhIUlxuICogICAgICBwcm94eVVSTCA6IG51bGwsXG4gKiAgICAgIGh0dHBNZXRob2QgOiAnR0VUJywgLy8gR0VUfFBPU1RcbiAqICAgICAgdGltZU91dCA6IDEwMDAwLCAvLyBtc1xuICogICAgICByYXdSZXNwb25zZSA6IGZhbHNlLCAvLyB0cnVlfGZhbHNlXG4gKiAgICAgIHNjb3BlIDogbnVsbCwgLy8gdGhpc1xuICogICAgICBvblN1Y2Nlc3MgOiBmdW5jdGlvbiAocmVzcG9uc2UpIHt9LFxuICogICAgICBvbkZhaWx1cmUgOiBmdW5jdGlvbiAoZXJyb3IpIHt9LFxuICogICAgICAvLyBzcMOpY2lmaXF1ZSBhdSBzZXJ2aWNlXG4gKiAgICAgIHBvc2l0aW9ucyA6IFt7bG9uOiwgbGF0On0sIHtsb246LCBsYXQ6fV0sXG4gKiAgICAgICguLi4pXG4gKiAgIH07XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBHZW9jb2RlIChvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEdlb2NvZGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXy5nZXRNZXNzYWdlKFwiQ0xBU1NfQ09OU1RSVUNUT1JcIiwgXCJHZW9jb2RlXCIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb20gZGUgbGEgY2xhc3NlIChoZXJpdGFnZSlcbiAgICAgKiBGSVhNRSBpbnN0YW5jZSBvdSBjbGFzc2UgP1xuICAgICAqL1xuICAgIHRoaXMuQ0xBU1NOQU1FID0gXCJHZW9jb2RlXCI7XG5cbiAgICAvLyBhcHBlbCBkdSBjb25zdHJ1Y3RldXIgcGFyIGhlcml0YWdlXG4gICAgQ29tbW9uU2VydmljZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5sb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiR3AuU2VydmljZXMuR2VvY29kZVwiKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIltDb25zdHJ1Y3RldXIgR2VvY29kZSAob3B0aW9ucyldXCIpO1xuXG4gICAgaWYgKCFvcHRpb25zLmxvY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihfLmdldE1lc3NhZ2UoXCJQQVJBTV9NSVNTSU5HXCIsIFwibG9jYXRpb25cIikpO1xuICAgIH1cblxuICAgIC8vIEZJWE1FIEVDTUFTY3JpcHQgNSBzdXBwb3J0XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmxvY2F0aW9uID09PSBcIm9iamVjdFwiICYmIE9iamVjdC5rZXlzKG9wdGlvbnMubG9jYXRpb24pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXy5nZXRNZXNzYWdlKFwiUEFSQU1fRU1QVFlcIiwgXCJsb2NhdGlvblwiKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiAmJiBvcHRpb25zLmxvY2F0aW9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXy5nZXRNZXNzYWdlKFwiUEFSQU1fRU1QVFlcIiwgXCJsb2NhdGlvblwiKSk7XG4gICAgfVxuXG4gICAgLy8gYWpvdXQgZGVzIG9wdGlvbnMgc3DDqWNpZmlxdWVzIGF1IHNlcnZpY2VcbiAgICB0aGlzLm9wdGlvbnMubG9jYXRpb24gPSBvcHRpb25zLmxvY2F0aW9uO1xuXG4gICAgLy8gb24gZGVmaW5pdCBkZXMgZmlsdHJlcyBhcHIgZGVmYXV0XG4gICAgaWYgKCFvcHRpb25zLmZpbHRlck9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMuZmlsdGVyT3B0aW9ucyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsdGVyT3B0aW9ucyA9IG9wdGlvbnMuZmlsdGVyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHR5cGUgOiBbXCJTdHJlZXRBZGRyZXNzXCJdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRklYTUUgRUNNQVNjcmlwdCA1IHN1cHBvcnQgKHZhbGFibGUgcG91ciB1biBvYmpldCB1bmlxdWVtZW50ICEpXG4gICAgLy8gY2VjaSBwZXJtZXQgZGUgdGVzdGVyIGxlIGNhcyBvw7kgJ29wdGlvbnMuZmlsdGVyT3B0aW9ucycgOiB7fVxuICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zLmZpbHRlck9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsdGVyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHR5cGUgOiBbXCJTdHJlZXRBZGRyZXNzXCJdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGZpbHRlciA9IE9iamVjdC5rZXlzKG9wdGlvbnMuZmlsdGVyT3B0aW9ucyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWx0ZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGZpbHRlcltpXTtcbiAgICAgICAgLy8gb24gdHJhbnNmb3JtZSBjZXJ0YWlucyBmaWx0cmVzIHF1aSBwb3VycmFpZW50IMOqdHJlIG51bcOpcmlxdWVzIGVuIHN0cmluZ1xuICAgICAgICB2YXIgZmlsdGVyc0NvdWxkQmVOdW1iZXJMaXN0ID0gW1wiZGVwYXJ0bWVudFwiLCBcIm51bWJlclwiLCBcInBvc3RhbENvZGVcIiwgXCJpbnNlZVwiLCBcImltcG9ydGFuY2VcIiwgXCJJRFwiLCBcIklEVFJcIiwgXCJhYnNvcmJlZENpdHlcIiwgXCJzaGVldFwiLCBcInNlY3Rpb25cIiwgXCJpbnNlZVJlZ2lvblwiLCBcImluc2VlRGVwYXJ0bWVudFwiXTtcbiAgICAgICAgaWYgKGZpbHRlcnNDb3VsZEJlTnVtYmVyTGlzdC5pbmRleE9mKGtleSkgIT09IC0xICYmIHR5cGVvZiBvcHRpb25zLmZpbHRlck9wdGlvbnNba2V5XSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXJPcHRpb25zW2tleV0gPSBvcHRpb25zLmZpbHRlck9wdGlvbnNba2V5XS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9uIHN1cHByaW1lIGxlcyBmaWx0cmVzIHZpZGVzXG4gICAgICAgIGlmICghb3B0aW9ucy5maWx0ZXJPcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMuZmlsdGVyT3B0aW9uc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmZpbHRlck9wdGlvbnMudHlwZSA9IG9wdGlvbnMuZmlsdGVyT3B0aW9ucy50eXBlIHx8IFtcIlN0cmVldEFkZHJlc3NcIl07XG4gICAgdGhpcy5vcHRpb25zLm1heGltdW1SZXNwb25zZXMgPSBvcHRpb25zLm1heGltdW1SZXNwb25zZXMgfHwgMjU7XG4gICAgdGhpcy5vcHRpb25zLnJldHVybkZyZWVGb3JtID0gb3B0aW9ucy5yZXR1cm5GcmVlRm9ybSB8fCBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnMuc3JzID0gb3B0aW9ucy5zcnMgfHwgXCJFUFNHOjQzMjZcIjtcblxuICAgIC8vIGF0dHJpYnV0cyBkJ2luc3RhbmNlc1xuXG4gICAgLyoqXG4gICAgICogRm9ybWF0IGZvcmPDqSBkZSBsYSByw6lwb25zZSBkdSBzZXJ2aWNlIDogXCJ4bWxcIlxuICAgICAqIHNhdWYgc2kgbCdvbiBzb3VoYWl0ZSB1bmUgcmVwb25zZSBicnV0ZSAob3B0aW9ucy5yYXdSZXNwb25zZSlcbiAgICAgKi9cbiAgICB0aGlzLm9wdGlvbnMub3V0cHV0Rm9ybWF0ID0gKHRoaXMub3B0aW9ucy5yYXdSZXNwb25zZSkgPyBcIlwiIDogXCJ4bWxcIjtcbn1cblxuLyoqXG4gKiBAbGVuZHMgbW9kdWxlOkdlb2NvZGUjXG4gKi9cbkdlb2NvZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDb21tb25TZXJ2aWNlLnByb3RvdHlwZSwge1xuICAgIC8vIHRvZG9cbiAgICAvLyBnZXR0ZXIvc2V0dGVyXG59KTtcblxuLypcbiAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gKi9cbkdlb2NvZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VvY29kZTtcblxuLyoqXG4gKiBDcsOpYXRpb24gZGUgbGEgcmVxdcOqdGUgKG92ZXJ3cml0ZSlcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvciAgIC0gY2FsbGJhY2sgZGVzIGVycmV1cnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN1Y2Nlc3MgLSBjYWxsYmFja1xuICovXG5HZW9jb2RlLnByb3RvdHlwZS5idWlsZFJlcXVlc3QgPSBmdW5jdGlvbiAoZXJyb3IsIHN1Y2Nlc3MpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cE1ldGhvZCA6IHRoaXMub3B0aW9ucy5odHRwTWV0aG9kLFxuICAgICAgICAvLyBvcHRpb25zIHNwZWNpZmlxdWVzIGR1IHNlcnZpY2VcbiAgICAgICAgbG9jYXRpb24gOiB0aGlzLm9wdGlvbnMubG9jYXRpb24sXG4gICAgICAgIHJldHVybkZyZWVGb3JtIDogdGhpcy5vcHRpb25zLnJldHVybkZyZWVGb3JtLFxuICAgICAgICBmaWx0ZXJPcHRpb25zIDogdGhpcy5vcHRpb25zLmZpbHRlck9wdGlvbnMsXG4gICAgICAgIHNycyA6IHRoaXMub3B0aW9ucy5zcnMsXG4gICAgICAgIG1heGltdW1SZXNwb25zZXMgOiB0aGlzLm9wdGlvbnMubWF4aW11bVJlc3BvbnNlc1xuICAgIH07XG5cbiAgICB0aGlzLnJlcXVlc3QgPSBEaXJlY3RHZW9jb2RlUmVxdWVzdEZhY3RvcnkuYnVpbGQob3B0aW9ucyk7XG5cbiAgICAvLyBvbiB0ZXN0ZSBzaSBsYSByZXF1ZXRlIGEgYmllbiDDqXTDqSBjb25zdHJ1aXRlICFcbiAgICAoIXRoaXMucmVxdWVzdClcbiAgICAgICAgPyBlcnJvci5jYWxsKHRoaXMsIG5ldyBFcnJvclNlcnZpY2UoXy5nZXRNZXNzYWdlKFwiU0VSVklDRV9SRVFVRVNUX0JVSUxEXCIpKSlcbiAgICAgICAgOiBzdWNjZXNzLmNhbGwodGhpcywgdGhpcy5yZXF1ZXN0KTtcbn07XG5cbi8qKlxuICogQW5hbHlzZSBkZSBsYSByZXBvbnNlIChvdmVyd3JpdGUpXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXJyb3IgICAtIGNhbGxiYWNrIGRlcyBlcnJldXJzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWNjZXNzIC0gY2FsbGJhY2tcbiAqL1xuR2VvY29kZS5wcm90b3R5cGUuYW5hbHl6ZVJlc3BvbnNlID0gZnVuY3Rpb24gKGVycm9yLCBzdWNjZXNzKSB7XG4gICAgLyogSU5GTyA6XG4gICAgICAgICBFdGFwZSAxIDogQ3LDqWF0aW9uIGRlIGxhIHJlcXXDqnRlXG4gICAgICAgICAgICAtPiBBcHBlbCBkdSBmb3JtYXQgT3BlbkxTIHBvdXIgY3LDqWVyIHVuZSByZXF1w6p0ZSDDoCBwYXJ0aXIgZGVzIHBhcmFtw6h0cmVzIChwYXIgZXhlbXBsZSlcbiAgICAgICAgICAgICAgKHNvaXQgZGlyZWN0ZW1lbnQgdW5lIFVSTCBzaSBHRVQsIHNvaXQgdW5lIHJlcXXDqnRlIFhNTCBzaSBQT1NUKVxuICAgICAgICAgICAgLyFcXCB0ZXN0ZXIgc2kgYXBpS2V5ICYmIHNlcnZlclVybCA9PiBvbiBuZSBnYXJkZSBxdWUgc2VydmVyVXJsXG4gICAgICAgICAgICAtPiBzdG9ja2FnZSBkZSBsYSByZXF1w6p0ZSBkYW5zIHRoaXMucmVxdWVzdFxuICAgICAgICAgRXRhcGUgMiA6IEVudm9pIGRlIGxhIHJlcXXDqnRlIHNlbG9uIGxlIGJvbiBwcm90b2NvbGVcbiAgICAgICAgICAgIC0+IGFwcGVsIGR1IHByb3RvY29sIEpTT05QIG91IFhIUiwgZXQgZW52b2kgKHBhciBleCBzZW5kICgpKSAodGhpcy5wcm90b2NvbClcbiAgICAgICAgICAgIC0+IHLDqWN1cMOpcmF0aW9uIGRlIGxhIHLDqXBvbnNlIHhtbCBkYW5zIGxhIGZvbmN0aW9uIG9uU3VjY2VzcyAoKSAodGhpcy5yZXNwb25zZSlcbiAgICAgICAgICAgIC0+IHNpIGNvZGUgSFRUUCAyMDAgZXQgcGFzIGRlIG1lc3NhZ2UgZCdlcnJldXIgOiBldGFwZSAzXG4gICAgICAgICAgICAtPiBzaSBjb2RlIEhUVFAgIT0gMjAwIDogbGFuY2VtZW50IGRlIGxhIGZvbmN0aW9uIGRlIGNhbGxiYWNrIG9uRmFpbHVyZSBhdmVjIGxlIG1lc3NhZ2UgZCdlcnJldXJcbiAgICAgICAgIEV0YXBlIDMgOiBBbmFseXNlIGRlIGxhIHLDqXBvbnNlIHhtbCBldCBjb25zdHJ1Y3Rpb24gZHUgSlNPTiAoc2kgcmF3UmVzcG9uc2UgPT09IGZhbHNlIClcbiAgICAgICAgICAgIC0+IGFwcGVsIGR1IHBhcnNlciBwb3VyIHLDqWN1cMOpcmVyIGxlIHhtbERvY3VtZW50XG4gICAgICAgICAgICAtPiBhcHBlbCBkdSByZWFkZXIgT3BlbkxTIHBvdXIgbGlyZSBsZXMgw6lsw6ltZW50cyBldCByw6ljdXDDqXJlciBsJ29iamV0IEpTT05cbiAgICAgICAgICAgICAgIGNvcnJlc3BvbmRhbnQgYXUgdHlwZSBkZSBnw6lvY29kYWdlIChkw6lmaW5pIGRhbnMgbGVzIHNwZWNzKVxuICAgICAgICAgRXRhcGUgNCA6IExhbmNlbWVudCBkZSBsYSBmb25jdGlvbiBkZSBjYWxsYmFjayBvblN1Y2Nlc3MgYXZlYyBsYSByw6lwb25zZSA6XG4gICAgICAgICAgICAtPiB4bWxSZXNwb25zZSAoc2kgcmF3UmVzcG9uc2UgPT09IHRydWUpXG4gICAgICAgICAgICAtPiBvdSBnZW9jb2RlZExvY2F0aW9uc1xuICAgICovXG5cbiAgICBpZiAodGhpcy5yZXNwb25zZSkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJlc3BvbnNlIDogdGhpcy5yZXNwb25zZSxcbiAgICAgICAgICAgIHJhd1Jlc3BvbnNlIDogdGhpcy5vcHRpb25zLnJhd1Jlc3BvbnNlLFxuICAgICAgICAgICAgb25FcnJvciA6IGVycm9yLFxuICAgICAgICAgICAgb25TdWNjZXNzIDogc3VjY2VzcyxcbiAgICAgICAgICAgIHNjb3BlIDogdGhpc1xuICAgICAgICB9O1xuXG4gICAgICAgIERpcmVjdEdlb2NvZGVSZXNwb25zZUZhY3RvcnkuYnVpbGQob3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IuY2FsbCh0aGlzLCBuZXcgRXJyb3JTZXJ2aWNlKF8uZ2V0TWVzc2FnZShcIlNFUlZJQ0VfUkVTUE9OU0VfRU1QVFlcIikpKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHZW9jb2RlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Geocode.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Request/DirectGeocodeRequestFactory.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Request/DirectGeocodeRequestFactory.js ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Formats_XLS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Formats/XLS */ \"./node_modules/geoportal-access-lib/src/Formats/XLS.js\");\n/* harmony import */ var _Formats_XLS_LocationUtilityService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Formats/XLS/LocationUtilityService */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService.js\");\n/* harmony import */ var _Formats_XLS_LocationUtilityService_GeocodeFilterExtension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Formats/XLS/LocationUtilityService/GeocodeFilterExtension */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService/GeocodeFilterExtension.js\");\n/* harmony import */ var _Request_model_StreetAddress__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Request/model/StreetAddress */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/StreetAddress.js\");\n/* harmony import */ var _Request_model_PositionOfInterest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Request/model/PositionOfInterest */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/PositionOfInterest.js\");\n/* harmony import */ var _Request_model_CadastralParcel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Request/model/CadastralParcel */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/CadastralParcel.js\");\n/* harmony import */ var _Request_model_Administratif__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Request/model/Administratif */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/Administratif.js\");\n/**\n * Creation d'une requête OpenLS en mode POST ou GET\n * (Factory)\n *\n * @module DirectGeocodeRequestFactory\n * @alias Gp.Services.Geocode.Request.DirectGeocodeRequestFactory\n * @private\n */\n\n\n\n\n\n\n\n\n\nvar DirectGeocodeRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Geocode\n     *\n     * @example\n     *   var options = {\n     *      httpMethod:\n     *      // options specifiques du service\n     *      location:\n     *      returnFreeForm:\n     *      filterOptions:\n     *      srs:\n     *      maximumResponses:\n     *   };\n     *   var result = DirectGeocodeRequestFactory.build(options);\n     *   if (!result) {\n     *       // error...\n     *   }\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"DirectGeocodeRequestFactory\");\n        logger.trace([\"DirectGeocodeRequestFactory::build()\"]);\n\n        var request = null;\n\n        // gestion des filtres (table de geocodage) !\n        // par defaut, on les ajoute toute ...\n        var oFilter = new _Formats_XLS_LocationUtilityService_GeocodeFilterExtension__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n        oFilter.addFilterExtensions(new _Request_model_Administratif__WEBPACK_IMPORTED_MODULE_7__[\"default\"]());\n        oFilter.addFilterExtensions(new _Request_model_StreetAddress__WEBPACK_IMPORTED_MODULE_4__[\"default\"]());\n        oFilter.addFilterExtensions(new _Request_model_PositionOfInterest__WEBPACK_IMPORTED_MODULE_5__[\"default\"]());\n        oFilter.addFilterExtensions(new _Request_model_CadastralParcel__WEBPACK_IMPORTED_MODULE_6__[\"default\"]());\n\n        // objet LUS\n        // on peut aussi par un objet XLS::GeocodeRequest\n        var oLUS = new _Formats_XLS_LocationUtilityService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            location : options.location,\n            returnFreeForm : options.returnFreeForm,\n            filterOptions : options.filterOptions\n        });\n        oLUS.addFilter(oFilter);\n\n        // Format XLS\n        var oXLS = new _Formats_XLS__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            srsName : options.srs,\n            maximumResponses : options.maximumResponses\n        });\n        oXLS.namespace = true;\n        oXLS.setService(oLUS);\n\n        // request brute !\n        request = oXLS.build();\n\n        // en mode GET, la requête est encodée\n        // et le param. 'qxml' est ajouté\n        if (options.httpMethod === \"GET\") {\n            var myRequest = \"qxml=\" +\n                encodeURIComponent(request)\n                    .replace(/-/g, \"%2D\")\n                    .replace(/_/g, \"%5F\")\n                    .replace(/\\./g, \"%2E\")\n                    .replace(/!/g, \"%21\")\n                    .replace(/~/g, \"%7E\")\n                    .replace(/\\*/g, \"%2A\")\n                    .replace(/'/g, \"%27\")\n                    .replace(/\\(/g, \"%28\")\n                    .replace(/\\)/g, \"%29\");\n            request = myRequest;\n        }\n\n        logger.trace(request);\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DirectGeocodeRequestFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L0RpcmVjdEdlb2NvZGVSZXF1ZXN0RmFjdG9yeS5qcz8zZWFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDYjtBQUMwQztBQUN1QjtBQUM3QztBQUNVO0FBQ047QUFDSjs7QUFFM0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOERBQU07QUFDM0I7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQixrR0FBc0I7QUFDaEQsd0NBQXdDLG9FQUFhO0FBQ3JELHdDQUF3QyxvRUFBYTtBQUNyRCx3Q0FBd0MseUVBQWtCO0FBQzFELHdDQUF3QyxzRUFBZTs7QUFFdkQ7QUFDQTtBQUNBLHVCQUF1QiwyRUFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0EsdUJBQXVCLG9EQUFHO0FBQzFCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZSwwRkFBMkIsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L0RpcmVjdEdlb2NvZGVSZXF1ZXN0RmFjdG9yeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRpb24gZCd1bmUgcmVxdcOqdGUgT3BlbkxTIGVuIG1vZGUgUE9TVCBvdSBHRVRcbiAqIChGYWN0b3J5KVxuICpcbiAqIEBtb2R1bGUgRGlyZWN0R2VvY29kZVJlcXVlc3RGYWN0b3J5XG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZS5SZXF1ZXN0LkRpcmVjdEdlb2NvZGVSZXF1ZXN0RmFjdG9yeVxuICogQHByaXZhdGVcbiAqL1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5pbXBvcnQgWExTIGZyb20gXCIuLi8uLi8uLi9Gb3JtYXRzL1hMU1wiO1xuaW1wb3J0IExvY2F0aW9uVXRpbGl0eVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL0Zvcm1hdHMvWExTL0xvY2F0aW9uVXRpbGl0eVNlcnZpY2VcIjtcbmltcG9ydCBHZW9jb2RlRmlsdGVyRXh0ZW5zaW9uIGZyb20gXCIuLi8uLi8uLi9Gb3JtYXRzL1hMUy9Mb2NhdGlvblV0aWxpdHlTZXJ2aWNlL0dlb2NvZGVGaWx0ZXJFeHRlbnNpb25cIjtcbmltcG9ydCBTdHJlZXRBZGRyZXNzIGZyb20gXCIuLi9SZXF1ZXN0L21vZGVsL1N0cmVldEFkZHJlc3NcIjtcbmltcG9ydCBQb3NpdGlvbk9mSW50ZXJlc3QgZnJvbSBcIi4uL1JlcXVlc3QvbW9kZWwvUG9zaXRpb25PZkludGVyZXN0XCI7XG5pbXBvcnQgQ2FkYXN0cmFsUGFyY2VsIGZyb20gXCIuLi9SZXF1ZXN0L21vZGVsL0NhZGFzdHJhbFBhcmNlbFwiO1xuaW1wb3J0IEFkbWluaXN0cmF0aWYgZnJvbSBcIi4uL1JlcXVlc3QvbW9kZWwvQWRtaW5pc3RyYXRpZlwiO1xuXG52YXIgRGlyZWN0R2VvY29kZVJlcXVlc3RGYWN0b3J5ID0ge1xuXG4gICAgLyoqXG4gICAgICogaW50ZXJmYWNlIHVuaXF1ZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBidWlsZFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgZGVmaW5pZXMgZGFucyBsZSBjb21wb3NhbnQgR2VvY29kZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIHZhciBvcHRpb25zID0ge1xuICAgICAqICAgICAgaHR0cE1ldGhvZDpcbiAgICAgKiAgICAgIC8vIG9wdGlvbnMgc3BlY2lmaXF1ZXMgZHUgc2VydmljZVxuICAgICAqICAgICAgbG9jYXRpb246XG4gICAgICogICAgICByZXR1cm5GcmVlRm9ybTpcbiAgICAgKiAgICAgIGZpbHRlck9wdGlvbnM6XG4gICAgICogICAgICBzcnM6XG4gICAgICogICAgICBtYXhpbXVtUmVzcG9uc2VzOlxuICAgICAqICAgfTtcbiAgICAgKiAgIHZhciByZXN1bHQgPSBEaXJlY3RHZW9jb2RlUmVxdWVzdEZhY3RvcnkuYnVpbGQob3B0aW9ucyk7XG4gICAgICogICBpZiAoIXJlc3VsdCkge1xuICAgICAqICAgICAgIC8vIGVycm9yLi4uXG4gICAgICogICB9XG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmVxdWVzdFxuICAgICAqL1xuICAgIGJ1aWxkIDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbG9nZ2VyXG4gICAgICAgIHZhciBsb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiRGlyZWN0R2VvY29kZVJlcXVlc3RGYWN0b3J5XCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoW1wiRGlyZWN0R2VvY29kZVJlcXVlc3RGYWN0b3J5OjpidWlsZCgpXCJdKTtcblxuICAgICAgICB2YXIgcmVxdWVzdCA9IG51bGw7XG5cbiAgICAgICAgLy8gZ2VzdGlvbiBkZXMgZmlsdHJlcyAodGFibGUgZGUgZ2VvY29kYWdlKSAhXG4gICAgICAgIC8vIHBhciBkZWZhdXQsIG9uIGxlcyBham91dGUgdG91dGUgLi4uXG4gICAgICAgIHZhciBvRmlsdGVyID0gbmV3IEdlb2NvZGVGaWx0ZXJFeHRlbnNpb24oKTtcbiAgICAgICAgb0ZpbHRlci5hZGRGaWx0ZXJFeHRlbnNpb25zKG5ldyBBZG1pbmlzdHJhdGlmKCkpO1xuICAgICAgICBvRmlsdGVyLmFkZEZpbHRlckV4dGVuc2lvbnMobmV3IFN0cmVldEFkZHJlc3MoKSk7XG4gICAgICAgIG9GaWx0ZXIuYWRkRmlsdGVyRXh0ZW5zaW9ucyhuZXcgUG9zaXRpb25PZkludGVyZXN0KCkpO1xuICAgICAgICBvRmlsdGVyLmFkZEZpbHRlckV4dGVuc2lvbnMobmV3IENhZGFzdHJhbFBhcmNlbCgpKTtcblxuICAgICAgICAvLyBvYmpldCBMVVNcbiAgICAgICAgLy8gb24gcGV1dCBhdXNzaSBwYXIgdW4gb2JqZXQgWExTOjpHZW9jb2RlUmVxdWVzdFxuICAgICAgICB2YXIgb0xVUyA9IG5ldyBMb2NhdGlvblV0aWxpdHlTZXJ2aWNlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uIDogb3B0aW9ucy5sb2NhdGlvbixcbiAgICAgICAgICAgIHJldHVybkZyZWVGb3JtIDogb3B0aW9ucy5yZXR1cm5GcmVlRm9ybSxcbiAgICAgICAgICAgIGZpbHRlck9wdGlvbnMgOiBvcHRpb25zLmZpbHRlck9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIG9MVVMuYWRkRmlsdGVyKG9GaWx0ZXIpO1xuXG4gICAgICAgIC8vIEZvcm1hdCBYTFNcbiAgICAgICAgdmFyIG9YTFMgPSBuZXcgWExTKHtcbiAgICAgICAgICAgIHNyc05hbWUgOiBvcHRpb25zLnNycyxcbiAgICAgICAgICAgIG1heGltdW1SZXNwb25zZXMgOiBvcHRpb25zLm1heGltdW1SZXNwb25zZXNcbiAgICAgICAgfSk7XG4gICAgICAgIG9YTFMubmFtZXNwYWNlID0gdHJ1ZTtcbiAgICAgICAgb1hMUy5zZXRTZXJ2aWNlKG9MVVMpO1xuXG4gICAgICAgIC8vIHJlcXVlc3QgYnJ1dGUgIVxuICAgICAgICByZXF1ZXN0ID0gb1hMUy5idWlsZCgpO1xuXG4gICAgICAgIC8vIGVuIG1vZGUgR0VULCBsYSByZXF1w6p0ZSBlc3QgZW5jb2TDqWVcbiAgICAgICAgLy8gZXQgbGUgcGFyYW0uICdxeG1sJyBlc3QgYWpvdXTDqVxuICAgICAgICBpZiAob3B0aW9ucy5odHRwTWV0aG9kID09PSBcIkdFVFwiKSB7XG4gICAgICAgICAgICB2YXIgbXlSZXF1ZXN0ID0gXCJxeG1sPVwiICtcbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQocmVxdWVzdClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgXCIlMkRcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL18vZywgXCIlNUZcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLi9nLCBcIiUyRVwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvIS9nLCBcIiUyMVwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvfi9nLCBcIiU3RVwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwqL2csIFwiJTJBXCIpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiJTI3XCIpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCgvZywgXCIlMjhcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKS9nLCBcIiUyOVwiKTtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBteVJlcXVlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZXIudHJhY2UocmVxdWVzdCk7XG5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGlyZWN0R2VvY29kZVJlcXVlc3RGYWN0b3J5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Request/DirectGeocodeRequestFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Request/GeocodeLocation.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Request/GeocodeLocation.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * @classdesc\n *\n * Liste des attributs des tables de geocodage\n * @constructor\n * @alias Gp.Services.Geocode.Request.GeocodeLocation\n * @private\n */\nfunction GeocodeLocation () {\n    if (!(this instanceof GeocodeLocation)) {\n        throw new TypeError(\"GeocodeLocation constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Objet qui peut prendre comme propriétés les valeurs du tableau serviceAttributes\n     * @type {Object}\n     */\n    this.placeAttributes = {};\n\n    /**\n     * Tableau qui liste les attributs spécifiques selon le type de la GeocodeLocation.\n     * Ces attributs correspondent à ceux saisis par l'utilisateur (légèrement différents de ceux du service)\n     * @type {String[]}\n     */\n    this.attributesList = [];\n\n    /**\n     * Tableau qui liste les attributs spécifiques selon le type de la GeocodeLocation\n     * Ces attributs correspondent à ceux interprétés par le service (balises Place).\n     * @type {String[]}\n     */\n    this.serviceAttributes = [];\n}\n\n/**\n * @lends module:GeocodeLocation\n */\nGeocodeLocation.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : GeocodeLocation\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GeocodeLocation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L0dlb2NvZGVMb2NhdGlvbi5qcz85NjZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVlLDhFQUFlLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0dlb2NvZGUvUmVxdWVzdC9HZW9jb2RlTG9jYXRpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGNsYXNzZGVzY1xuICpcbiAqIExpc3RlIGRlcyBhdHRyaWJ1dHMgZGVzIHRhYmxlcyBkZSBnZW9jb2RhZ2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkdlb2NvZGUuUmVxdWVzdC5HZW9jb2RlTG9jYXRpb25cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEdlb2NvZGVMb2NhdGlvbiAoKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEdlb2NvZGVMb2NhdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlb2NvZGVMb2NhdGlvbiBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9iamV0IHF1aSBwZXV0IHByZW5kcmUgY29tbWUgcHJvcHJpw6l0w6lzIGxlcyB2YWxldXJzIGR1IHRhYmxlYXUgc2VydmljZUF0dHJpYnV0ZXNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMucGxhY2VBdHRyaWJ1dGVzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBUYWJsZWF1IHF1aSBsaXN0ZSBsZXMgYXR0cmlidXRzIHNww6ljaWZpcXVlcyBzZWxvbiBsZSB0eXBlIGRlIGxhIEdlb2NvZGVMb2NhdGlvbi5cbiAgICAgKiBDZXMgYXR0cmlidXRzIGNvcnJlc3BvbmRlbnQgw6AgY2V1eCBzYWlzaXMgcGFyIGwndXRpbGlzYXRldXIgKGzDqWfDqHJlbWVudCBkaWZmw6lyZW50cyBkZSBjZXV4IGR1IHNlcnZpY2UpXG4gICAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgICAqL1xuICAgIHRoaXMuYXR0cmlidXRlc0xpc3QgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFRhYmxlYXUgcXVpIGxpc3RlIGxlcyBhdHRyaWJ1dHMgc3DDqWNpZmlxdWVzIHNlbG9uIGxlIHR5cGUgZGUgbGEgR2VvY29kZUxvY2F0aW9uXG4gICAgICogQ2VzIGF0dHJpYnV0cyBjb3JyZXNwb25kZW50IMOgIGNldXggaW50ZXJwcsOpdMOpcyBwYXIgbGUgc2VydmljZSAoYmFsaXNlcyBQbGFjZSkuXG4gICAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgICAqL1xuICAgIHRoaXMuc2VydmljZUF0dHJpYnV0ZXMgPSBbXTtcbn1cblxuLyoqXG4gKiBAbGVuZHMgbW9kdWxlOkdlb2NvZGVMb2NhdGlvblxuICovXG5HZW9jb2RlTG9jYXRpb24ucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0ZXVyIChhbGlhcylcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciA6IEdlb2NvZGVMb2NhdGlvblxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBHZW9jb2RlTG9jYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Request/GeocodeLocation.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Request/ReverseGeocodeRequestFactory.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Request/ReverseGeocodeRequestFactory.js ***!
  \********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Formats_XLS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Formats/XLS */ \"./node_modules/geoportal-access-lib/src/Formats/XLS.js\");\n/* harmony import */ var _Formats_XLS_LocationUtilityService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Formats/XLS/LocationUtilityService */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/LocationUtilityService.js\");\n/**\n * Creation d'une requête OpenLS en mode POST ou GET\n * (Factory)\n *\n * @module ReverseGeocodeRequestFactory\n * @alias Gp.Services.Geocode.Request.ReverseGeocodeRequestFactory\n * @private\n */\n\n\n\n\nvar ReverseGeocodeRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Geocode\n     *\n     * @example\n     *   var options = {\n     *      httpMethod :\n     *      // options specifiques du service\n     *      position :\n     *      returnFreeForm :\n     *      filterOptions :\n     *      srs :\n     *      maximumResponses :\n     *   };\n     *   var result = ReverseGeocodeRequestFactory.build(options);\n     *   if (!result) {\n     *       // error...\n     *   }\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"ReverseGeocodeRequestFactory\");\n        logger.trace([\"ReverseGeocodeRequestFactory::build()\"]);\n\n        // options non definies\n        var settings = options || {};\n\n        var request = null;\n\n        // objet LUS\n        var oLUS = new _Formats_XLS_LocationUtilityService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            position : settings.position,\n            returnFreeForm : settings.returnFreeForm,\n            filterOptions : settings.filterOptions\n        });\n\n        // Format XLS\n        var oXLS = new _Formats_XLS__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            srsName : settings.srs,\n            maximumResponses : settings.maximumResponses\n        });\n        oXLS.namespace = true;\n        oXLS.setService(oLUS);\n\n        // request brute !\n        request = oXLS.build();\n\n        // en mode GET, la requête est encodée\n        // et le param. 'qxml' est ajouté\n        if (settings.httpMethod === \"GET\") {\n            var myRequest = \"qxml=\" +\n                encodeURIComponent(request)\n                    .replace(/-/g, \"%2D\")\n                    .replace(/_/g, \"%5F\")\n                    .replace(/\\./g, \"%2E\")\n                    .replace(/!/g, \"%21\")\n                    .replace(/~/g, \"%7E\")\n                    .replace(/\\*/g, \"%2A\")\n                    .replace(/'/g, \"%27\")\n                    .replace(/\\(/g, \"%28\")\n                    .replace(/\\)/g, \"%29\");\n            request = myRequest;\n        }\n\n        logger.trace(request);\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReverseGeocodeRequestFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L1JldmVyc2VHZW9jb2RlUmVxdWVzdEZhY3RvcnkuanM/MDRmOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDYjtBQUMwQzs7QUFFakY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOERBQU07QUFDM0I7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVCQUF1QiwyRUFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBLHVCQUF1QixvREFBRztBQUMxQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUsMkZBQTRCLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0dlb2NvZGUvUmVxdWVzdC9SZXZlcnNlR2VvY29kZVJlcXVlc3RGYWN0b3J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGlvbiBkJ3VuZSByZXF1w6p0ZSBPcGVuTFMgZW4gbW9kZSBQT1NUIG91IEdFVFxuICogKEZhY3RvcnkpXG4gKlxuICogQG1vZHVsZSBSZXZlcnNlR2VvY29kZVJlcXVlc3RGYWN0b3J5XG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZS5SZXF1ZXN0LlJldmVyc2VHZW9jb2RlUmVxdWVzdEZhY3RvcnlcbiAqIEBwcml2YXRlXG4gKi9cbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uLy4uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuaW1wb3J0IFhMUyBmcm9tIFwiLi4vLi4vLi4vRm9ybWF0cy9YTFNcIjtcbmltcG9ydCBMb2NhdGlvblV0aWxpdHlTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9Gb3JtYXRzL1hMUy9Mb2NhdGlvblV0aWxpdHlTZXJ2aWNlXCI7XG5cbnZhciBSZXZlcnNlR2VvY29kZVJlcXVlc3RGYWN0b3J5ID0ge1xuXG4gICAgLyoqXG4gICAgICogaW50ZXJmYWNlIHVuaXF1ZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBidWlsZFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgZGVmaW5pZXMgZGFucyBsZSBjb21wb3NhbnQgR2VvY29kZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIHZhciBvcHRpb25zID0ge1xuICAgICAqICAgICAgaHR0cE1ldGhvZCA6XG4gICAgICogICAgICAvLyBvcHRpb25zIHNwZWNpZmlxdWVzIGR1IHNlcnZpY2VcbiAgICAgKiAgICAgIHBvc2l0aW9uIDpcbiAgICAgKiAgICAgIHJldHVybkZyZWVGb3JtIDpcbiAgICAgKiAgICAgIGZpbHRlck9wdGlvbnMgOlxuICAgICAqICAgICAgc3JzIDpcbiAgICAgKiAgICAgIG1heGltdW1SZXNwb25zZXMgOlxuICAgICAqICAgfTtcbiAgICAgKiAgIHZhciByZXN1bHQgPSBSZXZlcnNlR2VvY29kZVJlcXVlc3RGYWN0b3J5LmJ1aWxkKG9wdGlvbnMpO1xuICAgICAqICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgKiAgICAgICAvLyBlcnJvci4uLlxuICAgICAqICAgfVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHJlcXVlc3RcbiAgICAgKi9cbiAgICBidWlsZCA6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIC8vIGxvZ2dlclxuICAgICAgICB2YXIgbG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcihcIlJldmVyc2VHZW9jb2RlUmVxdWVzdEZhY3RvcnlcIik7XG4gICAgICAgIGxvZ2dlci50cmFjZShbXCJSZXZlcnNlR2VvY29kZVJlcXVlc3RGYWN0b3J5OjpidWlsZCgpXCJdKTtcblxuICAgICAgICAvLyBvcHRpb25zIG5vbiBkZWZpbmllc1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIHZhciByZXF1ZXN0ID0gbnVsbDtcblxuICAgICAgICAvLyBvYmpldCBMVVNcbiAgICAgICAgdmFyIG9MVVMgPSBuZXcgTG9jYXRpb25VdGlsaXR5U2VydmljZSh7XG4gICAgICAgICAgICBwb3NpdGlvbiA6IHNldHRpbmdzLnBvc2l0aW9uLFxuICAgICAgICAgICAgcmV0dXJuRnJlZUZvcm0gOiBzZXR0aW5ncy5yZXR1cm5GcmVlRm9ybSxcbiAgICAgICAgICAgIGZpbHRlck9wdGlvbnMgOiBzZXR0aW5ncy5maWx0ZXJPcHRpb25zXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZvcm1hdCBYTFNcbiAgICAgICAgdmFyIG9YTFMgPSBuZXcgWExTKHtcbiAgICAgICAgICAgIHNyc05hbWUgOiBzZXR0aW5ncy5zcnMsXG4gICAgICAgICAgICBtYXhpbXVtUmVzcG9uc2VzIDogc2V0dGluZ3MubWF4aW11bVJlc3BvbnNlc1xuICAgICAgICB9KTtcbiAgICAgICAgb1hMUy5uYW1lc3BhY2UgPSB0cnVlO1xuICAgICAgICBvWExTLnNldFNlcnZpY2Uob0xVUyk7XG5cbiAgICAgICAgLy8gcmVxdWVzdCBicnV0ZSAhXG4gICAgICAgIHJlcXVlc3QgPSBvWExTLmJ1aWxkKCk7XG5cbiAgICAgICAgLy8gZW4gbW9kZSBHRVQsIGxhIHJlcXXDqnRlIGVzdCBlbmNvZMOpZVxuICAgICAgICAvLyBldCBsZSBwYXJhbS4gJ3F4bWwnIGVzdCBham91dMOpXG4gICAgICAgIGlmIChzZXR0aW5ncy5odHRwTWV0aG9kID09PSBcIkdFVFwiKSB7XG4gICAgICAgICAgICB2YXIgbXlSZXF1ZXN0ID0gXCJxeG1sPVwiICtcbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQocmVxdWVzdClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgXCIlMkRcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL18vZywgXCIlNUZcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLi9nLCBcIiUyRVwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvIS9nLCBcIiUyMVwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvfi9nLCBcIiU3RVwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwqL2csIFwiJTJBXCIpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiJTI3XCIpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCgvZywgXCIlMjhcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKS9nLCBcIiUyOVwiKTtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBteVJlcXVlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZXIudHJhY2UocmVxdWVzdCk7XG5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmV2ZXJzZUdlb2NvZGVSZXF1ZXN0RmFjdG9yeTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Request/ReverseGeocodeRequestFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/Administratif.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/Administratif.js ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GeocodeLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/GeocodeLocation.js\");\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un filtre de géocodage de type Administratif.\n * @constructor\n * @alias Gp.Services.Geocode.Request.Administratif\n * @private\n */\nfunction Administratif () {\n    if (!(this instanceof Administratif)) {\n        throw new TypeError(\"Administratif constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     * @type {String}\n     */\n    this.CLASSNAME = \"Administratif\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodedLocation de type Administratif\n     * - **bbox** : Emprise de l'unité administrative dans le système de coordonnées demandé *{left, right, top, bottom}*\n     * - **prefecture** - Nom de la préfécture de la région ou du département *{String}*\n     * - **inseeRegion** - Numéro INSEE de la région *{String}*\n     * - **inseeDepartment** - Numéro INSEE du département *{String}*\n     * - **municipality** - Nom de l'unité administrative *{String}*\n     *\n     */\n\n    this.attributesList = [\"bbox\", \"prefecture\", \"inseeRegion\", \"inseeDepartment\", \"municipality\"];\n\n    this.serviceAttributes = [\"bbox\", \"Prefecture\", \"InseeRegion\", \"InseeDepartement\", \"Municipality\"];\n}\n\n/**\n * @lends module:Administratif#\n */\nAdministratif.prototype = Object.create(_GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype);\n\n/**\n * Constructeur (alias)\n */\nAdministratif.prototype.constructor = Administratif;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Administratif);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L21vZGVsL0FkbWluaXN0cmF0aWYuanM/YjA5YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDaUQ7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSSx3REFBZTs7QUFFbkI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrRkFBK0YseUJBQXlCO0FBQ3hILGdGQUFnRixPQUFPO0FBQ3ZGLHVEQUF1RCxPQUFPO0FBQzlELDZEQUE2RCxPQUFPO0FBQ3BFLDREQUE0RCxPQUFPO0FBQ25FO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msd0RBQWU7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBOztBQUVlLDRFQUFhLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0dlb2NvZGUvUmVxdWVzdC9tb2RlbC9BZG1pbmlzdHJhdGlmLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgR2VvY29kZUxvY2F0aW9uIGZyb20gXCIuLi9HZW9jb2RlTG9jYXRpb25cIjtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBGb3JtYXQgZGVzIGF0dHJpYnV0cyBkJ3VuIGZpbHRyZSBkZSBnw6lvY29kYWdlIGRlIHR5cGUgQWRtaW5pc3RyYXRpZi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkdlb2NvZGUuUmVxdWVzdC5BZG1pbmlzdHJhdGlmXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBBZG1pbmlzdHJhdGlmICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQWRtaW5pc3RyYXRpZikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFkbWluaXN0cmF0aWYgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICAvLyBJTkZPXG4gICAgLy8gYXBwZWwgZHUgY29uc3RydWN0ZXVyIGRlIGxhIGNsYXNzZSBtw6hyZVxuICAgIC8vIGF2ZWMgcGFzc2FnZSBkZSBwYXJhbS5cbiAgICBHZW9jb2RlTG9jYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8qKlxuICAgICAqIE5vbSBkZSBsYSBjbGFzc2UgKGhlcml0YWdlKVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5DTEFTU05BTUUgPSBcIkFkbWluaXN0cmF0aWZcIjtcblxuICAgIC8qKlxuICAgICAqIExpc3RlIGRlcyBhdHRyaWJ1dHMgcG9zc2libGVzIHBvdXIgdW5lIEdlb2NvZGVkTG9jYXRpb24gZGUgdHlwZSBBZG1pbmlzdHJhdGlmXG4gICAgICogLSAqKmJib3gqKiA6IEVtcHJpc2UgZGUgbCd1bml0w6kgYWRtaW5pc3RyYXRpdmUgZGFucyBsZSBzeXN0w6htZSBkZSBjb29yZG9ubsOpZXMgZGVtYW5kw6kgKntsZWZ0LCByaWdodCwgdG9wLCBib3R0b219KlxuICAgICAqIC0gKipwcmVmZWN0dXJlKiogLSBOb20gZGUgbGEgcHLDqWbDqWN0dXJlIGRlIGxhIHLDqWdpb24gb3UgZHUgZMOpcGFydGVtZW50ICp7U3RyaW5nfSpcbiAgICAgKiAtICoqaW5zZWVSZWdpb24qKiAtIE51bcOpcm8gSU5TRUUgZGUgbGEgcsOpZ2lvbiAqe1N0cmluZ30qXG4gICAgICogLSAqKmluc2VlRGVwYXJ0bWVudCoqIC0gTnVtw6lybyBJTlNFRSBkdSBkw6lwYXJ0ZW1lbnQgKntTdHJpbmd9KlxuICAgICAqIC0gKiptdW5pY2lwYWxpdHkqKiAtIE5vbSBkZSBsJ3VuaXTDqSBhZG1pbmlzdHJhdGl2ZSAqe1N0cmluZ30qXG4gICAgICpcbiAgICAgKi9cblxuICAgIHRoaXMuYXR0cmlidXRlc0xpc3QgPSBbXCJiYm94XCIsIFwicHJlZmVjdHVyZVwiLCBcImluc2VlUmVnaW9uXCIsIFwiaW5zZWVEZXBhcnRtZW50XCIsIFwibXVuaWNpcGFsaXR5XCJdO1xuXG4gICAgdGhpcy5zZXJ2aWNlQXR0cmlidXRlcyA9IFtcImJib3hcIiwgXCJQcmVmZWN0dXJlXCIsIFwiSW5zZWVSZWdpb25cIiwgXCJJbnNlZURlcGFydGVtZW50XCIsIFwiTXVuaWNpcGFsaXR5XCJdO1xufVxuXG4vKipcbiAqIEBsZW5kcyBtb2R1bGU6QWRtaW5pc3RyYXRpZiNcbiAqL1xuQWRtaW5pc3RyYXRpZi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb2NvZGVMb2NhdGlvbi5wcm90b3R5cGUpO1xuXG4vKipcbiAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gKi9cbkFkbWluaXN0cmF0aWYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWRtaW5pc3RyYXRpZjtcblxuZXhwb3J0IGRlZmF1bHQgQWRtaW5pc3RyYXRpZjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/Administratif.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/CadastralParcel.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/CadastralParcel.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GeocodeLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/GeocodeLocation.js\");\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un filtre de géocodage de type CadastralParcel.\n *\n * @constructor\n * @alias Gp.Services.Geocode.Request.CadastralParcel\n * @private\n */\nfunction CadastralParcel () {\n    if (!(this instanceof CadastralParcel)) {\n        throw new TypeError(\"CadastralParcel constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"CadastralParcel\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodeLocation de type CadastralParcel\n     * - **absorbedCity** : Code commune absorbée de la parcelle :\n     *      lorsqu'une parcelle est issue p d'une ancienne commune qui a fusionné avec une autre.\n     *      Sinon, le code vaut '000'. *{String}*\n     * - **sheet** : Feuille de la parcelle (ex 1). *{String}*\n     * - **number** : Numéro de la parcelle (ex. 0041) *{String}*\n     * - **section** : Section de la parcelle (ex 0D). *{String}*\n     * - **commune** : Ville du filtre. *{String}*\n     * - **department** : Département du filtre. *{String}*\n     * - **insee** : Code INSEE du filtre. *{Number}*\n     * - **municipality** : Municipalité du filtre. *{String}*\n     * - **origin** : L'origine de l'objet parcellaire renvoyé\n     *      (correspond à l'attribut \"type\" dans la réponse XML)\n     *      Pour plus d'informations : http://api.ign.fr/tech-docs-js/fr/developpeur/search.html#Recherche_par_parcelles_cadastrales *{Number}*\n     *\n     */\n\n    this.attributesList = [\"absorbedCity\", \"sheet\", \"number\", \"section\", \"commune\", \"department\", \"insee\", \"municipality\", \"origin\"];\n\n    this.serviceAttributes = [\"CommuneAbsorbee\", \"Feuille\", \"Numero\", \"Section\", \"Commune\", \"Departement\", \"INSEE\", \"Municipality\", \"Type\"];\n}\n\n/**\n * @lends module:CadastralParcel#\n */\nCadastralParcel.prototype = Object.create(_GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype);\n\n/**\n * Constructeur (alias)\n */\nCadastralParcel.prototype.constructor = CadastralParcel;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CadastralParcel);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L21vZGVsL0NhZGFzdHJhbFBhcmNlbC5qcz9jYjYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUksd0RBQWU7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE9BQU87QUFDaEQsc0RBQXNELE9BQU87QUFDN0QseURBQXlELE9BQU87QUFDaEUseURBQXlELE9BQU87QUFDaEUsMENBQTBDLE9BQU87QUFDakQsbURBQW1ELE9BQU87QUFDMUQsNkNBQTZDLE9BQU87QUFDcEQsc0RBQXNELE9BQU87QUFDN0Q7QUFDQTtBQUNBLHVJQUF1SSxPQUFPO0FBQzlJO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsd0RBQWU7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBOztBQUVlLDhFQUFlLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0dlb2NvZGUvUmVxdWVzdC9tb2RlbC9DYWRhc3RyYWxQYXJjZWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBHZW9jb2RlTG9jYXRpb24gZnJvbSBcIi4uL0dlb2NvZGVMb2NhdGlvblwiO1xuXG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqIEZvcm1hdCBkZXMgYXR0cmlidXRzIGQndW4gZmlsdHJlIGRlIGfDqW9jb2RhZ2UgZGUgdHlwZSBDYWRhc3RyYWxQYXJjZWwuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZS5SZXF1ZXN0LkNhZGFzdHJhbFBhcmNlbFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gQ2FkYXN0cmFsUGFyY2VsICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ2FkYXN0cmFsUGFyY2VsKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2FkYXN0cmFsUGFyY2VsIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgLy8gSU5GT1xuICAgIC8vIGFwcGVsIGR1IGNvbnN0cnVjdGV1ciBkZSBsYSBjbGFzc2UgbcOocmVcbiAgICAvLyBhdmVjIHBhc3NhZ2UgZGUgcGFyYW0uXG4gICAgR2VvY29kZUxvY2F0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvKipcbiAgICAgKiBOb20gZGUgbGEgY2xhc3NlIChoZXJpdGFnZSlcbiAgICAgKi9cbiAgICB0aGlzLkNMQVNTTkFNRSA9IFwiQ2FkYXN0cmFsUGFyY2VsXCI7XG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZSBkZXMgYXR0cmlidXRzIHBvc3NpYmxlcyBwb3VyIHVuZSBHZW9jb2RlTG9jYXRpb24gZGUgdHlwZSBDYWRhc3RyYWxQYXJjZWxcbiAgICAgKiAtICoqYWJzb3JiZWRDaXR5KiogOiBDb2RlIGNvbW11bmUgYWJzb3Jiw6llIGRlIGxhIHBhcmNlbGxlIDpcbiAgICAgKiAgICAgIGxvcnNxdSd1bmUgcGFyY2VsbGUgZXN0IGlzc3VlIHAgZCd1bmUgYW5jaWVubmUgY29tbXVuZSBxdWkgYSBmdXNpb25uw6kgYXZlYyB1bmUgYXV0cmUuXG4gICAgICogICAgICBTaW5vbiwgbGUgY29kZSB2YXV0ICcwMDAnLiAqe1N0cmluZ30qXG4gICAgICogLSAqKnNoZWV0KiogOiBGZXVpbGxlIGRlIGxhIHBhcmNlbGxlIChleCAxKS4gKntTdHJpbmd9KlxuICAgICAqIC0gKipudW1iZXIqKiA6IE51bcOpcm8gZGUgbGEgcGFyY2VsbGUgKGV4LiAwMDQxKSAqe1N0cmluZ30qXG4gICAgICogLSAqKnNlY3Rpb24qKiA6IFNlY3Rpb24gZGUgbGEgcGFyY2VsbGUgKGV4IDBEKS4gKntTdHJpbmd9KlxuICAgICAqIC0gKipjb21tdW5lKiogOiBWaWxsZSBkdSBmaWx0cmUuICp7U3RyaW5nfSpcbiAgICAgKiAtICoqZGVwYXJ0bWVudCoqIDogRMOpcGFydGVtZW50IGR1IGZpbHRyZS4gKntTdHJpbmd9KlxuICAgICAqIC0gKippbnNlZSoqIDogQ29kZSBJTlNFRSBkdSBmaWx0cmUuICp7TnVtYmVyfSpcbiAgICAgKiAtICoqbXVuaWNpcGFsaXR5KiogOiBNdW5pY2lwYWxpdMOpIGR1IGZpbHRyZS4gKntTdHJpbmd9KlxuICAgICAqIC0gKipvcmlnaW4qKiA6IEwnb3JpZ2luZSBkZSBsJ29iamV0IHBhcmNlbGxhaXJlIHJlbnZvecOpXG4gICAgICogICAgICAoY29ycmVzcG9uZCDDoCBsJ2F0dHJpYnV0IFwidHlwZVwiIGRhbnMgbGEgcsOpcG9uc2UgWE1MKVxuICAgICAqICAgICAgUG91ciBwbHVzIGQnaW5mb3JtYXRpb25zIDogaHR0cDovL2FwaS5pZ24uZnIvdGVjaC1kb2NzLWpzL2ZyL2RldmVsb3BwZXVyL3NlYXJjaC5odG1sI1JlY2hlcmNoZV9wYXJfcGFyY2VsbGVzX2NhZGFzdHJhbGVzICp7TnVtYmVyfSpcbiAgICAgKlxuICAgICAqL1xuXG4gICAgdGhpcy5hdHRyaWJ1dGVzTGlzdCA9IFtcImFic29yYmVkQ2l0eVwiLCBcInNoZWV0XCIsIFwibnVtYmVyXCIsIFwic2VjdGlvblwiLCBcImNvbW11bmVcIiwgXCJkZXBhcnRtZW50XCIsIFwiaW5zZWVcIiwgXCJtdW5pY2lwYWxpdHlcIiwgXCJvcmlnaW5cIl07XG5cbiAgICB0aGlzLnNlcnZpY2VBdHRyaWJ1dGVzID0gW1wiQ29tbXVuZUFic29yYmVlXCIsIFwiRmV1aWxsZVwiLCBcIk51bWVyb1wiLCBcIlNlY3Rpb25cIiwgXCJDb21tdW5lXCIsIFwiRGVwYXJ0ZW1lbnRcIiwgXCJJTlNFRVwiLCBcIk11bmljaXBhbGl0eVwiLCBcIlR5cGVcIl07XG59XG5cbi8qKlxuICogQGxlbmRzIG1vZHVsZTpDYWRhc3RyYWxQYXJjZWwjXG4gKi9cbkNhZGFzdHJhbFBhcmNlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb2NvZGVMb2NhdGlvbi5wcm90b3R5cGUpO1xuXG4vKipcbiAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gKi9cbkNhZGFzdHJhbFBhcmNlbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYWRhc3RyYWxQYXJjZWw7XG5cbmV4cG9ydCBkZWZhdWx0IENhZGFzdHJhbFBhcmNlbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/CadastralParcel.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/PositionOfInterest.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/PositionOfInterest.js ***!
  \****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GeocodeLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/GeocodeLocation.js\");\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un résultat de géocodage de type PositionOfInterest\n *\n * @constructor\n * @alias Gp.Services.Geocode.Request.PositionOfInterest\n * @private\n */\nfunction PositionOfInterest () {\n    if (!(this instanceof PositionOfInterest)) {\n        throw new TypeError(\"PositionOfInterest constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     * @type {String}\n     */\n    this.CLASSNAME = \"PositionOfInterest\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodeLocation de type PositionOfInterest\n     * - **bbox** : Emprise du toponyme dans le système de coordonnées demandé {left, right, top, bottom} *{Object}*\n     * - **importance** : Importance du toponyme *{number}*\n     * - **nature** : Nature du toponyme. *{String}*\n     * - **territory** : Code du territoire français où se situe le toponyme *{String}*\n     * - **commune** : Ville du toponyme. *{String}*\n     * - **department** : Département du toponyme. *{String}*\n     * - **insee** : Code INSEE de la commune où se situe le toponyme. *{Number}*\n     * - **municipality** : Municipalité du toponyme. *{String}*\n     */\n\n    this.attributesList = [\"bbox\", \"importance\", \"nature\", \"territory\", \"commune\", \"department\", \"insee\", \"municipality\"];\n\n    this.serviceAttributes = [\"bbox\", \"Importance\", \"Nature\", \"Territoire\", \"Commune\", \"Departement\", \"INSEE\", \"Municipality\"];\n}\n\n/**\n * @lends module:PositionOfInterest#\n */\nPositionOfInterest.prototype = Object.create(_GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype);\n\n/**\n * Constructeur (alias)\n */\nPositionOfInterest.prototype.constructor = PositionOfInterest;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PositionOfInterest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L21vZGVsL1Bvc2l0aW9uT2ZJbnRlcmVzdC5qcz80MzVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUksd0RBQWU7O0FBRW5CO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0ZBQWdGLHlCQUF5QixHQUFHLE9BQU87QUFDbkgsbURBQW1ELE9BQU87QUFDMUQsNENBQTRDLE9BQU87QUFDbkQsK0VBQStFLE9BQU87QUFDdEYsNENBQTRDLE9BQU87QUFDbkQscURBQXFELE9BQU87QUFDNUQseUVBQXlFLE9BQU87QUFDaEYsd0RBQXdELE9BQU87QUFDL0Q7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsd0RBQWU7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBOztBQUVlLGlGQUFrQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9HZW9jb2RlL1JlcXVlc3QvbW9kZWwvUG9zaXRpb25PZkludGVyZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgR2VvY29kZUxvY2F0aW9uIGZyb20gXCIuLi9HZW9jb2RlTG9jYXRpb25cIjtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBGb3JtYXQgZGVzIGF0dHJpYnV0cyBkJ3VuIHLDqXN1bHRhdCBkZSBnw6lvY29kYWdlIGRlIHR5cGUgUG9zaXRpb25PZkludGVyZXN0XG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZS5SZXF1ZXN0LlBvc2l0aW9uT2ZJbnRlcmVzdFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gUG9zaXRpb25PZkludGVyZXN0ICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUG9zaXRpb25PZkludGVyZXN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUG9zaXRpb25PZkludGVyZXN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgLy8gSU5GT1xuICAgIC8vIGFwcGVsIGR1IGNvbnN0cnVjdGV1ciBkZSBsYSBjbGFzc2UgbcOocmVcbiAgICAvLyBhdmVjIHBhc3NhZ2UgZGUgcGFyYW0uXG4gICAgR2VvY29kZUxvY2F0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvKipcbiAgICAgKiBOb20gZGUgbGEgY2xhc3NlIChoZXJpdGFnZSlcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuQ0xBU1NOQU1FID0gXCJQb3NpdGlvbk9mSW50ZXJlc3RcIjtcblxuICAgIC8qKlxuICAgICAqIExpc3RlIGRlcyBhdHRyaWJ1dHMgcG9zc2libGVzIHBvdXIgdW5lIEdlb2NvZGVMb2NhdGlvbiBkZSB0eXBlIFBvc2l0aW9uT2ZJbnRlcmVzdFxuICAgICAqIC0gKipiYm94KiogOiBFbXByaXNlIGR1IHRvcG9ueW1lIGRhbnMgbGUgc3lzdMOobWUgZGUgY29vcmRvbm7DqWVzIGRlbWFuZMOpIHtsZWZ0LCByaWdodCwgdG9wLCBib3R0b219ICp7T2JqZWN0fSpcbiAgICAgKiAtICoqaW1wb3J0YW5jZSoqIDogSW1wb3J0YW5jZSBkdSB0b3BvbnltZSAqe251bWJlcn0qXG4gICAgICogLSAqKm5hdHVyZSoqIDogTmF0dXJlIGR1IHRvcG9ueW1lLiAqe1N0cmluZ30qXG4gICAgICogLSAqKnRlcnJpdG9yeSoqIDogQ29kZSBkdSB0ZXJyaXRvaXJlIGZyYW7Dp2FpcyBvw7kgc2Ugc2l0dWUgbGUgdG9wb255bWUgKntTdHJpbmd9KlxuICAgICAqIC0gKipjb21tdW5lKiogOiBWaWxsZSBkdSB0b3BvbnltZS4gKntTdHJpbmd9KlxuICAgICAqIC0gKipkZXBhcnRtZW50KiogOiBEw6lwYXJ0ZW1lbnQgZHUgdG9wb255bWUuICp7U3RyaW5nfSpcbiAgICAgKiAtICoqaW5zZWUqKiA6IENvZGUgSU5TRUUgZGUgbGEgY29tbXVuZSBvw7kgc2Ugc2l0dWUgbGUgdG9wb255bWUuICp7TnVtYmVyfSpcbiAgICAgKiAtICoqbXVuaWNpcGFsaXR5KiogOiBNdW5pY2lwYWxpdMOpIGR1IHRvcG9ueW1lLiAqe1N0cmluZ30qXG4gICAgICovXG5cbiAgICB0aGlzLmF0dHJpYnV0ZXNMaXN0ID0gW1wiYmJveFwiLCBcImltcG9ydGFuY2VcIiwgXCJuYXR1cmVcIiwgXCJ0ZXJyaXRvcnlcIiwgXCJjb21tdW5lXCIsIFwiZGVwYXJ0bWVudFwiLCBcImluc2VlXCIsIFwibXVuaWNpcGFsaXR5XCJdO1xuXG4gICAgdGhpcy5zZXJ2aWNlQXR0cmlidXRlcyA9IFtcImJib3hcIiwgXCJJbXBvcnRhbmNlXCIsIFwiTmF0dXJlXCIsIFwiVGVycml0b2lyZVwiLCBcIkNvbW11bmVcIiwgXCJEZXBhcnRlbWVudFwiLCBcIklOU0VFXCIsIFwiTXVuaWNpcGFsaXR5XCJdO1xufVxuXG4vKipcbiAqIEBsZW5kcyBtb2R1bGU6UG9zaXRpb25PZkludGVyZXN0I1xuICovXG5Qb3NpdGlvbk9mSW50ZXJlc3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHZW9jb2RlTG9jYXRpb24ucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RldXIgKGFsaWFzKVxuICovXG5Qb3NpdGlvbk9mSW50ZXJlc3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9zaXRpb25PZkludGVyZXN0O1xuXG5leHBvcnQgZGVmYXVsdCBQb3NpdGlvbk9mSW50ZXJlc3Q7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/PositionOfInterest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/StreetAddress.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/StreetAddress.js ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GeocodeLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/GeocodeLocation.js\");\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un résultat de géocodage de type StreetAddress.\n *\n * @constructor\n * @alias Gp.Services.Geocode.Request.StreetAddress\n * @private\n */\nfunction StreetAddress () {\n    if (!(this instanceof StreetAddress)) {\n        throw new TypeError(\"StreetAddress constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    _GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     * @type {String}\n     */\n    this.CLASSNAME = \"StreetAddress\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodeLocation de type StreetAddress\n     * - **bbox** : Emprise de l'adresse dans le système de coordonnées demandé {left, right, top, bottom}. *{Object}*\n     * - **ID** : Identifiant BD ADRESSE dans le cas où le résultat est une adresse. *{String}*\n     * - **IDTR** : Identifiant \"Route Adresse\" de la voie portant l'adresse dans la base BD ADRESSE. *{String}*\n     * - **quality** : Indicateur de qualité du géocodage (pour plus d'infos : http://api.ign.fr/tech-docs-js/fr/developpeur/search.html *{String}*\n     * - **territory** : Code du territoire français où se situe l'adresse *{String}*\n     * - **commune** : Ville l'adresse. *{String}*\n     * - **department** : Département l'adresse. *{String}*\n     * - **insee** : Code INSEE de l'adresse. *{Number}*\n     * - **municipality** : Municipalité de l'adresse. *{String}*\n     */\n\n    this.attributesList = [\"bbox\", \"ID\", \"IDTR\", \"quality\", \"territory\", \"commune\", \"department\", \"insee\", \"municipality\"];\n\n    this.serviceAttributes = [\"bbox\", \"ID\", \"IDTR\", \"Qualite\", \"Territoire\", \"Commune\", \"Departement\", \"INSEE\", \"Municipality\"];\n}\n\n/**\n * @lends module:StreetAdress#\n */\nStreetAddress.prototype = Object.create(_GeocodeLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype);\n\n/**\n * Constructeur (alias)\n */\nStreetAddress.prototype.constructor = StreetAddress;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (StreetAddress);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXF1ZXN0L21vZGVsL1N0cmVldEFkZHJlc3MuanM/YjkxNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDaUQ7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHdEQUFlOztBQUVuQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlGQUFpRix5QkFBeUIsSUFBSSxPQUFPO0FBQ3JILHVGQUF1RixPQUFPO0FBQzlGLHdHQUF3RyxPQUFPO0FBQy9HLDJJQUEySSxPQUFPO0FBQ2xKLDZFQUE2RSxPQUFPO0FBQ3BGLDBDQUEwQyxPQUFPO0FBQ2pELG1EQUFtRCxPQUFPO0FBQzFELGdEQUFnRCxPQUFPO0FBQ3ZELHlEQUF5RCxPQUFPO0FBQ2hFOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHdEQUFlOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTs7QUFFZSw0RUFBYSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9HZW9jb2RlL1JlcXVlc3QvbW9kZWwvU3RyZWV0QWRkcmVzcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IEdlb2NvZGVMb2NhdGlvbiBmcm9tIFwiLi4vR2VvY29kZUxvY2F0aW9uXCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogRm9ybWF0IGRlcyBhdHRyaWJ1dHMgZCd1biByw6lzdWx0YXQgZGUgZ8Opb2NvZGFnZSBkZSB0eXBlIFN0cmVldEFkZHJlc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZS5SZXF1ZXN0LlN0cmVldEFkZHJlc3NcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFN0cmVldEFkZHJlc3MgKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlZXRBZGRyZXNzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3RyZWV0QWRkcmVzcyBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8vIElORk9cbiAgICAvLyBhcHBlbCBkdSBjb25zdHJ1Y3RldXIgZGUgbGEgY2xhc3NlIG3DqHJlXG4gICAgLy8gYXZlYyBwYXNzYWdlIGRlIHBhcmFtLlxuICAgIEdlb2NvZGVMb2NhdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLyoqXG4gICAgICogTm9tIGRlIGxhIGNsYXNzZSAoaGVyaXRhZ2UpXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLkNMQVNTTkFNRSA9IFwiU3RyZWV0QWRkcmVzc1wiO1xuXG4gICAgLyoqXG4gICAgICogTGlzdGUgZGVzIGF0dHJpYnV0cyBwb3NzaWJsZXMgcG91ciB1bmUgR2VvY29kZUxvY2F0aW9uIGRlIHR5cGUgU3RyZWV0QWRkcmVzc1xuICAgICAqIC0gKipiYm94KiogOiBFbXByaXNlIGRlIGwnYWRyZXNzZSBkYW5zIGxlIHN5c3TDqG1lIGRlIGNvb3Jkb25uw6llcyBkZW1hbmTDqSB7bGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tfS4gKntPYmplY3R9KlxuICAgICAqIC0gKipJRCoqIDogSWRlbnRpZmlhbnQgQkQgQURSRVNTRSBkYW5zIGxlIGNhcyBvw7kgbGUgcsOpc3VsdGF0IGVzdCB1bmUgYWRyZXNzZS4gKntTdHJpbmd9KlxuICAgICAqIC0gKipJRFRSKiogOiBJZGVudGlmaWFudCBcIlJvdXRlIEFkcmVzc2VcIiBkZSBsYSB2b2llIHBvcnRhbnQgbCdhZHJlc3NlIGRhbnMgbGEgYmFzZSBCRCBBRFJFU1NFLiAqe1N0cmluZ30qXG4gICAgICogLSAqKnF1YWxpdHkqKiA6IEluZGljYXRldXIgZGUgcXVhbGl0w6kgZHUgZ8Opb2NvZGFnZSAocG91ciBwbHVzIGQnaW5mb3MgOiBodHRwOi8vYXBpLmlnbi5mci90ZWNoLWRvY3MtanMvZnIvZGV2ZWxvcHBldXIvc2VhcmNoLmh0bWwgKntTdHJpbmd9KlxuICAgICAqIC0gKip0ZXJyaXRvcnkqKiA6IENvZGUgZHUgdGVycml0b2lyZSBmcmFuw6dhaXMgb8O5IHNlIHNpdHVlIGwnYWRyZXNzZSAqe1N0cmluZ30qXG4gICAgICogLSAqKmNvbW11bmUqKiA6IFZpbGxlIGwnYWRyZXNzZS4gKntTdHJpbmd9KlxuICAgICAqIC0gKipkZXBhcnRtZW50KiogOiBEw6lwYXJ0ZW1lbnQgbCdhZHJlc3NlLiAqe1N0cmluZ30qXG4gICAgICogLSAqKmluc2VlKiogOiBDb2RlIElOU0VFIGRlIGwnYWRyZXNzZS4gKntOdW1iZXJ9KlxuICAgICAqIC0gKiptdW5pY2lwYWxpdHkqKiA6IE11bmljaXBhbGl0w6kgZGUgbCdhZHJlc3NlLiAqe1N0cmluZ30qXG4gICAgICovXG5cbiAgICB0aGlzLmF0dHJpYnV0ZXNMaXN0ID0gW1wiYmJveFwiLCBcIklEXCIsIFwiSURUUlwiLCBcInF1YWxpdHlcIiwgXCJ0ZXJyaXRvcnlcIiwgXCJjb21tdW5lXCIsIFwiZGVwYXJ0bWVudFwiLCBcImluc2VlXCIsIFwibXVuaWNpcGFsaXR5XCJdO1xuXG4gICAgdGhpcy5zZXJ2aWNlQXR0cmlidXRlcyA9IFtcImJib3hcIiwgXCJJRFwiLCBcIklEVFJcIiwgXCJRdWFsaXRlXCIsIFwiVGVycml0b2lyZVwiLCBcIkNvbW11bmVcIiwgXCJEZXBhcnRlbWVudFwiLCBcIklOU0VFXCIsIFwiTXVuaWNpcGFsaXR5XCJdO1xufVxuXG4vKipcbiAqIEBsZW5kcyBtb2R1bGU6U3RyZWV0QWRyZXNzI1xuICovXG5TdHJlZXRBZGRyZXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR2VvY29kZUxvY2F0aW9uLnByb3RvdHlwZSk7XG5cbi8qKlxuICogQ29uc3RydWN0ZXVyIChhbGlhcylcbiAqL1xuU3RyZWV0QWRkcmVzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdHJlZXRBZGRyZXNzO1xuXG5leHBvcnQgZGVmYXVsdCBTdHJlZXRBZGRyZXNzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Request/model/StreetAddress.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Response/DirectGeocodeResponseFactory.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Response/DirectGeocodeResponseFactory.js ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Formats_XML__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Formats/XML */ \"./node_modules/geoportal-access-lib/src/Formats/XML.js\");\n/* harmony import */ var _Formats_DirectGeocodeResponseReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Formats/DirectGeocodeResponseReader */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/DirectGeocodeResponseReader.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML\n * ou d'un JSON encapsulant du XML\n * (Factory)\n *\n * @module GeocodeResponseFactory\n * @alias Gp.Services.Geocode.Response.GeocodeResponseFactory\n * @todo La reponse JSON peut encapsuler un XML !\n * @private\n */\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\nvar DirectGeocodeReponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Geocode\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // data de type GeocodeResponse\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                data = options.response;\n            } else {\n                try {\n                    var p = new _Formats_XML__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        reader : _Formats_DirectGeocodeResponseReader__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n                    });\n\n                    if (typeof options.response === \"string\") {\n                        p.setXMLString(options.response);\n                    } else {\n                        p.setXMLDoc(options.response);\n                    }\n\n                    data = p.parse();\n\n                    if (!data) {\n                        throw new Error(\"L'analyse de la réponse du service !?\");\n                    }\n                } catch (e) {\n                    var message = e.message;\n                    if (typeof options.response === \"string\") {\n                        message += \"('\" + options.response + \"')\";\n                    } else {\n                        message += \"('\" + options.response.documentElement.innerHTML + \"')\";\n                    }\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE\", message),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TYPE_UNKERR,\n                        status : -1\n                    }));\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TYPE_SRVERR,\n                        status : 200 // FIXME : 200 ?\n                    }));\n                    return;\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\"),\n                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TYPE_SRVERR,\n                status : -1 // FIXME : status response\n            }));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DirectGeocodeReponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9EaXJlY3RHZW9jb2RlUmVzcG9uc2VGYWN0b3J5LmpzPzBjYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEQ7QUFDUjtBQUNiO0FBQzBDOztBQUVqRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsZ0NBQWdDLG9EQUFHO0FBQ25DLGlDQUFpQyw0RUFBMkI7QUFDNUQscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsNERBQTRELGdFQUFZO0FBQ3hFLGtDQUFrQyxnRUFBSTtBQUN0QywrQkFBK0IsZ0VBQVk7QUFDM0M7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNERBQTRELGdFQUFZO0FBQ3hFLGtDQUFrQyxnRUFBSTtBQUN0QywrQkFBK0IsZ0VBQVk7QUFDM0M7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULG9EQUFvRCxnRUFBWTtBQUNoRSwwQkFBMEIsZ0VBQUk7QUFDOUIsdUJBQXVCLGdFQUFZO0FBQ25DO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVlLDBGQUEyQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9HZW9jb2RlL1Jlc3BvbnNlL0RpcmVjdEdlb2NvZGVSZXNwb25zZUZhY3RvcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZhY3RvcnkgcG91ciBnw6luw6lyZXIgdW5lIHJlcG9uc2UgSlNPTiDDoCBwYXJ0aXIgZCd1biBYTUxcbiAqIG91IGQndW4gSlNPTiBlbmNhcHN1bGFudCBkdSBYTUxcbiAqIChGYWN0b3J5KVxuICpcbiAqIEBtb2R1bGUgR2VvY29kZVJlc3BvbnNlRmFjdG9yeVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkdlb2NvZGUuUmVzcG9uc2UuR2VvY29kZVJlc3BvbnNlRmFjdG9yeVxuICogQHRvZG8gTGEgcmVwb25zZSBKU09OIHBldXQgZW5jYXBzdWxlciB1biBYTUwgIVxuICogQHByaXZhdGVcbiAqL1xuLy8gaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5pbXBvcnQgRXJyb3JTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9FeGNlcHRpb25zL0Vycm9yU2VydmljZVwiO1xuaW1wb3J0IE1SZXMgZnJvbSBcIi4uLy4uLy4uL1V0aWxzL01lc3NhZ2VzUmVzb3VyY2VzXCI7XG5pbXBvcnQgWE1MIGZyb20gXCIuLi8uLi8uLi9Gb3JtYXRzL1hNTFwiO1xuaW1wb3J0IERpcmVjdEdlb2NvZGVSZXNwb25zZVJlYWRlciBmcm9tIFwiLi4vRm9ybWF0cy9EaXJlY3RHZW9jb2RlUmVzcG9uc2VSZWFkZXJcIjtcblxudmFyIERpcmVjdEdlb2NvZGVSZXBvbnNlRmFjdG9yeSA9IHtcblxuICAgIC8qKlxuICAgICAqIGludGVyZmFjZSB1bmlxdWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGRlZmluaWVzIGRhbnMgbGUgY29tcG9zYW50IEdlb2NvZGVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICAgIHJlc3BvbnNlIDpcbiAgICAgKiAgICAgIHJhd1Jlc3BvbnNlIDpcbiAgICAgKiAgICAgIHNjb3BlIDpcbiAgICAgKiAgICAgIG9uU3VjY2VzcyA6XG4gICAgICogICAgICBvbkVycm9yIDpcbiAgICAgKiAgIH07XG4gICAgICpcbiAgICAgKi9cbiAgICBidWlsZCA6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIC8vIGRhdGEgZGUgdHlwZSBHZW9jb2RlUmVzcG9uc2VcbiAgICAgICAgdmFyIGRhdGEgPSBudWxsO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yYXdSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBvcHRpb25zLnJlc3BvbnNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG5ldyBYTUwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyIDogRGlyZWN0R2VvY29kZVJlc3BvbnNlUmVhZGVyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZXNwb25zZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5zZXRYTUxTdHJpbmcob3B0aW9ucy5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLnNldFhNTERvYyhvcHRpb25zLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBwLnBhcnNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMJ2FuYWx5c2UgZGUgbGEgcsOpcG9uc2UgZHUgc2VydmljZSAhP1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBlLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZXNwb25zZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBcIignXCIgKyBvcHRpb25zLnJlc3BvbnNlICsgXCInKVwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBcIignXCIgKyBvcHRpb25zLnJlc3BvbnNlLmRvY3VtZW50RWxlbWVudC5pbm5lckhUTUwgKyBcIicpXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlIDogTVJlcy5nZXRNZXNzYWdlKFwiU0VSVklDRV9SRVNQT05TRV9BTkFMWVNFXCIsIG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA6IEVycm9yU2VydmljZS5UWVBFX1VOS0VSUixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA6IC0xXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNpIGxhIHLDqXBvbnNlIGNvbnRlbmFpdCB1bmUgZXhjZXB0aW9uIHJlbnZvecOpZSBwYXIgbGUgc2VydmljZVxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmV4Y2VwdGlvblJlcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgOiBNUmVzLmdldE1lc3NhZ2UoXCJTRVJWSUNFX1JFU1BPTlNFX0VYQ0VQVElPTlwiLCBkYXRhLmV4Y2VwdGlvblJlcG9ydCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogRXJyb3JTZXJ2aWNlLlRZUEVfU1JWRVJSLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzIDogMjAwIC8vIEZJWE1FIDogMjAwID9cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA6IE1SZXMuZ2V0TWVzc2FnZShcIlNFUlZJQ0VfUkVTUE9OU0VfRU1QVFlcIiksXG4gICAgICAgICAgICAgICAgdHlwZSA6IEVycm9yU2VydmljZS5UWVBFX1NSVkVSUixcbiAgICAgICAgICAgICAgICBzdGF0dXMgOiAtMSAvLyBGSVhNRSA6IHN0YXR1cyByZXNwb25zZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5vblN1Y2Nlc3MuY2FsbChvcHRpb25zLnNjb3BlLCBkYXRhKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEaXJlY3RHZW9jb2RlUmVwb25zZUZhY3Rvcnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Response/DirectGeocodeResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Response/ReverseGeocodeResponseFactory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Response/ReverseGeocodeResponseFactory.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Formats_XML__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Formats/XML */ \"./node_modules/geoportal-access-lib/src/Formats/XML.js\");\n/* harmony import */ var _Formats_ReverseGeocodeResponseReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Formats/ReverseGeocodeResponseReader */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Formats/ReverseGeocodeResponseReader.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML\n * ou d'un JSON encapsulant du XML\n * (Factory)\n *\n * @module ReverseGeocodeResponseFactory\n * @alias Gp.Services.ReverseGeocode.Response.ReverseGeocodeResponseFactory\n * @todo La reponse JSON peut encapsuler un XML !\n * @private\n */\n\n\n\n\n\n\nvar ReverseGeocodeReponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant ReverseGeocode\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // data de type ReverseGeocodeResponse\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                data = options.response;\n            } else {\n                try {\n                    var p = new _Formats_XML__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        reader : _Formats_ReverseGeocodeResponseReader__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n                    });\n\n                    if (typeof options.response === \"string\") {\n                        p.setXMLString(options.response);\n                    } else {\n                        p.setXMLDoc(options.response);\n                    }\n\n                    data = p.parse();\n\n                    if (!data) {\n                        throw new Error(\"L'analyse de la réponse du service !?\");\n                    }\n                } catch (e) {\n                    // on relaye l'erreur reçue\n                    e.status = 200;\n                    options.onError.call(options.scope, e);\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                // TODO : quand cela arrive-t-il ?\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n\n                // dans le cas d'un srs non EPSG géographique, il faut réinverser les coordonnées (lat,lon => lon,lat)\n                if (options.scope && options.scope.options && options.scope.options.srs && options.scope.options.srs !== \"EPSG:4326\") {\n                    var location;\n                    var pos;\n                    if (data || data.locations || data.locations.length) {\n                        for (var i = 0; i < data.locations.length; i++) {\n                            location = data.locations[i];\n                            if (location) {\n                                pos = location.position;\n                                if (pos) {\n                                    // on inverse les 2 coordonnées\n                                    location.position = {\n                                        x : pos.y,\n                                        y : pos.x\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\"),\n                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TYPE_SRVERR,\n                status : -1 // FIXME : status response\n            }));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReverseGeocodeReponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9SZXZlcnNlR2VvY29kZVJlc3BvbnNlRmFjdG9yeS5qcz9lNDJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFb0Q7QUFDUTtBQUNyQjtBQUM0Qzs7QUFFbkY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGdDQUFnQyxvREFBRztBQUNuQyxpQ0FBaUMsNkVBQTRCO0FBQzdELHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxnRUFBWTtBQUN4RSxrQ0FBa0MsZ0VBQUk7QUFDdEMsK0JBQStCLGdFQUFZO0FBQzNDO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywyQkFBMkI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULG9EQUFvRCxnRUFBWTtBQUNoRSwwQkFBMEIsZ0VBQUk7QUFDOUIsdUJBQXVCLGdFQUFZO0FBQ25DO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVlLDJGQUE0QixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9HZW9jb2RlL1Jlc3BvbnNlL1JldmVyc2VHZW9jb2RlUmVzcG9uc2VGYWN0b3J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGYWN0b3J5IHBvdXIgZ8OpbsOpcmVyIHVuZSByZXBvbnNlIEpTT04gw6AgcGFydGlyIGQndW4gWE1MXG4gKiBvdSBkJ3VuIEpTT04gZW5jYXBzdWxhbnQgZHUgWE1MXG4gKiAoRmFjdG9yeSlcbiAqXG4gKiBAbW9kdWxlIFJldmVyc2VHZW9jb2RlUmVzcG9uc2VGYWN0b3J5XG4gKiBAYWxpYXMgR3AuU2VydmljZXMuUmV2ZXJzZUdlb2NvZGUuUmVzcG9uc2UuUmV2ZXJzZUdlb2NvZGVSZXNwb25zZUZhY3RvcnlcbiAqIEB0b2RvIExhIHJlcG9uc2UgSlNPTiBwZXV0IGVuY2Fwc3VsZXIgdW4gWE1MICFcbiAqIEBwcml2YXRlXG4gKi9cblxuaW1wb3J0IE1SZXMgZnJvbSBcIi4uLy4uLy4uL1V0aWxzL01lc3NhZ2VzUmVzb3VyY2VzXCI7XG5pbXBvcnQgRXJyb3JTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9FeGNlcHRpb25zL0Vycm9yU2VydmljZVwiO1xuaW1wb3J0IFhNTCBmcm9tIFwiLi4vLi4vLi4vRm9ybWF0cy9YTUxcIjtcbmltcG9ydCBSZXZlcnNlR2VvY29kZVJlc3BvbnNlUmVhZGVyIGZyb20gXCIuLi9Gb3JtYXRzL1JldmVyc2VHZW9jb2RlUmVzcG9uc2VSZWFkZXJcIjtcblxudmFyIFJldmVyc2VHZW9jb2RlUmVwb25zZUZhY3RvcnkgPSB7XG5cbiAgICAvKipcbiAgICAgKiBpbnRlcmZhY2UgdW5pcXVlXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGJ1aWxkXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBkZWZpbmllcyBkYW5zIGxlIGNvbXBvc2FudCBSZXZlcnNlR2VvY29kZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIHZhciBvcHRpb25zID0ge1xuICAgICAqICAgICAgcmVzcG9uc2UgOlxuICAgICAqICAgICAgcmF3UmVzcG9uc2UgOlxuICAgICAqICAgICAgc2NvcGUgOlxuICAgICAqICAgICAgb25TdWNjZXNzIDpcbiAgICAgKiAgICAgIG9uRXJyb3IgOlxuICAgICAqICAgfTtcbiAgICAgKlxuICAgICAqL1xuICAgIGJ1aWxkIDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gZGF0YSBkZSB0eXBlIFJldmVyc2VHZW9jb2RlUmVzcG9uc2VcbiAgICAgICAgdmFyIGRhdGEgPSBudWxsO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yYXdSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBvcHRpb25zLnJlc3BvbnNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG5ldyBYTUwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyIDogUmV2ZXJzZUdlb2NvZGVSZXNwb25zZVJlYWRlclxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVzcG9uc2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuc2V0WE1MU3RyaW5nKG9wdGlvbnMucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5zZXRYTUxEb2Mob3B0aW9ucy5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gcC5wYXJzZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTCdhbmFseXNlIGRlIGxhIHLDqXBvbnNlIGR1IHNlcnZpY2UgIT9cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIHJlbGF5ZSBsJ2VycmV1ciByZcOndWVcbiAgICAgICAgICAgICAgICAgICAgZS5zdGF0dXMgPSAyMDA7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25FcnJvci5jYWxsKG9wdGlvbnMuc2NvcGUsIGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2kgbGEgcsOpcG9uc2UgY29udGVuYWl0IHVuZSBleGNlcHRpb24gcmVudm95w6llIHBhciBsZSBzZXJ2aWNlXG4gICAgICAgICAgICAgICAgLy8gVE9ETyA6IHF1YW5kIGNlbGEgYXJyaXZlLXQtaWwgP1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmV4Y2VwdGlvblJlcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgOiBNUmVzLmdldE1lc3NhZ2UoXCJTRVJWSUNFX1JFU1BPTlNFX0VYQ0VQVElPTlwiLCBkYXRhLmV4Y2VwdGlvblJlcG9ydCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogRXJyb3JTZXJ2aWNlLlRZUEVfU1JWRVJSLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzIDogMjAwXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGRhbnMgbGUgY2FzIGQndW4gc3JzIG5vbiBFUFNHIGfDqW9ncmFwaGlxdWUsIGlsIGZhdXQgcsOpaW52ZXJzZXIgbGVzIGNvb3Jkb25uw6llcyAobGF0LGxvbiA9PiBsb24sbGF0KVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNjb3BlICYmIG9wdGlvbnMuc2NvcGUub3B0aW9ucyAmJiBvcHRpb25zLnNjb3BlLm9wdGlvbnMuc3JzICYmIG9wdGlvbnMuc2NvcGUub3B0aW9ucy5zcnMgIT09IFwiRVBTRzo0MzI2XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSB8fCBkYXRhLmxvY2F0aW9ucyB8fCBkYXRhLmxvY2F0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sb2NhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IGRhdGEubG9jYXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBsb2NhdGlvbi5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gaW52ZXJzZSBsZXMgMiBjb29yZG9ubsOpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggOiBwb3MueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5IDogcG9zLnhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlIDogTVJlcy5nZXRNZXNzYWdlKFwiU0VSVklDRV9SRVNQT05TRV9FTVBUWVwiKSxcbiAgICAgICAgICAgICAgICB0eXBlIDogRXJyb3JTZXJ2aWNlLlRZUEVfU1JWRVJSLFxuICAgICAgICAgICAgICAgIHN0YXR1cyA6IC0xIC8vIEZJWE1FIDogc3RhdHVzIHJlc3BvbnNlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLm9uU3VjY2Vzcy5jYWxsKG9wdGlvbnMuc2NvcGUsIGRhdGEpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJldmVyc2VHZW9jb2RlUmVwb25zZUZhY3Rvcnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Response/ReverseGeocodeResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/DirectGeocodedLocation.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/DirectGeocodedLocation.js ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GeocodedLocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeocodedLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodedLocation.js\");\n\n\n\n/**\n * Single location object returned by the underlying geocoding web service.\n *\n * @property {Float} accuracy - Accuracy of the response towards the requested location between 0 (unaccurate) and 1 (exact match).\n *\n * @namespace\n * @extends {Gp.Services.Geocode.GeocodedLocation}\n * @alias Gp.Services.Geocode.DirectGeocodedLocation\n */\nfunction DirectGeocodedLocation () {\n    if (!(this instanceof DirectGeocodedLocation)) {\n        throw new TypeError(\"DirectGeocodedLocation constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    _GeocodedLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage) : \"DirectGeocodedLocation\"\n     * @type {String}\n     */\n    this.CLASSNAME = \"DirectGeocodedLocation\";\n\n    this.accuracy = null;\n}\n\nDirectGeocodedLocation.prototype = Object.create(_GeocodedLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype);\n\nDirectGeocodedLocation.prototype.constructor = DirectGeocodedLocation;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DirectGeocodedLocation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9EaXJlY3RHZW9jb2RlZExvY2F0aW9uLmpzPzNjNTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ2tEOztBQUVsRDtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5REFBZ0I7O0FBRXBCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlEQUFpRCx5REFBZ0I7O0FBRWpFOztBQUVlLHFGQUFzQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9HZW9jb2RlL1Jlc3BvbnNlL21vZGVsL0RpcmVjdEdlb2NvZGVkTG9jYXRpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBHZW9jb2RlZExvY2F0aW9uIGZyb20gXCIuL0dlb2NvZGVkTG9jYXRpb25cIjtcblxuLyoqXG4gKiBTaW5nbGUgbG9jYXRpb24gb2JqZWN0IHJldHVybmVkIGJ5IHRoZSB1bmRlcmx5aW5nIGdlb2NvZGluZyB3ZWIgc2VydmljZS5cbiAqXG4gKiBAcHJvcGVydHkge0Zsb2F0fSBhY2N1cmFjeSAtIEFjY3VyYWN5IG9mIHRoZSByZXNwb25zZSB0b3dhcmRzIHRoZSByZXF1ZXN0ZWQgbG9jYXRpb24gYmV0d2VlbiAwICh1bmFjY3VyYXRlKSBhbmQgMSAoZXhhY3QgbWF0Y2gpLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBleHRlbmRzIHtHcC5TZXJ2aWNlcy5HZW9jb2RlLkdlb2NvZGVkTG9jYXRpb259XG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZS5EaXJlY3RHZW9jb2RlZExvY2F0aW9uXG4gKi9cbmZ1bmN0aW9uIERpcmVjdEdlb2NvZGVkTG9jYXRpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEaXJlY3RHZW9jb2RlZExvY2F0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGlyZWN0R2VvY29kZWRMb2NhdGlvbiBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIC8vIElORk9cbiAgICAvLyBhcHBlbCBkdSBjb25zdHJ1Y3RldXIgZGUgbGEgY2xhc3NlIG3DqHJlXG4gICAgLy8gYXZlYyBwYXNzYWdlIGRlIHBhcmFtLlxuICAgIEdlb2NvZGVkTG9jYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8qKlxuICAgICAqIE5vbSBkZSBsYSBjbGFzc2UgKGhlcml0YWdlKSA6IFwiRGlyZWN0R2VvY29kZWRMb2NhdGlvblwiXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLkNMQVNTTkFNRSA9IFwiRGlyZWN0R2VvY29kZWRMb2NhdGlvblwiO1xuXG4gICAgdGhpcy5hY2N1cmFjeSA9IG51bGw7XG59XG5cbkRpcmVjdEdlb2NvZGVkTG9jYXRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHZW9jb2RlZExvY2F0aW9uLnByb3RvdHlwZSk7XG5cbkRpcmVjdEdlb2NvZGVkTG9jYXRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGlyZWN0R2VvY29kZWRMb2NhdGlvbjtcblxuZXhwb3J0IGRlZmF1bHQgRGlyZWN0R2VvY29kZWRMb2NhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/DirectGeocodedLocation.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodeResponse.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodeResponse.js ***!
  \**************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Response object for {@link module:Services~geocode Gp.Services.geocode ()} or {@link module:Services~reverseGeocode Gp.Services.reverseGeocode ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Array.<Gp.Services.Geocode.DirectGeocodedLocation|Gp.Services.Geocode.ReverseGeocodedLocation>} locations - locations array.\n *\n * @namespace\n * @alias Gp.Services.GeocodeResponse\n */\nfunction GeocodeResponse () {\n    if (!(this instanceof GeocodeResponse)) {\n        throw new TypeError(\"GeocodeResponse constructor cannot be called as a function.\");\n    }\n\n    this.locations = [];\n}\n\nGeocodeResponse.prototype = {\n\n    constructor : GeocodeResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GeocodeResponse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9HZW9jb2RlUmVzcG9uc2UuanM/ZWE0NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBO0FBQ0Esd0JBQXdCLHFEQUFxRCxLQUFLLG1FQUFtRTtBQUNySjtBQUNBLGNBQWMsK0ZBQStGO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFZSw4RUFBZSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9HZW9jb2RlL1Jlc3BvbnNlL21vZGVsL0dlb2NvZGVSZXNwb25zZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBSZXNwb25zZSBvYmplY3QgZm9yIHtAbGluayBtb2R1bGU6U2VydmljZXN+Z2VvY29kZSBHcC5TZXJ2aWNlcy5nZW9jb2RlICgpfSBvciB7QGxpbmsgbW9kdWxlOlNlcnZpY2VzfnJldmVyc2VHZW9jb2RlIEdwLlNlcnZpY2VzLnJldmVyc2VHZW9jb2RlICgpfSBpbnZvY2F0aW9uIHdoZW4gc3VjY2Vzc2Z1bC4gUmVjZWl2ZWQgYXMgdGhlIGFyZ3VtZW50IG9mIG9uU3VjY2VzcyBjYWxsYmFjayBmdW5jdGlvbi5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxHcC5TZXJ2aWNlcy5HZW9jb2RlLkRpcmVjdEdlb2NvZGVkTG9jYXRpb258R3AuU2VydmljZXMuR2VvY29kZS5SZXZlcnNlR2VvY29kZWRMb2NhdGlvbj59IGxvY2F0aW9ucyAtIGxvY2F0aW9ucyBhcnJheS5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuR2VvY29kZVJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIEdlb2NvZGVSZXNwb25zZSAoKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEdlb2NvZGVSZXNwb25zZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlb2NvZGVSZXNwb25zZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMubG9jYXRpb25zID0gW107XG59XG5cbkdlb2NvZGVSZXNwb25zZS5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IEdlb2NvZGVSZXNwb25zZVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBHZW9jb2RlUmVzcG9uc2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodeResponse.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodedLocation.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodedLocation.js ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Location object holding common properties returned by the underlying geocoding and reverse geocoding web service.\n *\n * @property {Gp.Point} position - Position of the location given in the requested coordinates system.\n * @property {String} type - location type \"StreetAddress\" (for an address), \"PositionOfInterest\" (for a place name) or \"CadastralParcel\" (for cadastral parcel).\n * @property {String} matchType - how geocoding is performed : \"street number\" (exact address), \"street enhanced\" (street number calculated by interpolation), \"street\" (only the street), \"city\" (only the city).\n * @property {Object} placeAttributes - Associative array matching the following attributes with their values given by the underlying web service :\n *\n * *Common attributes : *\n *\n * - **freeform** - freeform complete Address.\n * - **bbox** - Bounding Box *{@link Gp.BBox}*.\n * - **municipality** - Municipality\n *\n * *if type === \"StreetAddress\" : *\n *\n * - **number** - Street number.\n * - **ID** - Identifier of the address in the [BD ADRESSE Database]{@link http://professionnels.ign.fr/bdadresse}.\n * - **IDTR** - Identifier of the lineString in the [BD ADRESSE Database]{@link http://professionnels.ign.fr/bdadresse}.\n * - **postalCode** - PostCode\n * - **quality** - Geocoding quality ([see]{@link http://api.ign.fr/tech-docs-js/developpeur/search.html})\n * - **street** - Street name\n * - **territory** - French Territory code\n * - **commune** - City\n * - **department** - Department\n * - **insee** - INSEE Code\n *\n *\n * *if type === \"PositionOfInterest\" :*\n *\n * - **importance** - Place name importance\n * - **nature** - Place name nature\n * - **postalCode** - PostCode\n * - **territory** - French Territory code\n * - **commune** - City\n * - **department** - Department\n * - **insee** - INSEE Code\n *\n *\n * *si type = \"CadastralParcel\" :*\n *\n * - **absorbedCity** - when a parcel comes from a city that was absorbed by another, code of that old city. \"000\" otherwise.\n * - **arrondissement** - arrondissement\n * - **cadastralParcel** - cadastral parcel code\n * - **district** - district\n * - **sheet** - Parcel Sheet (eg. \"1\").\n * - **number** - Parcel Number (eg. \"0041\")\n * - **section** - Parcel Section (eg. \"0D\").\n * - **commune** - Parcel municipality.\n * - **department** - Parcel Department.\n * - **insee** - INSEE Code.\n * - **origin** - Parcel origin (see \"type\" attribute in the [underlying web service response]{@link http://api.ign.fr/tech-docs-js/developpeur/search.html#Cadastral_parcels_search})\n *\n * @namespace\n * @alias Gp.Services.Geocode.GeocodedLocation\n */\nfunction GeocodedLocation () {\n    if (!(this instanceof GeocodedLocation)) {\n        throw new TypeError(\"GeocodedLocation constructor cannot be called as a function.\");\n    }\n\n    this.position = {\n        x : null,\n        y : null\n    };\n\n    this.matchType = null;\n\n    this.placeAttributes = {};\n\n    this.type = null;\n}\n\nGeocodedLocation.prototype = {\n\n    constructor : GeocodedLocation\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GeocodedLocation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9HZW9jb2RlZExvY2F0aW9uLmpzPzc2ZDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLDZDQUE2QztBQUNsSCwwRUFBMEUsNkNBQTZDO0FBQ3ZIO0FBQ0EsNENBQTRDLDZEQUE2RDtBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRkFBK0Ysc0ZBQXNGO0FBQ3JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFZSwrRUFBZ0IsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9HZW9jb2RlZExvY2F0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIExvY2F0aW9uIG9iamVjdCBob2xkaW5nIGNvbW1vbiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IHRoZSB1bmRlcmx5aW5nIGdlb2NvZGluZyBhbmQgcmV2ZXJzZSBnZW9jb2Rpbmcgd2ViIHNlcnZpY2UuXG4gKlxuICogQHByb3BlcnR5IHtHcC5Qb2ludH0gcG9zaXRpb24gLSBQb3NpdGlvbiBvZiB0aGUgbG9jYXRpb24gZ2l2ZW4gaW4gdGhlIHJlcXVlc3RlZCBjb29yZGluYXRlcyBzeXN0ZW0uXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdHlwZSAtIGxvY2F0aW9uIHR5cGUgXCJTdHJlZXRBZGRyZXNzXCIgKGZvciBhbiBhZGRyZXNzKSwgXCJQb3NpdGlvbk9mSW50ZXJlc3RcIiAoZm9yIGEgcGxhY2UgbmFtZSkgb3IgXCJDYWRhc3RyYWxQYXJjZWxcIiAoZm9yIGNhZGFzdHJhbCBwYXJjZWwpLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IG1hdGNoVHlwZSAtIGhvdyBnZW9jb2RpbmcgaXMgcGVyZm9ybWVkIDogXCJzdHJlZXQgbnVtYmVyXCIgKGV4YWN0IGFkZHJlc3MpLCBcInN0cmVldCBlbmhhbmNlZFwiIChzdHJlZXQgbnVtYmVyIGNhbGN1bGF0ZWQgYnkgaW50ZXJwb2xhdGlvbiksIFwic3RyZWV0XCIgKG9ubHkgdGhlIHN0cmVldCksIFwiY2l0eVwiIChvbmx5IHRoZSBjaXR5KS5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBwbGFjZUF0dHJpYnV0ZXMgLSBBc3NvY2lhdGl2ZSBhcnJheSBtYXRjaGluZyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXMgd2l0aCB0aGVpciB2YWx1ZXMgZ2l2ZW4gYnkgdGhlIHVuZGVybHlpbmcgd2ViIHNlcnZpY2UgOlxuICpcbiAqICpDb21tb24gYXR0cmlidXRlcyA6ICpcbiAqXG4gKiAtICoqZnJlZWZvcm0qKiAtIGZyZWVmb3JtIGNvbXBsZXRlIEFkZHJlc3MuXG4gKiAtICoqYmJveCoqIC0gQm91bmRpbmcgQm94ICp7QGxpbmsgR3AuQkJveH0qLlxuICogLSAqKm11bmljaXBhbGl0eSoqIC0gTXVuaWNpcGFsaXR5XG4gKlxuICogKmlmIHR5cGUgPT09IFwiU3RyZWV0QWRkcmVzc1wiIDogKlxuICpcbiAqIC0gKipudW1iZXIqKiAtIFN0cmVldCBudW1iZXIuXG4gKiAtICoqSUQqKiAtIElkZW50aWZpZXIgb2YgdGhlIGFkZHJlc3MgaW4gdGhlIFtCRCBBRFJFU1NFIERhdGFiYXNlXXtAbGluayBodHRwOi8vcHJvZmVzc2lvbm5lbHMuaWduLmZyL2JkYWRyZXNzZX0uXG4gKiAtICoqSURUUioqIC0gSWRlbnRpZmllciBvZiB0aGUgbGluZVN0cmluZyBpbiB0aGUgW0JEIEFEUkVTU0UgRGF0YWJhc2Vde0BsaW5rIGh0dHA6Ly9wcm9mZXNzaW9ubmVscy5pZ24uZnIvYmRhZHJlc3NlfS5cbiAqIC0gKipwb3N0YWxDb2RlKiogLSBQb3N0Q29kZVxuICogLSAqKnF1YWxpdHkqKiAtIEdlb2NvZGluZyBxdWFsaXR5IChbc2VlXXtAbGluayBodHRwOi8vYXBpLmlnbi5mci90ZWNoLWRvY3MtanMvZGV2ZWxvcHBldXIvc2VhcmNoLmh0bWx9KVxuICogLSAqKnN0cmVldCoqIC0gU3RyZWV0IG5hbWVcbiAqIC0gKip0ZXJyaXRvcnkqKiAtIEZyZW5jaCBUZXJyaXRvcnkgY29kZVxuICogLSAqKmNvbW11bmUqKiAtIENpdHlcbiAqIC0gKipkZXBhcnRtZW50KiogLSBEZXBhcnRtZW50XG4gKiAtICoqaW5zZWUqKiAtIElOU0VFIENvZGVcbiAqXG4gKlxuICogKmlmIHR5cGUgPT09IFwiUG9zaXRpb25PZkludGVyZXN0XCIgOipcbiAqXG4gKiAtICoqaW1wb3J0YW5jZSoqIC0gUGxhY2UgbmFtZSBpbXBvcnRhbmNlXG4gKiAtICoqbmF0dXJlKiogLSBQbGFjZSBuYW1lIG5hdHVyZVxuICogLSAqKnBvc3RhbENvZGUqKiAtIFBvc3RDb2RlXG4gKiAtICoqdGVycml0b3J5KiogLSBGcmVuY2ggVGVycml0b3J5IGNvZGVcbiAqIC0gKipjb21tdW5lKiogLSBDaXR5XG4gKiAtICoqZGVwYXJ0bWVudCoqIC0gRGVwYXJ0bWVudFxuICogLSAqKmluc2VlKiogLSBJTlNFRSBDb2RlXG4gKlxuICpcbiAqICpzaSB0eXBlID0gXCJDYWRhc3RyYWxQYXJjZWxcIiA6KlxuICpcbiAqIC0gKiphYnNvcmJlZENpdHkqKiAtIHdoZW4gYSBwYXJjZWwgY29tZXMgZnJvbSBhIGNpdHkgdGhhdCB3YXMgYWJzb3JiZWQgYnkgYW5vdGhlciwgY29kZSBvZiB0aGF0IG9sZCBjaXR5LiBcIjAwMFwiIG90aGVyd2lzZS5cbiAqIC0gKiphcnJvbmRpc3NlbWVudCoqIC0gYXJyb25kaXNzZW1lbnRcbiAqIC0gKipjYWRhc3RyYWxQYXJjZWwqKiAtIGNhZGFzdHJhbCBwYXJjZWwgY29kZVxuICogLSAqKmRpc3RyaWN0KiogLSBkaXN0cmljdFxuICogLSAqKnNoZWV0KiogLSBQYXJjZWwgU2hlZXQgKGVnLiBcIjFcIikuXG4gKiAtICoqbnVtYmVyKiogLSBQYXJjZWwgTnVtYmVyIChlZy4gXCIwMDQxXCIpXG4gKiAtICoqc2VjdGlvbioqIC0gUGFyY2VsIFNlY3Rpb24gKGVnLiBcIjBEXCIpLlxuICogLSAqKmNvbW11bmUqKiAtIFBhcmNlbCBtdW5pY2lwYWxpdHkuXG4gKiAtICoqZGVwYXJ0bWVudCoqIC0gUGFyY2VsIERlcGFydG1lbnQuXG4gKiAtICoqaW5zZWUqKiAtIElOU0VFIENvZGUuXG4gKiAtICoqb3JpZ2luKiogLSBQYXJjZWwgb3JpZ2luIChzZWUgXCJ0eXBlXCIgYXR0cmlidXRlIGluIHRoZSBbdW5kZXJseWluZyB3ZWIgc2VydmljZSByZXNwb25zZV17QGxpbmsgaHR0cDovL2FwaS5pZ24uZnIvdGVjaC1kb2NzLWpzL2RldmVsb3BwZXVyL3NlYXJjaC5odG1sI0NhZGFzdHJhbF9wYXJjZWxzX3NlYXJjaH0pXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkdlb2NvZGUuR2VvY29kZWRMb2NhdGlvblxuICovXG5mdW5jdGlvbiBHZW9jb2RlZExvY2F0aW9uICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgR2VvY29kZWRMb2NhdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlb2NvZGVkTG9jYXRpb24gY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLnBvc2l0aW9uID0ge1xuICAgICAgICB4IDogbnVsbCxcbiAgICAgICAgeSA6IG51bGxcbiAgICB9O1xuXG4gICAgdGhpcy5tYXRjaFR5cGUgPSBudWxsO1xuXG4gICAgdGhpcy5wbGFjZUF0dHJpYnV0ZXMgPSB7fTtcblxuICAgIHRoaXMudHlwZSA9IG51bGw7XG59XG5cbkdlb2NvZGVkTG9jYXRpb24ucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBHZW9jb2RlZExvY2F0aW9uXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdlb2NvZGVkTG9jYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodedLocation.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/ReverseGeocodedLocation.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/ReverseGeocodedLocation.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GeocodedLocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeocodedLocation */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/GeocodedLocation.js\");\n\n\n\n/**\n * Single location object returned by the underlying reverse geocoding web service.\n *\n * @property {Float} searchCenterDistance - Distance between the requested point and the location.\n *\n * @namespace\n * @extends {Gp.Services.Geocode.GeocodedLocation}\n * @alias Gp.Services.Geocode.ReverseGeocodedLocation\n */\nfunction ReverseGeocodedLocation () {\n    if (!(this instanceof ReverseGeocodedLocation)) {\n        throw new TypeError(\"ReverseGeocodedLocation constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    _GeocodedLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage) : \"ReverseGeocodedLocation\"\n     * @type {String}\n     */\n    this.CLASSNAME = \"ReverseGeocodedLocation\";\n\n    this.searchCenterDistance = null;\n}\n\nReverseGeocodedLocation.prototype = Object.create(_GeocodedLocation__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype);\n\nReverseGeocodedLocation.prototype.constructor = ReverseGeocodedLocation;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReverseGeocodedLocation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9SZXZlcnNlR2VvY29kZWRMb2NhdGlvbi5qcz80N2Q1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNrRDs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUkseURBQWdCOztBQUVwQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrREFBa0QseURBQWdCOztBQUVsRTs7QUFFZSxzRkFBdUIsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvR2VvY29kZS9SZXNwb25zZS9tb2RlbC9SZXZlcnNlR2VvY29kZWRMb2NhdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IEdlb2NvZGVkTG9jYXRpb24gZnJvbSBcIi4vR2VvY29kZWRMb2NhdGlvblwiO1xuXG4vKipcbiAqIFNpbmdsZSBsb2NhdGlvbiBvYmplY3QgcmV0dXJuZWQgYnkgdGhlIHVuZGVybHlpbmcgcmV2ZXJzZSBnZW9jb2Rpbmcgd2ViIHNlcnZpY2UuXG4gKlxuICogQHByb3BlcnR5IHtGbG9hdH0gc2VhcmNoQ2VudGVyRGlzdGFuY2UgLSBEaXN0YW5jZSBiZXR3ZWVuIHRoZSByZXF1ZXN0ZWQgcG9pbnQgYW5kIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAZXh0ZW5kcyB7R3AuU2VydmljZXMuR2VvY29kZS5HZW9jb2RlZExvY2F0aW9ufVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkdlb2NvZGUuUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXZlcnNlR2VvY29kZWRMb2NhdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJldmVyc2VHZW9jb2RlZExvY2F0aW9uIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgLy8gSU5GT1xuICAgIC8vIGFwcGVsIGR1IGNvbnN0cnVjdGV1ciBkZSBsYSBjbGFzc2UgbcOocmVcbiAgICAvLyBhdmVjIHBhc3NhZ2UgZGUgcGFyYW0uXG4gICAgR2VvY29kZWRMb2NhdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLyoqXG4gICAgICogTm9tIGRlIGxhIGNsYXNzZSAoaGVyaXRhZ2UpIDogXCJSZXZlcnNlR2VvY29kZWRMb2NhdGlvblwiXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLkNMQVNTTkFNRSA9IFwiUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb25cIjtcblxuICAgIHRoaXMuc2VhcmNoQ2VudGVyRGlzdGFuY2UgPSBudWxsO1xufVxuXG5SZXZlcnNlR2VvY29kZWRMb2NhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb2NvZGVkTG9jYXRpb24ucHJvdG90eXBlKTtcblxuUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmV2ZXJzZUdlb2NvZGVkTG9jYXRpb247XG5cbmV4cG9ydCBkZWZhdWx0IFJldmVyc2VHZW9jb2RlZExvY2F0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/Response/model/ReverseGeocodedLocation.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Geocode/ReverseGeocode.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Geocode/ReverseGeocode.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _Request_ReverseGeocodeRequestFactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Request/ReverseGeocodeRequestFactory */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Request/ReverseGeocodeRequestFactory.js\");\n/* harmony import */ var _Response_ReverseGeocodeResponseFactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Response/ReverseGeocodeResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Response/ReverseGeocodeResponseFactory.js\");\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service de géocodage inverse du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.ReverseGeocode\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {Object} options.position - Position du point de référence pour le calcul de proximité exprimée dans le système de référence spécifié par le srs.\n *      @param {Float} options.position.x - Abcisse du point de référence pour le calcul de proximité exprimée dans le système de référence spécifié par le srs. (= longitude si srs = \"CRS:84\", latitude si srs = \"EPSG:4326\")\n *      @param {Float} options.position.y - Ordonnée du point de référence pour le calcul de proximité exprimée dans le système de référence spécifié par le srs. (= latitude si srs = \"CRS:84\", longitude si srs = \"EPSG:4326\")\n *\n * @param {Object} [options.filterOptions] - Les propriétés possibles de cet objet sont décrites ci-après.\n * @param {Object} [options.filterOptions.bbox] - Emprise dans laquelle on souhaite effectuer la recherche.\n *      Les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Float} options.filterOptions.bbox.left   - Abscisse du côté gauche de la BBOX\n *      @param {Float} options.filterOptions.bbox.right  - Abscisse du côté droit de la BBOX\n *      @param {Float} options.filterOptions.bbox.top    - Ordonnée supérieure de la BBOX\n *      @param {Float} options.filterOptions.bbox.bottom - Ordonnée inférieure de la BBOX\n *\n * @param {Object} [options.filterOptions.circle] - Cercle dans lequel on souhaite effectuer la recherche.\n *      Les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Float} options.filterOptions.circle.x      - Abscisse du centre du cercle de recherche.\n *      @param {Float} options.filterOptions.circle.y      - Ordonnée du centre du cercle de recherche.\n *      @param {Float} options.filterOptions.circle.radius - Rayon du cercle de recherche.\n *\n * @param {Array.<Object>} [options.filterOptions.polygon] - Polygone dans lequel on souhaite effectuer la recherche.\n *      Liste des couples x et y pour chaque point constituant le polygone.\n *\n * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Type de l'objet recherché.\n *      Le service de géocodage du Géoportail permet de rechercher des 'PostionOfInterest' pour des toponymes, des 'StreetAddress'\n *      pour des adresses postales et/ou des 'CadastralParcel' pour des parcelles cadastrales.\n *      D'autres types pourront être rajoutés selon l'évolution du service.\n *      Par défaut, type = ['StreetAddress'].\n *\n * @param {Number} [options.maximumResponses] - Nombre de réponses maximal que l'on souhaite recevoir.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 25.\n *\n * @param {String} [options.srs = CRS:84] - Système de coordonnées dans lequel les paramètres géographiques en entrée et la réponse du service sont exprimés.\n *      Pas de valeur par défaut.\n *      Si le serveur consulté est celui du Géoportail, la valeur par défaut est : \"CRS:84\".\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      position : {x:0 , y:0},\n *      filterOptions :{\n *          bbox : {left : 0, right : 1, top : 1, bottom : 0},\n *          [circle : {\n *              x : 0,\n *              y : 0,\n *              radius : 100\n *          }]\n *          [polygon  : [{x:0,y:0}, {x:1,y:1}, {x:2,y:2}, {x:3,y:2}, {x:4,y:1}, {x:0,y:0}]]\n *          type : ['StreetAddress']\n *      },\n *      maximumResponses : 25,\n *      srs : 'EPSG:4326'\n *   };\n *\n * @private\n */\nfunction ReverseGeocode (options) {\n    if (!(this instanceof ReverseGeocode)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"ReverseGeocode\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"ReverseGeocode\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Gp.Services.ReverseGeocode\");\n    this.logger.trace(\"[Constructeur ReverseGeocode (options)]\");\n\n    if (!options.position) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"position\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.position.x === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"position.x\"));\n    }\n\n    if (options.position.y === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"position.y\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.position = options.position;\n\n    // on definit des filtres par defaut\n    if (!options.filterOptions || typeof options.filterOptions !== \"object\") {\n        this.options.filterOptions = options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // FIXME ECMAScript 5 support (valable pour un objet uniquement !)\n    // ceci permet de tester le cas où : object = {}\n    if (Object.keys(options.filterOptions).length === 0) {\n        this.options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // on teste pour chaque filtre, les conditions suivantes : null ou vide !\n    var filter = Object.keys(options.filterOptions);\n    for (var i = 0; i < filter.length; i++) {\n        var key = filter[i];\n        if (!options.filterOptions[key] || Object.keys(options.filterOptions[key]).length === 0) {\n            delete this.options.filterOptions[key];\n        }\n    }\n\n    this.options.filterOptions.type = options.filterOptions.type || [\"StreetAddress\"];\n    // on vérifie que le type est bien dans un tableau\n    if (!Array.isArray(this.options.filterOptions.type)) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_TYPE\", \"filterOptions.type\"));\n    }\n\n    this.options.maximumResponses = options.maximumResponses || 25;\n\n    // FIXME : cet attribut (returnFreeForm) n'est pas spécifié dans la doc du constructeur ?\n    // Il est inutile en effet, mais présent dans les specs...\n    this.options.returnFreeForm = options.returnFreeForm || false;\n    // info : en réalité le service ne reconnait que EPSG:4326. this.options.srs permet essentiellement de différencier EPSG:4326 (lat,lon) et CRS:84 (lon,lat)\n    this.options.srs = options.srs || \"CRS:84\";\n\n    // si on n'a pas un systeme de coordonnées EPSG géographique, il faut inverser les coordonnées\n    // (car elles sont en lon, lat alors que le service attend une position en lat, lon).\n    // dans le cas d'EPSG:4326 par exemple, les coordonnées sont bien en lat, lon donc on ne fait rien.\n    if (ReverseGeocode.geoEPSG.indexOf(this.options.srs) === -1) {\n        // pour la position\n        this.options.position = {\n            x : this.options.position.y,\n            y : this.options.position.x\n        };\n        // pour les filtres spatiaux s'ils sont spécifiés\n        if (this.options.filterOptions && this.options.filterOptions.circle) {\n            var circle = this.options.filterOptions.circle;\n            this.options.filterOptions.circle = {\n                x : circle.y,\n                y : circle.x,\n                radius : circle.radius\n            };\n        }\n        if (this.options.filterOptions && this.options.filterOptions.polygon) {\n            var polygon = this.options.filterOptions.polygon;\n            for (i = 0; i < polygon.length; i++) {\n                var coords = polygon[i];\n                this.options.filterOptions.polygon[i] = {\n                    x : coords.y,\n                    y : coords.x\n                };\n            }\n        }\n    }\n\n    // attributs d'instances\n\n    /**\n     * Format forcé de la réponse du service : \"xml\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"xml\";\n}\n\n/**\n * @lends module:ReverseGeocode#\n */\nReverseGeocode.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nReverseGeocode.prototype.constructor = ReverseGeocode;\n\n/**\n * (overwrite)\n * Création de la requête\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nReverseGeocode.prototype.buildRequest = function (error, success) {\n    var options = {\n        httpMethod : this.options.httpMethod,\n        // options specifiques du service\n        position : this.options.position,\n        returnFreeForm : this.options.returnFreeForm,\n        filterOptions : this.options.filterOptions,\n        srs : \"EPSG:4326\", // info : en réalité le service ne reconnait que EPSG:4326. this.options.srs permet essentiellement de différencier EPSG:4326 (lat,lon) et CRS:84 (lon,lat)\n        maximumResponses : this.options.maximumResponses\n    };\n\n    this.request = _Request_ReverseGeocodeRequestFactory__WEBPACK_IMPORTED_MODULE_4__[\"default\"].build(options);\n\n    // on teste si la requete a bien été construite !\n    (!this.request)\n        ? error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_REQUEST_BUILD\")))\n        : success.call(this, this.request);\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nReverseGeocode.prototype.analyzeResponse = function (error, success) {\n    if (this.response) {\n        var options = {\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        _Response_ReverseGeocodeResponseFactory__WEBPACK_IMPORTED_MODULE_5__[\"default\"].build(options);\n    } else {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/**\n * Codes EPSG géographiques (lat/lon). Utiles car les coordonnées doivent être inversées.\n */\nReverseGeocode.geoEPSG = [\"EPSG:4326\"];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReverseGeocode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Geocode/ReverseGeocode.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Formats/ProcessIsoCurveResponseReader.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Formats/ProcessIsoCurveResponseReader.js ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Formats_WKT__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Formats/WKT */ \"./node_modules/geoportal-access-lib/src/Formats/WKT.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Response_model_ProcessIsoCurveResponse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Response/model/ProcessIsoCurveResponse */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/model/ProcessIsoCurveResponse.js\");\n/**\n * Analyse de la reponse XML\n *\n * @module ProcessIsoCurveResponseReader\n * @alias Gp.Services.ProcessIsoCurve.Formats.ProcessIsoCurveResponseReader\n * @todo not yet implemented !\n * @private\n */\n\n\n\n\n\n\n/**\n * Objet ProcessIsoCurveResponseReader\n *\n * @member {Object} ProcessIsoCurveResponseReader\n *\n * @property {Object} ProcessIsoCurveResponseReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} ProcessIsoCurveResponseReader.read -  Méthode permettant de lancer la lecture d'une réponse XML\n *       du service de calcul isochrone/isodistance, à l'aide des readers de la classe.\n *\n */\n\nvar ProcessIsoCurveResponseReader = {};\n\n/*\n    // INFO\n    // Exemple d'erreur du service\n    // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n    // <isochroneResult>\n    //  <message>Location point must have 2 components separated with a ,</message>\n    //  <status>ERROR</status>\n    // </isochroneResult>\n\n    // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n    // <serviceResult>\n    //   <message>ServiceException : Error in isochron computation Error in smartrouting null</message>\n    //   <status>ERROR</status>\n    // </serviceResult>\n\n    // INFO\n    // Exemple d'erreur NGinx\n    // <ExceptionReport><Exception exceptionCode=\"MissingParameter\">Resource parameter not found</Exception></ExceptionReport>\n*/\n\n/*\n    // INFO\n    // Exemple de réponse du service\n\n     // <IsochroneResult>\n     //    <status>OK</status>\n     //    <id/>\n     //    <location>-1.557189,47.217122</location>\n     //    <srs/>\n     //    <distance>5000</distance>\n     //    <wktGeometry>POLYGON ((-1.545312 47.178178, -1.545312 47.180418, ...))</wktGeometry>\n     // </IsochroneResult>\n\n    // <isochronResult>\n    //    <status>OK</status>\n    //    <id>1</id>\n    //    <location>-1.557189,47.217122</location>\n    //    <srs/>\n    //    <time>50</time>\n    //    <wktGeometry>POLYGON ((-1.556864 47.216487, -1.556864 47.216948, ...))</wktGeometry>\n    // </isochronResult>\n*/\n\nProcessIsoCurveResponseReader.READERS = {\n\n    /** TODO : jsdoc block */\n    isochronResult : function (root) {\n        // racine de la réponse XML : on crée l'objet de réponse\n        var response = new _Response_model_ProcessIsoCurveResponse__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n        if (root.hasChildNodes()) {\n            var children = root.childNodes;\n            var child;\n\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n\n                if (ProcessIsoCurveResponseReader.READERS[child.nodeName]) {\n                    ProcessIsoCurveResponseReader.READERS[child.nodeName](child, response);\n                }\n            }\n        }\n\n        if (response.status === \"error\") {\n            var message = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                response.message);\n            throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                message : message,\n                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n            });\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    message : function (node, response) {\n        if (response) {\n            response.message = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    status : function (node, response) {\n        var status = __getChildValue(node);\n        if (status === \"ERROR\" || status === \"error\") {\n            if (response) {\n                response.status = \"error\";\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    id : function (node, response) {\n        if (response) {\n            response.id = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    location : function (node, response) {\n        var coords = __getChildValue(node);\n        if (response && response.location) {\n            response.location.x = parseFloat(coords.split(\",\")[0]);\n            response.location.y = parseFloat(coords.split(\",\")[1]);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    srs : function (node, response) {\n        if (response) {\n            response.srs = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    distance : function (node, response) {\n        if (response) {\n            response.distance = parseFloat(__getChildValue(node));\n        }\n    },\n\n    /** TODO : jsdoc block */\n    time : function (node, response) {\n        if (response) {\n            response.time = parseFloat(__getChildValue(node));\n        }\n    },\n\n    /** TODO : jsdoc block */\n    wktGeometry : function (node, response) {\n        if (response) {\n            var wktGeometry = node.innerHTML;\n            /** TODO : jsdoc block */\n            var onWKTSuccess = function (json) {\n                response.geometry = json;\n            };\n            /** TODO : jsdoc block */\n            var onWKTError = function () {\n                var msg = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"PARAM_FORMAT\", [\"wktGeometry\"]);\n                throw new Error(msg);\n            };\n            if (response.hasOwnProperty(\"geometry\")) {\n                _Formats_WKT__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toJson(wktGeometry, onWKTSuccess, onWKTError);\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    serviceResult : function (node) {\n        // en cas d'exception du service\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (ProcessIsoCurveResponseReader.READERS[child.nodeName]) {\n                    ProcessIsoCurveResponseReader.READERS[child.nodeName](child, response);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    ExceptionReport : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = ProcessIsoCurveResponseReader.READERS[\"Exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    Exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n};\n\n/** TODO : jsdoc block */\nProcessIsoCurveResponseReader.read = function (root) {\n    var response;\n\n    if (root.nodeName === \"isochronResult\" || root.nodeName === \"isochroneResult\" || root.nodeName === \"IsochroneResult\") {\n        response = ProcessIsoCurveResponseReader.READERS[\"isochronResult\"](root);\n        return response;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        response = ProcessIsoCurveResponseReader.READERS[root.nodeName](root);\n        return response;\n    } else if (ProcessIsoCurveResponseReader.READERS[root.nodeName]) {\n        response = ProcessIsoCurveResponseReader.READERS[root.nodeName](root);\n        if (response.status === \"error\") {\n            var errMsg = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                response.message);\n            throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                message : errMsg,\n                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n            });\n        }\n        return response;\n    } else {\n        throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE\", root.nodeName),\n            type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_UNKERR\n        });\n    }\n};\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof ProcessIsoCurveResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProcessIsoCurveResponseReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Formats/ProcessIsoCurveResponseReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/ProcessIsoCurve.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/ProcessIsoCurve.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _Request_ProcessIsoCurveRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Request/ProcessIsoCurveRequest */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/ProcessIsoCurveRequest.js\");\n/* harmony import */ var _Response_ProcessIsoCurveResponseFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Response/ProcessIsoCurveResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/ProcessIsoCurveResponseFactory.js\");\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'isochrone/distance du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.ProcessIsoCurve\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} options.outputFormat - Le format de la réponse du service iso : 'xml' ou 'json'.\n *      Ce paramètre déterminera l'extension '.xml' ou '.json' du service.\n *      Nécessaire si serverUrl est renseigné pour connaître le format dans lequel sera fournie la réponse (pour son traitement).\n *      Par défaut, ce paramètre vaut 'json'.\n *\n * @param {Object} options.position - Point de départ du calcul.\n *      Coordonnées exprimées en longitudes, latitudes (EPSG:4326)\n *      @param {Float} options.position.x - Abcisse du point de départ du calcul d'isochrone/distance.\n *      @param {Float} options.position.y - Ordonnée du point de départ du calcul d'isochrone/distance.\n *\n * @param {String} options.srs - Projection.\n *      Système de coordonnées dans lequel les coordonnées du point « location » sont exprimées et\n *      dans lequel la géométrie de la courbe résultante sera exprimée.\n *      Par défaut, le système de coordonnées utilisé sera « EPSG:4326 ».\n *\n * @param {String} [options.graph = \"voiture\"] - Nom du graphe à utiliser pour le calcul (« Pieton » ou « Voiture »).\n *      La valeur par défaut est : «voiture»\n *\n * @param {Array.<String>} [options.exclusions] - Critères d'exclusions à appliquer pour le calcul.\n *      On précise ici le type de tronçons que l'on ne veut pas que l'isochrone/distance emprunte\n *      (valeurs possibles : « toll » (éviter les péages), « bridge », « tunnel »).\n *\n * @param {String} [options.method = \"time\"] - Méthode utilisée pour le calcul de la courbe iso.\n *      Les valeurs possible sont \"time\" pour un calcul d'isochrone, \"distance\" pour un calcul d'isodistance.\n *      Pas de valeur spécifié équivaut à un calcul d'isochrone.\n *\n * @param {Float} options.time - Durée maximum (exprimée en secondes) à utiliser pour le calcul de la courbe à partir du ou jusqu'au point « location ».\n *      Ce paramètre doit être renseigné si l'option \"méthod\" a la valeur \"time\".\n *      Si l'option method n'est pas renseignée, ce paramètre doit être renseigné.\n *\n * @param {Float} options.distance - Distance maximum (exprimée en metres) à utiliser pour le calcul de la courbe à partir du ou j'usqu'au point « location ».\n *      Ce paramètre doit être renseigné si l'option \"méthod\" a la valeur \"DISTANCE\".\n *      Si l'option \"method\" n'est pas renseignée, ce paramètre sera ignoré.\n *\n * @param {Boolean} [options.reverse = false] - Indique si la géométrie résultante doit être lissée (« true ») pour ne pas avoir d'effet d'escalier.\n *      Par défaut, la valeur « false » est appliquée.\n *\n * @param {Boolean} [options.smoothing = false] - Indique si la géométrie résultante doit être lissée (« true ») pour ne pas avoir d'effet d'escalier.\n *      Par défaut, la valeur « false » est appliquée.\n *\n * @param {Boolean} [options.holes = false] - Indique si la géométrie résultante (surface) doit être retournée avec des trous (« true »).\n *      Par défaut, la valeur « false » est appliquée.\n *\n * @example\n *   var options = {\n *      // options communes aux services\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      position : {\n *           x : 2.3242664298058053,\n *           y : 48.86118017324745\n *      },\n *      distance : 200,\n *      [time : ]\n *      method : \"distance\",\n *      exclusions : [\"Bridge\", \"Tunnel\", \"Toll\"],\n *      graph : \"voiture\",\n *      reverse : false,\n *      smoothing : false,\n *      holes : false\n *  };\n * @private\n */\n\nfunction ProcessIsoCurve (options) {\n    if (!(this instanceof ProcessIsoCurve)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"ProcessIsoCurve\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"ProcessIsoCurve\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Gp.Services.ProcessIsoCurve\");\n    this.logger.trace(\"[Constructeur ProcessIsoCurve (options)]\");\n\n    if (!options.position) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"position\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.position.x === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"position.x\"));\n    }\n\n    if (options.position.y === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"position.y\"));\n    }\n\n    if (!options.time && !options.distance) {\n        throw new Error(\"Parameter (s) 'distance' missing. Parameter time to calculate an isochrone, parameter distance for an isodistance\");\n    }\n\n    // si on a que le paramètre \"distance\" en entrée, on calcule une isodistance.\n    // Le paramètre \"méthode\" doit pour avoir une réponse du service, être passé à \"distance\"\n    if (!options.time && options.distance) {\n        this.options.method = \"distance\";\n        // on supprime l'éventuel attribut time, résidu d'un appel antérieur\n        if (this.options.time) {\n            delete this.options.time;\n        }\n    }\n\n    // si on a que le paramètre \"time\" en entrée, on calcule une isochrone.\n    // Le paramètre \"méthode\" doit pour avoir une réponse du service, être passé à \"time\"\n    if (options.time && !options.distance) {\n        this.options.method = \"time\";\n        // on supprime l'éventuel attribut time, résidu d'un appel antérieur\n        if (this.options.distance) {\n            delete this.options.distance;\n        }\n    }\n\n    // au cas où on a ni l'un, ni l'autre...\n    this.options.method = this.options.method || \"time\";\n\n    // options par defaut du service\n    this.options.exclusions = options.exclusions || null;\n    this.options.graph = options.graph || \"Voiture\"; // TODO test de la valeur à faire !\n    this.options.reverse = options.reverse || false;\n    this.options.smoothing = options.smoothing || false;\n    this.options.holes = options.holes || false;\n    this.options.srs = options.srs || \"EPSG:4326\";\n\n    // on passe l'option outputFormat en minuscules afin d'éviter des exceptions.\n    this.options.outputFormat = (typeof options.outputFormat === \"string\") ? options.outputFormat.toLowerCase() : \"json\";\n\n    // gestion de l'url du service par defaut\n    // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n    if (!this.options.serverUrl) {\n        var lstUrlByDefault = _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ProcessIsoCurve.url(this.options.apiKey);\n\n        var urlFound = lstUrlByDefault[\"iso\" + \"-\" + this.options.outputFormat];\n        if (!urlFound) {\n            throw new Error(\"Url by default not found !\");\n        }\n        this.options.serverUrl = urlFound;\n        this.logger.trace(\"Serveur URL par defaut : \" + this.options.serverUrl);\n    }\n\n    // gestion du type de service\n    // si l'extension de l'url est .json ou .xml, on surcharge le format de sortie (outputFormat)\n    var idx = this.options.serverUrl.lastIndexOf(\".\");\n    if (idx !== -1) {\n        var extension = this.options.serverUrl.substring(idx + 1);\n        if (extension && extension.length < 5) { // FIXME extension de moins de 4 car. ...\n            this.logger.trace(\"Serveur Extension URL : \" + extension);\n            switch (extension.toLowerCase()) {\n                case \"json\":\n                case \"xml\":\n                    this.options.outputFormat = extension.toLowerCase();\n                    break;\n                default:\n                    throw new Error(\"type of service : unknown or unsupported (json or xml) !\");\n            }\n        }\n    }\n}\n\n/**\n * @lends module:ProcessIsoCurve#\n */\nProcessIsoCurve.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nProcessIsoCurve.prototype.constructor = ProcessIsoCurve;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nProcessIsoCurve.prototype.buildRequest = function (error, success) {\n    try {\n        var oIsoCurve = new _Request_ProcessIsoCurveRequest__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.options);\n        if (!oIsoCurve.processRequestString()) {\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_REQUEST_BUILD\"));\n        }\n\n        this.request = oIsoCurve.requestString;\n    } catch (e) {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](e.message));\n        return;\n    }\n\n    success.call(this, this.request);\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} onError   - callback des erreurs\n * @param {Function} onSuccess - callback de succès de l'analyse de la réponse\n */\nProcessIsoCurve.prototype.analyzeResponse = function (onError, onSuccess) {\n    if (this.response) {\n        var options = {\n            response : this.response,\n            outputFormat : this.options.outputFormat,\n            rawResponse : this.options.rawResponse,\n            onSuccess : onSuccess,\n            onError : onError,\n            scope : this\n        };\n\n        _Response_ProcessIsoCurveResponseFactory__WEBPACK_IMPORTED_MODULE_6__[\"default\"].build(options);\n    } else {\n        onError.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProcessIsoCurve);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUHJvY2Vzc0lzb0N1cnZlL1Byb2Nlc3NJc29DdXJ2ZS5qcz84OGNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNpRDtBQUNIO0FBQ1c7QUFDWjtBQUNRO0FBQ2lCO0FBQ2lCOztBQUV2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCLGdFQUFDO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLHNEQUFhOztBQUVqQixrQkFBa0IsOERBQU07QUFDeEI7O0FBRUE7QUFDQSx3QkFBd0IsZ0VBQUM7QUFDekI7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixnRUFBQztBQUN6Qjs7QUFFQTtBQUNBLHdCQUF3QixnRUFBQztBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMERBQWlCOztBQUUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsc0RBQWE7QUFDdkQ7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsdUVBQXNCO0FBQ2xEO0FBQ0EsNEJBQTRCLGdFQUFDO0FBQzdCOztBQUVBO0FBQ0EsS0FBSztBQUNMLDZCQUE2QixnRUFBWTtBQUN6QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxnRkFBOEI7QUFDdEMsS0FBSztBQUNMLCtCQUErQixnRUFBWSxDQUFDLGdFQUFDO0FBQzdDO0FBQ0E7O0FBRWUsOEVBQWUsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUHJvY2Vzc0lzb0N1cnZlL1Byb2Nlc3NJc29DdXJ2ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5pbXBvcnQgXyBmcm9tIFwiLi4vLi4vVXRpbHMvTWVzc2FnZXNSZXNvdXJjZXNcIjtcbmltcG9ydCBFcnJvclNlcnZpY2UgZnJvbSBcIi4uLy4uL0V4Y2VwdGlvbnMvRXJyb3JTZXJ2aWNlXCI7XG5pbXBvcnQgQ29tbW9uU2VydmljZSBmcm9tIFwiLi4vQ29tbW9uU2VydmljZVwiO1xuaW1wb3J0IERlZmF1bHRVcmxTZXJ2aWNlIGZyb20gXCIuLi9EZWZhdWx0VXJsU2VydmljZVwiO1xuaW1wb3J0IFByb2Nlc3NJc29DdXJ2ZVJlcXVlc3QgZnJvbSBcIi4vUmVxdWVzdC9Qcm9jZXNzSXNvQ3VydmVSZXF1ZXN0XCI7XG5pbXBvcnQgUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2VGYWN0b3J5IGZyb20gXCIuL1Jlc3BvbnNlL1Byb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlRmFjdG9yeVwiO1xuXG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqIEFwcGVsIGR1IHNlcnZpY2UgZCdpc29jaHJvbmUvZGlzdGFuY2UgZHUgR8Opb3BvcnRhaWwgOlxuICogICAgIGVudm9pIGRlIGxhIHJlcXXDqnRlIGNvbnN0cnVpdGUgc2Vsb24gbGVzIHBhcmFtw6h0cmVzIGVuIG9wdGlvbnMsXG4gKiAgICAgw6l2ZW50dWVsbGVtZW50IHBhcnNpbmcgZXQgYW5hbHlzZSAgZGUgbGEgcsOpcG9uc2UsXG4gKiAgICAgcmV0b3VyIGQndW5lIHLDqXBvbnNlIGVuIHBhcmFtw6h0cmUgZGUgbGEgZm9uY3Rpb24gb25TdWNjZXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyB7R3AuU2VydmljZXMuQ29tbW9uU2VydmljZX1cbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Qcm9jZXNzSXNvQ3VydmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBzcMOpY2lmaXF1ZXMgYXUgc2VydmljZSAoKyBsZXMgb3B0aW9ucyBoZXJpdMOpZXMpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMub3V0cHV0Rm9ybWF0IC0gTGUgZm9ybWF0IGRlIGxhIHLDqXBvbnNlIGR1IHNlcnZpY2UgaXNvIDogJ3htbCcgb3UgJ2pzb24nLlxuICogICAgICBDZSBwYXJhbcOodHJlIGTDqXRlcm1pbmVyYSBsJ2V4dGVuc2lvbiAnLnhtbCcgb3UgJy5qc29uJyBkdSBzZXJ2aWNlLlxuICogICAgICBOw6ljZXNzYWlyZSBzaSBzZXJ2ZXJVcmwgZXN0IHJlbnNlaWduw6kgcG91ciBjb25uYcOudHJlIGxlIGZvcm1hdCBkYW5zIGxlcXVlbCBzZXJhIGZvdXJuaWUgbGEgcsOpcG9uc2UgKHBvdXIgc29uIHRyYWl0ZW1lbnQpLlxuICogICAgICBQYXIgZMOpZmF1dCwgY2UgcGFyYW3DqHRyZSB2YXV0ICdqc29uJy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wb3NpdGlvbiAtIFBvaW50IGRlIGTDqXBhcnQgZHUgY2FsY3VsLlxuICogICAgICBDb29yZG9ubsOpZXMgZXhwcmltw6llcyBlbiBsb25naXR1ZGVzLCBsYXRpdHVkZXMgKEVQU0c6NDMyNilcbiAqICAgICAgQHBhcmFtIHtGbG9hdH0gb3B0aW9ucy5wb3NpdGlvbi54IC0gQWJjaXNzZSBkdSBwb2ludCBkZSBkw6lwYXJ0IGR1IGNhbGN1bCBkJ2lzb2Nocm9uZS9kaXN0YW5jZS5cbiAqICAgICAgQHBhcmFtIHtGbG9hdH0gb3B0aW9ucy5wb3NpdGlvbi55IC0gT3Jkb25uw6llIGR1IHBvaW50IGRlIGTDqXBhcnQgZHUgY2FsY3VsIGQnaXNvY2hyb25lL2Rpc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnNycyAtIFByb2plY3Rpb24uXG4gKiAgICAgIFN5c3TDqG1lIGRlIGNvb3Jkb25uw6llcyBkYW5zIGxlcXVlbCBsZXMgY29vcmRvbm7DqWVzIGR1IHBvaW50IMKrIGxvY2F0aW9uIMK7IHNvbnQgZXhwcmltw6llcyBldFxuICogICAgICBkYW5zIGxlcXVlbCBsYSBnw6lvbcOpdHJpZSBkZSBsYSBjb3VyYmUgcsOpc3VsdGFudGUgc2VyYSBleHByaW3DqWUuXG4gKiAgICAgIFBhciBkw6lmYXV0LCBsZSBzeXN0w6htZSBkZSBjb29yZG9ubsOpZXMgdXRpbGlzw6kgc2VyYSDCqyBFUFNHOjQzMjYgwrsuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmdyYXBoID0gXCJ2b2l0dXJlXCJdIC0gTm9tIGR1IGdyYXBoZSDDoCB1dGlsaXNlciBwb3VyIGxlIGNhbGN1bCAowqsgUGlldG9uIMK7IG91IMKrIFZvaXR1cmUgwrspLlxuICogICAgICBMYSB2YWxldXIgcGFyIGTDqWZhdXQgZXN0IDogwqt2b2l0dXJlwrtcbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBbb3B0aW9ucy5leGNsdXNpb25zXSAtIENyaXTDqHJlcyBkJ2V4Y2x1c2lvbnMgw6AgYXBwbGlxdWVyIHBvdXIgbGUgY2FsY3VsLlxuICogICAgICBPbiBwcsOpY2lzZSBpY2kgbGUgdHlwZSBkZSB0cm9uw6dvbnMgcXVlIGwnb24gbmUgdmV1dCBwYXMgcXVlIGwnaXNvY2hyb25lL2Rpc3RhbmNlIGVtcHJ1bnRlXG4gKiAgICAgICh2YWxldXJzIHBvc3NpYmxlcyA6IMKrIHRvbGwgwrsgKMOpdml0ZXIgbGVzIHDDqWFnZXMpLCDCqyBicmlkZ2UgwrssIMKrIHR1bm5lbCDCuykuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLm1ldGhvZCA9IFwidGltZVwiXSAtIE3DqXRob2RlIHV0aWxpc8OpZSBwb3VyIGxlIGNhbGN1bCBkZSBsYSBjb3VyYmUgaXNvLlxuICogICAgICBMZXMgdmFsZXVycyBwb3NzaWJsZSBzb250IFwidGltZVwiIHBvdXIgdW4gY2FsY3VsIGQnaXNvY2hyb25lLCBcImRpc3RhbmNlXCIgcG91ciB1biBjYWxjdWwgZCdpc29kaXN0YW5jZS5cbiAqICAgICAgUGFzIGRlIHZhbGV1ciBzcMOpY2lmacOpIMOpcXVpdmF1dCDDoCB1biBjYWxjdWwgZCdpc29jaHJvbmUuXG4gKlxuICogQHBhcmFtIHtGbG9hdH0gb3B0aW9ucy50aW1lIC0gRHVyw6llIG1heGltdW0gKGV4cHJpbcOpZSBlbiBzZWNvbmRlcykgw6AgdXRpbGlzZXIgcG91ciBsZSBjYWxjdWwgZGUgbGEgY291cmJlIMOgIHBhcnRpciBkdSBvdSBqdXNxdSdhdSBwb2ludCDCqyBsb2NhdGlvbiDCuy5cbiAqICAgICAgQ2UgcGFyYW3DqHRyZSBkb2l0IMOqdHJlIHJlbnNlaWduw6kgc2kgbCdvcHRpb24gXCJtw6l0aG9kXCIgYSBsYSB2YWxldXIgXCJ0aW1lXCIuXG4gKiAgICAgIFNpIGwnb3B0aW9uIG1ldGhvZCBuJ2VzdCBwYXMgcmVuc2VpZ27DqWUsIGNlIHBhcmFtw6h0cmUgZG9pdCDDqnRyZSByZW5zZWlnbsOpLlxuICpcbiAqIEBwYXJhbSB7RmxvYXR9IG9wdGlvbnMuZGlzdGFuY2UgLSBEaXN0YW5jZSBtYXhpbXVtIChleHByaW3DqWUgZW4gbWV0cmVzKSDDoCB1dGlsaXNlciBwb3VyIGxlIGNhbGN1bCBkZSBsYSBjb3VyYmUgw6AgcGFydGlyIGR1IG91IGondXNxdSdhdSBwb2ludCDCqyBsb2NhdGlvbiDCuy5cbiAqICAgICAgQ2UgcGFyYW3DqHRyZSBkb2l0IMOqdHJlIHJlbnNlaWduw6kgc2kgbCdvcHRpb24gXCJtw6l0aG9kXCIgYSBsYSB2YWxldXIgXCJESVNUQU5DRVwiLlxuICogICAgICBTaSBsJ29wdGlvbiBcIm1ldGhvZFwiIG4nZXN0IHBhcyByZW5zZWlnbsOpZSwgY2UgcGFyYW3DqHRyZSBzZXJhIGlnbm9yw6kuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5yZXZlcnNlID0gZmFsc2VdIC0gSW5kaXF1ZSBzaSBsYSBnw6lvbcOpdHJpZSByw6lzdWx0YW50ZSBkb2l0IMOqdHJlIGxpc3PDqWUgKMKrIHRydWUgwrspIHBvdXIgbmUgcGFzIGF2b2lyIGQnZWZmZXQgZCdlc2NhbGllci5cbiAqICAgICAgUGFyIGTDqWZhdXQsIGxhIHZhbGV1ciDCqyBmYWxzZSDCuyBlc3QgYXBwbGlxdcOpZS5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNtb290aGluZyA9IGZhbHNlXSAtIEluZGlxdWUgc2kgbGEgZ8Opb23DqXRyaWUgcsOpc3VsdGFudGUgZG9pdCDDqnRyZSBsaXNzw6llICjCqyB0cnVlIMK7KSBwb3VyIG5lIHBhcyBhdm9pciBkJ2VmZmV0IGQnZXNjYWxpZXIuXG4gKiAgICAgIFBhciBkw6lmYXV0LCBsYSB2YWxldXIgwqsgZmFsc2UgwrsgZXN0IGFwcGxpcXXDqWUuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5ob2xlcyA9IGZhbHNlXSAtIEluZGlxdWUgc2kgbGEgZ8Opb23DqXRyaWUgcsOpc3VsdGFudGUgKHN1cmZhY2UpIGRvaXQgw6p0cmUgcmV0b3VybsOpZSBhdmVjIGRlcyB0cm91cyAowqsgdHJ1ZSDCuykuXG4gKiAgICAgIFBhciBkw6lmYXV0LCBsYSB2YWxldXIgwqsgZmFsc2UgwrsgZXN0IGFwcGxpcXXDqWUuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgdmFyIG9wdGlvbnMgPSB7XG4gKiAgICAgIC8vIG9wdGlvbnMgY29tbXVuZXMgYXV4IHNlcnZpY2VzXG4gKiAgICAgIGFwaUtleSA6IG51bGwsXG4gKiAgICAgIHNlcnZlclVybCA6ICdodHRwOi8vbG9jYWxob3N0L3NlcnZpY2UvJyxcbiAqICAgICAgcHJvdG9jb2wgOiAnSlNPTlAnLCAvLyBKU09OUHxYSFJcbiAqICAgICAgcHJveHlVUkwgOiBudWxsLFxuICogICAgICBodHRwTWV0aG9kIDogJ0dFVCcsIC8vIEdFVHxQT1NUXG4gKiAgICAgIHRpbWVPdXQgOiAxMDAwMCwgLy8gbXNcbiAqICAgICAgcmF3UmVzcG9uc2UgOiBmYWxzZSwgLy8gdHJ1ZXxmYWxzZVxuICogICAgICBzY29wZSA6IG51bGwsIC8vIHRoaXNcbiAqICAgICAgb25TdWNjZXNzIDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSxcbiAqICAgICAgb25GYWlsdXJlIDogZnVuY3Rpb24gKGVycm9yKSB7fSxcbiAqICAgICAgLy8gc3DDqWNpZmlxdWUgYXUgc2VydmljZVxuICogICAgICBwb3NpdGlvbiA6IHtcbiAqICAgICAgICAgICB4IDogMi4zMjQyNjY0Mjk4MDU4MDUzLFxuICogICAgICAgICAgIHkgOiA0OC44NjExODAxNzMyNDc0NVxuICogICAgICB9LFxuICogICAgICBkaXN0YW5jZSA6IDIwMCxcbiAqICAgICAgW3RpbWUgOiBdXG4gKiAgICAgIG1ldGhvZCA6IFwiZGlzdGFuY2VcIixcbiAqICAgICAgZXhjbHVzaW9ucyA6IFtcIkJyaWRnZVwiLCBcIlR1bm5lbFwiLCBcIlRvbGxcIl0sXG4gKiAgICAgIGdyYXBoIDogXCJ2b2l0dXJlXCIsXG4gKiAgICAgIHJldmVyc2UgOiBmYWxzZSxcbiAqICAgICAgc21vb3RoaW5nIDogZmFsc2UsXG4gKiAgICAgIGhvbGVzIDogZmFsc2VcbiAqICB9O1xuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBQcm9jZXNzSXNvQ3VydmUgKG9wdGlvbnMpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvY2Vzc0lzb0N1cnZlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKF8uZ2V0TWVzc2FnZShcIkNMQVNTX0NPTlNUUlVDVE9SXCIsIFwiUHJvY2Vzc0lzb0N1cnZlXCIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb20gZGUgbGEgY2xhc3NlIChoZXJpdGFnZSlcbiAgICAgKiBGSVhNRSBpbnN0YW5jZSBvdSBjbGFzc2UgP1xuICAgICAqL1xuICAgIHRoaXMuQ0xBU1NOQU1FID0gXCJQcm9jZXNzSXNvQ3VydmVcIjtcblxuICAgIC8vIGFwcGVsIGR1IGNvbnN0cnVjdGV1ciBwYXIgaGVyaXRhZ2VcbiAgICBDb21tb25TZXJ2aWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLmxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoXCJHcC5TZXJ2aWNlcy5Qcm9jZXNzSXNvQ3VydmVcIik7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCJbQ29uc3RydWN0ZXVyIFByb2Nlc3NJc29DdXJ2ZSAob3B0aW9ucyldXCIpO1xuXG4gICAgaWYgKCFvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihfLmdldE1lc3NhZ2UoXCJQQVJBTV9NSVNTSU5HXCIsIFwicG9zaXRpb25cIikpO1xuICAgIH1cblxuICAgIC8vIG9uIGxhbmNlIHVuZSBleGNlcHRpb24gYWZpbiBkJ2V2aXRlciBhdSBzZXJ2aWNlIGRlIGxlIGZhaXJlLi4uXG4gICAgaWYgKG9wdGlvbnMucG9zaXRpb24ueCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXy5nZXRNZXNzYWdlKFwiUEFSQU1fTUlTU0lOR1wiLCBcInBvc2l0aW9uLnhcIikpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnBvc2l0aW9uLnkgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKF8uZ2V0TWVzc2FnZShcIlBBUkFNX01JU1NJTkdcIiwgXCJwb3NpdGlvbi55XCIpKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMudGltZSAmJiAhb3B0aW9ucy5kaXN0YW5jZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJhbWV0ZXIgKHMpICdkaXN0YW5jZScgbWlzc2luZy4gUGFyYW1ldGVyIHRpbWUgdG8gY2FsY3VsYXRlIGFuIGlzb2Nocm9uZSwgcGFyYW1ldGVyIGRpc3RhbmNlIGZvciBhbiBpc29kaXN0YW5jZVwiKTtcbiAgICB9XG5cbiAgICAvLyBzaSBvbiBhIHF1ZSBsZSBwYXJhbcOodHJlIFwiZGlzdGFuY2VcIiBlbiBlbnRyw6llLCBvbiBjYWxjdWxlIHVuZSBpc29kaXN0YW5jZS5cbiAgICAvLyBMZSBwYXJhbcOodHJlIFwibcOpdGhvZGVcIiBkb2l0IHBvdXIgYXZvaXIgdW5lIHLDqXBvbnNlIGR1IHNlcnZpY2UsIMOqdHJlIHBhc3PDqSDDoCBcImRpc3RhbmNlXCJcbiAgICBpZiAoIW9wdGlvbnMudGltZSAmJiBvcHRpb25zLmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5tZXRob2QgPSBcImRpc3RhbmNlXCI7XG4gICAgICAgIC8vIG9uIHN1cHByaW1lIGwnw6l2ZW50dWVsIGF0dHJpYnV0IHRpbWUsIHLDqXNpZHUgZCd1biBhcHBlbCBhbnTDqXJpZXVyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudGltZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy50aW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2kgb24gYSBxdWUgbGUgcGFyYW3DqHRyZSBcInRpbWVcIiBlbiBlbnRyw6llLCBvbiBjYWxjdWxlIHVuZSBpc29jaHJvbmUuXG4gICAgLy8gTGUgcGFyYW3DqHRyZSBcIm3DqXRob2RlXCIgZG9pdCBwb3VyIGF2b2lyIHVuZSByw6lwb25zZSBkdSBzZXJ2aWNlLCDDqnRyZSBwYXNzw6kgw6AgXCJ0aW1lXCJcbiAgICBpZiAob3B0aW9ucy50aW1lICYmICFvcHRpb25zLmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5tZXRob2QgPSBcInRpbWVcIjtcbiAgICAgICAgLy8gb24gc3VwcHJpbWUgbCfDqXZlbnR1ZWwgYXR0cmlidXQgdGltZSwgcsOpc2lkdSBkJ3VuIGFwcGVsIGFudMOpcmlldXJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXN0YW5jZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy5kaXN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGF1IGNhcyBvw7kgb24gYSBuaSBsJ3VuLCBuaSBsJ2F1dHJlLi4uXG4gICAgdGhpcy5vcHRpb25zLm1ldGhvZCA9IHRoaXMub3B0aW9ucy5tZXRob2QgfHwgXCJ0aW1lXCI7XG5cbiAgICAvLyBvcHRpb25zIHBhciBkZWZhdXQgZHUgc2VydmljZVxuICAgIHRoaXMub3B0aW9ucy5leGNsdXNpb25zID0gb3B0aW9ucy5leGNsdXNpb25zIHx8IG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmdyYXBoID0gb3B0aW9ucy5ncmFwaCB8fCBcIlZvaXR1cmVcIjsgLy8gVE9ETyB0ZXN0IGRlIGxhIHZhbGV1ciDDoCBmYWlyZSAhXG4gICAgdGhpcy5vcHRpb25zLnJldmVyc2UgPSBvcHRpb25zLnJldmVyc2UgfHwgZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zLnNtb290aGluZyA9IG9wdGlvbnMuc21vb3RoaW5nIHx8IGZhbHNlO1xuICAgIHRoaXMub3B0aW9ucy5ob2xlcyA9IG9wdGlvbnMuaG9sZXMgfHwgZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zLnNycyA9IG9wdGlvbnMuc3JzIHx8IFwiRVBTRzo0MzI2XCI7XG5cbiAgICAvLyBvbiBwYXNzZSBsJ29wdGlvbiBvdXRwdXRGb3JtYXQgZW4gbWludXNjdWxlcyBhZmluIGQnw6l2aXRlciBkZXMgZXhjZXB0aW9ucy5cbiAgICB0aGlzLm9wdGlvbnMub3V0cHV0Rm9ybWF0ID0gKHR5cGVvZiBvcHRpb25zLm91dHB1dEZvcm1hdCA9PT0gXCJzdHJpbmdcIikgPyBvcHRpb25zLm91dHB1dEZvcm1hdC50b0xvd2VyQ2FzZSgpIDogXCJqc29uXCI7XG5cbiAgICAvLyBnZXN0aW9uIGRlIGwndXJsIGR1IHNlcnZpY2UgcGFyIGRlZmF1dFxuICAgIC8vIHNpIGwndXJsIG4nZXN0IHBhcyByZW5zZWlnbsOpZSwgaWwgZmF1dCB1dGlsaXNlciBsZXMgdXJscyBwYXIgZGVmYXV0XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2VydmVyVXJsKSB7XG4gICAgICAgIHZhciBsc3RVcmxCeURlZmF1bHQgPSBEZWZhdWx0VXJsU2VydmljZS5Qcm9jZXNzSXNvQ3VydmUudXJsKHRoaXMub3B0aW9ucy5hcGlLZXkpO1xuXG4gICAgICAgIHZhciB1cmxGb3VuZCA9IGxzdFVybEJ5RGVmYXVsdFtcImlzb1wiICsgXCItXCIgKyB0aGlzLm9wdGlvbnMub3V0cHV0Rm9ybWF0XTtcbiAgICAgICAgaWYgKCF1cmxGb3VuZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXJsIGJ5IGRlZmF1bHQgbm90IGZvdW5kICFcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zLnNlcnZlclVybCA9IHVybEZvdW5kO1xuICAgICAgICB0aGlzLmxvZ2dlci50cmFjZShcIlNlcnZldXIgVVJMIHBhciBkZWZhdXQgOiBcIiArIHRoaXMub3B0aW9ucy5zZXJ2ZXJVcmwpO1xuICAgIH1cblxuICAgIC8vIGdlc3Rpb24gZHUgdHlwZSBkZSBzZXJ2aWNlXG4gICAgLy8gc2kgbCdleHRlbnNpb24gZGUgbCd1cmwgZXN0IC5qc29uIG91IC54bWwsIG9uIHN1cmNoYXJnZSBsZSBmb3JtYXQgZGUgc29ydGllIChvdXRwdXRGb3JtYXQpXG4gICAgdmFyIGlkeCA9IHRoaXMub3B0aW9ucy5zZXJ2ZXJVcmwubGFzdEluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgIHZhciBleHRlbnNpb24gPSB0aGlzLm9wdGlvbnMuc2VydmVyVXJsLnN1YnN0cmluZyhpZHggKyAxKTtcbiAgICAgICAgaWYgKGV4dGVuc2lvbiAmJiBleHRlbnNpb24ubGVuZ3RoIDwgNSkgeyAvLyBGSVhNRSBleHRlbnNpb24gZGUgbW9pbnMgZGUgNCBjYXIuIC4uLlxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UoXCJTZXJ2ZXVyIEV4dGVuc2lvbiBVUkwgOiBcIiArIGV4dGVuc2lvbik7XG4gICAgICAgICAgICBzd2l0Y2ggKGV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwieG1sXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vdXRwdXRGb3JtYXQgPSBleHRlbnNpb24udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHlwZSBvZiBzZXJ2aWNlIDogdW5rbm93biBvciB1bnN1cHBvcnRlZCAoanNvbiBvciB4bWwpICFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQGxlbmRzIG1vZHVsZTpQcm9jZXNzSXNvQ3VydmUjXG4gKi9cblByb2Nlc3NJc29DdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbW1vblNlcnZpY2UucHJvdG90eXBlLCB7XG4gICAgLy8gdG9kb1xuICAgIC8vIGdldHRlci9zZXR0ZXJcbn0pO1xuXG4vKlxuICogQ29uc3RydWN0ZXVyIChhbGlhcylcbiAqL1xuUHJvY2Vzc0lzb0N1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFByb2Nlc3NJc29DdXJ2ZTtcblxuLyoqXG4gKiBDcsOpYXRpb24gZGUgbGEgcmVxdcOqdGUgKG92ZXJ3cml0ZSlcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvciAgIC0gY2FsbGJhY2sgZGVzIGVycmV1cnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN1Y2Nlc3MgLSBjYWxsYmFja1xuICovXG5Qcm9jZXNzSXNvQ3VydmUucHJvdG90eXBlLmJ1aWxkUmVxdWVzdCA9IGZ1bmN0aW9uIChlcnJvciwgc3VjY2Vzcykge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBvSXNvQ3VydmUgPSBuZXcgUHJvY2Vzc0lzb0N1cnZlUmVxdWVzdCh0aGlzLm9wdGlvbnMpO1xuICAgICAgICBpZiAoIW9Jc29DdXJ2ZS5wcm9jZXNzUmVxdWVzdFN0cmluZygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXy5nZXRNZXNzYWdlKFwiU0VSVklDRV9SRVFVRVNUX0JVSUxEXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVxdWVzdCA9IG9Jc29DdXJ2ZS5yZXF1ZXN0U3RyaW5nO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3IuY2FsbCh0aGlzLCBuZXcgRXJyb3JTZXJ2aWNlKGUubWVzc2FnZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3VjY2Vzcy5jYWxsKHRoaXMsIHRoaXMucmVxdWVzdCk7XG59O1xuXG4vKipcbiAqIChvdmVyd3JpdGUpXG4gKiBBbmFseXNlIGRlIGxhIHJlcG9uc2VcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkVycm9yICAgLSBjYWxsYmFjayBkZXMgZXJyZXVyc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb25TdWNjZXNzIC0gY2FsbGJhY2sgZGUgc3VjY8OocyBkZSBsJ2FuYWx5c2UgZGUgbGEgcsOpcG9uc2VcbiAqL1xuUHJvY2Vzc0lzb0N1cnZlLnByb3RvdHlwZS5hbmFseXplUmVzcG9uc2UgPSBmdW5jdGlvbiAob25FcnJvciwgb25TdWNjZXNzKSB7XG4gICAgaWYgKHRoaXMucmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICByZXNwb25zZSA6IHRoaXMucmVzcG9uc2UsXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXQgOiB0aGlzLm9wdGlvbnMub3V0cHV0Rm9ybWF0LFxuICAgICAgICAgICAgcmF3UmVzcG9uc2UgOiB0aGlzLm9wdGlvbnMucmF3UmVzcG9uc2UsXG4gICAgICAgICAgICBvblN1Y2Nlc3MgOiBvblN1Y2Nlc3MsXG4gICAgICAgICAgICBvbkVycm9yIDogb25FcnJvcixcbiAgICAgICAgICAgIHNjb3BlIDogdGhpc1xuICAgICAgICB9O1xuXG4gICAgICAgIFByb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlRmFjdG9yeS5idWlsZChvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvbkVycm9yLmNhbGwodGhpcywgbmV3IEVycm9yU2VydmljZShfLmdldE1lc3NhZ2UoXCJTRVJWSUNFX1JFU1BPTlNFX0VNUFRZXCIpKSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc0lzb0N1cnZlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/ProcessIsoCurve.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/ProcessIsoCurveRequest.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/ProcessIsoCurveRequest.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _model_ProcessIsoCurveParam__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/ProcessIsoCurveParam */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/model/ProcessIsoCurveParam.js\");\n\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des requêtes sur le service de calcul d'isoschrone/isodistance.\n *  Les requêtes peuvent être en mode GET ou POST,\n *  et le format de sorti est en JSON ou en XML.\n *\n * @constructor\n * @alias Gp.Services.ProcessIsoCurve.Request.ProcessIsoCurveRequest\n * @param {Object} options - options\n *\n * @example\n * var options = {\n *      httpMethod : 'GET', // GET|POST\n *      // spécifique au service\n *      exclusions : ['Bridge', 'Tunnel'],\n *      position : {\n *          x : 2.3242664298058053,\n *          y : 48.86118017324745\n *      },\n *      graph : \"Voiture\",\n *      method : 'time',\n *      time : 1000, //distance : 200\n *      reverse : false,\n *      smoothing : false,\n *      holes : false,\n *      srs : 'EPSG:4326'\n *  };\n *\n * try {\n *\n *      var oIsoCurve = new ProcessIsoCurveRequest (options);\n *      if (!oIsoCurve.processRequestString ()) {\n *          // error\n *      }\n *\n *      var request = oIsoCurve.requestString;\n *\n * } catch (e) {\n *      // error\n * }\n * @private\n */\nfunction ProcessIsoCurveRequest (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"ProcessIsoCurveRequest\");\n    this.logger.trace(\"[Constructeur ProcessIsoCurveRequest ()]\");\n\n    if (!(this instanceof ProcessIsoCurveRequest)) {\n        throw new TypeError(\"ProcessIsoCurveRequest constructor cannot be called as a function.\");\n    }\n\n    // existance des options\n    if (!options) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"options\"));\n    }\n\n    /**\n     * Liste des options\n     */\n    this.settings = options;\n\n    /**\n     * Mode HTPP.\n     * Par defaut, \"GET\".\n     * @type {String}\n     */\n    this.mode = this.settings.httpMethod || \"GET\";\n}\n\nProcessIsoCurveRequest.prototype = {\n\n    /**\n     * @lends module:ProcessIsoCurveRequest#\n     */\n\n    /**\n     * Requête\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : ProcessIsoCurveRequest,\n\n    /**\n     * Template de la requête (POST)\n     * * __X__ __Y__ __SRS__ __GRAPHNAME__ __METHOD__  (obligatoire)\n     * * __REVERSE__ __SMOOTHING__ __HOLES__           (par defaut)\n     * * __TIME__ __TIMEVALUE__                        (choix)\n     * * __DISTANCE__ __DISTANCEVALUE__                (choix)\n     * * __EXCLUSIONS__ __EXCLUSIONFEATURE__ __EXCLUSIONVALUE__ (optionnel)\n     * * __PROFIL__ __PROFILID__ __PROFILNAME__                 (très optionnel)\n     * * __ID__ __IDVALUE__                                     (très optionnel)\n     */\n    template : {\n        container : \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n            \"<isochroneRequest>\\n\" +\n            \"__ID__\" +\n            \"\\t<location>\\n\" +\n            \"\\t\\t<x>__X__</x>\\n\" +\n            \"\\t\\t<y>__Y__</y>\\n\" +\n            \"\\t</location>\\n\" +\n            \"\\t<srs>__SRS__</srs>\\n\" +\n            \"\\t<graphName>__GRAPHNAME__</graphName>\\n\" +\n            \"__PROFIL__\" +\n            \"__EXCLUSIONS__\" +\n            \"\\t<method>__METHOD__</method>\\n\" +\n            \"__TIME__\" +\n            \"__DISTANCE__\" +\n            \"\\t<reverse>__REVERSE__</reverse>\\n\" +\n            \"\\t<smoothing>__SMOOTHING__</smoothing>\\n\" +\n            \"\\t<holes>__HOLES__</holes>\\n\" +\n            \"</isochroneRequest>\",\n        id : \"\\t<id>__IDVALUE__</id>\\n\",\n        profil : \"\\t<profileId>__PROFILID__</profileId>\\n\" + \"\\t<profileName>__PROFILNAME__</profileName>\\n\",\n        exclusions : {\n            container : \"\\t<exclusions>\\n\" +\n                \"__EXCLUSIONFEATURE__\\n\" +\n                \"\\t</exclusions>\\n\",\n            feature : \"\\t\\t<exclusion>__EXCLUSIONVALUE__</exclusion>\"\n        },\n        time : \"\\t<time>__TIMEVALUE__</time>\\n\",\n        distance : \"\\t<distance>__DISTANCEVALUE__</distance>\\n\"\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out :\n     *   //  (http://wxs.ign.fr/KEY/isochrone/isochrone.json?)\n     *   //  location=&\n     *   //  time=& ou distance=&\n     *   //  method=\"DISTANCE|TIME\"&\n     *   //  graph=Pieton&\n     *   //  graphName=Pieton&\n     *   //  exclusions=&\n     *   //  reverse=10&\n     *   //  smoothing=&\n     *   //  holes=&\n     *   //  srs=\n     *\n     * // POST out :\n     *   // <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     *   // <isochroneRequest>\n     *   //   <id>1</id>\n     *   //   <location>\n     *   //     <x>-1.557189</x>\n     *   //     <y>47.217122</y>\n     *   //   </location>\n     *   //   <srs></srs>\n     *   //   <graphName></graphName>\n     *   //   <profileId></profileId>\n     *   //   <profileName></profileName>\n     *   //   <exclusions>\n     *   //     <exclusion></exclusion>\n     *   //     <exclusion></exclusion>\n     *   //   </exclusions>\n     *   //   <method></method>\n     *   //   <time>50</time>\n     *   //   <distance></distance>\n     *   //   <reverse></reverse>\n     *   //   <smoothing></smoothing>\n     *   //   <holes></holes>\n     *   // </isochroneRequest>\n     *\n     * @returns {String} request\n     */\n    processRequestString : function () {\n        var request = \"\";\n        var i = 0;\n\n        switch (this.mode) {\n            case \"GET\":\n                this.logger.trace(\"Process GET Request\");\n\n                // Mapping des options avec le service de l'API REST\n                var oParams = new _model_ProcessIsoCurveParam__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.settings);\n                var params = oParams.getParams();\n\n                for (i = 0; i < params.length; i++) {\n                    var o = params[i];\n                    if (request) {\n                        request += \"&\";\n                    }\n                    request += o.k + \"=\" + o.v;\n                }\n\n                break;\n\n            case \"POST\":\n                this.logger.trace(\"Process POST Request\");\n\n                request = this.template.container;\n\n                // options non prises en compte car non implémentées !\n                // clean : id\n                request = request.replace(/__ID__/g, \"\");\n                // clean : profil\n                request = request.replace(/__PROFIL__/g, \"\");\n\n                // options obligatoires\n                request = request.replace(/__X__/g, this.settings.position.x);\n                request = request.replace(/__Y__/g, this.settings.position.y);\n                request = request.replace(/__GRAPHNAME__/g, this.settings.graph);\n\n                // options par defaut\n                request = request.replace(/__SRS__/g, this.settings.srs);\n                request = request.replace(/__SMOOTHING__/g, this.settings.smoothing);\n                request = request.replace(/__HOLES__/g, this.settings.holes);\n                request = request.replace(/__REVERSE__/g, this.settings.reverse);\n\n                // options conditionnelles\n\n                // exclusions\n                if (this.settings.exclusions) {\n                    var tmplExclusions = this.template.exclusions.container;\n                    var exclusions = [];\n                    for (i = 0; i < this.settings.exclusions.length; i++) {\n                        var tmplFeature = this.template.exclusions.feature;\n                        tmplFeature = tmplFeature.replace(/__EXCLUSIONVALUE__/, this.settings.exclusions[i]);\n                        exclusions.push(tmplFeature);\n                    }\n                    tmplExclusions = tmplExclusions.replace(/__EXCLUSIONFEATURE__/, exclusions.join(\"\\n\"));\n                    request = request.replace(/__EXCLUSIONS__/g, tmplExclusions);\n                }\n                // clean exclusions\n                request = request.replace(/__EXCLUSIONS__/g, \"\");\n\n                // distance\n                if (this.settings.distance) {\n                    var tmplDistance = this.template.distance;\n                    tmplDistance = tmplDistance.replace(/__DISTANCEVALUE__/g, this.settings.distance);\n                    request = request.replace(/__DISTANCE__/g, tmplDistance);\n                    // method\n                    request = request.replace(/__METHOD__/g, \"distance\");\n                }\n                // clean\n                request = request.replace(/__DISTANCE__/g, \"\");\n\n                // time\n                if (this.settings.time) {\n                    var tmplTime = this.template.time;\n                    tmplTime = tmplTime.replace(/__TIMEVALUE__/g, this.settings.time);\n                    request = request.replace(/__TIME__/g, tmplTime);\n                    // method\n                    request = request.replace(/__METHOD__/g, \"time\");\n                }\n                // clean\n                request = request.replace(/__TIME__/g, \"\");\n                break;\n\n            default:\n                this.logger.error(\"No other HTTP method supported by the service !\");\n        }\n\n        this.logger.trace(request);\n        this.requestString = request;\n\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProcessIsoCurveRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/ProcessIsoCurveRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/model/ProcessIsoCurveParam.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/model/ProcessIsoCurveParam.js ***!
  \**************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n\n/**\n * @classdesc\n *\n * Classe de gestion des param. des requêtes du service de calcul des iso.\n * Permet le mapping avec les options du service.\n *\n * @constructor\n * @alias Gp.Services.ProcessIsoCurve.Request.ProcessIsoCurveParam\n * @param {Object} options - options\n * @private\n *\n */\nfunction ProcessIsoCurveParam (options) {\n    if (!(this instanceof ProcessIsoCurveParam)) {\n        throw new TypeError(\"ProcessIsoCurveParam constructor cannot be called as a function.\");\n    }\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur ProcessIsoCurveParam ()]\");\n\n    /**\n     * Options en paramêtres du constructeur.\n     */\n    this.options = options || {};\n\n    // mapping des options avec l'API REST\n\n    /** Identifiant de l’isochrone */\n    this.id = this.options.id;\n\n    /** Coordonnées de départ (ou arrivée si le reverse est à true). */\n    this.location = this.options.position;\n\n    /** projection (code EPSG comme epsg:4326 ou wgs84) */\n    this.srs = this.options.srs;\n\n    /**\n     * Profil de véhicule à utiliser pour le calcul.\n     * Voiture ou Pieton\n     */\n    this.graphName = this.options.graph;\n\n    /**\n     * Identifiant et nom du véhicule\n     * FIXME non utilisé\n     */\n    this.profileId = this.options.profileId || null; // TODO !\n    this.profileName = this.options.profileName || null; // TODO !\n\n    /** Liste des règles de restrictions à utiliser */\n    this.exclusions = this.options.exclusions;\n\n    this.reverse = this.options.reverse;\n    this.smoothing = this.options.smoothing;\n    this.holes = this.options.holes;\n\n    /**\n     * \"time\" pour isochrone ou \"distance\" for isodistance.\n     * Par defaut, time...\n     */\n    var value = this.options.method;\n    switch (value) {\n        case \"time\":\n            this.method = \"time\";\n            this.time = this.options.time;\n            break;\n        case \"distance\":\n            this.method = \"distance\";\n            this.distance = this.options.distance;\n            break;\n        default:\n            this.logger.warn(\"Par defaut, on calcule un isochrone !\");\n            this.method = \"time\";\n    }\n}\n\n/**\n * CLASSNAME\n */\nProcessIsoCurveParam.CLASSNAME = \"ProcessIsoCurveParam\";\n\nProcessIsoCurveParam.prototype = {\n\n    /**\n     * @lends module:ProcessIsoCurveParam#\n     */\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : ProcessIsoCurveParam,\n\n    /**\n     * Retourne la liste des exclusions\n     * @returns {String} x,y\n     */\n    getLocation : function () {\n        return this.location.x + \",\" + this.location.y;\n    },\n\n    /**\n     * Retourne la liste des exclusions\n     * @returns {String} exclusions\n     */\n    getExclusions : function () {\n        return this.exclusions.join(\";\");\n    }\n};\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]} KVP\n */\nProcessIsoCurveParam.prototype.getParams = function () {\n    var map = [];\n\n    map.push({\n        k : \"location\",\n        v : this.getLocation()\n    });\n\n    map.push({\n        k : \"smoothing\",\n        v : this.smoothing\n    });\n\n    map.push({\n        k : \"holes\",\n        v : this.holes\n    });\n\n    map.push({\n        k : \"reverse\",\n        v : this.reverse\n    });\n\n    map.push({\n        k : \"method\",\n        v : this.method\n    });\n\n    if (this.time) {\n        map.push({\n            k : \"time\",\n            v : this.time\n        });\n    }\n\n    if (this.distance) {\n        map.push({\n            k : \"distance\",\n            v : this.distance\n        });\n    }\n\n    map.push({\n        k : \"graphName\",\n        v : this.graphName\n    });\n\n    if (this.exclusions) {\n        map.push({\n            k : \"exclusions\",\n            v : this.getExclusions()\n        });\n    }\n\n    if (this.srs) {\n        map.push({\n            k : \"srs\",\n            v : this.srs\n        });\n    }\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProcessIsoCurveParam);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUHJvY2Vzc0lzb0N1cnZlL1JlcXVlc3QvbW9kZWwvUHJvY2Vzc0lzb0N1cnZlUGFyYW0uanM/MjU4YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDdUQ7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLDhEQUFNO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQsd0RBQXdEOztBQUV4RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRWUsbUZBQW9CLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL1Byb2Nlc3NJc29DdXJ2ZS9SZXF1ZXN0L21vZGVsL1Byb2Nlc3NJc29DdXJ2ZVBhcmFtLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKlxuICogQ2xhc3NlIGRlIGdlc3Rpb24gZGVzIHBhcmFtLiBkZXMgcmVxdcOqdGVzIGR1IHNlcnZpY2UgZGUgY2FsY3VsIGRlcyBpc28uXG4gKiBQZXJtZXQgbGUgbWFwcGluZyBhdmVjIGxlcyBvcHRpb25zIGR1IHNlcnZpY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuUHJvY2Vzc0lzb0N1cnZlLlJlcXVlc3QuUHJvY2Vzc0lzb0N1cnZlUGFyYW1cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uc1xuICogQHByaXZhdGVcbiAqXG4gKi9cbmZ1bmN0aW9uIFByb2Nlc3NJc29DdXJ2ZVBhcmFtIChvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb2Nlc3NJc29DdXJ2ZVBhcmFtKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJvY2Vzc0lzb0N1cnZlUGFyYW0gY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIltDb25zdHJ1Y3RldXIgUHJvY2Vzc0lzb0N1cnZlUGFyYW0gKCldXCIpO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBlbiBwYXJhbcOqdHJlcyBkdSBjb25zdHJ1Y3RldXIuXG4gICAgICovXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIG1hcHBpbmcgZGVzIG9wdGlvbnMgYXZlYyBsJ0FQSSBSRVNUXG5cbiAgICAvKiogSWRlbnRpZmlhbnQgZGUgbOKAmWlzb2Nocm9uZSAqL1xuICAgIHRoaXMuaWQgPSB0aGlzLm9wdGlvbnMuaWQ7XG5cbiAgICAvKiogQ29vcmRvbm7DqWVzIGRlIGTDqXBhcnQgKG91IGFycml2w6llIHNpIGxlIHJldmVyc2UgZXN0IMOgIHRydWUpLiAqL1xuICAgIHRoaXMubG9jYXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG5cbiAgICAvKiogcHJvamVjdGlvbiAoY29kZSBFUFNHIGNvbW1lIGVwc2c6NDMyNiBvdSB3Z3M4NCkgKi9cbiAgICB0aGlzLnNycyA9IHRoaXMub3B0aW9ucy5zcnM7XG5cbiAgICAvKipcbiAgICAgKiBQcm9maWwgZGUgdsOpaGljdWxlIMOgIHV0aWxpc2VyIHBvdXIgbGUgY2FsY3VsLlxuICAgICAqIFZvaXR1cmUgb3UgUGlldG9uXG4gICAgICovXG4gICAgdGhpcy5ncmFwaE5hbWUgPSB0aGlzLm9wdGlvbnMuZ3JhcGg7XG5cbiAgICAvKipcbiAgICAgKiBJZGVudGlmaWFudCBldCBub20gZHUgdsOpaGljdWxlXG4gICAgICogRklYTUUgbm9uIHV0aWxpc8OpXG4gICAgICovXG4gICAgdGhpcy5wcm9maWxlSWQgPSB0aGlzLm9wdGlvbnMucHJvZmlsZUlkIHx8IG51bGw7IC8vIFRPRE8gIVxuICAgIHRoaXMucHJvZmlsZU5hbWUgPSB0aGlzLm9wdGlvbnMucHJvZmlsZU5hbWUgfHwgbnVsbDsgLy8gVE9ETyAhXG5cbiAgICAvKiogTGlzdGUgZGVzIHLDqGdsZXMgZGUgcmVzdHJpY3Rpb25zIMOgIHV0aWxpc2VyICovXG4gICAgdGhpcy5leGNsdXNpb25zID0gdGhpcy5vcHRpb25zLmV4Y2x1c2lvbnM7XG5cbiAgICB0aGlzLnJldmVyc2UgPSB0aGlzLm9wdGlvbnMucmV2ZXJzZTtcbiAgICB0aGlzLnNtb290aGluZyA9IHRoaXMub3B0aW9ucy5zbW9vdGhpbmc7XG4gICAgdGhpcy5ob2xlcyA9IHRoaXMub3B0aW9ucy5ob2xlcztcblxuICAgIC8qKlxuICAgICAqIFwidGltZVwiIHBvdXIgaXNvY2hyb25lIG91IFwiZGlzdGFuY2VcIiBmb3IgaXNvZGlzdGFuY2UuXG4gICAgICogUGFyIGRlZmF1dCwgdGltZS4uLlxuICAgICAqL1xuICAgIHZhciB2YWx1ZSA9IHRoaXMub3B0aW9ucy5tZXRob2Q7XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlIFwidGltZVwiOlxuICAgICAgICAgICAgdGhpcy5tZXRob2QgPSBcInRpbWVcIjtcbiAgICAgICAgICAgIHRoaXMudGltZSA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkaXN0YW5jZVwiOlxuICAgICAgICAgICAgdGhpcy5tZXRob2QgPSBcImRpc3RhbmNlXCI7XG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gdGhpcy5vcHRpb25zLmRpc3RhbmNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwiUGFyIGRlZmF1dCwgb24gY2FsY3VsZSB1biBpc29jaHJvbmUgIVwiKTtcbiAgICAgICAgICAgIHRoaXMubWV0aG9kID0gXCJ0aW1lXCI7XG4gICAgfVxufVxuXG4vKipcbiAqIENMQVNTTkFNRVxuICovXG5Qcm9jZXNzSXNvQ3VydmVQYXJhbS5DTEFTU05BTUUgPSBcIlByb2Nlc3NJc29DdXJ2ZVBhcmFtXCI7XG5cblByb2Nlc3NJc29DdXJ2ZVBhcmFtLnByb3RvdHlwZSA9IHtcblxuICAgIC8qKlxuICAgICAqIEBsZW5kcyBtb2R1bGU6UHJvY2Vzc0lzb0N1cnZlUGFyYW0jXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RldXIgKGFsaWFzKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIDogUHJvY2Vzc0lzb0N1cnZlUGFyYW0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRvdXJuZSBsYSBsaXN0ZSBkZXMgZXhjbHVzaW9uc1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHgseVxuICAgICAqL1xuICAgIGdldExvY2F0aW9uIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi54ICsgXCIsXCIgKyB0aGlzLmxvY2F0aW9uLnk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldG91cm5lIGxhIGxpc3RlIGRlcyBleGNsdXNpb25zXG4gICAgICogQHJldHVybnMge1N0cmluZ30gZXhjbHVzaW9uc1xuICAgICAqL1xuICAgIGdldEV4Y2x1c2lvbnMgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4Y2x1c2lvbnMuam9pbihcIjtcIik7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUYWJsZWF1IGRlIGNsZWZzL3ZhbGV1cnMgcG91ciBwYXJhbS5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0W119IEtWUFxuICovXG5Qcm9jZXNzSXNvQ3VydmVQYXJhbS5wcm90b3R5cGUuZ2V0UGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXAgPSBbXTtcblxuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwibG9jYXRpb25cIixcbiAgICAgICAgdiA6IHRoaXMuZ2V0TG9jYXRpb24oKVxuICAgIH0pO1xuXG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJzbW9vdGhpbmdcIixcbiAgICAgICAgdiA6IHRoaXMuc21vb3RoaW5nXG4gICAgfSk7XG5cbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcImhvbGVzXCIsXG4gICAgICAgIHYgOiB0aGlzLmhvbGVzXG4gICAgfSk7XG5cbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcInJldmVyc2VcIixcbiAgICAgICAgdiA6IHRoaXMucmV2ZXJzZVxuICAgIH0pO1xuXG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJtZXRob2RcIixcbiAgICAgICAgdiA6IHRoaXMubWV0aG9kXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy50aW1lKSB7XG4gICAgICAgIG1hcC5wdXNoKHtcbiAgICAgICAgICAgIGsgOiBcInRpbWVcIixcbiAgICAgICAgICAgIHYgOiB0aGlzLnRpbWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGlzdGFuY2UpIHtcbiAgICAgICAgbWFwLnB1c2goe1xuICAgICAgICAgICAgayA6IFwiZGlzdGFuY2VcIixcbiAgICAgICAgICAgIHYgOiB0aGlzLmRpc3RhbmNlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwiZ3JhcGhOYW1lXCIsXG4gICAgICAgIHYgOiB0aGlzLmdyYXBoTmFtZVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuZXhjbHVzaW9ucykge1xuICAgICAgICBtYXAucHVzaCh7XG4gICAgICAgICAgICBrIDogXCJleGNsdXNpb25zXCIsXG4gICAgICAgICAgICB2IDogdGhpcy5nZXRFeGNsdXNpb25zKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3JzKSB7XG4gICAgICAgIG1hcC5wdXNoKHtcbiAgICAgICAgICAgIGsgOiBcInNyc1wiLFxuICAgICAgICAgICAgdiA6IHRoaXMuc3JzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9jZXNzSXNvQ3VydmVQYXJhbTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Request/model/ProcessIsoCurveParam.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/ProcessIsoCurveResponseFactory.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/ProcessIsoCurveResponseFactory.js ***!
  \*******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Formats_XML__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Formats/XML */ \"./node_modules/geoportal-access-lib/src/Formats/XML.js\");\n/* harmony import */ var _Formats_WKT__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../Formats/WKT */ \"./node_modules/geoportal-access-lib/src/Formats/WKT.js\");\n/* harmony import */ var _Formats_ProcessIsoCurveResponseReader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Formats/ProcessIsoCurveResponseReader */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Formats/ProcessIsoCurveResponseReader.js\");\n/* harmony import */ var _model_ProcessIsoCurveResponse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./model/ProcessIsoCurveResponse */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/model/ProcessIsoCurveResponse.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module ProcessIsoCurveResponseFactory\n * @alias Gp.Services.ProcessIsoCurve.Response.ProcessIsoCurveResponseFactory\n * @private\n */\n\n\n\n\n\n\n\n\nvar ProcessIsoCurveResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant ProcessIsoCurve\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"ProcessIsoCurveResponseFactory\");\n        logger.trace([\"ProcessIsoCurveResponseFactory::build()\"]);\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                switch (options.outputFormat) {\n                    case \"xml\":\n                        logger.trace(\"analyze response : xml\");\n\n                        try {\n                            var p = new _Formats_XML__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                                reader : _Formats_ProcessIsoCurveResponseReader__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n                            });\n\n                            // FIXME : mode XHR ne retourne que des string ? JSONP aussi à ce niveau ?\n                            if (typeof options.response === \"string\") {\n                                p.setXMLString(options.response);\n                            } else {\n                                p.setXMLDoc(options.response);\n                            }\n\n                            data = p.parse();\n\n                            if (!data) {\n                                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION_2\"));\n                            }\n                        } catch (e) {\n                            var message = e.message;\n                            message += \"\\n (raw response service : '\" + options.response + \"')\";\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", message),\n                                status : 200,\n                                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        break;\n\n                    case \"json\":\n                        logger.trace(\"analyze response : json\");\n\n                        var JSONResponse;\n                        if (typeof options.response === \"string\") {\n                            JSONResponse = JSON.parse(options.response);\n                        } else {\n                            JSONResponse = options.response;\n                        }\n\n                        // analyse de la reponse\n                        if (JSONResponse.status === \"OK\" || JSONResponse.status === \"ok\") {\n                            // création de l'objet de réponse\n                            data = new _model_ProcessIsoCurveResponse__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n\n                            // remplissage de l'objet créé avec les attribtuts de la réponse du service\n                            if (data) {\n                                data.time = JSONResponse.time;\n                                data.distance = JSONResponse.distance;\n                                data.message = JSONResponse.message;\n                                data.id = JSONResponse.id;\n                                data.srs = JSONResponse.srs;\n                                // callback de la reponse\n                                var onWKTSuccess = function (json) {\n                                    data.geometry = json;\n                                };\n                                // callback d'erreur\n                                var onWKTError = function () {\n                                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_FORMAT\", \"wktGeometry\")\n                                    }));\n                                };\n                                if (data.hasOwnProperty(\"geometry\")) {\n                                    _Formats_WKT__WEBPACK_IMPORTED_MODULE_4__[\"default\"].toJson(JSONResponse.wktGeometry, onWKTSuccess, onWKTError);\n                                    if (!data.geometry) {\n                                        return;\n                                    }\n                                }\n                                var coords = JSONResponse.location.split(\",\");\n                                if (data.location) {\n                                    data.location.x = coords[0];\n                                    data.location.y = coords[1];\n                                }\n                            } else {\n                                options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE\", options.response)));\n                                return;\n                            }\n                        } else if (JSONResponse.status === \"ERROR\" || JSONResponse.status === \"error\") {\n                            // JSHint bug if var message is used !?\n                            var mess = JSONResponse.message;\n                            mess += \"\\n (raw response service : '\" + JSONResponse + \"')\";\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", mess)));\n                            return;\n                        }\n                        break;\n\n                    default:\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_FORMAT\", \"json\", \"xml\")));\n                        return;\n                }\n\n                // info : en cas de problèmes de droits (clé invalide ou autre), la réponse est au format XML !!\n                // ex. <ExceptionReport><Exception exceptionCode=\"MissingParameter\">Key does not exist or has expired</Exception></ExceptionReport>\n                // mais le statut est 403, l'erreur est donc remontée plus tôt.\n                if (data && data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            // si la réponse est vide, on appelle le callback d'erreur\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        // si tout s'est bien passé, on appelle le callback de succès\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProcessIsoCurveResponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUHJvY2Vzc0lzb0N1cnZlL1Jlc3BvbnNlL1Byb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlRmFjdG9yeS5qcz9kZTQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ0E7QUFDUTtBQUNyQjtBQUNBO0FBQzhDO0FBQ2Y7O0FBRXRFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4REFBTTtBQUMzQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0Msb0RBQUc7QUFDM0MseUNBQXlDLDhFQUE2QjtBQUN0RSw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsZ0RBQWdELGdFQUFJO0FBQ3BEO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxvRUFBb0UsZ0VBQVk7QUFDaEYsMENBQTBDLGdFQUFJO0FBQzlDO0FBQ0EsdUNBQXVDLGdFQUFZO0FBQ25ELDZCQUE2QjtBQUM3QjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHNFQUF1Qjs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsZ0VBQVk7QUFDeEYsa0RBQWtELGdFQUFJO0FBQ3RELHFDQUFxQztBQUNyQztBQUNBO0FBQ0Esb0NBQW9DLG9EQUFHO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qix3RUFBd0UsZ0VBQVksQ0FBQyxnRUFBSTtBQUN6RjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxnRUFBWSxDQUFDLGdFQUFJO0FBQ3JGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdFQUFnRSxnRUFBWSxDQUFDLGdFQUFJO0FBQ2pGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsZ0VBQVk7QUFDeEUsa0NBQWtDLGdFQUFJO0FBQ3RDLCtCQUErQixnRUFBWTtBQUMzQztBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxvREFBb0QsZ0VBQVksQ0FBQyxnRUFBSTtBQUNyRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLDZGQUE4QixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9Qcm9jZXNzSXNvQ3VydmUvUmVzcG9uc2UvUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2VGYWN0b3J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGYWN0b3J5IHBvdXIgZ8OpbsOpcmVyIHVuZSByZXBvbnNlIEpTT04gw6AgcGFydGlyIGQndW4gWE1MIG91IGQndW4gSlNPTlxuICogKEZhY3RvcnkpXG4gKlxuICogQG1vZHVsZSBQcm9jZXNzSXNvQ3VydmVSZXNwb25zZUZhY3RvcnlcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Qcm9jZXNzSXNvQ3VydmUuUmVzcG9uc2UuUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2VGYWN0b3J5XG4gKiBAcHJpdmF0ZVxuICovXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcbmltcG9ydCBNUmVzIGZyb20gXCIuLi8uLi8uLi9VdGlscy9NZXNzYWdlc1Jlc291cmNlc1wiO1xuaW1wb3J0IEVycm9yU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vRXhjZXB0aW9ucy9FcnJvclNlcnZpY2VcIjtcbmltcG9ydCBYTUwgZnJvbSBcIi4uLy4uLy4uL0Zvcm1hdHMvWE1MXCI7XG5pbXBvcnQgV0tUIGZyb20gXCIuLi8uLi8uLi9Gb3JtYXRzL1dLVFwiO1xuaW1wb3J0IFByb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlUmVhZGVyIGZyb20gXCIuLi9Gb3JtYXRzL1Byb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlUmVhZGVyXCI7XG5pbXBvcnQgUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2UgZnJvbSBcIi4vbW9kZWwvUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2VcIjtcblxudmFyIFByb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlRmFjdG9yeSA9IHtcblxuICAgIC8qKlxuICAgICAqIGludGVyZmFjZSB1bmlxdWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGRlZmluaWVzIGRhbnMgbGUgY29tcG9zYW50IFByb2Nlc3NJc29DdXJ2ZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIHZhciBvcHRpb25zID0ge1xuICAgICAqICAgICAgcmVzcG9uc2UgOlxuICAgICAqICAgICAgb3V0cHV0Rm9ybWF0IDpcbiAgICAgKiAgICAgIHJhd1Jlc3BvbnNlIDpcbiAgICAgKiAgICAgIHNjb3BlIDpcbiAgICAgKiAgICAgIG9uU3VjY2VzcyA6XG4gICAgICogICAgICBvbkVycm9yIDpcbiAgICAgKiAgIH07XG4gICAgICpcbiAgICAgKi9cbiAgICBidWlsZCA6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIC8vIGxvZ2dlclxuICAgICAgICB2YXIgbG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcihcIlByb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlRmFjdG9yeVwiKTtcbiAgICAgICAgbG9nZ2VyLnRyYWNlKFtcIlByb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlRmFjdG9yeTo6YnVpbGQoKVwiXSk7XG5cbiAgICAgICAgdmFyIGRhdGEgPSBudWxsO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yYXdSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcImFuYWx5emUgcmVzcG9uc2UgOiByYXdcIik7XG4gICAgICAgICAgICAgICAgZGF0YSA9IG9wdGlvbnMucmVzcG9uc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5vdXRwdXRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInhtbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKFwiYW5hbHl6ZSByZXNwb25zZSA6IHhtbFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG5ldyBYTUwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIgOiBQcm9jZXNzSXNvQ3VydmVSZXNwb25zZVJlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRklYTUUgOiBtb2RlIFhIUiBuZSByZXRvdXJuZSBxdWUgZGVzIHN0cmluZyA/IEpTT05QIGF1c3NpIMOgIGNlIG5pdmVhdSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlc3BvbnNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuc2V0WE1MU3RyaW5nKG9wdGlvbnMucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuc2V0WE1MRG9jKG9wdGlvbnMucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBwLnBhcnNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1SZXMuZ2V0TWVzc2FnZShcIlNFUlZJQ0VfUkVTUE9OU0VfRVhDRVBUSU9OXzJcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IFwiXFxuIChyYXcgcmVzcG9uc2Ugc2VydmljZSA6ICdcIiArIG9wdGlvbnMucmVzcG9uc2UgKyBcIicpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgOiBNUmVzLmdldE1lc3NhZ2UoXCJTRVJWSUNFX1JFU1BPTlNFX0VYQ0VQVElPTlwiLCBtZXNzYWdlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzIDogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogRXJyb3JTZXJ2aWNlLlRZUEVfU1JWRVJSXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcImFuYWx5emUgcmVzcG9uc2UgOiBqc29uXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgSlNPTlJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlc3BvbnNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTlJlc3BvbnNlID0gSlNPTi5wYXJzZShvcHRpb25zLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTlJlc3BvbnNlID0gb3B0aW9ucy5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5hbHlzZSBkZSBsYSByZXBvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoSlNPTlJlc3BvbnNlLnN0YXR1cyA9PT0gXCJPS1wiIHx8IEpTT05SZXNwb25zZS5zdGF0dXMgPT09IFwib2tcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyw6lhdGlvbiBkZSBsJ29iamV0IGRlIHLDqXBvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IG5ldyBQcm9jZXNzSXNvQ3VydmVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtcGxpc3NhZ2UgZGUgbCdvYmpldCBjcsOpw6kgYXZlYyBsZXMgYXR0cmlidHV0cyBkZSBsYSByw6lwb25zZSBkdSBzZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50aW1lID0gSlNPTlJlc3BvbnNlLnRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGlzdGFuY2UgPSBKU09OUmVzcG9uc2UuZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWVzc2FnZSA9IEpTT05SZXNwb25zZS5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmlkID0gSlNPTlJlc3BvbnNlLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNycyA9IEpTT05SZXNwb25zZS5zcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrIGRlIGxhIHJlcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9uV0tUU3VjY2VzcyA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmdlb21ldHJ5ID0ganNvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGJhY2sgZCdlcnJldXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9uV0tURXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlIDogTVJlcy5nZXRNZXNzYWdlKFwiUEFSQU1fRk9STUFUXCIsIFwid2t0R2VvbWV0cnlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoXCJnZW9tZXRyeVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0tULnRvSnNvbihKU09OUmVzcG9uc2Uud2t0R2VvbWV0cnksIG9uV0tUU3VjY2Vzcywgb25XS1RFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuZ2VvbWV0cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkcyA9IEpTT05SZXNwb25zZS5sb2NhdGlvbi5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxvY2F0aW9uLnggPSBjb29yZHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxvY2F0aW9uLnkgPSBjb29yZHNbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKE1SZXMuZ2V0TWVzc2FnZShcIlNFUlZJQ0VfUkVTUE9OU0VfQU5BTFlTRVwiLCBvcHRpb25zLnJlc3BvbnNlKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChKU09OUmVzcG9uc2Uuc3RhdHVzID09PSBcIkVSUk9SXCIgfHwgSlNPTlJlc3BvbnNlLnN0YXR1cyA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSlNIaW50IGJ1ZyBpZiB2YXIgbWVzc2FnZSBpcyB1c2VkICE/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3MgPSBKU09OUmVzcG9uc2UubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzICs9IFwiXFxuIChyYXcgcmVzcG9uc2Ugc2VydmljZSA6ICdcIiArIEpTT05SZXNwb25zZSArIFwiJylcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKE1SZXMuZ2V0TWVzc2FnZShcIlNFUlZJQ0VfUkVTUE9OU0VfRVhDRVBUSU9OXCIsIG1lc3MpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25FcnJvci5jYWxsKG9wdGlvbnMuc2NvcGUsIG5ldyBFcnJvclNlcnZpY2UoTVJlcy5nZXRNZXNzYWdlKFwiU0VSVklDRV9SRVNQT05TRV9GT1JNQVRcIiwgXCJqc29uXCIsIFwieG1sXCIpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaW5mbyA6IGVuIGNhcyBkZSBwcm9ibMOobWVzIGRlIGRyb2l0cyAoY2zDqSBpbnZhbGlkZSBvdSBhdXRyZSksIGxhIHLDqXBvbnNlIGVzdCBhdSBmb3JtYXQgWE1MICEhXG4gICAgICAgICAgICAgICAgLy8gZXguIDxFeGNlcHRpb25SZXBvcnQ+PEV4Y2VwdGlvbiBleGNlcHRpb25Db2RlPVwiTWlzc2luZ1BhcmFtZXRlclwiPktleSBkb2VzIG5vdCBleGlzdCBvciBoYXMgZXhwaXJlZDwvRXhjZXB0aW9uPjwvRXhjZXB0aW9uUmVwb3J0PlxuICAgICAgICAgICAgICAgIC8vIG1haXMgbGUgc3RhdHV0IGVzdCA0MDMsIGwnZXJyZXVyIGVzdCBkb25jIHJlbW9udMOpZSBwbHVzIHTDtHQuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5leGNlcHRpb25SZXBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlIDogTVJlcy5nZXRNZXNzYWdlKFwiU0VSVklDRV9SRVNQT05TRV9FWENFUFRJT05cIiwgZGF0YS5leGNlcHRpb25SZXBvcnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA6IEVycm9yU2VydmljZS5UWVBFX1NSVkVSUixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA6IDIwMFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzaSBsYSByw6lwb25zZSBlc3QgdmlkZSwgb24gYXBwZWxsZSBsZSBjYWxsYmFjayBkJ2VycmV1clxuICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZShNUmVzLmdldE1lc3NhZ2UoXCJTRVJWSUNFX1JFU1BPTlNFX0VNUFRZXCIpKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaSB0b3V0IHMnZXN0IGJpZW4gcGFzc8OpLCBvbiBhcHBlbGxlIGxlIGNhbGxiYWNrIGRlIHN1Y2PDqHNcbiAgICAgICAgb3B0aW9ucy5vblN1Y2Nlc3MuY2FsbChvcHRpb25zLnNjb3BlLCBkYXRhKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9jZXNzSXNvQ3VydmVSZXNwb25zZUZhY3Rvcnk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/ProcessIsoCurveResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/model/ProcessIsoCurveResponse.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/model/ProcessIsoCurveResponse.js ***!
  \******************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Response object for {@link module:Services~isoCurve Gp.Services.isoCurve ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Float} distance - distance (expressed in meters) used for the request.\n * @property {Float} time - time (expressed in seconds) used for the request.\n * @property {Object} geometry - Geometry (expressed in [GeoJSON]{@link http://geojson.org/}) of the isocurve.\n * @property {String} id - request id (used by underlying webservice).\n * @property {Gp.Point} location - Position of the start or end point used for the request (expressed in \"srs\" coordinates system).\n * @property {String} message - message\n * @property {String} srs - Identifier of the coordinates system used for the isocurve.\n *\n * @namespace\n * @alias Gp.Services.IsoCurveResponse\n *\n */\nfunction ProcessIsoCurveResponse () {\n    if (!(this instanceof ProcessIsoCurveResponse)) {\n        throw new TypeError(\"ProcessIsoCurveResponse constructor cannot be called as a function.\");\n    }\n\n    this.message = null;\n\n    this.id = null;\n\n    this.location = {};\n    this.location.x = null;\n    this.location.y = null;\n\n    this.srs = null;\n\n    this.geometry = null;\n\n    this.time = null;\n\n    this.distance = null;\n}\n\nProcessIsoCurveResponse.prototype = {\n\n    constructor : ProcessIsoCurveResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProcessIsoCurveResponse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUHJvY2Vzc0lzb0N1cnZlL1Jlc3BvbnNlL21vZGVsL1Byb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlLmpzP2Q5OTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBLHdCQUF3Qix1REFBdUQ7QUFDL0U7QUFDQSxjQUFjLE1BQU07QUFDcEIsY0FBYyxNQUFNO0FBQ3BCLGNBQWMsT0FBTyw2Q0FBNkMsMEJBQTBCO0FBQzVGLGNBQWMsT0FBTztBQUNyQixjQUFjLFNBQVM7QUFDdkIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUsc0ZBQXVCLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL1Byb2Nlc3NJc29DdXJ2ZS9SZXNwb25zZS9tb2RlbC9Qcm9jZXNzSXNvQ3VydmVSZXNwb25zZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBSZXNwb25zZSBvYmplY3QgZm9yIHtAbGluayBtb2R1bGU6U2VydmljZXN+aXNvQ3VydmUgR3AuU2VydmljZXMuaXNvQ3VydmUgKCl9IGludm9jYXRpb24gd2hlbiBzdWNjZXNzZnVsLiBSZWNlaXZlZCBhcyB0aGUgYXJndW1lbnQgb2Ygb25TdWNjZXNzIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICpcbiAqIEBwcm9wZXJ0eSB7RmxvYXR9IGRpc3RhbmNlIC0gZGlzdGFuY2UgKGV4cHJlc3NlZCBpbiBtZXRlcnMpIHVzZWQgZm9yIHRoZSByZXF1ZXN0LlxuICogQHByb3BlcnR5IHtGbG9hdH0gdGltZSAtIHRpbWUgKGV4cHJlc3NlZCBpbiBzZWNvbmRzKSB1c2VkIGZvciB0aGUgcmVxdWVzdC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBnZW9tZXRyeSAtIEdlb21ldHJ5IChleHByZXNzZWQgaW4gW0dlb0pTT05de0BsaW5rIGh0dHA6Ly9nZW9qc29uLm9yZy99KSBvZiB0aGUgaXNvY3VydmUuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gaWQgLSByZXF1ZXN0IGlkICh1c2VkIGJ5IHVuZGVybHlpbmcgd2Vic2VydmljZSkuXG4gKiBAcHJvcGVydHkge0dwLlBvaW50fSBsb2NhdGlvbiAtIFBvc2l0aW9uIG9mIHRoZSBzdGFydCBvciBlbmQgcG9pbnQgdXNlZCBmb3IgdGhlIHJlcXVlc3QgKGV4cHJlc3NlZCBpbiBcInNyc1wiIGNvb3JkaW5hdGVzIHN5c3RlbSkuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbWVzc2FnZSAtIG1lc3NhZ2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBzcnMgLSBJZGVudGlmaWVyIG9mIHRoZSBjb29yZGluYXRlcyBzeXN0ZW0gdXNlZCBmb3IgdGhlIGlzb2N1cnZlLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Jc29DdXJ2ZVJlc3BvbnNlXG4gKlxuICovXG5mdW5jdGlvbiBQcm9jZXNzSXNvQ3VydmVSZXNwb25zZSAoKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2UgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLm1lc3NhZ2UgPSBudWxsO1xuXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICB0aGlzLmxvY2F0aW9uID0ge307XG4gICAgdGhpcy5sb2NhdGlvbi54ID0gbnVsbDtcbiAgICB0aGlzLmxvY2F0aW9uLnkgPSBudWxsO1xuXG4gICAgdGhpcy5zcnMgPSBudWxsO1xuXG4gICAgdGhpcy5nZW9tZXRyeSA9IG51bGw7XG5cbiAgICB0aGlzLnRpbWUgPSBudWxsO1xuXG4gICAgdGhpcy5kaXN0YW5jZSA9IG51bGw7XG59XG5cblByb2Nlc3NJc29DdXJ2ZVJlc3BvbnNlLnByb3RvdHlwZSA9IHtcblxuICAgIGNvbnN0cnVjdG9yIDogUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2VcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc0lzb0N1cnZlUmVzcG9uc2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/Response/model/ProcessIsoCurveResponse.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseOLSReader.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseOLSReader.js ***!
  \************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/**\n * Analyse de la reponse OLS\n *\n * @module RouteResponseOLSReader\n * @alias Gp.Services.Route.Formats.RouteResponseOLSReader\n * @todo not yet implemented !\n * @private\n */\n\n\n\n/**\n * Objet RouteResponseOLSReader\n * @member {Object} RouteResponseOLSReader\n *\n * @property {Object} RouteResponseOLSReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} RouteResponseOLSReader.read -  Méthode permettant de lancer la lecture d'une réponse\n *      XML du service de calcul d'itineraire, à l'aide des readers de la classe.\n */\nvar RouteResponseOLSReader = {};\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n * @static\n * @memberof RouteResponseOLSReader\n */\nRouteResponseOLSReader.READERS = {\n    /*\n        // INFO\n        // pas de reponse en JSON pour l'API OLS, uniquement du XML !\n\n        // INFO\n        // Exemple d'erreur du service\n        // <?xml version= \"1.0\" encoding= \"UTF-8\" standalone= \"yes\" ?>\n        // <XLS version=\"1.2\" xsi : schemaLocation = \"http://www.opengis.net/xls http://schemas.opengis.net/ols/1.2/olsAll.xsd\" xmlns : xls = \"http://www.opengis.net/xls\" xmlns= \"http://www.opengis.net/xls\" xmlns : xlsext = \"http://www.opengis.net/xlsext\" xmlns : gml = \"http://www.opengis.net/gml\" // xmlns : xsi = \"http://www.w3.org/2001/XMLSchema-instance\" >\n        // <ResponseHeader>\n        //     <ErrorList>\n        //         <Error message=\"Routing error : Error in smartrouting com.geoconcept.smartrouting.SmartRoutingNativeException : failed to connect waypoint { 48.846577, 2.416907, 0.000000 } failed to connect waypoint { 48.846577, 2.416907, 0.000000 } \" errorCode=\"InternalServerError\"/>\n        //     </ErrorList>\n        // </ResponseHeader>\n        // <Response version= \"1.2\" requestID= \"f8358c74-8aee-4203-90b9-2c70db5996a1\" />\n        // </XLS>\n\n        // INFO\n        // Exemple d'erreur NGinx\n        // <ExceptionReport><Exception exceptionCode=\"MissingParameter\">Resource parameter not found</Exception></ExceptionReport>\n    */\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service de calcul d'itineraire,\n * à l'aide des readers de la classe.\n *\n * @method RouteResponseOLSReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @static\n * @memberof RouteResponseOLSReader\n */\nRouteResponseOLSReader.read = function (root) {\n    // logger\n    var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"RouteResponseOLSReader\");\n    logger.error(\"not yet implemented !\");\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteResponseOLSReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUm91dGUvRm9ybWF0cy9Sb3V0ZVJlc3BvbnNlT0xTUmVhZGVyLmpzPzQwZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW9EOztBQUVwRDtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtKQUErSixnQ0FBZ0MsNkJBQTZCLGdDQUFnQztBQUM1UDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw4REFBTTtBQUN2QjtBQUNBOztBQUVlLHFGQUFzQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9Sb3V0ZS9Gb3JtYXRzL1JvdXRlUmVzcG9uc2VPTFNSZWFkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFuYWx5c2UgZGUgbGEgcmVwb25zZSBPTFNcbiAqXG4gKiBAbW9kdWxlIFJvdXRlUmVzcG9uc2VPTFNSZWFkZXJcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Sb3V0ZS5Gb3JtYXRzLlJvdXRlUmVzcG9uc2VPTFNSZWFkZXJcbiAqIEB0b2RvIG5vdCB5ZXQgaW1wbGVtZW50ZWQgIVxuICogQHByaXZhdGVcbiAqL1xuXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcblxuLyoqXG4gKiBPYmpldCBSb3V0ZVJlc3BvbnNlT0xTUmVhZGVyXG4gKiBAbWVtYmVyIHtPYmplY3R9IFJvdXRlUmVzcG9uc2VPTFNSZWFkZXJcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gUm91dGVSZXNwb25zZU9MU1JlYWRlci5SRUFERVJTIC0gT2JqZXQgY29udGVuYW50IGRlcyBmb25jdGlvbnMgZGUgbGVjdHVyZSwgYXBwZWzDqWVzIFwicmVhZGVyc1wiXG4gKiAgICAgIGRvbnQgY2hhcXVlIGNsw6kgY29ycmVzcG9uZCBhdSBub20gZCd1biB0YWcgZHUgWE1MIHF1ZSBsJ29uIHNvdWhhaXRlIGxpcmVcbiAqICAgICAgZXQgbGEgdmFsZXVyIGFzc29jacOpZSBlc3QgdW5lIGZvbmN0aW9uIChub2RlLCBkYXRhKVxuICogICAgICBvw7kgbm9kZSBlc3QgdW4gbm9ldWQgZHUgZG9jdW1lbnQgRE9NXG4gKiAgICAgIGV0IGRhdGEgZXN0IHVuIG9iamV0IG/DuSBsJ29uIHN0b2NrZSBsZXMgaW5mb3JtYXRpb25zIGx1ZXMgZGFucyBsZSBYTUwuXG4gKlxuICogQHByb3BlcnR5IHtNZXRob2R9IFJvdXRlUmVzcG9uc2VPTFNSZWFkZXIucmVhZCAtICBNw6l0aG9kZSBwZXJtZXR0YW50IGRlIGxhbmNlciBsYSBsZWN0dXJlIGQndW5lIHLDqXBvbnNlXG4gKiAgICAgIFhNTCBkdSBzZXJ2aWNlIGRlIGNhbGN1bCBkJ2l0aW5lcmFpcmUsIMOgIGwnYWlkZSBkZXMgcmVhZGVycyBkZSBsYSBjbGFzc2UuXG4gKi9cbnZhciBSb3V0ZVJlc3BvbnNlT0xTUmVhZGVyID0ge307XG5cbi8qKlxuICogT2JqZXQgY29udGVuYW50IGRlcyBmb25jdGlvbnMgZGUgbGVjdHVyZSwgYXBwZWzDqWVzIFwicmVhZGVyc1wiXG4gKiAgICAgIGRvbnQgY2hhcXVlIGNsw6kgY29ycmVzcG9uZCBhdSBub20gZCd1biB0YWcgZHUgWE1MIHF1ZSBsJ29uIHNvdWhhaXRlIGxpcmVcbiAqICAgICAgZXQgbGEgdmFsZXVyIGFzc29jacOpZSBlc3QgdW5lIGZvbmN0aW9uIChub2RlLCBkYXRhKVxuICogICAgICBvw7kgbm9kZSBlc3QgdW4gbm9ldWQgZHUgZG9jdW1lbnQgRE9NXG4gKiAgICAgIGV0IGRhdGEgZXN0IHVuIG9iamV0IG/DuSBsJ29uIHN0b2NrZSBsZXMgaW5mb3JtYXRpb25zIGx1ZXMgZGFucyBsZSBYTUwuXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUm91dGVSZXNwb25zZU9MU1JlYWRlclxuICovXG5Sb3V0ZVJlc3BvbnNlT0xTUmVhZGVyLlJFQURFUlMgPSB7XG4gICAgLypcbiAgICAgICAgLy8gSU5GT1xuICAgICAgICAvLyBwYXMgZGUgcmVwb25zZSBlbiBKU09OIHBvdXIgbCdBUEkgT0xTLCB1bmlxdWVtZW50IGR1IFhNTCAhXG5cbiAgICAgICAgLy8gSU5GT1xuICAgICAgICAvLyBFeGVtcGxlIGQnZXJyZXVyIGR1IHNlcnZpY2VcbiAgICAgICAgLy8gPD94bWwgdmVyc2lvbj0gXCIxLjBcIiBlbmNvZGluZz0gXCJVVEYtOFwiIHN0YW5kYWxvbmU9IFwieWVzXCIgPz5cbiAgICAgICAgLy8gPFhMUyB2ZXJzaW9uPVwiMS4yXCIgeHNpIDogc2NoZW1hTG9jYXRpb24gPSBcImh0dHA6Ly93d3cub3Blbmdpcy5uZXQveGxzIGh0dHA6Ly9zY2hlbWFzLm9wZW5naXMubmV0L29scy8xLjIvb2xzQWxsLnhzZFwiIHhtbG5zIDogeGxzID0gXCJodHRwOi8vd3d3Lm9wZW5naXMubmV0L3hsc1wiIHhtbG5zPSBcImh0dHA6Ly93d3cub3Blbmdpcy5uZXQveGxzXCIgeG1sbnMgOiB4bHNleHQgPSBcImh0dHA6Ly93d3cub3Blbmdpcy5uZXQveGxzZXh0XCIgeG1sbnMgOiBnbWwgPSBcImh0dHA6Ly93d3cub3Blbmdpcy5uZXQvZ21sXCIgLy8geG1sbnMgOiB4c2kgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIgPlxuICAgICAgICAvLyA8UmVzcG9uc2VIZWFkZXI+XG4gICAgICAgIC8vICAgICA8RXJyb3JMaXN0PlxuICAgICAgICAvLyAgICAgICAgIDxFcnJvciBtZXNzYWdlPVwiUm91dGluZyBlcnJvciA6IEVycm9yIGluIHNtYXJ0cm91dGluZyBjb20uZ2VvY29uY2VwdC5zbWFydHJvdXRpbmcuU21hcnRSb3V0aW5nTmF0aXZlRXhjZXB0aW9uIDogZmFpbGVkIHRvIGNvbm5lY3Qgd2F5cG9pbnQgeyA0OC44NDY1NzcsIDIuNDE2OTA3LCAwLjAwMDAwMCB9IGZhaWxlZCB0byBjb25uZWN0IHdheXBvaW50IHsgNDguODQ2NTc3LCAyLjQxNjkwNywgMC4wMDAwMDAgfSBcIiBlcnJvckNvZGU9XCJJbnRlcm5hbFNlcnZlckVycm9yXCIvPlxuICAgICAgICAvLyAgICAgPC9FcnJvckxpc3Q+XG4gICAgICAgIC8vIDwvUmVzcG9uc2VIZWFkZXI+XG4gICAgICAgIC8vIDxSZXNwb25zZSB2ZXJzaW9uPSBcIjEuMlwiIHJlcXVlc3RJRD0gXCJmODM1OGM3NC04YWVlLTQyMDMtOTBiOS0yYzcwZGI1OTk2YTFcIiAvPlxuICAgICAgICAvLyA8L1hMUz5cblxuICAgICAgICAvLyBJTkZPXG4gICAgICAgIC8vIEV4ZW1wbGUgZCdlcnJldXIgTkdpbnhcbiAgICAgICAgLy8gPEV4Y2VwdGlvblJlcG9ydD48RXhjZXB0aW9uIGV4Y2VwdGlvbkNvZGU9XCJNaXNzaW5nUGFyYW1ldGVyXCI+UmVzb3VyY2UgcGFyYW1ldGVyIG5vdCBmb3VuZDwvRXhjZXB0aW9uPjwvRXhjZXB0aW9uUmVwb3J0PlxuICAgICovXG59O1xuXG4vKipcbiAqIE3DqXRob2RlIHBlcm1ldHRhbnQgZGUgbGFuY2VyIGxhIGxlY3R1cmUgZCd1bmUgcsOpcG9uc2UgWE1MIGR1IHNlcnZpY2UgZGUgY2FsY3VsIGQnaXRpbmVyYWlyZSxcbiAqIMOgIGwnYWlkZSBkZXMgcmVhZGVycyBkZSBsYSBjbGFzc2UuXG4gKlxuICogQG1ldGhvZCBSb3V0ZVJlc3BvbnNlT0xTUmVhZGVyLnJlYWRcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdCAtIHJhY2luZSBkZSBsYSByw6lwb25zZSBYTUwgw6AgbGlyZVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFJvdXRlUmVzcG9uc2VPTFNSZWFkZXJcbiAqL1xuUm91dGVSZXNwb25zZU9MU1JlYWRlci5yZWFkID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAvLyBsb2dnZXJcbiAgICB2YXIgbG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcihcIlJvdXRlUmVzcG9uc2VPTFNSZWFkZXJcIik7XG4gICAgbG9nZ2VyLmVycm9yKFwibm90IHlldCBpbXBsZW1lbnRlZCAhXCIpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVSZXNwb25zZU9MU1JlYWRlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseOLSReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseRESTReader.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseRESTReader.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Formats_WKT__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Formats/WKT */ \"./node_modules/geoportal-access-lib/src/Formats/WKT.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Response_model_RouteResponse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Response/model/RouteResponse */ \"./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteResponse.js\");\n/* harmony import */ var _Response_model_RouteInstruction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Response/model/RouteInstruction */ \"./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteInstruction.js\");\n/**\n * Analyse de la reponse REST\n *\n * @module RouteResponseRESTReader\n * @alias Gp.Services.Route.Formats.RouteResponseRESTReader\n * @todo not yet implemented !\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n\n/**\n * Objet RouteResponseRestReader\n * @member {Object} RouteResponseRestReader\n *\n * @property {Object} RouteResponseRestReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} RouteResponseRestReader.read - Méthode permettant de lancer la lecture d'une réponse XML du\n *      service de calcul d'itineraire, à l'aide des readers de la classe.\n *\n */\n\nvar RouteResponseRESTReader = {};\n\nRouteResponseRESTReader.READERS = {\n\n    /**\n     * Route response\n     * @param {Object} node - node\n     * @returns {Object} response\n     */\n    routeResult : function (node) {\n        var response = new _Response_model_RouteResponse__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n        // on boucle sur les balises \"enfant\" de la réponse :\n        // status, distance, duration, distanceMeters, durationSeconds, bounds, geometryWkt, simplifiedWkt, leg\n        __getChildNodes(node, response);\n\n        if (response.status === \"error\") {\n            var message = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                response.message);\n            throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                message : message,\n                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n            });\n        }\n\n        return response;\n    },\n\n    /**\n     * Route status\n     * @param {Object} node - node\n     * @param {Object} response - response\n     */\n    status : function (node, response) {\n        var status = __getChildValue(node);\n        if (status === \"ERROR\" || status === \"error\") {\n            if (response) {\n                response.status = \"error\";\n            }\n        }\n    },\n\n    /**\n     * Route message\n     * @param {Object} node - node\n     * @param {Object} response - response\n     */\n    message : function (node, response) {\n        if (response) {\n            response.message = __getChildValue(node);\n        }\n    },\n\n    /**\n     * Route distance\n     * @param {Object} node - node\n     * @param {Object} response - response\n     */\n    distance : function (node, response) {\n        if (response) {\n            response.totalDistance = __getChildValue(node);\n        }\n    },\n\n    /**\n     * Route duration\n     * @param {Object} node - node\n     * @param {Object} response - response\n     */\n    durationSeconds : function (node, response) {\n        if (response) {\n            response.totalTime = parseFloat(__getChildValue(node));\n        }\n    },\n\n    /**\n     * Route bounds\n     * @param {Object} node - node\n     * @param {Object} response - response\n     */\n    bounds : function (node, response) {\n        // get value et split et parseFloat\n        if (response && response.bbox) {\n            var coords = __getChildValue(node).split(/[,;]/);\n            response.bbox.left = parseFloat(coords[0]);\n            response.bbox.bottom = parseFloat(coords[1]);\n            response.bbox.right = parseFloat(coords[2]);\n            response.bbox.top = parseFloat(coords[3]);\n        }\n    },\n\n    /**\n     * Route geometry\n     * @param {Object} node - node\n     * @param {Object} response - response\n     */\n    geometryWkt : function (node, response) {\n        if (response) {\n            var geomWkt = node.innerHTML;\n\n            var onWKTSuccess = function (json) {\n                response.routeGeometry = json;\n            };\n\n            var onWKTError = function () {\n                var msg = _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getMessage(\"PARAM_FORMAT\", [\"geometryWkt\"]);\n                throw new Error(msg);\n            };\n            // get WKT Geometry from string\n            _Formats_WKT__WEBPACK_IMPORTED_MODULE_1__[\"default\"].toJson(geomWkt, onWKTSuccess, onWKTError);\n        }\n    },\n\n    /**\n     * Route step\n     * @param {Object} node - node\n     * @param {Object} response - response\n     */\n    step : function (node, response) {\n        // création d'une nouvelle instruction\n        var routeInstruction = new _Response_model_RouteInstruction__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        var name;\n\n        // lecture des informations de l'instruction (balises enfants)\n        if (node.hasChildNodes) {\n            var children = node.childNodes;\n            var child;\n            var childName;\n\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n\n                if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                    childName = child.localName || child.baseName || child.nodeName;\n\n                    if (childName === \"durationSeconds\") {\n                        routeInstruction.duration = __getChildValue(child);\n                    } else if (childName === \"distance\") {\n                        routeInstruction.distance = __getChildValue(child);\n                    } else if (childName === \"navInstruction\") {\n                        routeInstruction.code = __getChildValue(child);\n                    } else if (childName === \"name\") {\n                        name = __getChildValue(child);\n                    }\n                }\n            }\n        }\n\n        // on teste le code de l'instruction pour y ajouter la bonne description\n        if (routeInstruction.code) {\n            switch (routeInstruction.code) {\n                case \"F\":\n                    if (name !== \"Valeur non renseignée\") {\n                        routeInstruction.instruction = \"Tout droit \" + name;\n                    } else {\n                        routeInstruction.instruction = \"Continuer tout droit \";\n                    }\n                    break;\n                case \"B\":\n                    routeInstruction.instruction = \"Demi-tour \" + name;\n                    break;\n                case \"L\":\n                    routeInstruction.instruction = \"Tourner à gauche \" + name;\n                    break;\n                case \"R\":\n                    routeInstruction.instruction = \"Tourner à droite \" + name;\n                    break;\n                case \"BL\":\n                    routeInstruction.instruction = \"Tourner très à gauche \" + name;\n                    break;\n                case \"BR\":\n                    routeInstruction.instruction = \"Tourner très à droite \" + name;\n                    break;\n                case \"FL\":\n                    routeInstruction.instruction = \"Tourner légèrement à gauche \" + name;\n                    break;\n                case \"FR\":\n                    routeInstruction.instruction = \"Tourner légèrement à droite \" + name;\n                    break;\n                case \"round_about_entry\":\n                    routeInstruction.instruction = \"Entrée rond-point \" + name;\n                    break;\n                case \"round_about_exit\":\n                    routeInstruction.instruction = \"Sortie rond-point \" + name;\n                    break;\n                case null:\n                    routeInstruction.instruction = \"Prendre \" + name;\n                    break;\n                default:\n                    routeInstruction.instruction = \"?\" + routeInstruction.code + \"? \" + name;\n                    break;\n            }\n        }\n\n        if (Array.isArray(response.routeInstructions)) {\n            response.routeInstructions.push(routeInstruction);\n        }\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service de calcul d'itineraire,\n * à l'aide des readers de la classe.\n *\n * @method RouteResponseRESTReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @static\n * @memberof RouteResponseRESTReader\n * @returns {DOMElement} response\n */\nRouteResponseRESTReader.read = function (root) {\n    var response;\n\n    if (root.nodeName === \"routeResult\") {\n        response = RouteResponseRESTReader.READERS[\"routeResult\"](root);\n        return response;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof RouteResponseRESTReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Récupération des noeuds enfants à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof RouteResponseRESTReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n\n                if (RouteResponseRESTReader.READERS[childName]) {\n                    var reader = RouteResponseRESTReader.READERS[childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteResponseRESTReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseRESTReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestFactory.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestFactory.js ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _RouteRequestOLS__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RouteRequestOLS */ \"./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestOLS.js\");\n/* harmony import */ var _RouteRequestREST__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RouteRequestREST */ \"./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestREST.js\");\n/**\n * Creation d'une requête OpenLS ou REST en mode POST ou GET\n * (Factory)\n *\n * @module RouteRequestFactory\n * @alias Gp.Services.Route.Request.RouteRequestFactory\n * @private\n */\n\n\n\n\n\nvar RouteRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Route\n     *\n     * @example\n     *   // utilisation avec les callback\n     *   var options = {\n     *      (...)\n     *      onSuccess : function (response) {},\n     *      onError : function (error) {},\n     *      // spécifique au service\n     *      api : 'OLS',\n     *      startPoint : {\n     *          x : 42.1121,\n     *          y : 1.5557\n     *      },\n     *      endPoint : {\n     *          x : 42.1121,\n     *          y : 1.5557\n     *      },\n     *      provideBbox : false,\n     *      exclusions : [\"Bridge\", \"Tunnel\", \"Toll\"],\n     *      distanceUnit : \"km\",\n     *      graph : \"Voiture\",\n     *      geometryInInstructions : false,\n     *      routePreference : \"fastest\"\n     *   };\n     *   RouteRequestFactory.build(options);\n     *\n     *   // utilisation sans callback\n     *   var options = {...};\n     *   try {\n     *      var result = RouteRequestFactory.build(options);\n     *      if (! result) { throw new Error(\"...\"):}\n     *   } catch (e) {\n     *      // todo\n     *   }\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"RouteRequestFactory\");\n        logger.trace([\"RouteRequestFactory::build()\"]);\n\n        var request = null;\n\n        var settings = options || {};\n\n        // gestion des callback\n        var bOnError = !!((options.onError !== null && typeof options.onError === \"function\"));\n\n        var message = null;\n        // choix entre les 2 types d'API pour consulter le service\n        switch (options.api) {\n            case \"REST\":\n                // FIXME les exceptions ne sont pas 'catchées' sur le constructeur !\n                var myReq = new _RouteRequestREST__WEBPACK_IMPORTED_MODULE_3__[\"default\"](settings);\n                if (!myReq.processRequestString()) {\n                    message = \"Error process request (rest) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                request = myReq.requestString;\n                break;\n            case \"OLS\":\n                request = _RouteRequestOLS__WEBPACK_IMPORTED_MODULE_2__[\"default\"].build(settings);\n                if (!request) {\n                    message = \"Error process request (ols) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                break;\n            default:\n                message = \"Type of API is not supported by service (REST or OLS) !\";\n                if (bOnError) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                    return;\n                }\n                throw new Error(message);\n        }\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteRequestFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUm91dGUvUmVxdWVzdC9Sb3V0ZVJlcXVlc3RGYWN0b3J5LmpzPzFlZDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDUTtBQUNaO0FBQ0U7O0FBRWxEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5Qyx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQixVQUFVO0FBQ1Y7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4REFBTTtBQUMzQjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MseURBQWdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxnRUFBWTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3REFBZTtBQUN6QztBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsZ0VBQVk7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxnRUFBWTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUsa0ZBQW1CLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL1JvdXRlL1JlcXVlc3QvUm91dGVSZXF1ZXN0RmFjdG9yeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRpb24gZCd1bmUgcmVxdcOqdGUgT3BlbkxTIG91IFJFU1QgZW4gbW9kZSBQT1NUIG91IEdFVFxuICogKEZhY3RvcnkpXG4gKlxuICogQG1vZHVsZSBSb3V0ZVJlcXVlc3RGYWN0b3J5XG4gKiBAYWxpYXMgR3AuU2VydmljZXMuUm91dGUuUmVxdWVzdC5Sb3V0ZVJlcXVlc3RGYWN0b3J5XG4gKiBAcHJpdmF0ZVxuICovXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcbmltcG9ydCBFcnJvclNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL0V4Y2VwdGlvbnMvRXJyb3JTZXJ2aWNlXCI7XG5pbXBvcnQgUm91dGVSZXF1ZXN0T0xTIGZyb20gXCIuL1JvdXRlUmVxdWVzdE9MU1wiO1xuaW1wb3J0IFJvdXRlUmVxdWVzdFJFU1QgZnJvbSBcIi4vUm91dGVSZXF1ZXN0UkVTVFwiO1xuXG52YXIgUm91dGVSZXF1ZXN0RmFjdG9yeSA9IHtcblxuICAgIC8qKlxuICAgICAqIGludGVyZmFjZSB1bmlxdWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGRlZmluaWVzIGRhbnMgbGUgY29tcG9zYW50IFJvdXRlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgLy8gdXRpbGlzYXRpb24gYXZlYyBsZXMgY2FsbGJhY2tcbiAgICAgKiAgIHZhciBvcHRpb25zID0ge1xuICAgICAqICAgICAgKC4uLilcbiAgICAgKiAgICAgIG9uU3VjY2VzcyA6IGZ1bmN0aW9uIChyZXNwb25zZSkge30sXG4gICAgICogICAgICBvbkVycm9yIDogZnVuY3Rpb24gKGVycm9yKSB7fSxcbiAgICAgKiAgICAgIC8vIHNww6ljaWZpcXVlIGF1IHNlcnZpY2VcbiAgICAgKiAgICAgIGFwaSA6ICdPTFMnLFxuICAgICAqICAgICAgc3RhcnRQb2ludCA6IHtcbiAgICAgKiAgICAgICAgICB4IDogNDIuMTEyMSxcbiAgICAgKiAgICAgICAgICB5IDogMS41NTU3XG4gICAgICogICAgICB9LFxuICAgICAqICAgICAgZW5kUG9pbnQgOiB7XG4gICAgICogICAgICAgICAgeCA6IDQyLjExMjEsXG4gICAgICogICAgICAgICAgeSA6IDEuNTU1N1xuICAgICAqICAgICAgfSxcbiAgICAgKiAgICAgIHByb3ZpZGVCYm94IDogZmFsc2UsXG4gICAgICogICAgICBleGNsdXNpb25zIDogW1wiQnJpZGdlXCIsIFwiVHVubmVsXCIsIFwiVG9sbFwiXSxcbiAgICAgKiAgICAgIGRpc3RhbmNlVW5pdCA6IFwia21cIixcbiAgICAgKiAgICAgIGdyYXBoIDogXCJWb2l0dXJlXCIsXG4gICAgICogICAgICBnZW9tZXRyeUluSW5zdHJ1Y3Rpb25zIDogZmFsc2UsXG4gICAgICogICAgICByb3V0ZVByZWZlcmVuY2UgOiBcImZhc3Rlc3RcIlxuICAgICAqICAgfTtcbiAgICAgKiAgIFJvdXRlUmVxdWVzdEZhY3RvcnkuYnVpbGQob3B0aW9ucyk7XG4gICAgICpcbiAgICAgKiAgIC8vIHV0aWxpc2F0aW9uIHNhbnMgY2FsbGJhY2tcbiAgICAgKiAgIHZhciBvcHRpb25zID0gey4uLn07XG4gICAgICogICB0cnkge1xuICAgICAqICAgICAgdmFyIHJlc3VsdCA9IFJvdXRlUmVxdWVzdEZhY3RvcnkuYnVpbGQob3B0aW9ucyk7XG4gICAgICogICAgICBpZiAoISByZXN1bHQpIHsgdGhyb3cgbmV3IEVycm9yKFwiLi4uXCIpOn1cbiAgICAgKiAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgKiAgICAgIC8vIHRvZG9cbiAgICAgKiAgIH1cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXF1ZXN0XG4gICAgICovXG4gICAgYnVpbGQgOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAvLyBsb2dnZXJcbiAgICAgICAgdmFyIGxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoXCJSb3V0ZVJlcXVlc3RGYWN0b3J5XCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoW1wiUm91dGVSZXF1ZXN0RmFjdG9yeTo6YnVpbGQoKVwiXSk7XG5cbiAgICAgICAgdmFyIHJlcXVlc3QgPSBudWxsO1xuXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgLy8gZ2VzdGlvbiBkZXMgY2FsbGJhY2tcbiAgICAgICAgdmFyIGJPbkVycm9yID0gISEoKG9wdGlvbnMub25FcnJvciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucy5vbkVycm9yID09PSBcImZ1bmN0aW9uXCIpKTtcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IG51bGw7XG4gICAgICAgIC8vIGNob2l4IGVudHJlIGxlcyAyIHR5cGVzIGQnQVBJIHBvdXIgY29uc3VsdGVyIGxlIHNlcnZpY2VcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLmFwaSkge1xuICAgICAgICAgICAgY2FzZSBcIlJFU1RcIjpcbiAgICAgICAgICAgICAgICAvLyBGSVhNRSBsZXMgZXhjZXB0aW9ucyBuZSBzb250IHBhcyAnY2F0Y2jDqWVzJyBzdXIgbGUgY29uc3RydWN0ZXVyICFcbiAgICAgICAgICAgICAgICB2YXIgbXlSZXEgPSBuZXcgUm91dGVSZXF1ZXN0UkVTVChzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgaWYgKCFteVJlcS5wcm9jZXNzUmVxdWVzdFN0cmluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIHByb2Nlc3MgcmVxdWVzdCAocmVzdCkgIVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYk9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25FcnJvci5jYWxsKG9wdGlvbnMuc2NvcGUsIG5ldyBFcnJvclNlcnZpY2UobWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IG15UmVxLnJlcXVlc3RTdHJpbmc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiT0xTXCI6XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IFJvdXRlUmVxdWVzdE9MUy5idWlsZChzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIHByb2Nlc3MgcmVxdWVzdCAob2xzKSAhXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZShtZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVHlwZSBvZiBBUEkgaXMgbm90IHN1cHBvcnRlZCBieSBzZXJ2aWNlIChSRVNUIG9yIE9MUykgIVwiO1xuICAgICAgICAgICAgICAgIGlmIChiT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZVJlcXVlc3RGYWN0b3J5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestOLS.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestOLS.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Formats_XLS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Formats/XLS */ \"./node_modules/geoportal-access-lib/src/Formats/XLS.js\");\n/* harmony import */ var _Formats_XLS_RouteService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Formats/XLS/RouteService */ \"./node_modules/geoportal-access-lib/src/Formats/XLS/RouteService.js\");\n/**\n * Creation d'une requête OpenLS en mode POST ou GET\n * (Factory)\n *\n * @module RouteRequestOLS\n * @alias Gp.Services.Route.Request.RouteRequestOLS\n * @private\n */\n\n\n\n\nvar RouteRequestOLS = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Route\n     *\n     * @example\n     *   var options = {\n     *      (...)\n     *   };\n     *\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"RouteRequestOLS\");\n        logger.trace([\"RouteRequestOLS::build()\"]);\n\n        var request = null;\n\n        // spécifique au service\n        var settings = {\n            startPoint : options.startPoint,\n            endPoint : options.endPoint,\n            viaPoint : options.viaPoints, // mapping OLS et options\n            provideBoundingBox : options.provideBbox, // mapping OLS et options\n            avoidFeature : options.exclusions, // mapping OLS et options\n            expectedStartTime : options.expectedStartTime, // TODO format ?\n            distanceUnit : options.distanceUnit,\n            graph : options.graph,\n            provideGeometry : options.geometryInInstructions, // mapping OLS et options\n            routePreference : options.routePreference\n        };\n\n        // objet RouteService\n        var oRS = new _Formats_XLS_RouteService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](settings);\n\n        // Format XLS\n        var oXLS = new _Formats_XLS__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            srsName : options.srs,\n            maximumResponses : options.maximumResponses\n        });\n        oXLS.namespace = true;\n        oXLS.setService(oRS);\n\n        // request brute !\n        request = oXLS.build();\n\n        // en mode GET, la requête est encodée\n        // et le param. 'qxml' est ajouté\n        if (options.httpMethod === \"GET\") {\n            var myRequest = \"qxml=\" +\n                encodeURIComponent(request)\n                    .replace(/-/g, \"%2D\")\n                    .replace(/_/g, \"%5F\")\n                    .replace(/\\./g, \"%2E\")\n                    .replace(/!/g, \"%21\")\n                    .replace(/~/g, \"%7E\")\n                    .replace(/\\*/g, \"%2A\")\n                    .replace(/'/g, \"%27\")\n                    .replace(/\\(/g, \"%28\")\n                    .replace(/\\)/g, \"%29\");\n            request = myRequest;\n        }\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteRequestOLS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUm91dGUvUmVxdWVzdC9Sb3V0ZVJlcXVlc3RPTFMuanM/M2U4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDYjtBQUNzQjs7QUFFN0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOERBQU07QUFDM0I7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsaUVBQVk7O0FBRWxDO0FBQ0EsdUJBQXVCLG9EQUFHO0FBQzFCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZSw4RUFBZSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9Sb3V0ZS9SZXF1ZXN0L1JvdXRlUmVxdWVzdE9MUy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRpb24gZCd1bmUgcmVxdcOqdGUgT3BlbkxTIGVuIG1vZGUgUE9TVCBvdSBHRVRcbiAqIChGYWN0b3J5KVxuICpcbiAqIEBtb2R1bGUgUm91dGVSZXF1ZXN0T0xTXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuUm91dGUuUmVxdWVzdC5Sb3V0ZVJlcXVlc3RPTFNcbiAqIEBwcml2YXRlXG4gKi9cbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uLy4uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuaW1wb3J0IFhMUyBmcm9tIFwiLi4vLi4vLi4vRm9ybWF0cy9YTFNcIjtcbmltcG9ydCBSb3V0ZVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL0Zvcm1hdHMvWExTL1JvdXRlU2VydmljZVwiO1xuXG52YXIgUm91dGVSZXF1ZXN0T0xTID0ge1xuXG4gICAgLyoqXG4gICAgICogaW50ZXJmYWNlIHVuaXF1ZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBidWlsZFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgZGVmaW5pZXMgZGFucyBsZSBjb21wb3NhbnQgUm91dGVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICAgICguLi4pXG4gICAgICogICB9O1xuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmVxdWVzdFxuICAgICAqL1xuICAgIGJ1aWxkIDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbG9nZ2VyXG4gICAgICAgIHZhciBsb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiUm91dGVSZXF1ZXN0T0xTXCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoW1wiUm91dGVSZXF1ZXN0T0xTOjpidWlsZCgpXCJdKTtcblxuICAgICAgICB2YXIgcmVxdWVzdCA9IG51bGw7XG5cbiAgICAgICAgLy8gc3DDqWNpZmlxdWUgYXUgc2VydmljZVxuICAgICAgICB2YXIgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBzdGFydFBvaW50IDogb3B0aW9ucy5zdGFydFBvaW50LFxuICAgICAgICAgICAgZW5kUG9pbnQgOiBvcHRpb25zLmVuZFBvaW50LFxuICAgICAgICAgICAgdmlhUG9pbnQgOiBvcHRpb25zLnZpYVBvaW50cywgLy8gbWFwcGluZyBPTFMgZXQgb3B0aW9uc1xuICAgICAgICAgICAgcHJvdmlkZUJvdW5kaW5nQm94IDogb3B0aW9ucy5wcm92aWRlQmJveCwgLy8gbWFwcGluZyBPTFMgZXQgb3B0aW9uc1xuICAgICAgICAgICAgYXZvaWRGZWF0dXJlIDogb3B0aW9ucy5leGNsdXNpb25zLCAvLyBtYXBwaW5nIE9MUyBldCBvcHRpb25zXG4gICAgICAgICAgICBleHBlY3RlZFN0YXJ0VGltZSA6IG9wdGlvbnMuZXhwZWN0ZWRTdGFydFRpbWUsIC8vIFRPRE8gZm9ybWF0ID9cbiAgICAgICAgICAgIGRpc3RhbmNlVW5pdCA6IG9wdGlvbnMuZGlzdGFuY2VVbml0LFxuICAgICAgICAgICAgZ3JhcGggOiBvcHRpb25zLmdyYXBoLFxuICAgICAgICAgICAgcHJvdmlkZUdlb21ldHJ5IDogb3B0aW9ucy5nZW9tZXRyeUluSW5zdHJ1Y3Rpb25zLCAvLyBtYXBwaW5nIE9MUyBldCBvcHRpb25zXG4gICAgICAgICAgICByb3V0ZVByZWZlcmVuY2UgOiBvcHRpb25zLnJvdXRlUHJlZmVyZW5jZVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG9iamV0IFJvdXRlU2VydmljZVxuICAgICAgICB2YXIgb1JTID0gbmV3IFJvdXRlU2VydmljZShzZXR0aW5ncyk7XG5cbiAgICAgICAgLy8gRm9ybWF0IFhMU1xuICAgICAgICB2YXIgb1hMUyA9IG5ldyBYTFMoe1xuICAgICAgICAgICAgc3JzTmFtZSA6IG9wdGlvbnMuc3JzLFxuICAgICAgICAgICAgbWF4aW11bVJlc3BvbnNlcyA6IG9wdGlvbnMubWF4aW11bVJlc3BvbnNlc1xuICAgICAgICB9KTtcbiAgICAgICAgb1hMUy5uYW1lc3BhY2UgPSB0cnVlO1xuICAgICAgICBvWExTLnNldFNlcnZpY2Uob1JTKTtcblxuICAgICAgICAvLyByZXF1ZXN0IGJydXRlICFcbiAgICAgICAgcmVxdWVzdCA9IG9YTFMuYnVpbGQoKTtcblxuICAgICAgICAvLyBlbiBtb2RlIEdFVCwgbGEgcmVxdcOqdGUgZXN0IGVuY29kw6llXG4gICAgICAgIC8vIGV0IGxlIHBhcmFtLiAncXhtbCcgZXN0IGFqb3V0w6lcbiAgICAgICAgaWYgKG9wdGlvbnMuaHR0cE1ldGhvZCA9PT0gXCJHRVRcIikge1xuICAgICAgICAgICAgdmFyIG15UmVxdWVzdCA9IFwicXhtbD1cIiArXG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHJlcXVlc3QpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8tL2csIFwiJTJEXCIpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9fL2csIFwiJTVGXCIpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC4vZywgXCIlMkVcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyEvZywgXCIlMjFcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL34vZywgXCIlN0VcIilcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKi9nLCBcIiUyQVwiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIiUyN1wiKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwoL2csIFwiJTI4XCIpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCkvZywgXCIlMjlcIik7XG4gICAgICAgICAgICByZXF1ZXN0ID0gbXlSZXF1ZXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVSZXF1ZXN0T0xTO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestOLS.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestREST.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestREST.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _model_RouteParamREST__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/RouteParamREST */ \"./node_modules/geoportal-access-lib/src/Services/Route/Request/model/RouteParamREST.js\");\n\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des requêtes de type REST sur le service de calcul d'itineraire\n * (uniquement en GET)\n *\n * @constructor\n * @alias Gp.Services.Route.Request.RouteRequestREST\n * @param {Object} options - options definies dans le composant Route\n *\n * @example\n * var options = {\n *      (...)\n * };\n *\n * @private\n */\nfunction RouteRequestREST (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"RouteRequestREST\");\n    this.logger.trace(\"[Constructeur RouteRequestREST ()]\");\n\n    if (!(this instanceof RouteRequestREST)) {\n        throw new TypeError(\"RouteRequestREST constructor cannot be called as a function.\");\n    }\n\n    // existance des options\n    if (!options) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"options\"));\n    }\n\n    /** liste des options */\n    this.settings = options;\n}\n\nRouteRequestREST.prototype = {\n\n    /**\n     * @lends module:RouteRequestREST#\n     */\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RouteRequestREST,\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out : origin=2.416907353809513,48.8465772142297&destination=2.4248037771493673,48.84591353161838\n     * // POST out : Not yet supported method POST !\n     * @returns {String} request\n     */\n    processRequestString : function () {\n        // INFO\n        // construction simple sans template...,\n        // mais en attendant que les services soient fixés, on taggue ce composant en mode PROTOTYPE !\n        this.logger.warn(\" PROTOTYPE !\");\n\n        // Mapping des options avec le service de l'API REST\n        var oParams = new _model_RouteParamREST__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.settings);\n        var params = oParams.getParams();\n\n        var request = \"\";\n        for (var i = 0; i < params.length; i++) {\n            var o = params[i];\n            if (request) {\n                request += \"&\";\n            }\n            request += o.k + \"=\" + o.v;\n        }\n\n        // Exemple :\n        //  http://wxs.ign.fr/KEY/itineraire/rest/route.json?\n        //  origin=&\n        //  destination=&\n        //  waypoints=&\n        //  method=DISTANCE&\n        //  graph=Pieton&\n        //  graphName=Pieton&\n        //  exclusions=&\n        //  tolerance=10&\n        //  srs=\n\n        this.logger.trace(request);\n        this.requestString = request;\n\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteRequestREST);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUm91dGUvUmVxdWVzdC9Sb3V0ZVJlcXVlc3RSRVNULmpzPzlmYzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDb0Q7QUFDSDtBQUNHOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsOERBQU07QUFDeEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsZ0VBQUM7QUFDekI7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLDZEQUFjO0FBQ3hDOztBQUVBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZSwrRUFBZ0IsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUm91dGUvUmVxdWVzdC9Sb3V0ZVJlcXVlc3RSRVNULmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcbmltcG9ydCBfIGZyb20gXCIuLi8uLi8uLi9VdGlscy9NZXNzYWdlc1Jlc291cmNlc1wiO1xuaW1wb3J0IFJvdXRlUGFyYW1SRVNUIGZyb20gXCIuL21vZGVsL1JvdXRlUGFyYW1SRVNUXCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogQ2xhc3NlIGRlIGdlc3Rpb24gZGVzIHJlcXXDqnRlcyBkZSB0eXBlIFJFU1Qgc3VyIGxlIHNlcnZpY2UgZGUgY2FsY3VsIGQnaXRpbmVyYWlyZVxuICogKHVuaXF1ZW1lbnQgZW4gR0VUKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFsaWFzIEdwLlNlcnZpY2VzLlJvdXRlLlJlcXVlc3QuUm91dGVSZXF1ZXN0UkVTVFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGRlZmluaWVzIGRhbnMgbGUgY29tcG9zYW50IFJvdXRlXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciBvcHRpb25zID0ge1xuICogICAgICAoLi4uKVxuICogfTtcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZVJlcXVlc3RSRVNUIChvcHRpb25zKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiUm91dGVSZXF1ZXN0UkVTVFwiKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIltDb25zdHJ1Y3RldXIgUm91dGVSZXF1ZXN0UkVTVCAoKV1cIik7XG5cbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUm91dGVSZXF1ZXN0UkVTVCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJvdXRlUmVxdWVzdFJFU1QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICAvLyBleGlzdGFuY2UgZGVzIG9wdGlvbnNcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKF8uZ2V0TWVzc2FnZShcIlBBUkFNX0VNUFRZXCIsIFwib3B0aW9uc1wiKSk7XG4gICAgfVxuXG4gICAgLyoqIGxpc3RlIGRlcyBvcHRpb25zICovXG4gICAgdGhpcy5zZXR0aW5ncyA9IG9wdGlvbnM7XG59XG5cblJvdXRlUmVxdWVzdFJFU1QucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogQGxlbmRzIG1vZHVsZTpSb3V0ZVJlcXVlc3RSRVNUI1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogcmVxdWVzdFxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgcmVxdWVzdFN0cmluZyA6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RldXIgKGFsaWFzKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIDogUm91dGVSZXF1ZXN0UkVTVCxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGlvbiBkZSBsYSByZXF1w6p0ZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gR0VUICBvdXQgOiBvcmlnaW49Mi40MTY5MDczNTM4MDk1MTMsNDguODQ2NTc3MjE0MjI5NyZkZXN0aW5hdGlvbj0yLjQyNDgwMzc3NzE0OTM2NzMsNDguODQ1OTEzNTMxNjE4MzhcbiAgICAgKiAvLyBQT1NUIG91dCA6IE5vdCB5ZXQgc3VwcG9ydGVkIG1ldGhvZCBQT1NUICFcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXF1ZXN0XG4gICAgICovXG4gICAgcHJvY2Vzc1JlcXVlc3RTdHJpbmcgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElORk9cbiAgICAgICAgLy8gY29uc3RydWN0aW9uIHNpbXBsZSBzYW5zIHRlbXBsYXRlLi4uLFxuICAgICAgICAvLyBtYWlzIGVuIGF0dGVuZGFudCBxdWUgbGVzIHNlcnZpY2VzIHNvaWVudCBmaXjDqXMsIG9uIHRhZ2d1ZSBjZSBjb21wb3NhbnQgZW4gbW9kZSBQUk9UT1RZUEUgIVxuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwiIFBST1RPVFlQRSAhXCIpO1xuXG4gICAgICAgIC8vIE1hcHBpbmcgZGVzIG9wdGlvbnMgYXZlYyBsZSBzZXJ2aWNlIGRlIGwnQVBJIFJFU1RcbiAgICAgICAgdmFyIG9QYXJhbXMgPSBuZXcgUm91dGVQYXJhbVJFU1QodGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIHZhciBwYXJhbXMgPSBvUGFyYW1zLmdldFBhcmFtcygpO1xuXG4gICAgICAgIHZhciByZXF1ZXN0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gcGFyYW1zW2ldO1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ICs9IFwiJlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdCArPSBvLmsgKyBcIj1cIiArIG8udjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4ZW1wbGUgOlxuICAgICAgICAvLyAgaHR0cDovL3d4cy5pZ24uZnIvS0VZL2l0aW5lcmFpcmUvcmVzdC9yb3V0ZS5qc29uP1xuICAgICAgICAvLyAgb3JpZ2luPSZcbiAgICAgICAgLy8gIGRlc3RpbmF0aW9uPSZcbiAgICAgICAgLy8gIHdheXBvaW50cz0mXG4gICAgICAgIC8vICBtZXRob2Q9RElTVEFOQ0UmXG4gICAgICAgIC8vICBncmFwaD1QaWV0b24mXG4gICAgICAgIC8vICBncmFwaE5hbWU9UGlldG9uJlxuICAgICAgICAvLyAgZXhjbHVzaW9ucz0mXG4gICAgICAgIC8vICB0b2xlcmFuY2U9MTAmXG4gICAgICAgIC8vICBzcnM9XG5cbiAgICAgICAgdGhpcy5sb2dnZXIudHJhY2UocmVxdWVzdCk7XG4gICAgICAgIHRoaXMucmVxdWVzdFN0cmluZyA9IHJlcXVlc3Q7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFN0cmluZztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZVJlcXVlc3RSRVNUO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestREST.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Request/model/RouteParamREST.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Request/model/RouteParamREST.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes du service de calcul d'itineraire (REST).\n *      Permet le mapping avec les options du service.\n * @constructor\n * @alias Gp.Services.Route.Request.RouteParamREST\n * @param {Object} options - options\n *\n * @private\n */\nfunction RouteParamREST (options) {\n    if (!(this instanceof RouteParamREST)) {\n        throw new TypeError(\"RouteParamREST constructor cannot be called as a function.\");\n    }\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur RouteParamREST ()]\");\n\n    /**\n     * Options en paramêtres du constructeur.\n     */\n    this.options = options || {};\n\n    // mapping des options avec l'API REST\n\n    /** Coordonnées du point de départ. */\n    this.origin = this.options.startPoint.x + \",\" + this.options.startPoint.y;\n\n    /** Coordonnées du point d’arrivée. */\n    this.destination = this.options.endPoint.x + \",\" + this.options.endPoint.y;\n\n    /** Coordonnées des étapes point de départ. */\n    this.waypoints = this.options.viaPoints || null;\n\n    /** Date et heure de départ */\n    this.startDateTime = this.options.expectedStartTime || null; // TODO format !?\n\n    /** Nom du graphe à utiliser */\n    this.graphName = this.options.graph;\n\n    /** projection (code EPSG comme epsg:4326 ou wgs84) */\n    this.srs = this.options.srs;\n\n    /** Liste des règles de restrictions à utiliser, séparés pas le caractère , ou ; (Exemple : Toll, Tunnel, Bridge) */\n    this.exclusions = this.options.exclusions;\n\n    /**\n     * itinéraire le plus court (DISTANCE) ou le plus rapide (TIME)\n     * Par defaut, DISTANCE...\n     * cf. mapping ci dessous\n     */\n    this.method = \"TIME\";\n\n    // mapping particulier sur l'option 'routePreference'\n    if (this.options.routePreference) {\n        var value = this.options.routePreference;\n        switch (value) {\n            case \"fastest\":\n                this.method = \"TIME\";\n                break;\n            case \"shortest\":\n                this.method = \"DISTANCE\";\n                break;\n            default:\n                this.logger.warn(\"Par defaut, on prend l'itinéraire le plus rapide !\");\n                this.method = \"TIME\";\n        }\n    }\n\n    /** Format de sortie (résumé de l’itinéraire) */\n    this.format = (this.options.geometryInInstructions) ? \"STANDARDEXT\" : \"STANDARD\";\n\n    // y'a t-il d'autres options à ajouter (par defaut) ?\n\n    /** Distance de tolérance (en mètre) de simplification de la géométrie. */\n    this.tolerance = 10;\n\n    /** identifiant du véhicule (enregistré dans les profils de véhicule) à utiliser */\n    this.profileId = null;\n\n    /** Profil du véhicule (enregistré dans les profils de véhicule) à utiliser */\n    this.profileName = null;\n\n    // options dont le mapping n'est pas possible :\n    // - distanceUnit\n    // - provideBoundingBox\n}\n\n/**\n * CLASSNAME\n */\nRouteParamREST.CLASSNAME = \"RouteParamREST\";\n\nRouteParamREST.prototype = {\n\n    /**\n     * @lends module:RouteParamREST#\n     */\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RouteParamREST,\n\n    /**\n     * Retourne une liste de points\n     * @returns {Array} une liste de points (sep ';')\n     */\n    getWaypoints : function () {\n        if (!this.waypoints) {\n            return;\n        }\n        var array = [];\n        for (var i = 0; i < this.waypoints.length; i++) {\n            var obj = this.waypoints[i];\n            array.push(obj.x + \",\" + obj.y);\n        }\n\n        return array.join(\";\");\n    },\n\n    /**\n     * Retourne la liste des exclusions\n     * @returns {Array} une liste d'exclusions (sep ';')\n     */\n    getExclusions : function () {\n        return this.exclusions.join(\";\");\n    }\n};\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Array} liste de paramêtres\n */\nRouteParamREST.prototype.getParams = function () {\n    var map = [];\n\n    map.push({\n        k : \"origin\",\n        v : this.origin\n    });\n\n    map.push({\n        k : \"destination\",\n        v : this.destination\n    });\n\n    map.push({\n        k : \"method\",\n        v : this.method\n    });\n\n    if (this.waypoints) {\n        map.push({\n            k : \"waypoints\",\n            v : this.getWaypoints()\n        });\n    }\n\n    if (this.startDateTime) {\n        map.push({\n            k : \"startDateTime\",\n            v : this.startDateTime\n        });\n    }\n\n    if (this.graphName) {\n        map.push({\n            k : \"graphName\",\n            v : this.graphName\n        });\n    }\n\n    if (this.exclusions) {\n        map.push({\n            k : \"exclusions\",\n            v : this.getExclusions()\n        });\n    }\n\n    if (this.srs) {\n        map.push({\n            k : \"srs\",\n            v : this.srs\n        });\n    }\n\n    if (this.format) {\n        map.push({\n            k : \"format\",\n            v : this.format\n        });\n    }\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteParamREST);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Request/model/RouteParamREST.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Response/RouteResponseFactory.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Response/RouteResponseFactory.js ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Formats_XML__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Formats/XML */ \"./node_modules/geoportal-access-lib/src/Formats/XML.js\");\n/* harmony import */ var _Formats_WKT__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../Formats/WKT */ \"./node_modules/geoportal-access-lib/src/Formats/WKT.js\");\n/* harmony import */ var _Formats_RouteResponseRESTReader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Formats/RouteResponseRESTReader */ \"./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseRESTReader.js\");\n/* harmony import */ var _Formats_RouteResponseOLSReader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Formats/RouteResponseOLSReader */ \"./node_modules/geoportal-access-lib/src/Services/Route/Formats/RouteResponseOLSReader.js\");\n/* harmony import */ var _model_RouteResponse__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./model/RouteResponse */ \"./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteResponse.js\");\n/* harmony import */ var _model_RouteInstruction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model/RouteInstruction */ \"./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteInstruction.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module RouteResponseFactory\n * @alias Gp.Services.Route.Response.RouteResponseFactory\n * @private\n */\n\n\n\n\n\n\n\n\n\n\nvar RouteResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"RouteResponseFactory\");\n        logger.trace(\"RouteResponseFactory::build()\");\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                switch (options.outputFormat) {\n                    case \"xml\":\n                        logger.trace(\"analyze response : xml\");\n\n                        // type de reader en fonction de l'API\n                        var routeReader = options.api === \"REST\" ? _Formats_RouteResponseRESTReader__WEBPACK_IMPORTED_MODULE_5__[\"default\"] : _Formats_RouteResponseOLSReader__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n\n                        try {\n                            var p = new _Formats_XML__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                                reader : routeReader\n                            });\n\n                            // FIXME : mode XHR ne retourne que des string ? JSONP aussi à ce niveau ?\n                            if (typeof options.response === \"string\") {\n                                p.setXMLString(options.response);\n                            } else {\n                                p.setXMLDoc(options.response);\n                            }\n\n                            data = p.parse();\n\n                            if (!data) {\n                                throw new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_FORMAT\", \"xml\"));\n                            }\n                        } catch (e) {\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE\", options.response)));\n                            return;\n                        }\n\n                        break;\n\n                    case \"json\":\n                        logger.trace(\"analyze response : json\");\n\n                        var JSONResponse;\n                        if (typeof options.response === \"string\") {\n                            JSONResponse = JSON.parse(options.response);\n                        } else {\n                            JSONResponse = options.response;\n                        }\n\n                        // le service renvoie t il une erreur ?\n                        if (JSONResponse.message) {\n                            // ex. {\"message\":\"message not null\", \"status\":\"ERROR\"}\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", JSONResponse.message)));\n                            return;\n                        }\n\n                        // construction de l'objet réponse JSON\n                        if (JSONResponse) {\n                            var legs = [];\n                            var legSteps = [];\n                            var steps = [];\n\n                            data = new _model_RouteResponse__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n\n                            if (data.hasOwnProperty(\"totalTime\")) {\n                                // info : il y a aussi JSONResponse.duration, qui donne la durée en hh:mm:ss.\n                                data.totalTime = parseFloat(JSONResponse.durationSeconds);\n                            }\n                            if (data.hasOwnProperty(\"totalDistance\")) {\n                                data.totalDistance = (options.distanceUnit === \"m\") ? JSONResponse.distanceMeters : JSONResponse.distance;\n                            }\n\n                            if (data.hasOwnProperty(\"bbox\")) {\n                                var coords = JSONResponse.bounds.split(/[,;]/);\n                                data.bbox.left = parseFloat(coords[0]);\n                                data.bbox.bottom = parseFloat(coords[1]);\n                                data.bbox.right = parseFloat(coords[2]);\n                                data.bbox.top = parseFloat(coords[3]);\n                            }\n                            /**\n                            * callback success\n                            * @param {Object} json - json\n                            * @private\n                            */\n                            var onWKTSuccess = function (json) {\n                                data.routeGeometry = json;\n                            };\n                            /**\n                            * callback failed\n                            * @param {Object} e - event\n                            * @private\n                            */\n                            var onWKTError = function (e) {\n                                console.log(e);\n                                options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_FORMAT\", [\"geometryWkt\"])));\n                            };\n\n                            if (data.hasOwnProperty(\"routeGeometry\")) {\n                                var geometry = JSONResponse.geometryWkt || JSONResponse.simplifiedWkt;\n                                if (geometry) {\n                                    _Formats_WKT__WEBPACK_IMPORTED_MODULE_4__[\"default\"].toJson(geometry, onWKTSuccess, onWKTError);\n                                    if (!data.routeGeometry) {\n                                        return;\n                                    }\n                                }\n                            }\n\n                            if (data.hasOwnProperty(\"routeInstructions\")) {\n                                var legList = JSONResponse.legs;\n                                var i;\n                                if (Array.isArray(legList) && legList.length) {\n                                    for (i = 0; i < legList.length; i++) {\n                                        legs.push(legList[i]);\n                                    }\n                                }\n                                if (Array.isArray(legs) && legs.length) {\n                                    for (i = 0; i < legs.length; i++) {\n                                        legSteps.push(legs[i].steps);\n                                    }\n                                }\n                                if (Array.isArray(legSteps) && legSteps.length) {\n                                    for (i = 0; i < legSteps.length; i++) {\n                                        steps = steps.concat(legSteps[i]);\n                                    }\n                                }\n\n                                steps.forEach(function (step) {\n                                    data.routeInstructions.push(new _model_RouteInstruction__WEBPACK_IMPORTED_MODULE_8__[\"default\"]());\n                                    data.routeInstructions[data.routeInstructions.length - 1].duration = step.durationSeconds;\n                                    data.routeInstructions[data.routeInstructions.length - 1].distance = (options.distanceUnit === \"m\") ? step.distanceMeters : step.distance;\n                                    data.routeInstructions[data.routeInstructions.length - 1].code = step.navInstruction;\n                                    // geometrie en geojson\n                                    var points = [];\n                                    for (var i = 0; i < step.points.length; i++) {\n                                        var point = step.points[i].split(\",\");\n                                        if (point) {\n                                            points.push(point);\n                                        }\n                                    }\n                                    if (points && points.length !== 0) {\n                                        data.routeInstructions[data.routeInstructions.length - 1].geometry = {\n                                            coordinates : points,\n                                            type : \"LineString\"\n                                        };\n                                    } else {\n                                        data.routeInstructions[data.routeInstructions.length - 1].geometry = null;\n                                    }\n\n                                    /*\n                                    Traduction du code en instruction\n                                    * - F : tout droit\n                                    * - B : demi-tour\n                                    * - L : tourner à gauche\n                                    * - R : tourner à droite\n                                    * - BL : tourner très à gauche\n                                    * - BR : tourner très à droite\n                                    * - FL : tourner légèrement à gauche\n                                    * - FR : tourner légèrement à droite\n                                    * - round_about_entry : entrée rond-point\n                                    * - round_about_exit : sortie rond-point\n                                    */\n\n                                    // on ne souhaite pas de ce type de valeur...\n                                    if (step.name === \"Valeur non renseignée\") {\n                                        step.name = \"\";\n                                    }\n\n                                    switch (step.navInstruction) {\n                                        case \"F\":\n                                            if (step.name) {\n                                                data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tout droit \" + step.name;\n                                            } else {\n                                                data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Continuer tout droit \";\n                                            }\n                                            break;\n                                        case \"B\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Demi-tour \" + step.name;\n                                            break;\n                                        case \"L\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner à gauche \" + step.name;\n                                            break;\n                                        case \"R\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner à droite \" + step.name;\n                                            break;\n                                        case \"BL\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner très à gauche \" + step.name;\n                                            break;\n                                        case \"BR\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner très à droite \" + step.name;\n                                            break;\n                                        case \"FL\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner légèrement à gauche \" + step.name;\n                                            break;\n                                        case \"FR\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner légèrement à droite \" + step.name;\n                                            break;\n                                        case \"round_about_entry\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Entrée rond-point \" + step.name;\n                                            break;\n                                        case \"round_about_exit\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Sortie rond-point \" + step.name;\n                                            break;\n                                        case null:\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Prendre tout droit \" + step.name;\n                                            break;\n                                        default:\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"?\" + step.navInstruction + \"? \" + step.name;\n                                            break;\n                                    }\n                                });\n                            }\n                        }\n\n                        if (!data) {\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE\", \"json\")));\n                            return;\n                        }\n                        break;\n\n                    default:\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_FORMAT\", \"json\", \"xml\")));\n                        return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data && data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION_2\")));\n                    return;\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteResponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Response/RouteResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteInstruction.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteInstruction.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Single Route Instruction object.\n *\n * @property {String} code - Instruction code :\n *\n * - \"F\" : Straight forward\n * - \"B\" : U-turn\n * - \"L\" : turn left\n * - \"R\" : turn right\n * - \"BL\" : turn left strongly\n * - \"BR\" : turn right strongly\n * - \"FL\" : turn lightly to the left\n * - \"FR\" : turn lightly to the right\n * - \"round_about_entry\" : round about entry\n * - \"round_about_exit\" : round about exit\n *\n * @property {String} instruction - Instruction text : translated code + street name\n * @property {Object} geometry - Geometry (expressed in [GeoJSON]{@link http://geojson.org/}) of the street.\n * @property {Float} distance - Length of the instruction. Expressed in km or m, depending on distanceUnit parameter.\n * @property {Float} duration - Instruction duration in seconds.\n *\n * @namespace\n * @alias Gp.Services.Route.RouteInstruction\n */\nfunction RouteInstruction () {\n    if (!(this instanceof RouteInstruction)) {\n        throw new TypeError(\"RouteInstruction constructor cannot be called as a function.\");\n    }\n\n    this.duration = null;\n\n    this.distance = null;\n\n    this.code = null;\n\n    this.instruction = null;\n\n    this.geometry = null; // FIXME can be null if option 'geometryInInstructions' is false !\n}\n\nRouteInstruction.prototype = {\n\n    constructor : RouteInstruction\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteInstruction);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUm91dGUvUmVzcG9uc2UvbW9kZWwvUm91dGVJbnN0cnVjdGlvbi5qcz9mNmRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU8sNkNBQTZDLDBCQUEwQjtBQUM1RixjQUFjLE1BQU07QUFDcEIsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEseUJBQXlCO0FBQ3pCOztBQUVBOztBQUVBOztBQUVBOztBQUVlLCtFQUFnQixFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9TZXJ2aWNlcy9Sb3V0ZS9SZXNwb25zZS9tb2RlbC9Sb3V0ZUluc3RydWN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFNpbmdsZSBSb3V0ZSBJbnN0cnVjdGlvbiBvYmplY3QuXG4gKlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGNvZGUgLSBJbnN0cnVjdGlvbiBjb2RlIDpcbiAqXG4gKiAtIFwiRlwiIDogU3RyYWlnaHQgZm9yd2FyZFxuICogLSBcIkJcIiA6IFUtdHVyblxuICogLSBcIkxcIiA6IHR1cm4gbGVmdFxuICogLSBcIlJcIiA6IHR1cm4gcmlnaHRcbiAqIC0gXCJCTFwiIDogdHVybiBsZWZ0IHN0cm9uZ2x5XG4gKiAtIFwiQlJcIiA6IHR1cm4gcmlnaHQgc3Ryb25nbHlcbiAqIC0gXCJGTFwiIDogdHVybiBsaWdodGx5IHRvIHRoZSBsZWZ0XG4gKiAtIFwiRlJcIiA6IHR1cm4gbGlnaHRseSB0byB0aGUgcmlnaHRcbiAqIC0gXCJyb3VuZF9hYm91dF9lbnRyeVwiIDogcm91bmQgYWJvdXQgZW50cnlcbiAqIC0gXCJyb3VuZF9hYm91dF9leGl0XCIgOiByb3VuZCBhYm91dCBleGl0XG4gKlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGluc3RydWN0aW9uIC0gSW5zdHJ1Y3Rpb24gdGV4dCA6IHRyYW5zbGF0ZWQgY29kZSArIHN0cmVldCBuYW1lXG4gKiBAcHJvcGVydHkge09iamVjdH0gZ2VvbWV0cnkgLSBHZW9tZXRyeSAoZXhwcmVzc2VkIGluIFtHZW9KU09OXXtAbGluayBodHRwOi8vZ2VvanNvbi5vcmcvfSkgb2YgdGhlIHN0cmVldC5cbiAqIEBwcm9wZXJ0eSB7RmxvYXR9IGRpc3RhbmNlIC0gTGVuZ3RoIG9mIHRoZSBpbnN0cnVjdGlvbi4gRXhwcmVzc2VkIGluIGttIG9yIG0sIGRlcGVuZGluZyBvbiBkaXN0YW5jZVVuaXQgcGFyYW1ldGVyLlxuICogQHByb3BlcnR5IHtGbG9hdH0gZHVyYXRpb24gLSBJbnN0cnVjdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5Sb3V0ZS5Sb3V0ZUluc3RydWN0aW9uXG4gKi9cbmZ1bmN0aW9uIFJvdXRlSW5zdHJ1Y3Rpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSb3V0ZUluc3RydWN0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUm91dGVJbnN0cnVjdGlvbiBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMuZHVyYXRpb24gPSBudWxsO1xuXG4gICAgdGhpcy5kaXN0YW5jZSA9IG51bGw7XG5cbiAgICB0aGlzLmNvZGUgPSBudWxsO1xuXG4gICAgdGhpcy5pbnN0cnVjdGlvbiA9IG51bGw7XG5cbiAgICB0aGlzLmdlb21ldHJ5ID0gbnVsbDsgLy8gRklYTUUgY2FuIGJlIG51bGwgaWYgb3B0aW9uICdnZW9tZXRyeUluSW5zdHJ1Y3Rpb25zJyBpcyBmYWxzZSAhXG59XG5cblJvdXRlSW5zdHJ1Y3Rpb24ucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBSb3V0ZUluc3RydWN0aW9uXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlSW5zdHJ1Y3Rpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteInstruction.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteResponse.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteResponse.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Response object for {@link module:Services~route Gp.Services.route ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Gp.BBox} bbox - Bounding Box of the route. Given when provideBBox parameter is used in function call.\n * @property {Object} routeGeometry - Geometry (expressed in [GeoJSON]{@link http://geojson.org/}) of the route.\n * @property {Array.<Gp.Services.Route.RouteInstruction>} routeInstructions - Instructions of the route.\n * @property {String} totalDistance - Length of the route. If distanceUnit parameter was set to \"km\" (default), totalDistance is a string containing the total distance expressed in kilometers, followed by \" Km\" (e.g. : \"19.6 Km\"). If distanceUnit parameter was set to \"m\", totalDistance is a string containing the total distance expressed in meters (e.g. : \"19599.14\").\n * @property {Float} totalTime - Route duration in seconds.\n *\n * @namespace\n * @alias Gp.Services.RouteResponse\n */\nfunction RouteResponse () {\n    if (!(this instanceof RouteResponse)) {\n        throw new TypeError(\"RouteResponse constructor cannot be called as a function.\");\n    }\n\n    this.totalTime = null;\n\n    this.totalDistance = null;\n\n    this.bbox = {\n        left : null,\n        right : null,\n        top : null,\n        bottom : null\n    };\n\n    this.routeGeometry = null; // FIXME can be null if option 'geometryInInstructions' is true !\n\n    this.routeInstructions = [];\n}\n\nRouteResponse.prototype = {\n\n    constructor : RouteResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RouteResponse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvUm91dGUvUmVzcG9uc2UvbW9kZWwvUm91dGVSZXNwb25zZS5qcz8yNjYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQSx3QkFBd0IsaURBQWlEO0FBQ3pFO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsT0FBTyxrREFBa0QsMEJBQTBCO0FBQ2pHLGNBQWMsMkNBQTJDO0FBQ3pELGNBQWMsT0FBTztBQUNyQixjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCOztBQUU5QjtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVlLDRFQUFhLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL1JvdXRlL1Jlc3BvbnNlL21vZGVsL1JvdXRlUmVzcG9uc2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlc3BvbnNlIG9iamVjdCBmb3Ige0BsaW5rIG1vZHVsZTpTZXJ2aWNlc35yb3V0ZSBHcC5TZXJ2aWNlcy5yb3V0ZSAoKX0gaW52b2NhdGlvbiB3aGVuIHN1Y2Nlc3NmdWwuIFJlY2VpdmVkIGFzIHRoZSBhcmd1bWVudCBvZiBvblN1Y2Nlc3MgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKlxuICogQHByb3BlcnR5IHtHcC5CQm94fSBiYm94IC0gQm91bmRpbmcgQm94IG9mIHRoZSByb3V0ZS4gR2l2ZW4gd2hlbiBwcm92aWRlQkJveCBwYXJhbWV0ZXIgaXMgdXNlZCBpbiBmdW5jdGlvbiBjYWxsLlxuICogQHByb3BlcnR5IHtPYmplY3R9IHJvdXRlR2VvbWV0cnkgLSBHZW9tZXRyeSAoZXhwcmVzc2VkIGluIFtHZW9KU09OXXtAbGluayBodHRwOi8vZ2VvanNvbi5vcmcvfSkgb2YgdGhlIHJvdXRlLlxuICogQHByb3BlcnR5IHtBcnJheS48R3AuU2VydmljZXMuUm91dGUuUm91dGVJbnN0cnVjdGlvbj59IHJvdXRlSW5zdHJ1Y3Rpb25zIC0gSW5zdHJ1Y3Rpb25zIG9mIHRoZSByb3V0ZS5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0b3RhbERpc3RhbmNlIC0gTGVuZ3RoIG9mIHRoZSByb3V0ZS4gSWYgZGlzdGFuY2VVbml0IHBhcmFtZXRlciB3YXMgc2V0IHRvIFwia21cIiAoZGVmYXVsdCksIHRvdGFsRGlzdGFuY2UgaXMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgdG90YWwgZGlzdGFuY2UgZXhwcmVzc2VkIGluIGtpbG9tZXRlcnMsIGZvbGxvd2VkIGJ5IFwiIEttXCIgKGUuZy4gOiBcIjE5LjYgS21cIikuIElmIGRpc3RhbmNlVW5pdCBwYXJhbWV0ZXIgd2FzIHNldCB0byBcIm1cIiwgdG90YWxEaXN0YW5jZSBpcyBhIHN0cmluZyBjb250YWluaW5nIHRoZSB0b3RhbCBkaXN0YW5jZSBleHByZXNzZWQgaW4gbWV0ZXJzIChlLmcuIDogXCIxOTU5OS4xNFwiKS5cbiAqIEBwcm9wZXJ0eSB7RmxvYXR9IHRvdGFsVGltZSAtIFJvdXRlIGR1cmF0aW9uIGluIHNlY29uZHMuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLlJvdXRlUmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gUm91dGVSZXNwb25zZSAoKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJvdXRlUmVzcG9uc2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJSb3V0ZVJlc3BvbnNlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy50b3RhbFRpbWUgPSBudWxsO1xuXG4gICAgdGhpcy50b3RhbERpc3RhbmNlID0gbnVsbDtcblxuICAgIHRoaXMuYmJveCA9IHtcbiAgICAgICAgbGVmdCA6IG51bGwsXG4gICAgICAgIHJpZ2h0IDogbnVsbCxcbiAgICAgICAgdG9wIDogbnVsbCxcbiAgICAgICAgYm90dG9tIDogbnVsbFxuICAgIH07XG5cbiAgICB0aGlzLnJvdXRlR2VvbWV0cnkgPSBudWxsOyAvLyBGSVhNRSBjYW4gYmUgbnVsbCBpZiBvcHRpb24gJ2dlb21ldHJ5SW5JbnN0cnVjdGlvbnMnIGlzIHRydWUgIVxuXG4gICAgdGhpcy5yb3V0ZUluc3RydWN0aW9ucyA9IFtdO1xufVxuXG5Sb3V0ZVJlc3BvbnNlLnByb3RvdHlwZSA9IHtcblxuICAgIGNvbnN0cnVjdG9yIDogUm91dGVSZXNwb25zZVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZVJlc3BvbnNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Response/model/RouteResponse.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Route/Route.js":
/*!***********************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Route/Route.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _Request_RouteRequestFactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Request/RouteRequestFactory */ \"./node_modules/geoportal-access-lib/src/Services/Route/Request/RouteRequestFactory.js\");\n/* harmony import */ var _Response_RouteResponseFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Response/RouteResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/Route/Response/RouteResponseFactory.js\");\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'itinéraire du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n *\n * @alias Gp.Services.Route\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} [options.api] - Manière d'accéder au service : 'REST' (via l'API REST) ou 'OLS' (via la norme XLS).\n * Par défaut, on utilise l'API REST.\n *\n * @param {String} options.outputFormat - Le format de la réponse du service itineraire : 'xml' ou 'json'.\n *      Ce paramètre déterminera l'extension '.xml' ou '.json' du service dans le cas de l'API REST.\n *      Nécessaire si serverUrl est renseigné, et qu'on souhaite passer par l'API REST,\n *      pour connaître le format dans lequel sera fournie la réponse (pour son traitement).\n *      Non nécessaire pour la norme OLS. Par défaut, ce paramètre vaut 'json'.\n *\n * @param {String} [options.routePreference = \"fastest\"] - Mode de calcul à utiliser :\n * - le plus rapide « fastest »\n * - le plus court « shortest »\n * Par défaut : « fastest ».\n *\n * @param {Object} options.startPoint - Point de départ du calcul. Coordonnées exprimées en longitudes, latitudes (EPSG:4326)\n * @param {Float} options.startPoint.x - Abcisse du point de départ du calcul d'itinéraire.\n * @param {Float} options.startPoint.y - Ordonnée du point de départ du calcul d'itinéraire.\n *\n * @param {Object} options.endPoint - Point d'arrivée du calcul. Coordonnées exprimées en longitudes, latitudes (EPSG:4326)\n * @param {Float} options.endPoint.x - Abcisse du point d'arrivée du calcul d'itinéraire.\n * @param {Float} options.endPoint.y - Ordonnée du point d'arrivée du calcul d'itinéraire.\n *\n * @param {Object[]} [options.viaPoints] - Liste de point ({x:Float,y:Float}) intermédaires que l'itinéraire doit emprunter dans l'ordre du tableau.\n *      Coordonnées exprimées en longitudes, latitudes (EPSG:4326) :{x:float, y:float}\n *\n * @param {String} [options.graph = \"voiture\"] - Type de graphe utilisé : \"Voiture\" ou \"Pieton\".\n *      Détermine le profil de vitesses utilisé pour le calcul ainsi que les tronçons autorisés ou non.\n *      Par défaut, c'est la valeur \"Voiture\" qui sera utilisée.\n *\n * @param {String[]} [options.exclusions] - Critères d'exclusions à appliquer pour le calcul. (correspond au paramètre \"avoidFeature\" d'OpenLS)\n *      On précise ici le type de tronçons que l'on ne veut pas que l'itinéraire emprunte\n *      (valeurs possibles : « toll » (éviter les péages), « bridge », « tunnel »).\n *\n * @param {Boolean} [options.geometryInInstructions = false] - Indique si la géométrie de l'itinéraire doit être reprise morceau par morceau dans les instructions.\n *      (correspond au paramètre \"provideGeometry\" d'OpenLS) Par défaut : false.\n *\n * @param {Boolean} [options.provideBbox = true] - Indique si les instructions doivent être localisées par une bbox dans la réponse.\n *      Par défaut : true.\n *\n * @param {String} [options.distanceUnit = \"km\"] - Indique si la distance doit être exprimée en km ou m dans la réponse.\n *      Par défaut : km.\n *\n * @param {String} [options.srs] - Système de coordonnées dans lequel les paramètres géographiques en entrée et la réponse du service sont exprimés.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 'EPSG:4326'.\n *\n * @example\n *  var options = {\n *      // options communes aux services\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      api : 'OLS',\n *      outputFormat : 'xml',\n *      startPoint : {\n *          x : 42.1121,\n *          y : 1.5557\n *      },\n *      endPoint : {\n *          x : 42.1121,\n *          y : 1.5557\n *      },\n *      provideBbox : false,\n *      exclusions : [\"Bridge\", \"Tunnel\", \"Toll\"],\n *      distanceUnit : \"km\",\n *      graph : \"Voiture\",\n *      geometryInInstructions : false,\n *      routePreference : \"fastest\"\n *  };\n *\n * @private\n */\nfunction Route (options) {\n    if (!(this instanceof Route)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"Route\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"Route\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Gp.Services.Route\");\n    this.logger.trace(\"[Constructeur Route (options)]\");\n\n    if (!options.startPoint) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"startPoint\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.startPoint.x === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"startPoint.x\"));\n    }\n\n    if (options.startPoint.y === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"startPoint.y\"));\n    }\n\n    if (!options.endPoint) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"endPoint\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.endPoint.x === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"endPoint.x\"));\n    }\n\n    if (options.endPoint.y === null) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"endPoint.y\"));\n    }\n\n    // options par defaut\n    // on passe l'option api en majuscules afin d'éviter des exceptions.\n    this.options.api = (typeof options.api === \"string\") ? options.api.toUpperCase() : \"REST\";\n\n    // on passe l'option outputFormat en minuscules afin d'éviter des exceptions.\n    this.options.outputFormat = (typeof options.outputFormat === \"string\") ? options.outputFormat.toLowerCase() : \"json\";\n\n    this.options.startPoint = options.startPoint;\n    this.options.endPoint = options.endPoint;\n    this.options.viaPoints = options.viaPoints || null; // INFO mapping viaPoints <=> xls:viaPoint\n    this.options.exclusions = options.exclusions || null; // INFO mapping exclusions <=> xls:avoidFeature\n    this.options.routePreference = options.routePreference || \"fastest\";\n    this.options.graph = options.graph || \"Voiture\";\n    this.options.geometryInInstructions = options.geometryInInstructions || false; // INFO mapping geometryInInstructions <=> xls:provideGeometry\n    this.options.provideBbox = options.provideBbox || true; // INFO mapping provideBbox <=> xls:provideBoundingBox\n    this.options.distanceUnit = options.distanceUnit || \"km\";\n    this.options.expectedStartTime = null; // FIXME not yet implemented !\n    this.options.srs = options.srs || \"EPSG:4326\";\n\n    // FIXME : les readers OLS ne sont pas implémentés. on utilise donc l'API REST.\n    this.options.api = \"REST\";\n    this.logger.warn(\"Surcharge option 'api' : REST (readers OLS non implémentés)\");\n    if (this.options.protocol === \"XHR\") {\n        this.options.httpMethod = \"GET\";\n        this.logger.trace(\"Surcharge option 'HttpMethod' : \" + this.options.httpMethod);\n    }\n\n    // gestion de l'url du service par defaut\n    // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n    // en fonction du type d'api, REST ou OLS\n    if (!this.options.serverUrl) {\n        var lstUrlByDefault = _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Route.url(this.options.apiKey);\n        var urlFound = null;\n        switch (this.options.api) {\n            case \"OLS\":\n                urlFound = lstUrlByDefault.ols;\n                break;\n            case \"REST\":\n                var key = \"route\" + \"-\" + this.options.outputFormat;\n                urlFound = lstUrlByDefault[key];\n                break;\n            default:\n                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_UNKNOWN\", \"api\"));\n        }\n\n        if (!urlFound) {\n            throw new Error(\"Url by default not found !\");\n        }\n        this.options.serverUrl = urlFound;\n        this.logger.trace(\"Serveur URL par defaut : \" + this.options.serverUrl);\n    }\n\n    // gestion du type de service\n    // si l'extension de l'url est .json ou .xml, on surcharge le format de sortie (outputFormat)\n    var idx = this.options.serverUrl.lastIndexOf(\".\");\n    if (idx !== -1) {\n        var extension = this.options.serverUrl.substring(idx + 1);\n        if (extension && extension.length < 5) { // FIXME extension de moins de 4 car. ...\n            this.logger.trace(\"Serveur Extension URL : \" + extension);\n            switch (extension.toLowerCase()) {\n                case \"json\":\n                case \"xml\":\n                    this.options.outputFormat = extension.toLowerCase();\n                    break;\n                default:\n                    throw new Error(\"type of service : unknown or unsupported (json or xml) !\");\n            }\n        }\n    }\n}\n\n/**\n * @lends module:Route#\n */\nRoute.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nRoute.prototype.constructor = Route;\n\n/**\n * (overwrite)\n * Création de la requête\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nRoute.prototype.buildRequest = function (error, success) {\n    var options = {\n        // spécifique au service\n        api : this.options.api,\n        startPoint : this.options.startPoint,\n        endPoint : this.options.endPoint,\n        viaPoints : this.options.viaPoints,\n        provideBbox : this.options.provideBbox,\n        exclusions : this.options.exclusions,\n        distanceUnit : this.options.distanceUnit,\n        graph : this.options.graph,\n        geometryInInstructions : this.options.geometryInInstructions,\n        routePreference : this.options.routePreference,\n        srs : this.options.srs\n    };\n\n    this.request = _Request_RouteRequestFactory__WEBPACK_IMPORTED_MODULE_5__[\"default\"].build(options);\n\n    // on teste si la requete a bien été construite !\n    if (!this.request) {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_REQUEST_BUILD\")));\n    } else {\n        success.call(this, this.request);\n    }\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nRoute.prototype.analyzeResponse = function (error, success) {\n    // INFO\n    // Factory pour masquer la complexité du retour du service qui renvoie soit\n    //  - une 'string' qui contient du XML ou JSON natif en mode XHR\n    //  - un objet JSON qui est natif ou encapsulé\n\n    if (this.response) {\n        var options = {\n            distanceUnit : this.options.distanceUnit, // FIXME ce parametre nous permet de choisir le type d'unité dans la reponse !\n            response : this.response,\n            outputFormat : this.options.outputFormat, // utile pour parser la string en mode XHR : JSON ou XML !\n            api : this.options.api, // utile de connaitre le type d'API car la reponse est differente !\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        _Response_RouteResponseFactory__WEBPACK_IMPORTED_MODULE_6__[\"default\"].build(options);\n    } else {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Route);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Route/Route.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Services.js":
/*!********************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Services.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Alti_Alti__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Alti/Alti */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js\");\n/* harmony import */ var _AutoConf_AutoConf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AutoConf/AutoConf */ \"./node_modules/geoportal-access-lib/src/Services/AutoConf/AutoConf.js\");\n/* harmony import */ var _Geocode_Geocode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Geocode/Geocode */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/Geocode.js\");\n/* harmony import */ var _Geocode_ReverseGeocode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Geocode/ReverseGeocode */ \"./node_modules/geoportal-access-lib/src/Services/Geocode/ReverseGeocode.js\");\n/* harmony import */ var _AutoComplete_AutoComplete__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AutoComplete/AutoComplete */ \"./node_modules/geoportal-access-lib/src/Services/AutoComplete/AutoComplete.js\");\n/* harmony import */ var _Route_Route__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Route/Route */ \"./node_modules/geoportal-access-lib/src/Services/Route/Route.js\");\n/* harmony import */ var _ProcessIsoCurve_ProcessIsoCurve__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ProcessIsoCurve/ProcessIsoCurve */ \"./node_modules/geoportal-access-lib/src/Services/ProcessIsoCurve/ProcessIsoCurve.js\");\n/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"point|circle|bbox\" }] */\n\n/**\n* Geoportal web services invocation namespace.\n*\n* @module Services\n* @alias Gp.Services\n*/\n\n\n\n\n\n\n\n\nvar Services = {\n    /**\n     * Access to Geoportal resources metadata availables with one ore several keys, using [Auto-configuration service]{@link https://wxs.ign.fr/APIKEY/autoconf} of the Geoportal platform.\n     *\n     * @method getConfig\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.GetConfigResponse} object as a parameter except if \"rawResponse\" parameter is set to true : a String will be returned.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/autoconf] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {Boolean} [options.ssl = true] - Use of HTTPS or HTTP protocol to request the services. HTTPS by default (ssl=true).\n     * @param {String} [options.protocol=JSONP] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting an underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Only use if you know what you are doing.\n     */\n    getConfig : function (options) {\n        var autoconfService = new _AutoConf_AutoConf__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options);\n        autoconfService.call();\n    },\n\n    /**\n     * Getting elevations in or along of one or several points on french territories using the [elevation services of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/alti.html}.<br/>\n     * Two use cases are availables :<br/>\n     * 1. getting elevations of the given points : don't use the options.sampling parameter ;<br/>\n     * 2. getting a regular set of elevations along the given points : use the options.sampling parameter.\n     *\n     * @method getAltitude\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Array.<Object>} options.positions - Array of positions ({lon:float, lat:float}) expressed in CRS:84 coordinates system, where to get elevations. 50 positions maximum may be given. 2 positions minimum are required if you use the options.sampling parameter.\n     * @param {Number} [options.sampling] - Number of points to use (between 2 and 5000) in order to compute an elevation path. The points given with the options.positions parameter are used to fix the planimetric path along which the elevations will be computed.<br/>\n     * If not used, only elevations of these positions will be returned.\n     * @param {Boolean} [options.zonly=false] - Set this parameter to true if you only want to have elevations returned without corresponding coordinates.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.AltiResponse} object as a parameter, except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/alti/rest/elevation.json] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {Boolean} [options.ssl = true] - Use of HTTPS or HTTP protocol to request the services. HTTPS by default (ssl=true).\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Only use if you know what you are doing.\n     * @param {String} [options.api='REST'] - What API to use for interacting with underlying web service : 'REST' or 'WPS'. Only use if you know what you are doing.\n     * @param {String} [options.outputFormat='xml'] - Output format for underlying web service response : 'xml' or 'json'. Only use if you know what you are doing.\n     */\n    getAltitude : function (options) {\n        var altiService = new _Alti_Alti__WEBPACK_IMPORTED_MODULE_0__[\"default\"](options);\n        altiService.call();\n    },\n    /**\n     * Getting positon of a geographic identifier (places names, address, cadastral parcel, other...) using the [geocoding web service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/geocodage.html}.\n     *\n     * @example\n     * Gp.Services.geocode ({\n     *     apiKey : \"jhyvi0fgmnuxvfv0zjzorvdn\",\n     *     location : \"73 avenue de Paris, Saint-Mandé\",\n     *     // traitement des resultats\n     *     onSuccess  : function (result) {\n     *         console.log(\"found (x:\"+result.position.x+\", y:\"+result.position.y+\")\") ;\n     *     }\n     * }) ;\n     *\n     *\n     * @method geocode\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {String|Object} options.location - Geographic identifier to locate. May be provided as a single String or a structured Object for an address search. In this last case, the following properties are availaibles.\n     *      @param {Number} [options.location.number] - Street number.\n     *      @param {String} [options.location.street] - Street name.\n     *      @param {String} [options.location.city] - City name.\n     *      @param {Number} [options.location.postalCode] - Postal Code\n     * @param {Object} [options.filterOptions] - Additional filters to apply to search. The following properties may be given.\n     *      @param {Gp.BBox} [options.filterOptions.bbox] - Bounding box where to perform the search. Properties expressed in options.srs coordinates system.\n     *      @param {Array.<String>} [options.filterOptions.type] - Geographical identifier types to search. Values currently availables are : \"PositionOfInterest\" for place names, \"StreetAddress\" for address search, \"CadastralParcel\" for Cadastral parcels search. Default is \"StreetAddress\".\n     *\n     *      @param {String} [options.filterOptions.[prop]] - Additionnal properties to filter search. Properties depends on options.filterOptions.type, and values type should be \"String\".\n     *      <br/><br/>\n     *      Common Properties availables for all search types :<br/>\n     *      \"municipality\", \"insee\", \"department\".\n     *      <br/><br/>\n     *      Properties availables for address search :<br/>\n     *      \"quality\", \"ID\", \"ID_TR\" and \"territory\".\n     *      <br/><br/>\n     *      Properties availables for place names search :<br/>\n     *      \"importance\", \"nature\" and \"territory\".\n     *      <br/><br/>\n     *      Properties availables for cadastral parcels search :<br/>\n     *      \"sheet\", \"section\", and \"absorbedcity\".\n     * @param {Number} [options.maximumResponses = 25] - Maximum number of responses. Default underlying service value applies (25) if not provided.\n     * @param {Boolean} [options.returnFreeForm = false] - Set this parameter to true if you wish to have an address returned in a single String (unstructured). If unset, default underlying service value (false) applies.\n     * @param {String} [options.srs = EPSG:4326] - Coordinates System used to expres coordinates for parameters and responses. Default underlying service value (EPSG:4326) applies.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.GeocodeResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/geoportail/ols] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {Boolean} [options.ssl = true] - Use of HTTPS or HTTP protocol to request the services. HTTPS by default (ssl=true).\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Only use if you know what you are doing.\n     */\n    geocode : function (options) {\n        var geocodeService = new _Geocode_Geocode__WEBPACK_IMPORTED_MODULE_2__[\"default\"](options);\n        geocodeService.call();\n    },\n    /**\n     * Retrieving geographical identifiers (place names, address, cadastral parcels, ...) near a given position, using the [reverse geocoding web service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/geocodage-inverse.html}.\n     *\n     * @method reverseGeocode\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Gp.Point} options.position - Reference position where to search geographical identifiers. Its coordinates are expressed in the coordinates system given with options.srs parameter. (default is CRS:84, that means position.x is the longitude and position.y the latitude)\n     * @param {Object} [options.filterOptions] - Additional filters to apply to search. The following properties may be given.\n     *      @param {Array.<String>} [options.filterOptions.type] - Geographical identifier types to search. Values currently availables are : \"PositionOfInterest\" for place names, \"StreetAddress\" for address search, \"CadastralParcel\" for Cadastral parcels search. Default is \"StreetAddress\".\n     *      @param {Gp.BBox} [options.filterOptions.bbox] - Bounding box where to perform the search. Expressed in options.srs coordinates system.\n     *      @param {Gp.Circle} [options.filterOptions.circle] - Circle where to perform the search. Expressed in options.srs coordinates system.\n     * @param {Array.<Gp.Point>} [options.filterOptions.polygon] - Polygon where to perform the search. Expressed in options.srs coordinates system.\n     * @param {Number} [options.maximumResponses] - Maximum number of responses. Default underlying service value applies (25) if not provided.\n     * @param {Boolean} [options.returnFreeForm = false] - Set this parameter to true if you wish to have an address returned in a single String (unstructured). If unset, default underlying service value (false) applies.\n     * @param {String} [options.srs = CRS:84] - Coordinates System used to express coordinates for parameters and responses. Only WGS 84 geographical positioning is supported. Therefore, two values are allowed : \"CRS:84\" (position.x is the longitude and position.y the latitude) and \"EPSG:4326\" (position.x is the latitude and position.y the longitude) . Default is CRS:84.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.GeocodeResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/geoportail/ols] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {Boolean} [options.ssl = true] - Use of HTTPS or HTTP protocol to request the services. HTTPS by default (ssl=true).\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Only use if you know what you are doing.\n     */\n    reverseGeocode : function (options) {\n        var reverseGeocodeService = new _Geocode_ReverseGeocode__WEBPACK_IMPORTED_MODULE_3__[\"default\"](options);\n        reverseGeocodeService.call();\n    },\n    /**\n     * Getting suggestions of probable places names or address based on uncomplete texts, using the [autocompletion service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/autocompletion.html}\n     *\n     * @method autoComplete\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {String} options.text - Text input to complete.\n     * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Suggestion types to provide : address (\"StreetAddress\") and/or place name (\"PositionOfInterest\").\n     * @param {Array.<String>} [options.filterOptions.territory] - Places where to limit the search of suggestions : \"METROPOLE\" (Corsica and metropolitan France), \"DOMTOM\" (French overseas departments and territories), or an INSEE code of a department. No limitation by default. For instance : ['METROPOLE', '31']\n     * @param {Number} [options.maximumResponses = 10] - Maximum number of responses.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.AutoCompleteResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/ols/apis/completion] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {Boolean} [options.ssl = true] - Use of HTTPS or HTTP protocol to request the services. HTTPS by default (ssl=true).\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Only use if you know what you are doing.\n     */\n    autoComplete : function (options) {\n        var autoCompleteService = new _AutoComplete_AutoComplete__WEBPACK_IMPORTED_MODULE_4__[\"default\"](options);\n        autoCompleteService.call();\n    },\n    /**\n     * Getting a route from one point to another using the [route service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/itineraires.html}.\n     *\n     * @method route\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {String} [options.routePreference = \"fastest\"] - Indicates the way to compute the route : \"fastest\" (time optimisation) or \"shortest\" (distance optimisation).\n     * @param {Gp.Point} options.startPoint - Start point of the route. Expressed in CRS:84 coordinates system (startPoint.x corresponds to longitude, startPoint.y corresponds to latitude).\n     * @param {Gp.Point} options.endPoint - End point of the route. Expressed in CRS:84 coordinates system (endPoint.x corresponds to longitude, endPoint.y corresponds to latitude).\n     * @param {Array.<Gp.Point>} [options.viaPoints] - Ordered via Points of the route. Expressed in CRS:84 coordinates system (viaPoints[i].x corresponds to longitude, viaPoints[i].y corresponds to latitude).\n     * @param {String} [options.graph = \"Voiture\"] - User profile to use to compute the route : \"Voiture\" (using a vehicule) or \"Pieton\" (pedestrian). Has an influence on the kind of roads the route may use and the average speed.\n     * @param {Array.<String>} [options.exclusions] - Indicates if route has to avoid some features (\"toll\", \"bridge\" or \"tunnel\").\n     * @param {Boolean} [options.geometryInInstructions = false] - Indicates if route geometry has to be also returned with route instructions.\n     * @param {Boolean} [options.provideBoundingBox = true] - Indicates if route instructions has to be localised with a BBOX in the response.\n     * @param {String} [options.distanceUnit = \"km\"] - The unit used to provide distances in the response (\"m\" or \"km\").\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.RouteResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.outputFormat='json'] - Output format (\"json\" or \"xml\") to use for underlying webService. Only use if you know what you are doing.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/itineraire/rest/route.json] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {Boolean} [options.ssl = true] - Use of HTTPS or HTTP protocol to request the services. HTTPS by default (ssl=true).\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Only use if you know what you are doing.\n     */\n    route : function (options) {\n        var routeService = new _Route_Route__WEBPACK_IMPORTED_MODULE_5__[\"default\"](options);\n        routeService.call();\n    },\n    /**\n     * Computing a set of places (curve) reachable from a given point (or from where to start to reach a given point) within a time or distance constraint using the [isochrone service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/isochrones.html}.\n     *\n     * @method isoCurve\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Gp.Point} options.position - Start or Arrival (options.reverse===true) Point for the computing. Expressed in CRS:84 coordinates system (position.x corresponds to longitude, position.y corresponds to latitude).\n     * @param {String} [options.graph = \"Voiture\"] - User profile to use to compute the isoCurve : \"Voiture\" (using a vehicule) or \"Pieton\" (pedestrian). Has an influence on the kind of roads to use and the average speed.\n     * @param {Array.<String>} [options.exclusions] - Indicates if route has to avoid some features (\"toll\", \"bridge\" or \"tunnel\").\n     * @param {String} [options.method = \"time\"] - Computing method to use : \"time\" (using a duration as a constraint) or \"distance\" (using a distance as a constraint).\n     * @param {Float} options.time - Maximum duration (expressed in seconds) to use when options.method is set to \"time\".\n     * @param {Float} options.distance - Maximum distance (expressed in meters) to use when options.method is set to \"distance\".\n     * @param {Boolean} [options.reverse = false] - Set this parameter to true if you want options.position to be the destination (instead of departure) for the computing.\n     * @param {Boolean} [options.smoothing = false] - Set this parameter to true if you want the resulting geometry to be smoothed.\n     * @param {Boolean} [options.holes = false] - Set this parameter to true if you want the resulting geometry (polygon) to have holes if pertinent.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.IsoCurveResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.outputFormat='json'] - Output format (\"json\" or \"xml\") to use for underlying webService. Only use if you know what you are doing.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/isochrone/isochrone.json] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {Boolean} [options.ssl = true] - Use of HTTPS or HTTP protocol to request the services. HTTPS by default (ssl=true).\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Only use if you know what you are doing.\n     */\n    isoCurve : function (options) {\n        var processIsoCurveService = new _ProcessIsoCurve_ProcessIsoCurve__WEBPACK_IMPORTED_MODULE_6__[\"default\"](options);\n        processIsoCurveService.call();\n    }\n};\n\n/**\n * Point object.\n *\n * @namespace\n * @alias Gp.Point\n *\n * @property {Float} x - Point abscissa\n * @property {Float} y - Point ordinate\n */\nvar point = {};\n\n/**\n * Circle object.\n *\n * @namespace\n * @alias Gp.Circle\n *\n * @property {Float} x - Circle center abscissa.\n * @property {Float} y - Circle center ordinate.\n * @property {Float} radius - Circle radius.\n */\nvar circle = {};\n\n/**\n * Bounding box object, expressed with four coordinates.\n *\n * @namespace\n * @alias Gp.BBox\n *\n * @property {Float} left - minimum abscissa\n * @property {Float} right - maximum abscissa\n * @property {Float} bottom - minimum ordinate\n * @property {Float} top - maximum ordinate\n */\nvar bbox = {};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Services);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Services.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Utils/Helper.js":
/*!***************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Utils/Helper.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Classe utilitaire\n *\n * @module Helper\n * @alias Gp.Helper\n */\nvar Helper = {\n\n    /**\n     * concatenation des parametres key/value dans les urls\n     *\n     * @method normalyzeParameters\n     * @static\n     * @param {Object} params - tableau de clef/valeur\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeParameters ({\n     *         key1:value1,\n     *         key2:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne les paramètres concaténés\n     */\n    normalyzeParameters : function (params) {\n        var myParams = null;\n\n        if (params) {\n            var tabParams = [];\n            for (var key in params) {\n                if (params.hasOwnProperty(key)) {\n                    var value = params[key];\n                    if (!value) {\n                        value = \"\";\n                    }\n                    tabParams.push(key + \"=\" + value);\n                }\n            }\n\n            myParams = tabParams.join(\"&\");\n        }\n\n        return myParams;\n    },\n\n    /**\n     * Concaténation et encodage des urls.\n     *\n     * @method normalyzeUrl\n     * @static\n     * @param {String} url - url\n     * @param {Object|String} params - tableau de clef/valeur ou string\n     * @param {Boolean} encode - true|false, false par defaut\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeUrl (url, {\n     *         key1:value1,\n     *         key2=:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"url?key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne une url normalisée\n     */\n    normalyzeUrl : function (url, params, encode) {\n        var myUrl = url;\n\n        if (url) {\n            var k = url.indexOf(\"?\");\n            if (k === -1) { // pas de ? et KVP\n                myUrl += \"?\";\n            }\n\n            if (k !== -1 && k !== url.length - 1) { // KVP\n                myUrl += \"&\";\n            }\n        }\n\n        if (params) {\n            if (typeof params === \"string\") {\n                myUrl += params;\n            } else {\n                myUrl += this.normalyzeParameters(params);\n            }\n        }\n\n        if (encode) {\n            // FIXME bonne idée ?\n            myUrl = encodeURIComponent(myUrl);\n        }\n\n        return myUrl;\n    },\n\n    /**\n     * Indentation d'une chaine\n     *\n     * @method indent\n     * @static\n     * @param {Number} n - nombre de tabulation\n     * @param {String} msg - chaine\n     *\n     * @example\n     * Gp.Utils.Helper.indent (2, \"message à indenter\")\n     * // out\n     * // ........message à indenter\n     *\n     * @returns {String} retourne une chaine indentée\n     */\n    indent : function (n, msg) {\n        var num = n || 0;\n        return new Array(num + 1).join(\"\\t\") + msg;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Helper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvVXRpbHMvSGVscGVyLmpzPzBiZDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGNBQWM7QUFDN0IsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTs7QUFFQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZSxxRUFBTSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9VdGlscy9IZWxwZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsYXNzZSB1dGlsaXRhaXJlXG4gKlxuICogQG1vZHVsZSBIZWxwZXJcbiAqIEBhbGlhcyBHcC5IZWxwZXJcbiAqL1xudmFyIEhlbHBlciA9IHtcblxuICAgIC8qKlxuICAgICAqIGNvbmNhdGVuYXRpb24gZGVzIHBhcmFtZXRyZXMga2V5L3ZhbHVlIGRhbnMgbGVzIHVybHNcbiAgICAgKlxuICAgICAqIEBtZXRob2Qgbm9ybWFseXplUGFyYW1ldGVyc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gdGFibGVhdSBkZSBjbGVmL3ZhbGV1clxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgR3AuVXRpbHMuSGVscGVyLm5vcm1hbHl6ZVBhcmFtZXRlcnMgKHtcbiAgICAgKiAgICAgICAgIGtleTE6dmFsdWUxLFxuICAgICAqICAgICAgICAga2V5Mjp2YWx1ZTIsXG4gICAgICogICAgICAgICBrZXkzOnZhbHVlM1xuICAgICAqICB9KTtcbiAgICAgKiAgLy8gb3V0IDogXCJrZXkxPXZhbHVlMSZrZXkyPXZhbHVlMiZrZXkzPXZhbHVlM1wiXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXRvdXJuZSBsZXMgcGFyYW3DqHRyZXMgY29uY2F0w6luw6lzXG4gICAgICovXG4gICAgbm9ybWFseXplUGFyYW1ldGVycyA6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIG15UGFyYW1zID0gbnVsbDtcblxuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgdGFiUGFyYW1zID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFiUGFyYW1zLnB1c2goa2V5ICsgXCI9XCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBteVBhcmFtcyA9IHRhYlBhcmFtcy5qb2luKFwiJlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBteVBhcmFtcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uY2F0w6luYXRpb24gZXQgZW5jb2RhZ2UgZGVzIHVybHMuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIG5vcm1hbHl6ZVVybFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gdXJsXG4gICAgICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBwYXJhbXMgLSB0YWJsZWF1IGRlIGNsZWYvdmFsZXVyIG91IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5jb2RlIC0gdHJ1ZXxmYWxzZSwgZmFsc2UgcGFyIGRlZmF1dFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgR3AuVXRpbHMuSGVscGVyLm5vcm1hbHl6ZVVybCAodXJsLCB7XG4gICAgICogICAgICAgICBrZXkxOnZhbHVlMSxcbiAgICAgKiAgICAgICAgIGtleTI9OnZhbHVlMixcbiAgICAgKiAgICAgICAgIGtleTM6dmFsdWUzXG4gICAgICogIH0pO1xuICAgICAqICAvLyBvdXQgOiBcInVybD9rZXkxPXZhbHVlMSZrZXkyPXZhbHVlMiZrZXkzPXZhbHVlM1wiXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXRvdXJuZSB1bmUgdXJsIG5vcm1hbGlzw6llXG4gICAgICovXG4gICAgbm9ybWFseXplVXJsIDogZnVuY3Rpb24gKHVybCwgcGFyYW1zLCBlbmNvZGUpIHtcbiAgICAgICAgdmFyIG15VXJsID0gdXJsO1xuXG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgIHZhciBrID0gdXJsLmluZGV4T2YoXCI/XCIpO1xuICAgICAgICAgICAgaWYgKGsgPT09IC0xKSB7IC8vIHBhcyBkZSA/IGV0IEtWUFxuICAgICAgICAgICAgICAgIG15VXJsICs9IFwiP1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoayAhPT0gLTEgJiYgayAhPT0gdXJsLmxlbmd0aCAtIDEpIHsgLy8gS1ZQXG4gICAgICAgICAgICAgICAgbXlVcmwgKz0gXCImXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIG15VXJsICs9IHBhcmFtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbXlVcmwgKz0gdGhpcy5ub3JtYWx5emVQYXJhbWV0ZXJzKHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW5jb2RlKSB7XG4gICAgICAgICAgICAvLyBGSVhNRSBib25uZSBpZMOpZSA/XG4gICAgICAgICAgICBteVVybCA9IGVuY29kZVVSSUNvbXBvbmVudChteVVybCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbXlVcmw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluZGVudGF0aW9uIGQndW5lIGNoYWluZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBpbmRlbnRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG4gLSBub21icmUgZGUgdGFidWxhdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSBjaGFpbmVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogR3AuVXRpbHMuSGVscGVyLmluZGVudCAoMiwgXCJtZXNzYWdlIMOgIGluZGVudGVyXCIpXG4gICAgICogLy8gb3V0XG4gICAgICogLy8gLi4uLi4uLi5tZXNzYWdlIMOgIGluZGVudGVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSByZXRvdXJuZSB1bmUgY2hhaW5lIGluZGVudMOpZVxuICAgICAqL1xuICAgIGluZGVudCA6IGZ1bmN0aW9uIChuLCBtc2cpIHtcbiAgICAgICAgdmFyIG51bSA9IG4gfHwgMDtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheShudW0gKyAxKS5qb2luKFwiXFx0XCIpICsgbXNnO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhlbHBlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Utils/Helper.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js":
/*!************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar LoggerByDefault = {\n    /**\n     * logger statique\n     *\n     * @static\n     * @param {String} name - nom du logger\n     * @returns {Object} retourne un logger\n     */\n    getLogger : function (name) {\n        // Substitute global constants configured at compile time\n        // cf. webpack.config.js\n        // FIXME howtodo !? DefineWebpackPlugin ? EnvironmentWebpackPlugin ?\n        (\"false\".match(/true/))\n            ? loglevel__WEBPACK_IMPORTED_MODULE_0__[\"disableAll\"]() : loglevel__WEBPACK_IMPORTED_MODULE_0__[\"enableAll\"]();\n        var logname = name || \"default\";\n        return loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"](logname);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LoggerByDefault);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvVXRpbHMvTG9nZ2VyQnlEZWZhdWx0LmpzPzA2NWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbURBQWMsS0FBSyxrREFBYTtBQUM5QztBQUNBLGVBQWUsa0RBQWE7QUFDNUI7QUFDQTs7QUFFZSw4RUFBZSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2dlb3BvcnRhbC1hY2Nlc3MtbGliL3NyYy9VdGlscy9Mb2dnZXJCeURlZmF1bHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBMb2cgZnJvbSBcImxvZ2xldmVsXCI7XG5cbnZhciBMb2dnZXJCeURlZmF1bHQgPSB7XG4gICAgLyoqXG4gICAgICogbG9nZ2VyIHN0YXRpcXVlXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBub20gZHUgbG9nZ2VyXG4gICAgICogQHJldHVybnMge09iamVjdH0gcmV0b3VybmUgdW4gbG9nZ2VyXG4gICAgICovXG4gICAgZ2V0TG9nZ2VyIDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgLy8gU3Vic3RpdHV0ZSBnbG9iYWwgY29uc3RhbnRzIGNvbmZpZ3VyZWQgYXQgY29tcGlsZSB0aW1lXG4gICAgICAgIC8vIGNmLiB3ZWJwYWNrLmNvbmZpZy5qc1xuICAgICAgICAvLyBGSVhNRSBob3d0b2RvICE/IERlZmluZVdlYnBhY2tQbHVnaW4gPyBFbnZpcm9ubWVudFdlYnBhY2tQbHVnaW4gP1xuICAgICAgICAoXCJfX1BST0RVQ1RJT05fX1wiLm1hdGNoKC90cnVlLykpXG4gICAgICAgICAgICA/IExvZy5kaXNhYmxlQWxsKCkgOiBMb2cuZW5hYmxlQWxsKCk7XG4gICAgICAgIHZhciBsb2duYW1lID0gbmFtZSB8fCBcImRlZmF1bHRcIjtcbiAgICAgICAgcmV0dXJuIExvZy5nZXRMb2dnZXIobG9nbmFtZSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9nZ2VyQnlEZWZhdWx0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js":
/*!**************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Classe de gestion des erreurs qui permer d'associer un message d'erreur à l'exception lancée.\n *\n * @example\n * MessagesResources.getMessage(\"ERROR_PARAM_MISSING\", \"x\", \"y\", \"z\")));\n * // --> output : Parameter(s) 'x - y - z' missing\n *\n * @module MessagesResources\n * @alias Gp.Utils.MessagesResources\n * @private\n */\nvar MessagesResources = {\n\n    // Paramètres\n    PARAM_MISSING : \"Parameter(s) '%var%' missing\",\n    PARAM_EMPTY : \"Parameter(s) '%var%' empty\",\n    PARAM_TYPE : \"Wrong type(s) for parameter(s) '%var%'\",\n    PARAM_FORMAT : \"Parameter(s) '%var%' not correctly formatted\",\n    PARAM_NOT_SUPPORT : \"Value(s) for parameter(s) '%var%' not supported\",\n    PARAM_NOT_SUPPORT_NODEJS : \"Value(s) for parameter(s) '%var%' not supported to NodeJS\",\n    PARAM_UNKNOWN : \"Value(s) for parameter(s) '%var%' unknown\",\n\n    // Services\n    // Requête\n    SERVICE_REQUEST_BUILD : \"An error occurred during the request building of the service\",\n    SERVICE_REQUEST_EMPTY : \"The request sent to the service is empty\",\n\n    // Réponse\n    SERVICE_RESPONSE_EXCEPTION : \"The service returned an exception : '%var%'\",\n    SERVICE_RESPONSE_EXCEPTION_2 : \"The service returned an exception\",\n    SERVICE_RESPONSE_ANALYSE : \"An error occurred while parsing the response '%var%' of the service\",\n    SERVICE_RESPONSE_ANALYSE_2 : \"An unknown error occurred while parsing the response\",\n    SERVICE_RESPONSE_EMPTY : \"The response of the service is empty\",\n    SERVICE_RESPONSE_EMPTY_2 : \"The response from the service could not be analyzed or is empty\",\n    SERVICE_RESPONSE_FORMAT : \"The format of the service response is not supported (handled format(s) : '%var%')\",\n    SERVICE_RESPONSE_FORMAT_2 : \"The format of the service response is not supported\",\n    SERVICE_RESPONSE_FORMAT_3 : \"No suggestion matching the search\",\n\n    // Classes\n    CLASS_CONSTRUCTOR : \"'%var%' constructor cannot be called as a function.\",\n\n    /**\n     * Fonction qui va retourner le message d'erreur associé à la clé donnée\n     *\n     * @method getMessage\n     * @param {String} clef - Clef de l'erreur (ex : ERROR_PARAM)\n     * @param {String[]} parametres - Paramètres/variables concernés par le message d'erreur associé à la clef donnée\n     * @return {String} message - String contenant le message de l'exception\n     */\n    getMessage : function (clef, parametres) {\n        // param de la fonction uniquement pour la documentation...\n\n        if (Object.keys(arguments).length === 0) {\n            return \"Message indefined !\";\n        }\n\n        var params = Array.prototype.slice.call(arguments);\n        var key = params.shift();\n        var args = params;\n\n        var message = this[key];\n\n        try {\n            if (Array.isArray(args) && args.length > 0) {\n                message = message.replace(\"%var%\", args.join(\" - \"));\n            } else {\n                message = message.replace(\"%var%\", \"%var% (not specified)\");\n            }\n        } catch (e) {\n            // error de string.replace()\n\n        }\n\n        return message;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MessagesResources);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvVXRpbHMvTWVzc2FnZXNSZXNvdXJjZXMuanM/Y2ViZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZSxnRkFBaUIsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvVXRpbHMvTWVzc2FnZXNSZXNvdXJjZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsYXNzZSBkZSBnZXN0aW9uIGRlcyBlcnJldXJzIHF1aSBwZXJtZXIgZCdhc3NvY2llciB1biBtZXNzYWdlIGQnZXJyZXVyIMOgIGwnZXhjZXB0aW9uIGxhbmPDqWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIE1lc3NhZ2VzUmVzb3VyY2VzLmdldE1lc3NhZ2UoXCJFUlJPUl9QQVJBTV9NSVNTSU5HXCIsIFwieFwiLCBcInlcIiwgXCJ6XCIpKSk7XG4gKiAvLyAtLT4gb3V0cHV0IDogUGFyYW1ldGVyKHMpICd4IC0geSAtIHonIG1pc3NpbmdcbiAqXG4gKiBAbW9kdWxlIE1lc3NhZ2VzUmVzb3VyY2VzXG4gKiBAYWxpYXMgR3AuVXRpbHMuTWVzc2FnZXNSZXNvdXJjZXNcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBNZXNzYWdlc1Jlc291cmNlcyA9IHtcblxuICAgIC8vIFBhcmFtw6h0cmVzXG4gICAgUEFSQU1fTUlTU0lORyA6IFwiUGFyYW1ldGVyKHMpICcldmFyJScgbWlzc2luZ1wiLFxuICAgIFBBUkFNX0VNUFRZIDogXCJQYXJhbWV0ZXIocykgJyV2YXIlJyBlbXB0eVwiLFxuICAgIFBBUkFNX1RZUEUgOiBcIldyb25nIHR5cGUocykgZm9yIHBhcmFtZXRlcihzKSAnJXZhciUnXCIsXG4gICAgUEFSQU1fRk9STUFUIDogXCJQYXJhbWV0ZXIocykgJyV2YXIlJyBub3QgY29ycmVjdGx5IGZvcm1hdHRlZFwiLFxuICAgIFBBUkFNX05PVF9TVVBQT1JUIDogXCJWYWx1ZShzKSBmb3IgcGFyYW1ldGVyKHMpICcldmFyJScgbm90IHN1cHBvcnRlZFwiLFxuICAgIFBBUkFNX05PVF9TVVBQT1JUX05PREVKUyA6IFwiVmFsdWUocykgZm9yIHBhcmFtZXRlcihzKSAnJXZhciUnIG5vdCBzdXBwb3J0ZWQgdG8gTm9kZUpTXCIsXG4gICAgUEFSQU1fVU5LTk9XTiA6IFwiVmFsdWUocykgZm9yIHBhcmFtZXRlcihzKSAnJXZhciUnIHVua25vd25cIixcblxuICAgIC8vIFNlcnZpY2VzXG4gICAgLy8gUmVxdcOqdGVcbiAgICBTRVJWSUNFX1JFUVVFU1RfQlVJTEQgOiBcIkFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgcmVxdWVzdCBidWlsZGluZyBvZiB0aGUgc2VydmljZVwiLFxuICAgIFNFUlZJQ0VfUkVRVUVTVF9FTVBUWSA6IFwiVGhlIHJlcXVlc3Qgc2VudCB0byB0aGUgc2VydmljZSBpcyBlbXB0eVwiLFxuXG4gICAgLy8gUsOpcG9uc2VcbiAgICBTRVJWSUNFX1JFU1BPTlNFX0VYQ0VQVElPTiA6IFwiVGhlIHNlcnZpY2UgcmV0dXJuZWQgYW4gZXhjZXB0aW9uIDogJyV2YXIlJ1wiLFxuICAgIFNFUlZJQ0VfUkVTUE9OU0VfRVhDRVBUSU9OXzIgOiBcIlRoZSBzZXJ2aWNlIHJldHVybmVkIGFuIGV4Y2VwdGlvblwiLFxuICAgIFNFUlZJQ0VfUkVTUE9OU0VfQU5BTFlTRSA6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcGFyc2luZyB0aGUgcmVzcG9uc2UgJyV2YXIlJyBvZiB0aGUgc2VydmljZVwiLFxuICAgIFNFUlZJQ0VfUkVTUE9OU0VfQU5BTFlTRV8yIDogXCJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIHdoaWxlIHBhcnNpbmcgdGhlIHJlc3BvbnNlXCIsXG4gICAgU0VSVklDRV9SRVNQT05TRV9FTVBUWSA6IFwiVGhlIHJlc3BvbnNlIG9mIHRoZSBzZXJ2aWNlIGlzIGVtcHR5XCIsXG4gICAgU0VSVklDRV9SRVNQT05TRV9FTVBUWV8yIDogXCJUaGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmljZSBjb3VsZCBub3QgYmUgYW5hbHl6ZWQgb3IgaXMgZW1wdHlcIixcbiAgICBTRVJWSUNFX1JFU1BPTlNFX0ZPUk1BVCA6IFwiVGhlIGZvcm1hdCBvZiB0aGUgc2VydmljZSByZXNwb25zZSBpcyBub3Qgc3VwcG9ydGVkIChoYW5kbGVkIGZvcm1hdChzKSA6ICcldmFyJScpXCIsXG4gICAgU0VSVklDRV9SRVNQT05TRV9GT1JNQVRfMiA6IFwiVGhlIGZvcm1hdCBvZiB0aGUgc2VydmljZSByZXNwb25zZSBpcyBub3Qgc3VwcG9ydGVkXCIsXG4gICAgU0VSVklDRV9SRVNQT05TRV9GT1JNQVRfMyA6IFwiTm8gc3VnZ2VzdGlvbiBtYXRjaGluZyB0aGUgc2VhcmNoXCIsXG5cbiAgICAvLyBDbGFzc2VzXG4gICAgQ0xBU1NfQ09OU1RSVUNUT1IgOiBcIicldmFyJScgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiLFxuXG4gICAgLyoqXG4gICAgICogRm9uY3Rpb24gcXVpIHZhIHJldG91cm5lciBsZSBtZXNzYWdlIGQnZXJyZXVyIGFzc29jacOpIMOgIGxhIGNsw6kgZG9ubsOpZVxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRNZXNzYWdlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsZWYgLSBDbGVmIGRlIGwnZXJyZXVyIChleCA6IEVSUk9SX1BBUkFNKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nW119IHBhcmFtZXRyZXMgLSBQYXJhbcOodHJlcy92YXJpYWJsZXMgY29uY2VybsOpcyBwYXIgbGUgbWVzc2FnZSBkJ2VycmV1ciBhc3NvY2nDqSDDoCBsYSBjbGVmIGRvbm7DqWVcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IG1lc3NhZ2UgLSBTdHJpbmcgY29udGVuYW50IGxlIG1lc3NhZ2UgZGUgbCdleGNlcHRpb25cbiAgICAgKi9cbiAgICBnZXRNZXNzYWdlIDogZnVuY3Rpb24gKGNsZWYsIHBhcmFtZXRyZXMpIHtcbiAgICAgICAgLy8gcGFyYW0gZGUgbGEgZm9uY3Rpb24gdW5pcXVlbWVudCBwb3VyIGxhIGRvY3VtZW50YXRpb24uLi5cblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYXJndW1lbnRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcIk1lc3NhZ2UgaW5kZWZpbmVkICFcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJhbXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICB2YXIga2V5ID0gcGFyYW1zLnNoaWZ0KCk7XG4gICAgICAgIHZhciBhcmdzID0gcGFyYW1zO1xuXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpc1trZXldO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFwiJXZhciVcIiwgYXJncy5qb2luKFwiIC0gXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZShcIiV2YXIlXCIsIFwiJXZhciUgKG5vdCBzcGVjaWZpZWQpXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBlcnJvciBkZSBzdHJpbmcucmVwbGFjZSgpXG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VzUmVzb3VyY2VzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\n");

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/loglevel/lib/loglevel.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/proj4/dist/proj4-src.js":
/*!**********************************************!*\
  !*** ./node_modules/proj4/dist/proj4-src.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? module.exports = factory() :\n    undefined;\n}(this, (function () { 'use strict';\n\n    var globals = function(defs) {\n      defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n      defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n      defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n      defs.WGS84 = defs['EPSG:4326'];\n      defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n      defs.GOOGLE = defs['EPSG:3857'];\n      defs['EPSG:900913'] = defs['EPSG:3857'];\n      defs['EPSG:102113'] = defs['EPSG:3857'];\n    };\n\n    var PJD_3PARAM = 1;\n    var PJD_7PARAM = 2;\n    var PJD_WGS84 = 4; // WGS84 or equivalent\n    var PJD_NODATUM = 5; // WGS84 or equivalent\n    var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\n    var HALF_PI = Math.PI/2;\n    // ellipoid pj_set_ell.c\n    var SIXTH = 0.1666666666666666667;\n    /* 1/6 */\n    var RA4 = 0.04722222222222222222;\n    /* 17/360 */\n    var RA6 = 0.02215608465608465608;\n    var EPSLN = 1.0e-10;\n    // you'd think you could use Number.EPSILON above but that makes\n    // Mollweide get into an infinate loop.\n\n    var D2R = 0.01745329251994329577;\n    var R2D = 57.29577951308232088;\n    var FORTPI = Math.PI/4;\n    var TWO_PI = Math.PI * 2;\n    // SPI is slightly greater than Math.PI, so values that exceed the -180..180\n    // degree range by a tiny amount don't get wrapped. This prevents points that\n    // have drifted from their original location along the 180th meridian (due to\n    // floating point error) from changing their sign.\n    var SPI = 3.14159265359;\n\n    var exports$1 = {};\n    exports$1.greenwich = 0.0; //\"0dE\",\n    exports$1.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\n    exports$1.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\n    exports$1.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\n    exports$1.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\n    exports$1.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\n    exports$1.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\n    exports$1.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\n    exports$1.ferro = -17.666666666667; //\"17d40'W\",\n    exports$1.brussels = 4.367975; //\"4d22'4.71\\\"E\",\n    exports$1.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\n    exports$1.athens = 23.7163375; //\"23d42'58.815\\\"E\",\n    exports$1.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n\n    var units = {\n      ft: {to_meter: 0.3048},\n      'us-ft': {to_meter: 1200 / 3937}\n    };\n\n    var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\n    function match(obj, key) {\n      if (obj[key]) {\n        return obj[key];\n      }\n      var keys = Object.keys(obj);\n      var lkey = key.toLowerCase().replace(ignoredChar, '');\n      var i = -1;\n      var testkey, processedKey;\n      while (++i < keys.length) {\n        testkey = keys[i];\n        processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n        if (processedKey === lkey) {\n          return obj[testkey];\n        }\n      }\n    }\n\n    var parseProj = function(defData) {\n      var self = {};\n      var paramObj = defData.split('+').map(function(v) {\n        return v.trim();\n      }).filter(function(a) {\n        return a;\n      }).reduce(function(p, a) {\n        var split = a.split('=');\n        split.push(true);\n        p[split[0].toLowerCase()] = split[1];\n        return p;\n      }, {});\n      var paramName, paramVal, paramOutname;\n      var params = {\n        proj: 'projName',\n        datum: 'datumCode',\n        rf: function(v) {\n          self.rf = parseFloat(v);\n        },\n        lat_0: function(v) {\n          self.lat0 = v * D2R;\n        },\n        lat_1: function(v) {\n          self.lat1 = v * D2R;\n        },\n        lat_2: function(v) {\n          self.lat2 = v * D2R;\n        },\n        lat_ts: function(v) {\n          self.lat_ts = v * D2R;\n        },\n        lon_0: function(v) {\n          self.long0 = v * D2R;\n        },\n        lon_1: function(v) {\n          self.long1 = v * D2R;\n        },\n        lon_2: function(v) {\n          self.long2 = v * D2R;\n        },\n        alpha: function(v) {\n          self.alpha = parseFloat(v) * D2R;\n        },\n        lonc: function(v) {\n          self.longc = v * D2R;\n        },\n        x_0: function(v) {\n          self.x0 = parseFloat(v);\n        },\n        y_0: function(v) {\n          self.y0 = parseFloat(v);\n        },\n        k_0: function(v) {\n          self.k0 = parseFloat(v);\n        },\n        k: function(v) {\n          self.k0 = parseFloat(v);\n        },\n        a: function(v) {\n          self.a = parseFloat(v);\n        },\n        b: function(v) {\n          self.b = parseFloat(v);\n        },\n        r_a: function() {\n          self.R_A = true;\n        },\n        zone: function(v) {\n          self.zone = parseInt(v, 10);\n        },\n        south: function() {\n          self.utmSouth = true;\n        },\n        towgs84: function(v) {\n          self.datum_params = v.split(\",\").map(function(a) {\n            return parseFloat(a);\n          });\n        },\n        to_meter: function(v) {\n          self.to_meter = parseFloat(v);\n        },\n        units: function(v) {\n          self.units = v;\n          var unit = match(units, v);\n          if (unit) {\n            self.to_meter = unit.to_meter;\n          }\n        },\n        from_greenwich: function(v) {\n          self.from_greenwich = v * D2R;\n        },\n        pm: function(v) {\n          var pm = match(exports$1, v);\n          self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n        },\n        nadgrids: function(v) {\n          if (v === '@null') {\n            self.datumCode = 'none';\n          }\n          else {\n            self.nadgrids = v;\n          }\n        },\n        axis: function(v) {\n          var legalAxis = \"ewnsud\";\n          if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n            self.axis = v;\n          }\n        }\n      };\n      for (paramName in paramObj) {\n        paramVal = paramObj[paramName];\n        if (paramName in params) {\n          paramOutname = params[paramName];\n          if (typeof paramOutname === 'function') {\n            paramOutname(paramVal);\n          }\n          else {\n            self[paramOutname] = paramVal;\n          }\n        }\n        else {\n          self[paramName] = paramVal;\n        }\n      }\n      if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n        self.datumCode = self.datumCode.toLowerCase();\n      }\n      return self;\n    };\n\n    var NEUTRAL = 1;\n    var KEYWORD = 2;\n    var NUMBER = 3;\n    var QUOTED = 4;\n    var AFTERQUOTE = 5;\n    var ENDED = -1;\n    var whitespace = /\\s/;\n    var latin = /[A-Za-z]/;\n    var keyword = /[A-Za-z84]/;\n    var endThings = /[,\\]]/;\n    var digets = /[\\d\\.E\\-\\+]/;\n    // const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\n    function Parser(text) {\n      if (typeof text !== 'string') {\n        throw new Error('not a string');\n      }\n      this.text = text.trim();\n      this.level = 0;\n      this.place = 0;\n      this.root = null;\n      this.stack = [];\n      this.currentObject = null;\n      this.state = NEUTRAL;\n    }\n    Parser.prototype.readCharicter = function() {\n      var char = this.text[this.place++];\n      if (this.state !== QUOTED) {\n        while (whitespace.test(char)) {\n          if (this.place >= this.text.length) {\n            return;\n          }\n          char = this.text[this.place++];\n        }\n      }\n      switch (this.state) {\n        case NEUTRAL:\n          return this.neutral(char);\n        case KEYWORD:\n          return this.keyword(char)\n        case QUOTED:\n          return this.quoted(char);\n        case AFTERQUOTE:\n          return this.afterquote(char);\n        case NUMBER:\n          return this.number(char);\n        case ENDED:\n          return;\n      }\n    };\n    Parser.prototype.afterquote = function(char) {\n      if (char === '\"') {\n        this.word += '\"';\n        this.state = QUOTED;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.word = this.word.trim();\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n    };\n    Parser.prototype.afterItem = function(char) {\n      if (char === ',') {\n        if (this.word !== null) {\n          this.currentObject.push(this.word);\n        }\n        this.word = null;\n        this.state = NEUTRAL;\n        return;\n      }\n      if (char === ']') {\n        this.level--;\n        if (this.word !== null) {\n          this.currentObject.push(this.word);\n          this.word = null;\n        }\n        this.state = NEUTRAL;\n        this.currentObject = this.stack.pop();\n        if (!this.currentObject) {\n          this.state = ENDED;\n        }\n\n        return;\n      }\n    };\n    Parser.prototype.number = function(char) {\n      if (digets.test(char)) {\n        this.word += char;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.word = parseFloat(this.word);\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n    };\n    Parser.prototype.quoted = function(char) {\n      if (char === '\"') {\n        this.state = AFTERQUOTE;\n        return;\n      }\n      this.word += char;\n      return;\n    };\n    Parser.prototype.keyword = function(char) {\n      if (keyword.test(char)) {\n        this.word += char;\n        return;\n      }\n      if (char === '[') {\n        var newObjects = [];\n        newObjects.push(this.word);\n        this.level++;\n        if (this.root === null) {\n          this.root = newObjects;\n        } else {\n          this.currentObject.push(newObjects);\n        }\n        this.stack.push(this.currentObject);\n        this.currentObject = newObjects;\n        this.state = NEUTRAL;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n    };\n    Parser.prototype.neutral = function(char) {\n      if (latin.test(char)) {\n        this.word = char;\n        this.state = KEYWORD;\n        return;\n      }\n      if (char === '\"') {\n        this.word = '';\n        this.state = QUOTED;\n        return;\n      }\n      if (digets.test(char)) {\n        this.word = char;\n        this.state = NUMBER;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n    };\n    Parser.prototype.output = function() {\n      while (this.place < this.text.length) {\n        this.readCharicter();\n      }\n      if (this.state === ENDED) {\n        return this.root;\n      }\n      throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n    };\n\n    function parseString(txt) {\n      var parser = new Parser(txt);\n      return parser.output();\n    }\n\n    function mapit(obj, key, value) {\n      if (Array.isArray(key)) {\n        value.unshift(key);\n        key = null;\n      }\n      var thing = key ? {} : obj;\n\n      var out = value.reduce(function(newObj, item) {\n        sExpr(item, newObj);\n        return newObj\n      }, thing);\n      if (key) {\n        obj[key] = out;\n      }\n    }\n\n    function sExpr(v, obj) {\n      if (!Array.isArray(v)) {\n        obj[v] = true;\n        return;\n      }\n      var key = v.shift();\n      if (key === 'PARAMETER') {\n        key = v.shift();\n      }\n      if (v.length === 1) {\n        if (Array.isArray(v[0])) {\n          obj[key] = {};\n          sExpr(v[0], obj[key]);\n          return;\n        }\n        obj[key] = v[0];\n        return;\n      }\n      if (!v.length) {\n        obj[key] = true;\n        return;\n      }\n      if (key === 'TOWGS84') {\n        obj[key] = v;\n        return;\n      }\n      if (key === 'AXIS') {\n        if (!(key in obj)) {\n          obj[key] = [];\n        }\n        obj[key].push(v);\n        return;\n      }\n      if (!Array.isArray(key)) {\n        obj[key] = {};\n      }\n\n      var i;\n      switch (key) {\n        case 'UNIT':\n        case 'PRIMEM':\n        case 'VERT_DATUM':\n          obj[key] = {\n            name: v[0].toLowerCase(),\n            convert: v[1]\n          };\n          if (v.length === 3) {\n            sExpr(v[2], obj[key]);\n          }\n          return;\n        case 'SPHEROID':\n        case 'ELLIPSOID':\n          obj[key] = {\n            name: v[0],\n            a: v[1],\n            rf: v[2]\n          };\n          if (v.length === 4) {\n            sExpr(v[3], obj[key]);\n          }\n          return;\n        case 'PROJECTEDCRS':\n        case 'PROJCRS':\n        case 'GEOGCS':\n        case 'GEOCCS':\n        case 'PROJCS':\n        case 'LOCAL_CS':\n        case 'GEODCRS':\n        case 'GEODETICCRS':\n        case 'GEODETICDATUM':\n        case 'EDATUM':\n        case 'ENGINEERINGDATUM':\n        case 'VERT_CS':\n        case 'VERTCRS':\n        case 'VERTICALCRS':\n        case 'COMPD_CS':\n        case 'COMPOUNDCRS':\n        case 'ENGINEERINGCRS':\n        case 'ENGCRS':\n        case 'FITTED_CS':\n        case 'LOCAL_DATUM':\n        case 'DATUM':\n          v[0] = ['name', v[0]];\n          mapit(obj, key, v);\n          return;\n        default:\n          i = -1;\n          while (++i < v.length) {\n            if (!Array.isArray(v[i])) {\n              return sExpr(v, obj[key]);\n            }\n          }\n          return mapit(obj, key, v);\n      }\n    }\n\n    var D2R$1 = 0.01745329251994329577;\n    function rename(obj, params) {\n      var outName = params[0];\n      var inName = params[1];\n      if (!(outName in obj) && (inName in obj)) {\n        obj[outName] = obj[inName];\n        if (params.length === 3) {\n          obj[outName] = params[2](obj[outName]);\n        }\n      }\n    }\n\n    function d2r(input) {\n      return input * D2R$1;\n    }\n\n    function cleanWKT(wkt) {\n      if (wkt.type === 'GEOGCS') {\n        wkt.projName = 'longlat';\n      } else if (wkt.type === 'LOCAL_CS') {\n        wkt.projName = 'identity';\n        wkt.local = true;\n      } else {\n        if (typeof wkt.PROJECTION === 'object') {\n          wkt.projName = Object.keys(wkt.PROJECTION)[0];\n        } else {\n          wkt.projName = wkt.PROJECTION;\n        }\n      }\n      if (wkt.AXIS) {\n        var axisOrder = '';\n        for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n          var axis = wkt.AXIS[i];\n          var descriptor = axis[0].toLowerCase();\n          if (descriptor.indexOf('north') !== -1) {\n            axisOrder += 'n';\n          } else if (descriptor.indexOf('south') !== -1) {\n            axisOrder += 's';\n          } else if (descriptor.indexOf('east') !== -1) {\n            axisOrder += 'e';\n          } else if (descriptor.indexOf('west') !== -1) {\n            axisOrder += 'w';\n          }\n        }\n        if (axisOrder.length === 2) {\n          axisOrder += 'u';\n        }\n        if (axisOrder.length === 3) {\n          wkt.axis = axisOrder;\n        }\n      }\n      if (wkt.UNIT) {\n        wkt.units = wkt.UNIT.name.toLowerCase();\n        if (wkt.units === 'metre') {\n          wkt.units = 'meter';\n        }\n        if (wkt.UNIT.convert) {\n          if (wkt.type === 'GEOGCS') {\n            if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n              wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n            }\n          } else {\n            wkt.to_meter = wkt.UNIT.convert;\n          }\n        }\n      }\n      var geogcs = wkt.GEOGCS;\n      if (wkt.type === 'GEOGCS') {\n        geogcs = wkt;\n      }\n      if (geogcs) {\n        //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n        //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n        //}\n        if (geogcs.DATUM) {\n          wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n        } else {\n          wkt.datumCode = geogcs.name.toLowerCase();\n        }\n        if (wkt.datumCode.slice(0, 2) === 'd_') {\n          wkt.datumCode = wkt.datumCode.slice(2);\n        }\n        if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n          wkt.datumCode = 'nzgd49';\n        }\n        if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n          if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n            wkt.sphere = true;\n          }\n          wkt.datumCode = 'wgs84';\n        }\n        if (wkt.datumCode.slice(-6) === '_ferro') {\n          wkt.datumCode = wkt.datumCode.slice(0, - 6);\n        }\n        if (wkt.datumCode.slice(-8) === '_jakarta') {\n          wkt.datumCode = wkt.datumCode.slice(0, - 8);\n        }\n        if (~wkt.datumCode.indexOf('belge')) {\n          wkt.datumCode = 'rnb72';\n        }\n        if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n          wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n          if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n            wkt.ellps = 'intl';\n          }\n\n          wkt.a = geogcs.DATUM.SPHEROID.a;\n          wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n        }\n\n        if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n          wkt.datum_params = geogcs.DATUM.TOWGS84;\n        }\n        if (~wkt.datumCode.indexOf('osgb_1936')) {\n          wkt.datumCode = 'osgb36';\n        }\n        if (~wkt.datumCode.indexOf('osni_1952')) {\n          wkt.datumCode = 'osni52';\n        }\n        if (~wkt.datumCode.indexOf('tm65')\n          || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n          wkt.datumCode = 'ire65';\n        }\n        if (wkt.datumCode === 'ch1903+') {\n          wkt.datumCode = 'ch1903';\n        }\n        if (~wkt.datumCode.indexOf('israel')) {\n          wkt.datumCode = 'isr93';\n        }\n      }\n      if (wkt.b && !isFinite(wkt.b)) {\n        wkt.b = wkt.a;\n      }\n\n      function toMeter(input) {\n        var ratio = wkt.to_meter || 1;\n        return input * ratio;\n      }\n      var renamer = function(a) {\n        return rename(wkt, a);\n      };\n      var list = [\n        ['standard_parallel_1', 'Standard_Parallel_1'],\n        ['standard_parallel_2', 'Standard_Parallel_2'],\n        ['false_easting', 'False_Easting'],\n        ['false_northing', 'False_Northing'],\n        ['central_meridian', 'Central_Meridian'],\n        ['latitude_of_origin', 'Latitude_Of_Origin'],\n        ['latitude_of_origin', 'Central_Parallel'],\n        ['scale_factor', 'Scale_Factor'],\n        ['k0', 'scale_factor'],\n        ['latitude_of_center', 'Latitude_Of_Center'],\n        ['latitude_of_center', 'Latitude_of_center'],\n        ['lat0', 'latitude_of_center', d2r],\n        ['longitude_of_center', 'Longitude_Of_Center'],\n        ['longitude_of_center', 'Longitude_of_center'],\n        ['longc', 'longitude_of_center', d2r],\n        ['x0', 'false_easting', toMeter],\n        ['y0', 'false_northing', toMeter],\n        ['long0', 'central_meridian', d2r],\n        ['lat0', 'latitude_of_origin', d2r],\n        ['lat0', 'standard_parallel_1', d2r],\n        ['lat1', 'standard_parallel_1', d2r],\n        ['lat2', 'standard_parallel_2', d2r],\n        ['azimuth', 'Azimuth'],\n        ['alpha', 'azimuth', d2r],\n        ['srsCode', 'name']\n      ];\n      list.forEach(renamer);\n      if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n        wkt.long0 = wkt.longc;\n      }\n      if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n        wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n        wkt.lat_ts = wkt.lat1;\n      }\n    }\n    var wkt = function(wkt) {\n      var lisp = parseString(wkt);\n      var type = lisp.shift();\n      var name = lisp.shift();\n      lisp.unshift(['name', name]);\n      lisp.unshift(['type', type]);\n      var obj = {};\n      sExpr(lisp, obj);\n      cleanWKT(obj);\n      return obj;\n    };\n\n    function defs(name) {\n      /*global console*/\n      var that = this;\n      if (arguments.length === 2) {\n        var def = arguments[1];\n        if (typeof def === 'string') {\n          if (def.charAt(0) === '+') {\n            defs[name] = parseProj(arguments[1]);\n          }\n          else {\n            defs[name] = wkt(arguments[1]);\n          }\n        } else {\n          defs[name] = def;\n        }\n      }\n      else if (arguments.length === 1) {\n        if (Array.isArray(name)) {\n          return name.map(function(v) {\n            if (Array.isArray(v)) {\n              defs.apply(that, v);\n            }\n            else {\n              defs(v);\n            }\n          });\n        }\n        else if (typeof name === 'string') {\n          if (name in defs) {\n            return defs[name];\n          }\n        }\n        else if ('EPSG' in name) {\n          defs['EPSG:' + name.EPSG] = name;\n        }\n        else if ('ESRI' in name) {\n          defs['ESRI:' + name.ESRI] = name;\n        }\n        else if ('IAU2000' in name) {\n          defs['IAU2000:' + name.IAU2000] = name;\n        }\n        else {\n          console.log(name);\n        }\n        return;\n      }\n\n\n    }\n    globals(defs);\n\n    function testObj(code){\n      return typeof code === 'string';\n    }\n    function testDef(code){\n      return code in defs;\n    }\n     var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\n    function testWKT(code){\n      return codeWords.some(function (word) {\n        return code.indexOf(word) > -1;\n      });\n    }\n    var codes = ['3857', '900913', '3785', '102113'];\n    function checkMercator(item) {\n      var auth = match(item, 'authority');\n      if (!auth) {\n        return;\n      }\n      var code = match(auth, 'epsg');\n      return code && codes.indexOf(code) > -1;\n    }\n    function checkProjStr(item) {\n      var ext = match(item, 'extension');\n      if (!ext) {\n        return;\n      }\n      return match(ext, 'proj4');\n    }\n    function testProj(code){\n      return code[0] === '+';\n    }\n    function parse(code){\n      if (testObj(code)) {\n        //check to see if this is a WKT string\n        if (testDef(code)) {\n          return defs[code];\n        }\n        if (testWKT(code)) {\n          var out = wkt(code);\n          // test of spetial case, due to this being a very common and often malformed\n          if (checkMercator(out)) {\n            return defs['EPSG:3857'];\n          }\n          var maybeProjStr = checkProjStr(out);\n          if (maybeProjStr) {\n            return parseProj(maybeProjStr);\n          }\n          return out;\n        }\n        if (testProj(code)) {\n          return parseProj(code);\n        }\n      }else{\n        return code;\n      }\n    }\n\n    var extend = function(destination, source) {\n      destination = destination || {};\n      var value, property;\n      if (!source) {\n        return destination;\n      }\n      for (property in source) {\n        value = source[property];\n        if (value !== undefined) {\n          destination[property] = value;\n        }\n      }\n      return destination;\n    };\n\n    var msfnz = function(eccent, sinphi, cosphi) {\n      var con = eccent * sinphi;\n      return cosphi / (Math.sqrt(1 - con * con));\n    };\n\n    var sign = function(x) {\n      return x<0 ? -1 : 1;\n    };\n\n    var adjust_lon = function(x) {\n      return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n    };\n\n    var tsfnz = function(eccent, phi, sinphi) {\n      var con = eccent * sinphi;\n      var com = 0.5 * eccent;\n      con = Math.pow(((1 - con) / (1 + con)), com);\n      return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n    };\n\n    var phi2z = function(eccent, ts) {\n      var eccnth = 0.5 * eccent;\n      var con, dphi;\n      var phi = HALF_PI - 2 * Math.atan(ts);\n      for (var i = 0; i <= 15; i++) {\n        con = eccent * Math.sin(phi);\n        dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n        phi += dphi;\n        if (Math.abs(dphi) <= 0.0000000001) {\n          return phi;\n        }\n      }\n      //console.log(\"phi2z has NoConvergence\");\n      return -9999;\n    };\n\n    function init() {\n      var con = this.b / this.a;\n      this.es = 1 - con * con;\n      if(!('x0' in this)){\n        this.x0 = 0;\n      }\n      if(!('y0' in this)){\n        this.y0 = 0;\n      }\n      this.e = Math.sqrt(this.es);\n      if (this.lat_ts) {\n        if (this.sphere) {\n          this.k0 = Math.cos(this.lat_ts);\n        }\n        else {\n          this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n        }\n      }\n      else {\n        if (!this.k0) {\n          if (this.k) {\n            this.k0 = this.k;\n          }\n          else {\n            this.k0 = 1;\n          }\n        }\n      }\n    }\n\n    /* Mercator forward equations--mapping lat,long to x,y\n      --------------------------------------------------*/\n\n    function forward(p) {\n      var lon = p.x;\n      var lat = p.y;\n      // convert to radians\n      if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n        return null;\n      }\n\n      var x, y;\n      if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n        return null;\n      }\n      else {\n        if (this.sphere) {\n          x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n          y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n        }\n        else {\n          var sinphi = Math.sin(lat);\n          var ts = tsfnz(this.e, lat, sinphi);\n          x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n          y = this.y0 - this.a * this.k0 * Math.log(ts);\n        }\n        p.x = x;\n        p.y = y;\n        return p;\n      }\n    }\n\n    /* Mercator inverse equations--mapping x,y to lat/long\n      --------------------------------------------------*/\n    function inverse(p) {\n\n      var x = p.x - this.x0;\n      var y = p.y - this.y0;\n      var lon, lat;\n\n      if (this.sphere) {\n        lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n      }\n      else {\n        var ts = Math.exp(-y / (this.a * this.k0));\n        lat = phi2z(this.e, ts);\n        if (lat === -9999) {\n          return null;\n        }\n      }\n      lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$1 = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\n    var merc = {\n      init: init,\n      forward: forward,\n      inverse: inverse,\n      names: names$1\n    };\n\n    function init$1() {\n      //no-op for longlat\n    }\n\n    function identity(pt) {\n      return pt;\n    }\n    var names$2 = [\"longlat\", \"identity\"];\n    var longlat = {\n      init: init$1,\n      forward: identity,\n      inverse: identity,\n      names: names$2\n    };\n\n    var projs = [merc, longlat];\n    var names = {};\n    var projStore = [];\n\n    function add(proj, i) {\n      var len = projStore.length;\n      if (!proj.names) {\n        console.log(i);\n        return true;\n      }\n      projStore[len] = proj;\n      proj.names.forEach(function(n) {\n        names[n.toLowerCase()] = len;\n      });\n      return this;\n    }\n\n    function get(name) {\n      if (!name) {\n        return false;\n      }\n      var n = name.toLowerCase();\n      if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n        return projStore[names[n]];\n      }\n    }\n\n    function start() {\n      projs.forEach(add);\n    }\n    var projections = {\n      start: start,\n      add: add,\n      get: get\n    };\n\n    var exports$2 = {};\n    exports$2.MERIT = {\n      a: 6378137.0,\n      rf: 298.257,\n      ellipseName: \"MERIT 1983\"\n    };\n\n    exports$2.SGS85 = {\n      a: 6378136.0,\n      rf: 298.257,\n      ellipseName: \"Soviet Geodetic System 85\"\n    };\n\n    exports$2.GRS80 = {\n      a: 6378137.0,\n      rf: 298.257222101,\n      ellipseName: \"GRS 1980(IUGG, 1980)\"\n    };\n\n    exports$2.IAU76 = {\n      a: 6378140.0,\n      rf: 298.257,\n      ellipseName: \"IAU 1976\"\n    };\n\n    exports$2.airy = {\n      a: 6377563.396,\n      b: 6356256.910,\n      ellipseName: \"Airy 1830\"\n    };\n\n    exports$2.APL4 = {\n      a: 6378137,\n      rf: 298.25,\n      ellipseName: \"Appl. Physics. 1965\"\n    };\n\n    exports$2.NWL9D = {\n      a: 6378145.0,\n      rf: 298.25,\n      ellipseName: \"Naval Weapons Lab., 1965\"\n    };\n\n    exports$2.mod_airy = {\n      a: 6377340.189,\n      b: 6356034.446,\n      ellipseName: \"Modified Airy\"\n    };\n\n    exports$2.andrae = {\n      a: 6377104.43,\n      rf: 300.0,\n      ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n    };\n\n    exports$2.aust_SA = {\n      a: 6378160.0,\n      rf: 298.25,\n      ellipseName: \"Australian Natl & S. Amer. 1969\"\n    };\n\n    exports$2.GRS67 = {\n      a: 6378160.0,\n      rf: 298.2471674270,\n      ellipseName: \"GRS 67(IUGG 1967)\"\n    };\n\n    exports$2.bessel = {\n      a: 6377397.155,\n      rf: 299.1528128,\n      ellipseName: \"Bessel 1841\"\n    };\n\n    exports$2.bess_nam = {\n      a: 6377483.865,\n      rf: 299.1528128,\n      ellipseName: \"Bessel 1841 (Namibia)\"\n    };\n\n    exports$2.clrk66 = {\n      a: 6378206.4,\n      b: 6356583.8,\n      ellipseName: \"Clarke 1866\"\n    };\n\n    exports$2.clrk80 = {\n      a: 6378249.145,\n      rf: 293.4663,\n      ellipseName: \"Clarke 1880 mod.\"\n    };\n\n    exports$2.clrk58 = {\n      a: 6378293.645208759,\n      rf: 294.2606763692654,\n      ellipseName: \"Clarke 1858\"\n    };\n\n    exports$2.CPM = {\n      a: 6375738.7,\n      rf: 334.29,\n      ellipseName: \"Comm. des Poids et Mesures 1799\"\n    };\n\n    exports$2.delmbr = {\n      a: 6376428.0,\n      rf: 311.5,\n      ellipseName: \"Delambre 1810 (Belgium)\"\n    };\n\n    exports$2.engelis = {\n      a: 6378136.05,\n      rf: 298.2566,\n      ellipseName: \"Engelis 1985\"\n    };\n\n    exports$2.evrst30 = {\n      a: 6377276.345,\n      rf: 300.8017,\n      ellipseName: \"Everest 1830\"\n    };\n\n    exports$2.evrst48 = {\n      a: 6377304.063,\n      rf: 300.8017,\n      ellipseName: \"Everest 1948\"\n    };\n\n    exports$2.evrst56 = {\n      a: 6377301.243,\n      rf: 300.8017,\n      ellipseName: \"Everest 1956\"\n    };\n\n    exports$2.evrst69 = {\n      a: 6377295.664,\n      rf: 300.8017,\n      ellipseName: \"Everest 1969\"\n    };\n\n    exports$2.evrstSS = {\n      a: 6377298.556,\n      rf: 300.8017,\n      ellipseName: \"Everest (Sabah & Sarawak)\"\n    };\n\n    exports$2.fschr60 = {\n      a: 6378166.0,\n      rf: 298.3,\n      ellipseName: \"Fischer (Mercury Datum) 1960\"\n    };\n\n    exports$2.fschr60m = {\n      a: 6378155.0,\n      rf: 298.3,\n      ellipseName: \"Fischer 1960\"\n    };\n\n    exports$2.fschr68 = {\n      a: 6378150.0,\n      rf: 298.3,\n      ellipseName: \"Fischer 1968\"\n    };\n\n    exports$2.helmert = {\n      a: 6378200.0,\n      rf: 298.3,\n      ellipseName: \"Helmert 1906\"\n    };\n\n    exports$2.hough = {\n      a: 6378270.0,\n      rf: 297.0,\n      ellipseName: \"Hough\"\n    };\n\n    exports$2.intl = {\n      a: 6378388.0,\n      rf: 297.0,\n      ellipseName: \"International 1909 (Hayford)\"\n    };\n\n    exports$2.kaula = {\n      a: 6378163.0,\n      rf: 298.24,\n      ellipseName: \"Kaula 1961\"\n    };\n\n    exports$2.lerch = {\n      a: 6378139.0,\n      rf: 298.257,\n      ellipseName: \"Lerch 1979\"\n    };\n\n    exports$2.mprts = {\n      a: 6397300.0,\n      rf: 191.0,\n      ellipseName: \"Maupertius 1738\"\n    };\n\n    exports$2.new_intl = {\n      a: 6378157.5,\n      b: 6356772.2,\n      ellipseName: \"New International 1967\"\n    };\n\n    exports$2.plessis = {\n      a: 6376523.0,\n      rf: 6355863.0,\n      ellipseName: \"Plessis 1817 (France)\"\n    };\n\n    exports$2.krass = {\n      a: 6378245.0,\n      rf: 298.3,\n      ellipseName: \"Krassovsky, 1942\"\n    };\n\n    exports$2.SEasia = {\n      a: 6378155.0,\n      b: 6356773.3205,\n      ellipseName: \"Southeast Asia\"\n    };\n\n    exports$2.walbeck = {\n      a: 6376896.0,\n      b: 6355834.8467,\n      ellipseName: \"Walbeck\"\n    };\n\n    exports$2.WGS60 = {\n      a: 6378165.0,\n      rf: 298.3,\n      ellipseName: \"WGS 60\"\n    };\n\n    exports$2.WGS66 = {\n      a: 6378145.0,\n      rf: 298.25,\n      ellipseName: \"WGS 66\"\n    };\n\n    exports$2.WGS7 = {\n      a: 6378135.0,\n      rf: 298.26,\n      ellipseName: \"WGS 72\"\n    };\n\n    var WGS84 = exports$2.WGS84 = {\n      a: 6378137.0,\n      rf: 298.257223563,\n      ellipseName: \"WGS 84\"\n    };\n\n    exports$2.sphere = {\n      a: 6370997.0,\n      b: 6370997.0,\n      ellipseName: \"Normal Sphere (r=6370997)\"\n    };\n\n    function eccentricity(a, b, rf, R_A) {\n      var a2 = a * a; // used in geocentric\n      var b2 = b * b; // used in geocentric\n      var es = (a2 - b2) / a2; // e ^ 2\n      var e = 0;\n      if (R_A) {\n        a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n        a2 = a * a;\n        es = 0;\n      } else {\n        e = Math.sqrt(es); // eccentricity\n      }\n      var ep2 = (a2 - b2) / b2; // used in geocentric\n      return {\n        es: es,\n        e: e,\n        ep2: ep2\n      };\n    }\n    function sphere(a, b, rf, ellps, sphere) {\n      if (!a) { // do we have an ellipsoid?\n        var ellipse = match(exports$2, ellps);\n        if (!ellipse) {\n          ellipse = WGS84;\n        }\n        a = ellipse.a;\n        b = ellipse.b;\n        rf = ellipse.rf;\n      }\n\n      if (rf && !b) {\n        b = (1.0 - 1.0 / rf) * a;\n      }\n      if (rf === 0 || Math.abs(a - b) < EPSLN) {\n        sphere = true;\n        b = a;\n      }\n      return {\n        a: a,\n        b: b,\n        rf: rf,\n        sphere: sphere\n      };\n    }\n\n    var exports$3 = {};\n    exports$3.wgs84 = {\n      towgs84: \"0,0,0\",\n      ellipse: \"WGS84\",\n      datumName: \"WGS84\"\n    };\n\n    exports$3.ch1903 = {\n      towgs84: \"674.374,15.056,405.346\",\n      ellipse: \"bessel\",\n      datumName: \"swiss\"\n    };\n\n    exports$3.ggrs87 = {\n      towgs84: \"-199.87,74.79,246.62\",\n      ellipse: \"GRS80\",\n      datumName: \"Greek_Geodetic_Reference_System_1987\"\n    };\n\n    exports$3.nad83 = {\n      towgs84: \"0,0,0\",\n      ellipse: \"GRS80\",\n      datumName: \"North_American_Datum_1983\"\n    };\n\n    exports$3.nad27 = {\n      nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n      ellipse: \"clrk66\",\n      datumName: \"North_American_Datum_1927\"\n    };\n\n    exports$3.potsdam = {\n      towgs84: \"606.0,23.0,413.0\",\n      ellipse: \"bessel\",\n      datumName: \"Potsdam Rauenberg 1950 DHDN\"\n    };\n\n    exports$3.carthage = {\n      towgs84: \"-263.0,6.0,431.0\",\n      ellipse: \"clark80\",\n      datumName: \"Carthage 1934 Tunisia\"\n    };\n\n    exports$3.hermannskogel = {\n      towgs84: \"653.0,-212.0,449.0\",\n      ellipse: \"bessel\",\n      datumName: \"Hermannskogel\"\n    };\n\n    exports$3.osni52 = {\n      towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n      ellipse: \"airy\",\n      datumName: \"Irish National\"\n    };\n\n    exports$3.ire65 = {\n      towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n      ellipse: \"mod_airy\",\n      datumName: \"Ireland 1965\"\n    };\n\n    exports$3.rassadiran = {\n      towgs84: \"-133.63,-157.5,-158.62\",\n      ellipse: \"intl\",\n      datumName: \"Rassadiran\"\n    };\n\n    exports$3.nzgd49 = {\n      towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n      ellipse: \"intl\",\n      datumName: \"New Zealand Geodetic Datum 1949\"\n    };\n\n    exports$3.osgb36 = {\n      towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n      ellipse: \"airy\",\n      datumName: \"Airy 1830\"\n    };\n\n    exports$3.s_jtsk = {\n      towgs84: \"589,76,480\",\n      ellipse: 'bessel',\n      datumName: 'S-JTSK (Ferro)'\n    };\n\n    exports$3.beduaram = {\n      towgs84: '-106,-87,188',\n      ellipse: 'clrk80',\n      datumName: 'Beduaram'\n    };\n\n    exports$3.gunung_segara = {\n      towgs84: '-403,684,41',\n      ellipse: 'bessel',\n      datumName: 'Gunung Segara Jakarta'\n    };\n\n    exports$3.rnb72 = {\n      towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n      ellipse: \"intl\",\n      datumName: \"Reseau National Belge 1972\"\n    };\n\n    function datum(datumCode, datum_params, a, b, es, ep2) {\n      var out = {};\n\n      if (datumCode === undefined || datumCode === 'none') {\n        out.datum_type = PJD_NODATUM;\n      } else {\n        out.datum_type = PJD_WGS84;\n      }\n\n      if (datum_params) {\n        out.datum_params = datum_params.map(parseFloat);\n        if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n          out.datum_type = PJD_3PARAM;\n        }\n        if (out.datum_params.length > 3) {\n          if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n            out.datum_type = PJD_7PARAM;\n            out.datum_params[3] *= SEC_TO_RAD;\n            out.datum_params[4] *= SEC_TO_RAD;\n            out.datum_params[5] *= SEC_TO_RAD;\n            out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n          }\n        }\n      }\n\n      out.a = a; //datum object also uses these values\n      out.b = b;\n      out.es = es;\n      out.ep2 = ep2;\n      return out;\n    }\n\n    function Projection(srsCode,callback) {\n      if (!(this instanceof Projection)) {\n        return new Projection(srsCode);\n      }\n      callback = callback || function(error){\n        if(error){\n          throw error;\n        }\n      };\n      var json = parse(srsCode);\n      if(typeof json !== 'object'){\n        callback(srsCode);\n        return;\n      }\n      var ourProj = Projection.projections.get(json.projName);\n      if(!ourProj){\n        callback(srsCode);\n        return;\n      }\n      if (json.datumCode && json.datumCode !== 'none') {\n        var datumDef = match(exports$3, json.datumCode);\n        if (datumDef) {\n          json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n          json.ellps = datumDef.ellipse;\n          json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n        }\n      }\n      json.k0 = json.k0 || 1.0;\n      json.axis = json.axis || 'enu';\n      json.ellps = json.ellps || 'wgs84';\n      var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n      var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n      var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n      extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n      extend(this, ourProj); // transfer all the methods from the projection\n\n      // copy the 4 things over we calulated in deriveConstants.sphere\n      this.a = sphere_.a;\n      this.b = sphere_.b;\n      this.rf = sphere_.rf;\n      this.sphere = sphere_.sphere;\n\n      // copy the 3 things we calculated in deriveConstants.eccentricity\n      this.es = ecc.es;\n      this.e = ecc.e;\n      this.ep2 = ecc.ep2;\n\n      // add in the datum object\n      this.datum = datumObj;\n\n      // init the projection\n      this.init();\n\n      // legecy callback from back in the day when it went to spatialreference.org\n      callback(null, this);\n\n    }\n    Projection.projections = projections;\n    Projection.projections.start();\n\n    'use strict';\n    function compareDatums(source, dest) {\n      if (source.datum_type !== dest.datum_type) {\n        return false; // false, datums are not equal\n      } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n        // the tolerance for es is to ensure that GRS80 and WGS84\n        // are considered identical\n        return false;\n      } else if (source.datum_type === PJD_3PARAM) {\n        return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n      } else if (source.datum_type === PJD_7PARAM) {\n        return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n      } else {\n        return true; // datums are equal\n      }\n    } // cs_compare_datums()\n\n    /*\n     * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n     * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n     * according to the current ellipsoid parameters.\n     *\n     *    Latitude  : Geodetic latitude in radians                     (input)\n     *    Longitude : Geodetic longitude in radians                    (input)\n     *    Height    : Geodetic height, in meters                       (input)\n     *    X         : Calculated Geocentric X coordinate, in meters    (output)\n     *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n     *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n     *\n     */\n    function geodeticToGeocentric(p, es, a) {\n      var Longitude = p.x;\n      var Latitude = p.y;\n      var Height = p.z ? p.z : 0; //Z value not always supplied\n\n      var Rn; /*  Earth radius at location  */\n      var Sin_Lat; /*  Math.sin(Latitude)  */\n      var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n      var Cos_Lat; /*  Math.cos(Latitude)  */\n\n      /*\n       ** Don't blow up if Latitude is just a little out of the value\n       ** range as it may just be a rounding issue.  Also removed longitude\n       ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n       */\n      if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n        Latitude = -HALF_PI;\n      } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n        Latitude = HALF_PI;\n      } else if (Latitude < -HALF_PI) {\n        /* Latitude out of range */\n        //..reportError('geocent:lat out of range:' + Latitude);\n        return { x: -Infinity, y: -Infinity, z: p.z };\n      } else if (Latitude > HALF_PI) {\n        /* Latitude out of range */\n        return { x: Infinity, y: Infinity, z: p.z };\n      }\n\n      if (Longitude > Math.PI) {\n        Longitude -= (2 * Math.PI);\n      }\n      Sin_Lat = Math.sin(Latitude);\n      Cos_Lat = Math.cos(Latitude);\n      Sin2_Lat = Sin_Lat * Sin_Lat;\n      Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n      return {\n        x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n        y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n        z: ((Rn * (1 - es)) + Height) * Sin_Lat\n      };\n    } // cs_geodetic_to_geocentric()\n\n    function geocentricToGeodetic(p, es, a, b) {\n      /* local defintions and variables */\n      /* end-criterium of loop, accuracy of sin(Latitude) */\n      var genau = 1e-12;\n      var genau2 = (genau * genau);\n      var maxiter = 30;\n\n      var P; /* distance between semi-minor axis and location */\n      var RR; /* distance between center and location */\n      var CT; /* sin of geocentric latitude */\n      var ST; /* cos of geocentric latitude */\n      var RX;\n      var RK;\n      var RN; /* Earth radius at location */\n      var CPHI0; /* cos of start or old geodetic latitude in iterations */\n      var SPHI0; /* sin of start or old geodetic latitude in iterations */\n      var CPHI; /* cos of searched geodetic latitude */\n      var SPHI; /* sin of searched geodetic latitude */\n      var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n      var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n      var X = p.x;\n      var Y = p.y;\n      var Z = p.z ? p.z : 0.0; //Z value not always supplied\n      var Longitude;\n      var Latitude;\n      var Height;\n\n      P = Math.sqrt(X * X + Y * Y);\n      RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n      /*      special cases for latitude and longitude */\n      if (P / a < genau) {\n\n        /*  special case, if P=0. (X=0., Y=0.) */\n        Longitude = 0.0;\n\n        /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n         *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n        if (RR / a < genau) {\n          Latitude = HALF_PI;\n          Height = -b;\n          return {\n            x: p.x,\n            y: p.y,\n            z: p.z\n          };\n        }\n      } else {\n        /*  ellipsoidal (geodetic) longitude\n         *  interval: -PI < Longitude <= +PI */\n        Longitude = Math.atan2(Y, X);\n      }\n\n      /* --------------------------------------------------------------\n       * Following iterative algorithm was developped by\n       * \"Institut for Erdmessung\", University of Hannover, July 1988.\n       * Internet: www.ife.uni-hannover.de\n       * Iterative computation of CPHI,SPHI and Height.\n       * Iteration of CPHI and SPHI to 10**-12 radian resp.\n       * 2*10**-7 arcsec.\n       * --------------------------------------------------------------\n       */\n      CT = Z / RR;\n      ST = P / RR;\n      RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n      CPHI0 = ST * (1.0 - es) * RX;\n      SPHI0 = CT * RX;\n      iter = 0;\n\n      /* loop to find sin(Latitude) resp. Latitude\n       * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n      do {\n        iter++;\n        RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n        /*  ellipsoidal (geodetic) height */\n        Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n        RK = es * RN / (RN + Height);\n        RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n        CPHI = ST * (1.0 - RK) * RX;\n        SPHI = CT * RX;\n        SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n        CPHI0 = CPHI;\n        SPHI0 = SPHI;\n      }\n      while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n      /*      ellipsoidal (geodetic) latitude */\n      Latitude = Math.atan(SPHI / Math.abs(CPHI));\n      return {\n        x: Longitude,\n        y: Latitude,\n        z: Height\n      };\n    } // cs_geocentric_to_geodetic()\n\n    /****************************************************************/\n    // pj_geocentic_to_wgs84( p )\n    //  p = point to transform in geocentric coordinates (x,y,z)\n\n\n    /** point object, nothing fancy, just allows values to be\n        passed back and forth by reference rather than by value.\n        Other point classes may be used as long as they have\n        x and y properties, which will get modified in the transform method.\n    */\n    function geocentricToWgs84(p, datum_type, datum_params) {\n\n      if (datum_type === PJD_3PARAM) {\n        // if( x[io] === HUGE_VAL )\n        //    continue;\n        return {\n          x: p.x + datum_params[0],\n          y: p.y + datum_params[1],\n          z: p.z + datum_params[2],\n        };\n      } else if (datum_type === PJD_7PARAM) {\n        var Dx_BF = datum_params[0];\n        var Dy_BF = datum_params[1];\n        var Dz_BF = datum_params[2];\n        var Rx_BF = datum_params[3];\n        var Ry_BF = datum_params[4];\n        var Rz_BF = datum_params[5];\n        var M_BF = datum_params[6];\n        // if( x[io] === HUGE_VAL )\n        //    continue;\n        return {\n          x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n          y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n          z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n        };\n      }\n    } // cs_geocentric_to_wgs84\n\n    /****************************************************************/\n    // pj_geocentic_from_wgs84()\n    //  coordinate system definition,\n    //  point to transform in geocentric coordinates (x,y,z)\n    function geocentricFromWgs84(p, datum_type, datum_params) {\n\n      if (datum_type === PJD_3PARAM) {\n        //if( x[io] === HUGE_VAL )\n        //    continue;\n        return {\n          x: p.x - datum_params[0],\n          y: p.y - datum_params[1],\n          z: p.z - datum_params[2],\n        };\n\n      } else if (datum_type === PJD_7PARAM) {\n        var Dx_BF = datum_params[0];\n        var Dy_BF = datum_params[1];\n        var Dz_BF = datum_params[2];\n        var Rx_BF = datum_params[3];\n        var Ry_BF = datum_params[4];\n        var Rz_BF = datum_params[5];\n        var M_BF = datum_params[6];\n        var x_tmp = (p.x - Dx_BF) / M_BF;\n        var y_tmp = (p.y - Dy_BF) / M_BF;\n        var z_tmp = (p.z - Dz_BF) / M_BF;\n        //if( x[io] === HUGE_VAL )\n        //    continue;\n\n        return {\n          x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n          y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n          z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n        };\n      } //cs_geocentric_from_wgs84()\n    }\n\n    function checkParams(type) {\n      return (type === PJD_3PARAM || type === PJD_7PARAM);\n    }\n\n    var datum_transform = function(source, dest, point) {\n      // Short cut if the datums are identical.\n      if (compareDatums(source, dest)) {\n        return point; // in this case, zero is sucess,\n        // whereas cs_compare_datums returns 1 to indicate TRUE\n        // confusing, should fix this\n      }\n\n      // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n      if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n        return point;\n      }\n\n      // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n      // Do we need to go through geocentric coordinates?\n      if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n        return point;\n      }\n\n      // Convert to geocentric coordinates.\n      point = geodeticToGeocentric(point, source.es, source.a);\n      // Convert between datums\n      if (checkParams(source.datum_type)) {\n        point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n      }\n      if (checkParams(dest.datum_type)) {\n        point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n      }\n      return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n    };\n\n    var adjust_axis = function(crs, denorm, point) {\n      var xin = point.x,\n        yin = point.y,\n        zin = point.z || 0.0;\n      var v, t, i;\n      var out = {};\n      for (i = 0; i < 3; i++) {\n        if (denorm && i === 2 && point.z === undefined) {\n          continue;\n        }\n        if (i === 0) {\n          v = xin;\n          if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n            t = 'x';\n          } else {\n            t = 'y';\n          }\n\n        }\n        else if (i === 1) {\n          v = yin;\n          if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n            t = 'y';\n          } else {\n            t = 'x';\n          }\n        }\n        else {\n          v = zin;\n          t = 'z';\n        }\n        switch (crs.axis[i]) {\n        case 'e':\n          out[t] = v;\n          break;\n        case 'w':\n          out[t] = -v;\n          break;\n        case 'n':\n          out[t] = v;\n          break;\n        case 's':\n          out[t] = -v;\n          break;\n        case 'u':\n          if (point[t] !== undefined) {\n            out.z = v;\n          }\n          break;\n        case 'd':\n          if (point[t] !== undefined) {\n            out.z = -v;\n          }\n          break;\n        default:\n          //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n          return null;\n        }\n      }\n      return out;\n    };\n\n    var toPoint = function (array){\n      var out = {\n        x: array[0],\n        y: array[1]\n      };\n      if (array.length>2) {\n        out.z = array[2];\n      }\n      if (array.length>3) {\n        out.m = array[3];\n      }\n      return out;\n    };\n\n    var checkSanity = function (point) {\n      checkCoord(point.x);\n      checkCoord(point.y);\n    };\n    function checkCoord(num) {\n      if (typeof Number.isFinite === 'function') {\n        if (Number.isFinite(num)) {\n          return;\n        }\n        throw new TypeError('coordinates must be finite numbers');\n      }\n      if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n        throw new TypeError('coordinates must be finite numbers');\n      }\n    }\n\n    function checkNotWGS(source, dest) {\n      return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n    }\n\n    function transform(source, dest, point) {\n      var wgs84;\n      if (Array.isArray(point)) {\n        point = toPoint(point);\n      }\n      checkSanity(point);\n      // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n      if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n        wgs84 = new Projection('WGS84');\n        point = transform(source, wgs84, point);\n        source = wgs84;\n      }\n      // DGR, 2010/11/12\n      if (source.axis !== 'enu') {\n        point = adjust_axis(source, false, point);\n      }\n      // Transform source points to long/lat, if they aren't already.\n      if (source.projName === 'longlat') {\n        point = {\n          x: point.x * D2R,\n          y: point.y * D2R,\n          z: point.z || 0\n        };\n      } else {\n        if (source.to_meter) {\n          point = {\n            x: point.x * source.to_meter,\n            y: point.y * source.to_meter,\n            z: point.z || 0\n          };\n        }\n        point = source.inverse(point); // Convert Cartesian to longlat\n        if (!point) {\n          return;\n        }\n      }\n      // Adjust for the prime meridian if necessary\n      if (source.from_greenwich) {\n        point.x += source.from_greenwich;\n      }\n\n      // Convert datums if needed, and if possible.\n      point = datum_transform(source.datum, dest.datum, point);\n\n      // Adjust for the prime meridian if necessary\n      if (dest.from_greenwich) {\n        point = {\n          x: point.x - dest.from_greenwich,\n          y: point.y,\n          z: point.z || 0\n        };\n      }\n\n      if (dest.projName === 'longlat') {\n        // convert radians to decimal degrees\n        point = {\n          x: point.x * R2D,\n          y: point.y * R2D,\n          z: point.z || 0\n        };\n      } else { // else project\n        point = dest.forward(point);\n        if (dest.to_meter) {\n          point = {\n            x: point.x / dest.to_meter,\n            y: point.y / dest.to_meter,\n            z: point.z || 0\n          };\n        }\n      }\n\n      // DGR, 2010/11/12\n      if (dest.axis !== 'enu') {\n        return adjust_axis(dest, true, point);\n      }\n\n      return point;\n    }\n\n    var wgs84 = Projection('WGS84');\n\n    function transformer(from, to, coords) {\n      var transformedArray, out, keys;\n      if (Array.isArray(coords)) {\n        transformedArray = transform(from, to, coords) || {x: NaN, y: NaN};\n        if (coords.length > 2) {\n          if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n            if (typeof transformedArray.z === 'number') {\n              return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n            } else {\n              return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n            }\n          } else {\n            return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n          }\n        } else {\n          return [transformedArray.x, transformedArray.y];\n        }\n      } else {\n        out = transform(from, to, coords);\n        keys = Object.keys(coords);\n        if (keys.length === 2) {\n          return out;\n        }\n        keys.forEach(function (key) {\n          if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n            if (key === 'x' || key === 'y' || key === 'z') {\n              return;\n            }\n          } else {\n            if (key === 'x' || key === 'y') {\n              return;\n            }\n          }\n          out[key] = coords[key];\n        });\n        return out;\n      }\n    }\n\n    function checkProj(item) {\n      if (item instanceof Projection) {\n        return item;\n      }\n      if (item.oProj) {\n        return item.oProj;\n      }\n      return Projection(item);\n    }\n\n    function proj4$1(fromProj, toProj, coord) {\n      fromProj = checkProj(fromProj);\n      var single = false;\n      var obj;\n      if (typeof toProj === 'undefined') {\n        toProj = fromProj;\n        fromProj = wgs84;\n        single = true;\n      } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n        coord = toProj;\n        toProj = fromProj;\n        fromProj = wgs84;\n        single = true;\n      }\n      toProj = checkProj(toProj);\n      if (coord) {\n        return transformer(fromProj, toProj, coord);\n      } else {\n        obj = {\n          forward: function (coords) {\n            return transformer(fromProj, toProj, coords);\n          },\n          inverse: function (coords) {\n            return transformer(toProj, fromProj, coords);\n          }\n        };\n        if (single) {\n          obj.oProj = toProj;\n        }\n        return obj;\n      }\n    }\n\n    /**\n     * UTM zones are grouped, and assigned to one of a group of 6\n     * sets.\n     *\n     * {int} @private\n     */\n    var NUM_100K_SETS = 6;\n\n    /**\n     * The column letters (for easting) of the lower left value, per\n     * set.\n     *\n     * {string} @private\n     */\n    var SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n    /**\n     * The row letters (for northing) of the lower left value, per\n     * set.\n     *\n     * {string} @private\n     */\n    var SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\n    var A = 65; // A\n    var I = 73; // I\n    var O = 79; // O\n    var V = 86; // V\n    var Z = 90; // Z\n    var mgrs = {\n      forward: forward$1,\n      inverse: inverse$1,\n      toPoint: toPoint$1\n    };\n    /**\n     * Conversion of lat/lon to MGRS.\n     *\n     * @param {object} ll Object literal with lat and lon properties on a\n     *     WGS84 ellipsoid.\n     * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n     *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n     * @return {string} the MGRS string for the given location and accuracy.\n     */\n    function forward$1(ll, accuracy) {\n      accuracy = accuracy || 5; // default accuracy 1m\n      return encode(LLtoUTM({\n        lat: ll[1],\n        lon: ll[0]\n      }), accuracy);\n    }\n\n    /**\n     * Conversion of MGRS to lat/lon.\n     *\n     * @param {string} mgrs MGRS string.\n     * @return {array} An array with left (longitude), bottom (latitude), right\n     *     (longitude) and top (latitude) values in WGS84, representing the\n     *     bounding box for the provided MGRS reference.\n     */\n    function inverse$1(mgrs) {\n      var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n      if (bbox.lat && bbox.lon) {\n        return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n      }\n      return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n    }\n\n    function toPoint$1(mgrs) {\n      var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n      if (bbox.lat && bbox.lon) {\n        return [bbox.lon, bbox.lat];\n      }\n      return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n    }\n    /**\n     * Conversion from degrees to radians.\n     *\n     * @private\n     * @param {number} deg the angle in degrees.\n     * @return {number} the angle in radians.\n     */\n    function degToRad(deg) {\n      return (deg * (Math.PI / 180.0));\n    }\n\n    /**\n     * Conversion from radians to degrees.\n     *\n     * @private\n     * @param {number} rad the angle in radians.\n     * @return {number} the angle in degrees.\n     */\n    function radToDeg(rad) {\n      return (180.0 * (rad / Math.PI));\n    }\n\n    /**\n     * Converts a set of Longitude and Latitude co-ordinates to UTM\n     * using the WGS84 ellipsoid.\n     *\n     * @private\n     * @param {object} ll Object literal with lat and lon properties\n     *     representing the WGS84 coordinate to be converted.\n     * @return {object} Object literal containing the UTM value with easting,\n     *     northing, zoneNumber and zoneLetter properties, and an optional\n     *     accuracy property in digits. Returns null if the conversion failed.\n     */\n    function LLtoUTM(ll) {\n      var Lat = ll.lat;\n      var Long = ll.lon;\n      var a = 6378137.0; //ellip.radius;\n      var eccSquared = 0.00669438; //ellip.eccsq;\n      var k0 = 0.9996;\n      var LongOrigin;\n      var eccPrimeSquared;\n      var N, T, C, A, M;\n      var LatRad = degToRad(Lat);\n      var LongRad = degToRad(Long);\n      var LongOriginRad;\n      var ZoneNumber;\n      // (int)\n      ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n      //Make sure the longitude 180.00 is in Zone 60\n      if (Long === 180) {\n        ZoneNumber = 60;\n      }\n\n      // Special zone for Norway\n      if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n        ZoneNumber = 32;\n      }\n\n      // Special zones for Svalbard\n      if (Lat >= 72.0 && Lat < 84.0) {\n        if (Long >= 0.0 && Long < 9.0) {\n          ZoneNumber = 31;\n        }\n        else if (Long >= 9.0 && Long < 21.0) {\n          ZoneNumber = 33;\n        }\n        else if (Long >= 21.0 && Long < 33.0) {\n          ZoneNumber = 35;\n        }\n        else if (Long >= 33.0 && Long < 42.0) {\n          ZoneNumber = 37;\n        }\n      }\n\n      LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n      // in middle of\n      // zone\n      LongOriginRad = degToRad(LongOrigin);\n\n      eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n      N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n      T = Math.tan(LatRad) * Math.tan(LatRad);\n      C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n      A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n      M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n      var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n      var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n      if (Lat < 0.0) {\n        UTMNorthing += 10000000.0; //10000000 meter offset for\n        // southern hemisphere\n      }\n\n      return {\n        northing: Math.round(UTMNorthing),\n        easting: Math.round(UTMEasting),\n        zoneNumber: ZoneNumber,\n        zoneLetter: getLetterDesignator(Lat)\n      };\n    }\n\n    /**\n     * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n     * class where the Zone can be specified as a single string eg.\"60N\" which\n     * is then broken down into the ZoneNumber and ZoneLetter.\n     *\n     * @private\n     * @param {object} utm An object literal with northing, easting, zoneNumber\n     *     and zoneLetter properties. If an optional accuracy property is\n     *     provided (in meters), a bounding box will be returned instead of\n     *     latitude and longitude.\n     * @return {object} An object literal containing either lat and lon values\n     *     (if no accuracy was provided), or top, right, bottom and left values\n     *     for the bounding box calculated according to the provided accuracy.\n     *     Returns null if the conversion failed.\n     */\n    function UTMtoLL(utm) {\n\n      var UTMNorthing = utm.northing;\n      var UTMEasting = utm.easting;\n      var zoneLetter = utm.zoneLetter;\n      var zoneNumber = utm.zoneNumber;\n      // check the ZoneNummber is valid\n      if (zoneNumber < 0 || zoneNumber > 60) {\n        return null;\n      }\n\n      var k0 = 0.9996;\n      var a = 6378137.0; //ellip.radius;\n      var eccSquared = 0.00669438; //ellip.eccsq;\n      var eccPrimeSquared;\n      var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n      var N1, T1, C1, R1, D, M;\n      var LongOrigin;\n      var mu, phi1Rad;\n\n      // remove 500,000 meter offset for longitude\n      var x = UTMEasting - 500000.0;\n      var y = UTMNorthing;\n\n      // We must know somehow if we are in the Northern or Southern\n      // hemisphere, this is the only time we use the letter So even\n      // if the Zone letter isn't exactly correct it should indicate\n      // the hemisphere correctly\n      if (zoneLetter < 'N') {\n        y -= 10000000.0; // remove 10,000,000 meter offset used\n        // for southern hemisphere\n      }\n\n      // There are 60 zones with zone 1 being at West -180 to -174\n      LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n      // in middle of\n      // zone\n\n      eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n      M = y / k0;\n      mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n      phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n      // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n      N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n      T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n      C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n      R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n      D = x / (N1 * k0);\n\n      var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n      lat = radToDeg(lat);\n\n      var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n      lon = LongOrigin + radToDeg(lon);\n\n      var result;\n      if (utm.accuracy) {\n        var topRight = UTMtoLL({\n          northing: utm.northing + utm.accuracy,\n          easting: utm.easting + utm.accuracy,\n          zoneLetter: utm.zoneLetter,\n          zoneNumber: utm.zoneNumber\n        });\n        result = {\n          top: topRight.lat,\n          right: topRight.lon,\n          bottom: lat,\n          left: lon\n        };\n      }\n      else {\n        result = {\n          lat: lat,\n          lon: lon\n        };\n      }\n      return result;\n    }\n\n    /**\n     * Calculates the MGRS letter designator for the given latitude.\n     *\n     * @private\n     * @param {number} lat The latitude in WGS84 to get the letter designator\n     *     for.\n     * @return {char} The letter designator.\n     */\n    function getLetterDesignator(lat) {\n      //This is here as an error flag to show that the Latitude is\n      //outside MGRS limits\n      var LetterDesignator = 'Z';\n\n      if ((84 >= lat) && (lat >= 72)) {\n        LetterDesignator = 'X';\n      }\n      else if ((72 > lat) && (lat >= 64)) {\n        LetterDesignator = 'W';\n      }\n      else if ((64 > lat) && (lat >= 56)) {\n        LetterDesignator = 'V';\n      }\n      else if ((56 > lat) && (lat >= 48)) {\n        LetterDesignator = 'U';\n      }\n      else if ((48 > lat) && (lat >= 40)) {\n        LetterDesignator = 'T';\n      }\n      else if ((40 > lat) && (lat >= 32)) {\n        LetterDesignator = 'S';\n      }\n      else if ((32 > lat) && (lat >= 24)) {\n        LetterDesignator = 'R';\n      }\n      else if ((24 > lat) && (lat >= 16)) {\n        LetterDesignator = 'Q';\n      }\n      else if ((16 > lat) && (lat >= 8)) {\n        LetterDesignator = 'P';\n      }\n      else if ((8 > lat) && (lat >= 0)) {\n        LetterDesignator = 'N';\n      }\n      else if ((0 > lat) && (lat >= -8)) {\n        LetterDesignator = 'M';\n      }\n      else if ((-8 > lat) && (lat >= -16)) {\n        LetterDesignator = 'L';\n      }\n      else if ((-16 > lat) && (lat >= -24)) {\n        LetterDesignator = 'K';\n      }\n      else if ((-24 > lat) && (lat >= -32)) {\n        LetterDesignator = 'J';\n      }\n      else if ((-32 > lat) && (lat >= -40)) {\n        LetterDesignator = 'H';\n      }\n      else if ((-40 > lat) && (lat >= -48)) {\n        LetterDesignator = 'G';\n      }\n      else if ((-48 > lat) && (lat >= -56)) {\n        LetterDesignator = 'F';\n      }\n      else if ((-56 > lat) && (lat >= -64)) {\n        LetterDesignator = 'E';\n      }\n      else if ((-64 > lat) && (lat >= -72)) {\n        LetterDesignator = 'D';\n      }\n      else if ((-72 > lat) && (lat >= -80)) {\n        LetterDesignator = 'C';\n      }\n      return LetterDesignator;\n    }\n\n    /**\n     * Encodes a UTM location as MGRS string.\n     *\n     * @private\n     * @param {object} utm An object literal with easting, northing,\n     *     zoneLetter, zoneNumber\n     * @param {number} accuracy Accuracy in digits (1-5).\n     * @return {string} MGRS string for the given UTM location.\n     */\n    function encode(utm, accuracy) {\n      // prepend with leading zeroes\n      var seasting = \"00000\" + utm.easting,\n        snorthing = \"00000\" + utm.northing;\n\n      return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n    }\n\n    /**\n     * Get the two letter 100k designator for a given UTM easting,\n     * northing and zone number value.\n     *\n     * @private\n     * @param {number} easting\n     * @param {number} northing\n     * @param {number} zoneNumber\n     * @return the two letter 100k designator for the given UTM location.\n     */\n    function get100kID(easting, northing, zoneNumber) {\n      var setParm = get100kSetForZone(zoneNumber);\n      var setColumn = Math.floor(easting / 100000);\n      var setRow = Math.floor(northing / 100000) % 20;\n      return getLetter100kID(setColumn, setRow, setParm);\n    }\n\n    /**\n     * Given a UTM zone number, figure out the MGRS 100K set it is in.\n     *\n     * @private\n     * @param {number} i An UTM zone number.\n     * @return {number} the 100k set the UTM zone is in.\n     */\n    function get100kSetForZone(i) {\n      var setParm = i % NUM_100K_SETS;\n      if (setParm === 0) {\n        setParm = NUM_100K_SETS;\n      }\n\n      return setParm;\n    }\n\n    /**\n     * Get the two-letter MGRS 100k designator given information\n     * translated from the UTM northing, easting and zone number.\n     *\n     * @private\n     * @param {number} column the column index as it relates to the MGRS\n     *        100k set spreadsheet, created from the UTM easting.\n     *        Values are 1-8.\n     * @param {number} row the row index as it relates to the MGRS 100k set\n     *        spreadsheet, created from the UTM northing value. Values\n     *        are from 0-19.\n     * @param {number} parm the set block, as it relates to the MGRS 100k set\n     *        spreadsheet, created from the UTM zone. Values are from\n     *        1-60.\n     * @return two letter MGRS 100k code.\n     */\n    function getLetter100kID(column, row, parm) {\n      // colOrigin and rowOrigin are the letters at the origin of the set\n      var index = parm - 1;\n      var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n      var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n      // colInt and rowInt are the letters to build to return\n      var colInt = colOrigin + column - 1;\n      var rowInt = rowOrigin + row;\n      var rollover = false;\n\n      if (colInt > Z) {\n        colInt = colInt - Z + A - 1;\n        rollover = true;\n      }\n\n      if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n        colInt++;\n      }\n\n      if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n        colInt++;\n\n        if (colInt === I) {\n          colInt++;\n        }\n      }\n\n      if (colInt > Z) {\n        colInt = colInt - Z + A - 1;\n      }\n\n      if (rowInt > V) {\n        rowInt = rowInt - V + A - 1;\n        rollover = true;\n      }\n      else {\n        rollover = false;\n      }\n\n      if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n        rowInt++;\n      }\n\n      if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n        rowInt++;\n\n        if (rowInt === I) {\n          rowInt++;\n        }\n      }\n\n      if (rowInt > V) {\n        rowInt = rowInt - V + A - 1;\n      }\n\n      var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n      return twoLetter;\n    }\n\n    /**\n     * Decode the UTM parameters from a MGRS string.\n     *\n     * @private\n     * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n     * @return {object} An object literal with easting, northing, zoneLetter,\n     *     zoneNumber and accuracy (in meters) properties.\n     */\n    function decode(mgrsString) {\n\n      if (mgrsString && mgrsString.length === 0) {\n        throw (\"MGRSPoint coverting from nothing\");\n      }\n\n      var length = mgrsString.length;\n\n      var hunK = null;\n      var sb = \"\";\n      var testChar;\n      var i = 0;\n\n      // get Zone number\n      while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n        if (i >= 2) {\n          throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n        }\n        sb += testChar;\n        i++;\n      }\n\n      var zoneNumber = parseInt(sb, 10);\n\n      if (i === 0 || i + 3 > length) {\n        // A good MGRS string has to be 4-5 digits long,\n        // ##AAA/#AAA at least.\n        throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n      }\n\n      var zoneLetter = mgrsString.charAt(i++);\n\n      // Should we check the zone letter here? Why not.\n      if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n        throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n      }\n\n      hunK = mgrsString.substring(i, i += 2);\n\n      var set = get100kSetForZone(zoneNumber);\n\n      var east100k = getEastingFromChar(hunK.charAt(0), set);\n      var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n      // We have a bug where the northing may be 2000000 too low.\n      // How\n      // do we know when to roll over?\n\n      while (north100k < getMinNorthing(zoneLetter)) {\n        north100k += 2000000;\n      }\n\n      // calculate the char index for easting/northing separator\n      var remainder = length - i;\n\n      if (remainder % 2 !== 0) {\n        throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n      }\n\n      var sep = remainder / 2;\n\n      var sepEasting = 0.0;\n      var sepNorthing = 0.0;\n      var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n      if (sep > 0) {\n        accuracyBonus = 100000.0 / Math.pow(10, sep);\n        sepEastingString = mgrsString.substring(i, i + sep);\n        sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n        sepNorthingString = mgrsString.substring(i + sep);\n        sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n      }\n\n      easting = sepEasting + east100k;\n      northing = sepNorthing + north100k;\n\n      return {\n        easting: easting,\n        northing: northing,\n        zoneLetter: zoneLetter,\n        zoneNumber: zoneNumber,\n        accuracy: accuracyBonus\n      };\n    }\n\n    /**\n     * Given the first letter from a two-letter MGRS 100k zone, and given the\n     * MGRS table set for the zone number, figure out the easting value that\n     * should be added to the other, secondary easting value.\n     *\n     * @private\n     * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n     * @param {number} set The MGRS table set for the zone number.\n     * @return {number} The easting value for the given letter and set.\n     */\n    function getEastingFromChar(e, set) {\n      // colOrigin is the letter at the origin of the set for the\n      // column\n      var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n      var eastingValue = 100000.0;\n      var rewindMarker = false;\n\n      while (curCol !== e.charCodeAt(0)) {\n        curCol++;\n        if (curCol === I) {\n          curCol++;\n        }\n        if (curCol === O) {\n          curCol++;\n        }\n        if (curCol > Z) {\n          if (rewindMarker) {\n            throw (\"Bad character: \" + e);\n          }\n          curCol = A;\n          rewindMarker = true;\n        }\n        eastingValue += 100000.0;\n      }\n\n      return eastingValue;\n    }\n\n    /**\n     * Given the second letter from a two-letter MGRS 100k zone, and given the\n     * MGRS table set for the zone number, figure out the northing value that\n     * should be added to the other, secondary northing value. You have to\n     * remember that Northings are determined from the equator, and the vertical\n     * cycle of letters mean a 2000000 additional northing meters. This happens\n     * approx. every 18 degrees of latitude. This method does *NOT* count any\n     * additional northings. You have to figure out how many 2000000 meters need\n     * to be added for the zone letter of the MGRS coordinate.\n     *\n     * @private\n     * @param {char} n Second letter of the MGRS 100k zone\n     * @param {number} set The MGRS table set number, which is dependent on the\n     *     UTM zone number.\n     * @return {number} The northing value for the given letter and set.\n     */\n    function getNorthingFromChar(n, set) {\n\n      if (n > 'V') {\n        throw (\"MGRSPoint given invalid Northing \" + n);\n      }\n\n      // rowOrigin is the letter at the origin of the set for the\n      // column\n      var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n      var northingValue = 0.0;\n      var rewindMarker = false;\n\n      while (curRow !== n.charCodeAt(0)) {\n        curRow++;\n        if (curRow === I) {\n          curRow++;\n        }\n        if (curRow === O) {\n          curRow++;\n        }\n        // fixing a bug making whole application hang in this loop\n        // when 'n' is a wrong character\n        if (curRow > V) {\n          if (rewindMarker) { // making sure that this loop ends\n            throw (\"Bad character: \" + n);\n          }\n          curRow = A;\n          rewindMarker = true;\n        }\n        northingValue += 100000.0;\n      }\n\n      return northingValue;\n    }\n\n    /**\n     * The function getMinNorthing returns the minimum northing value of a MGRS\n     * zone.\n     *\n     * Ported from Geotrans' c Lattitude_Band_Value structure table.\n     *\n     * @private\n     * @param {char} zoneLetter The MGRS zone to get the min northing for.\n     * @return {number}\n     */\n    function getMinNorthing(zoneLetter) {\n      var northing;\n      switch (zoneLetter) {\n      case 'C':\n        northing = 1100000.0;\n        break;\n      case 'D':\n        northing = 2000000.0;\n        break;\n      case 'E':\n        northing = 2800000.0;\n        break;\n      case 'F':\n        northing = 3700000.0;\n        break;\n      case 'G':\n        northing = 4600000.0;\n        break;\n      case 'H':\n        northing = 5500000.0;\n        break;\n      case 'J':\n        northing = 6400000.0;\n        break;\n      case 'K':\n        northing = 7300000.0;\n        break;\n      case 'L':\n        northing = 8200000.0;\n        break;\n      case 'M':\n        northing = 9100000.0;\n        break;\n      case 'N':\n        northing = 0.0;\n        break;\n      case 'P':\n        northing = 800000.0;\n        break;\n      case 'Q':\n        northing = 1700000.0;\n        break;\n      case 'R':\n        northing = 2600000.0;\n        break;\n      case 'S':\n        northing = 3500000.0;\n        break;\n      case 'T':\n        northing = 4400000.0;\n        break;\n      case 'U':\n        northing = 5300000.0;\n        break;\n      case 'V':\n        northing = 6200000.0;\n        break;\n      case 'W':\n        northing = 7000000.0;\n        break;\n      case 'X':\n        northing = 7900000.0;\n        break;\n      default:\n        northing = -1.0;\n      }\n      if (northing >= 0.0) {\n        return northing;\n      }\n      else {\n        throw (\"Invalid zone letter: \" + zoneLetter);\n      }\n\n    }\n\n    function Point(x, y, z) {\n      if (!(this instanceof Point)) {\n        return new Point(x, y, z);\n      }\n      if (Array.isArray(x)) {\n        this.x = x[0];\n        this.y = x[1];\n        this.z = x[2] || 0.0;\n      } else if(typeof x === 'object') {\n        this.x = x.x;\n        this.y = x.y;\n        this.z = x.z || 0.0;\n      } else if (typeof x === 'string' && typeof y === 'undefined') {\n        var coords = x.split(',');\n        this.x = parseFloat(coords[0], 10);\n        this.y = parseFloat(coords[1], 10);\n        this.z = parseFloat(coords[2], 10) || 0.0;\n      } else {\n        this.x = x;\n        this.y = y;\n        this.z = z || 0.0;\n      }\n      console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n    }\n\n    Point.fromMGRS = function(mgrsStr) {\n      return new Point(toPoint$1(mgrsStr));\n    };\n    Point.prototype.toMGRS = function(accuracy) {\n      return forward$1([this.x, this.y], accuracy);\n    };\n\n    var C00 = 1;\n    var C02 = 0.25;\n    var C04 = 0.046875;\n    var C06 = 0.01953125;\n    var C08 = 0.01068115234375;\n    var C22 = 0.75;\n    var C44 = 0.46875;\n    var C46 = 0.01302083333333333333;\n    var C48 = 0.00712076822916666666;\n    var C66 = 0.36458333333333333333;\n    var C68 = 0.00569661458333333333;\n    var C88 = 0.3076171875;\n\n    var pj_enfn = function(es) {\n      var en = [];\n      en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n      en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n      var t = es * es;\n      en[2] = t * (C44 - es * (C46 + es * C48));\n      t *= es;\n      en[3] = t * (C66 - es * C68);\n      en[4] = t * es * C88;\n      return en;\n    };\n\n    var pj_mlfn = function(phi, sphi, cphi, en) {\n      cphi *= sphi;\n      sphi *= sphi;\n      return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n    };\n\n    var MAX_ITER = 20;\n\n    var pj_inv_mlfn = function(arg, es, en) {\n      var k = 1 / (1 - es);\n      var phi = arg;\n      for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n        var s = Math.sin(phi);\n        var t = 1 - es * s * s;\n        //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n        //phi -= t * (t * Math.sqrt(t)) * k;\n        t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n        phi -= t;\n        if (Math.abs(t) < EPSLN) {\n          return phi;\n        }\n      }\n      //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n      return phi;\n    };\n\n    // Heavily based on this tmerc projection implementation\n    // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\n    function init$2() {\n      this.x0 = this.x0 !== undefined ? this.x0 : 0;\n      this.y0 = this.y0 !== undefined ? this.y0 : 0;\n      this.long0 = this.long0 !== undefined ? this.long0 : 0;\n      this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n      if (this.es) {\n        this.en = pj_enfn(this.es);\n        this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n      }\n    }\n\n    /**\n        Transverse Mercator Forward  - long/lat to x/y\n        long/lat in radians\n      */\n    function forward$2(p) {\n      var lon = p.x;\n      var lat = p.y;\n\n      var delta_lon = adjust_lon(lon - this.long0);\n      var con;\n      var x, y;\n      var sin_phi = Math.sin(lat);\n      var cos_phi = Math.cos(lat);\n\n      if (!this.es) {\n        var b = cos_phi * Math.sin(delta_lon);\n\n        if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n          return (93);\n        }\n        else {\n          x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n          y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n          b = Math.abs(y);\n\n          if (b >= 1) {\n            if ((b - 1) > EPSLN) {\n              return (93);\n            }\n            else {\n              y = 0;\n            }\n          }\n          else {\n            y = Math.acos(y);\n          }\n\n          if (lat < 0) {\n            y = -y;\n          }\n\n          y = this.a * this.k0 * (y - this.lat0) + this.y0;\n        }\n      }\n      else {\n        var al = cos_phi * delta_lon;\n        var als = Math.pow(al, 2);\n        var c = this.ep2 * Math.pow(cos_phi, 2);\n        var cs = Math.pow(c, 2);\n        var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n        var t = Math.pow(tq, 2);\n        var ts = Math.pow(t, 2);\n        con = 1 - this.es * Math.pow(sin_phi, 2);\n        al = al / Math.sqrt(con);\n        var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n        x = this.a * (this.k0 * al * (1 +\n          als / 6 * (1 - t + c +\n          als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n          als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n          this.x0;\n\n        y = this.a * (this.k0 * (ml - this.ml0 +\n          sin_phi * delta_lon * al / 2 * (1 +\n          als / 12 * (5 - t + 9 * c + 4 * cs +\n          als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n          als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n          this.y0;\n      }\n\n      p.x = x;\n      p.y = y;\n\n      return p;\n    }\n\n    /**\n        Transverse Mercator Inverse  -  x/y to long/lat\n      */\n    function inverse$2(p) {\n      var con, phi;\n      var lat, lon;\n      var x = (p.x - this.x0) * (1 / this.a);\n      var y = (p.y - this.y0) * (1 / this.a);\n\n      if (!this.es) {\n        var f = Math.exp(x / this.k0);\n        var g = 0.5 * (f - 1 / f);\n        var temp = this.lat0 + y / this.k0;\n        var h = Math.cos(temp);\n        con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n        lat = Math.asin(con);\n\n        if (y < 0) {\n          lat = -lat;\n        }\n\n        if ((g === 0) && (h === 0)) {\n          lon = 0;\n        }\n        else {\n          lon = adjust_lon(Math.atan2(g, h) + this.long0);\n        }\n      }\n      else { // ellipsoidal form\n        con = this.ml0 + y / this.k0;\n        phi = pj_inv_mlfn(con, this.es, this.en);\n\n        if (Math.abs(phi) < HALF_PI) {\n          var sin_phi = Math.sin(phi);\n          var cos_phi = Math.cos(phi);\n          var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n          var c = this.ep2 * Math.pow(cos_phi, 2);\n          var cs = Math.pow(c, 2);\n          var t = Math.pow(tan_phi, 2);\n          var ts = Math.pow(t, 2);\n          con = 1 - this.es * Math.pow(sin_phi, 2);\n          var d = x * Math.sqrt(con) / this.k0;\n          var ds = Math.pow(d, 2);\n          con = con * tan_phi;\n\n          lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n            ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n            ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n            ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n          lon = adjust_lon(this.long0 + (d * (1 -\n            ds / 6 * (1 + 2 * t + c -\n            ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n            ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n        }\n        else {\n          lat = HALF_PI * sign(y);\n          lon = 0;\n        }\n      }\n\n      p.x = lon;\n      p.y = lat;\n\n      return p;\n    }\n\n    var names$3 = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\n    var tmerc = {\n      init: init$2,\n      forward: forward$2,\n      inverse: inverse$2,\n      names: names$3\n    };\n\n    var sinh = function(x) {\n      var r = Math.exp(x);\n      r = (r - 1 / r) / 2;\n      return r;\n    };\n\n    var hypot = function(x, y) {\n      x = Math.abs(x);\n      y = Math.abs(y);\n      var a = Math.max(x, y);\n      var b = Math.min(x, y) / (a ? a : 1);\n\n      return a * Math.sqrt(1 + Math.pow(b, 2));\n    };\n\n    var log1py = function(x) {\n      var y = 1 + x;\n      var z = y - 1;\n\n      return z === 0 ? x : x * Math.log(y) / z;\n    };\n\n    var asinhy = function(x) {\n      var y = Math.abs(x);\n      y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n      return x < 0 ? -y : y;\n    };\n\n    var gatg = function(pp, B) {\n      var cos_2B = 2 * Math.cos(2 * B);\n      var i = pp.length - 1;\n      var h1 = pp[i];\n      var h2 = 0;\n      var h;\n\n      while (--i >= 0) {\n        h = -h2 + cos_2B * h1 + pp[i];\n        h2 = h1;\n        h1 = h;\n      }\n\n      return (B + h * Math.sin(2 * B));\n    };\n\n    var clens = function(pp, arg_r) {\n      var r = 2 * Math.cos(arg_r);\n      var i = pp.length - 1;\n      var hr1 = pp[i];\n      var hr2 = 0;\n      var hr;\n\n      while (--i >= 0) {\n        hr = -hr2 + r * hr1 + pp[i];\n        hr2 = hr1;\n        hr1 = hr;\n      }\n\n      return Math.sin(arg_r) * hr;\n    };\n\n    var cosh = function(x) {\n      var r = Math.exp(x);\n      r = (r + 1 / r) / 2;\n      return r;\n    };\n\n    var clens_cmplx = function(pp, arg_r, arg_i) {\n      var sin_arg_r = Math.sin(arg_r);\n      var cos_arg_r = Math.cos(arg_r);\n      var sinh_arg_i = sinh(arg_i);\n      var cosh_arg_i = cosh(arg_i);\n      var r = 2 * cos_arg_r * cosh_arg_i;\n      var i = -2 * sin_arg_r * sinh_arg_i;\n      var j = pp.length - 1;\n      var hr = pp[j];\n      var hi1 = 0;\n      var hr1 = 0;\n      var hi = 0;\n      var hr2;\n      var hi2;\n\n      while (--j >= 0) {\n        hr2 = hr1;\n        hi2 = hi1;\n        hr1 = hr;\n        hi1 = hi;\n        hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n        hi = -hi2 + i * hr1 + r * hi1;\n      }\n\n      r = sin_arg_r * cosh_arg_i;\n      i = cos_arg_r * sinh_arg_i;\n\n      return [r * hr - i * hi, r * hi + i * hr];\n    };\n\n    // Heavily based on this etmerc projection implementation\n    // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\n    function init$3() {\n      if (this.es === undefined || this.es <= 0) {\n        throw new Error('incorrect elliptical usage');\n      }\n\n      this.x0 = this.x0 !== undefined ? this.x0 : 0;\n      this.y0 = this.y0 !== undefined ? this.y0 : 0;\n      this.long0 = this.long0 !== undefined ? this.long0 : 0;\n      this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n      this.cgb = [];\n      this.cbg = [];\n      this.utg = [];\n      this.gtu = [];\n\n      var f = this.es / (1 + Math.sqrt(1 - this.es));\n      var n = f / (2 - f);\n      var np = n;\n\n      this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n      this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n      np = np * n;\n      this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n      this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n      np = np * n;\n      this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n      this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n      np = np * n;\n      this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n      this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n      np = np * n;\n      this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n      this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n      np = np * n;\n      this.cgb[5] = np * (601676 / 22275);\n      this.cbg[5] = np * (444337 / 155925);\n\n      np = Math.pow(n, 2);\n      this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n      this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n      this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n      this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n      this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n      np = np * n;\n      this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n      this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n      np = np * n;\n      this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n      this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n      np = np * n;\n      this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n      this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n      np = np * n;\n      this.utg[5] = np * (-20648693 / 638668800);\n      this.gtu[5] = np * (212378941 / 319334400);\n\n      var Z = gatg(this.cbg, this.lat0);\n      this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n    }\n\n    function forward$3(p) {\n      var Ce = adjust_lon(p.x - this.long0);\n      var Cn = p.y;\n\n      Cn = gatg(this.cbg, Cn);\n      var sin_Cn = Math.sin(Cn);\n      var cos_Cn = Math.cos(Cn);\n      var sin_Ce = Math.sin(Ce);\n      var cos_Ce = Math.cos(Ce);\n\n      Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n      Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n      Ce = asinhy(Math.tan(Ce));\n\n      var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n      Cn = Cn + tmp[0];\n      Ce = Ce + tmp[1];\n\n      var x;\n      var y;\n\n      if (Math.abs(Ce) <= 2.623395162778) {\n        x = this.a * (this.Qn * Ce) + this.x0;\n        y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n      }\n      else {\n        x = Infinity;\n        y = Infinity;\n      }\n\n      p.x = x;\n      p.y = y;\n\n      return p;\n    }\n\n    function inverse$3(p) {\n      var Ce = (p.x - this.x0) * (1 / this.a);\n      var Cn = (p.y - this.y0) * (1 / this.a);\n\n      Cn = (Cn - this.Zb) / this.Qn;\n      Ce = Ce / this.Qn;\n\n      var lon;\n      var lat;\n\n      if (Math.abs(Ce) <= 2.623395162778) {\n        var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n        Cn = Cn + tmp[0];\n        Ce = Ce + tmp[1];\n        Ce = Math.atan(sinh(Ce));\n\n        var sin_Cn = Math.sin(Cn);\n        var cos_Cn = Math.cos(Cn);\n        var sin_Ce = Math.sin(Ce);\n        var cos_Ce = Math.cos(Ce);\n\n        Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n        Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n        lon = adjust_lon(Ce + this.long0);\n        lat = gatg(this.cgb, Cn);\n      }\n      else {\n        lon = Infinity;\n        lat = Infinity;\n      }\n\n      p.x = lon;\n      p.y = lat;\n\n      return p;\n    }\n\n    var names$4 = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\"];\n    var etmerc = {\n      init: init$3,\n      forward: forward$3,\n      inverse: inverse$3,\n      names: names$4\n    };\n\n    var adjust_zone = function(zone, lon) {\n      if (zone === undefined) {\n        zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n        if (zone < 0) {\n          return 0;\n        } else if (zone > 60) {\n          return 60;\n        }\n      }\n      return zone;\n    };\n\n    var dependsOn = 'etmerc';\n    function init$4() {\n      var zone = adjust_zone(this.zone, this.long0);\n      if (zone === undefined) {\n        throw new Error('unknown utm zone');\n      }\n      this.lat0 = 0;\n      this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n      this.x0 = 500000;\n      this.y0 = this.utmSouth ? 10000000 : 0;\n      this.k0 = 0.9996;\n\n      etmerc.init.apply(this);\n      this.forward = etmerc.forward;\n      this.inverse = etmerc.inverse;\n    }\n\n    var names$5 = [\"Universal Transverse Mercator System\", \"utm\"];\n    var utm = {\n      init: init$4,\n      names: names$5,\n      dependsOn: dependsOn\n    };\n\n    var srat = function(esinp, exp) {\n      return (Math.pow((1 - esinp) / (1 + esinp), exp));\n    };\n\n    var MAX_ITER$1 = 20;\n    function init$6() {\n      var sphi = Math.sin(this.lat0);\n      var cphi = Math.cos(this.lat0);\n      cphi *= cphi;\n      this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n      this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n      this.phic0 = Math.asin(sphi / this.C);\n      this.ratexp = 0.5 * this.C * this.e;\n      this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n    }\n\n    function forward$5(p) {\n      var lon = p.x;\n      var lat = p.y;\n\n      p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n      p.x = this.C * lon;\n      return p;\n    }\n\n    function inverse$5(p) {\n      var DEL_TOL = 1e-14;\n      var lon = p.x / this.C;\n      var lat = p.y;\n      var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n      for (var i = MAX_ITER$1; i > 0; --i) {\n        lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n        if (Math.abs(lat - p.y) < DEL_TOL) {\n          break;\n        }\n        p.y = lat;\n      }\n      /* convergence failed */\n      if (!i) {\n        return null;\n      }\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$7 = [\"gauss\"];\n    var gauss = {\n      init: init$6,\n      forward: forward$5,\n      inverse: inverse$5,\n      names: names$7\n    };\n\n    function init$5() {\n      gauss.init.apply(this);\n      if (!this.rc) {\n        return;\n      }\n      this.sinc0 = Math.sin(this.phic0);\n      this.cosc0 = Math.cos(this.phic0);\n      this.R2 = 2 * this.rc;\n      if (!this.title) {\n        this.title = \"Oblique Stereographic Alternative\";\n      }\n    }\n\n    function forward$4(p) {\n      var sinc, cosc, cosl, k;\n      p.x = adjust_lon(p.x - this.long0);\n      gauss.forward.apply(this, [p]);\n      sinc = Math.sin(p.y);\n      cosc = Math.cos(p.y);\n      cosl = Math.cos(p.x);\n      k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n      p.x = k * cosc * Math.sin(p.x);\n      p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n      p.x = this.a * p.x + this.x0;\n      p.y = this.a * p.y + this.y0;\n      return p;\n    }\n\n    function inverse$4(p) {\n      var sinc, cosc, lon, lat, rho;\n      p.x = (p.x - this.x0) / this.a;\n      p.y = (p.y - this.y0) / this.a;\n\n      p.x /= this.k0;\n      p.y /= this.k0;\n      if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n        var c = 2 * Math.atan2(rho, this.R2);\n        sinc = Math.sin(c);\n        cosc = Math.cos(c);\n        lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n        lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n      }\n      else {\n        lat = this.phic0;\n        lon = 0;\n      }\n\n      p.x = lon;\n      p.y = lat;\n      gauss.inverse.apply(this, [p]);\n      p.x = adjust_lon(p.x + this.long0);\n      return p;\n    }\n\n    var names$6 = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\n    var sterea = {\n      init: init$5,\n      forward: forward$4,\n      inverse: inverse$4,\n      names: names$6\n    };\n\n    function ssfn_(phit, sinphi, eccen) {\n      sinphi *= eccen;\n      return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n    }\n\n    function init$7() {\n      this.coslat0 = Math.cos(this.lat0);\n      this.sinlat0 = Math.sin(this.lat0);\n      if (this.sphere) {\n        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n          this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n        }\n      }\n      else {\n        if (Math.abs(this.coslat0) <= EPSLN) {\n          if (this.lat0 > 0) {\n            //North pole\n            //trace('stere:north pole');\n            this.con = 1;\n          }\n          else {\n            //South pole\n            //trace('stere:south pole');\n            this.con = -1;\n          }\n        }\n        this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n          this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n        }\n        this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n        this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n        this.cosX0 = Math.cos(this.X0);\n        this.sinX0 = Math.sin(this.X0);\n      }\n    }\n\n    // Stereographic forward equations--mapping lat,long to x,y\n    function forward$6(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var sinlat = Math.sin(lat);\n      var coslat = Math.cos(lat);\n      var A, X, sinX, cosX, ts, rh;\n      var dlon = adjust_lon(lon - this.long0);\n\n      if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n        //case of the origine point\n        //trace('stere:this is the origin point');\n        p.x = NaN;\n        p.y = NaN;\n        return p;\n      }\n      if (this.sphere) {\n        //trace('stere:sphere case');\n        A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n        p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n        p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n        return p;\n      }\n      else {\n        X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n        cosX = Math.cos(X);\n        sinX = Math.sin(X);\n        if (Math.abs(this.coslat0) <= EPSLN) {\n          ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n          rh = 2 * this.a * this.k0 * ts / this.cons;\n          p.x = this.x0 + rh * Math.sin(lon - this.long0);\n          p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n          //trace(p.toString());\n          return p;\n        }\n        else if (Math.abs(this.sinlat0) < EPSLN) {\n          //Eq\n          //trace('stere:equateur');\n          A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n          p.y = A * sinX;\n        }\n        else {\n          //other case\n          //trace('stere:normal case');\n          A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n          p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n        }\n        p.x = A * cosX * Math.sin(dlon) + this.x0;\n      }\n      //trace(p.toString());\n      return p;\n    }\n\n    //* Stereographic inverse equations--mapping x,y to lat/long\n    function inverse$6(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var lon, lat, ts, ce, Chi;\n      var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      if (this.sphere) {\n        var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n        lon = this.long0;\n        lat = this.lat0;\n        if (rh <= EPSLN) {\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n        lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n        if (Math.abs(this.coslat0) < EPSLN) {\n          if (this.lat0 > 0) {\n            lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n          }\n          else {\n            lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n          }\n        }\n        else {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n        }\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      else {\n        if (Math.abs(this.coslat0) <= EPSLN) {\n          if (rh <= EPSLN) {\n            lat = this.lat0;\n            lon = this.long0;\n            p.x = lon;\n            p.y = lat;\n            //trace(p.toString());\n            return p;\n          }\n          p.x *= this.con;\n          p.y *= this.con;\n          ts = rh * this.cons / (2 * this.a * this.k0);\n          lat = this.con * phi2z(this.e, ts);\n          lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n        }\n        else {\n          ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n          lon = this.long0;\n          if (rh <= EPSLN) {\n            Chi = this.X0;\n          }\n          else {\n            Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n            lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n          }\n          lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n        }\n      }\n      p.x = lon;\n      p.y = lat;\n\n      //trace(p.toString());\n      return p;\n\n    }\n\n    var names$8 = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\n    var stere = {\n      init: init$7,\n      forward: forward$6,\n      inverse: inverse$6,\n      names: names$8,\n      ssfn_: ssfn_\n    };\n\n    /*\n      references:\n        Formules et constantes pour le Calcul pour la\n        projection cylindrique conforme à axe oblique et pour la transformation entre\n        des systèmes de référence.\n        http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n      */\n\n    function init$8() {\n      var phy0 = this.lat0;\n      this.lambda0 = this.long0;\n      var sinPhy0 = Math.sin(phy0);\n      var semiMajorAxis = this.a;\n      var invF = this.rf;\n      var flattening = 1 / invF;\n      var e2 = 2 * flattening - Math.pow(flattening, 2);\n      var e = this.e = Math.sqrt(e2);\n      this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n      this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n      this.b0 = Math.asin(sinPhy0 / this.alpha);\n      var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n      var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n      var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n      this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n    }\n\n    function forward$7(p) {\n      var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n      var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n      var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n      // spheric latitude\n      var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n      // spheric longitude\n      var I = this.alpha * (p.x - this.lambda0);\n\n      // psoeudo equatorial rotation\n      var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n      var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n      p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n      p.x = this.R * rotI + this.x0;\n      return p;\n    }\n\n    function inverse$7(p) {\n      var Y = p.x - this.x0;\n      var X = p.y - this.y0;\n\n      var rotI = Y / this.R;\n      var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n      var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n      var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n      var lambda = this.lambda0 + I / this.alpha;\n\n      var S = 0;\n      var phy = b;\n      var prevPhy = -1000;\n      var iteration = 0;\n      while (Math.abs(phy - prevPhy) > 0.0000001) {\n        if (++iteration > 20) {\n          //...reportError(\"omercFwdInfinity\");\n          return;\n        }\n        //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n        S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n        prevPhy = phy;\n        phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n      }\n\n      p.x = lambda;\n      p.y = phy;\n      return p;\n    }\n\n    var names$9 = [\"somerc\"];\n    var somerc = {\n      init: init$8,\n      forward: forward$7,\n      inverse: inverse$7,\n      names: names$9\n    };\n\n    /* Initialize the Oblique Mercator  projection\n        ------------------------------------------*/\n    function init$9() {\n      this.no_off = this.no_off || false;\n      this.no_rot = this.no_rot || false;\n\n      if (isNaN(this.k0)) {\n        this.k0 = 1;\n      }\n      var sinlat = Math.sin(this.lat0);\n      var coslat = Math.cos(this.lat0);\n      var con = this.e * sinlat;\n\n      this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n      this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n      var t0 = tsfnz(this.e, this.lat0, sinlat);\n      var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n      if (dl * dl < 1) {\n        dl = 1;\n      }\n      var fl;\n      var gl;\n      if (!isNaN(this.longc)) {\n        //Central point and azimuth method\n\n        if (this.lat0 >= 0) {\n          fl = dl + Math.sqrt(dl * dl - 1);\n        }\n        else {\n          fl = dl - Math.sqrt(dl * dl - 1);\n        }\n        this.el = fl * Math.pow(t0, this.bl);\n        gl = 0.5 * (fl - 1 / fl);\n        this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n        this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n\n      }\n      else {\n        //2 points method\n        var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n        var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n        if (this.lat0 >= 0) {\n          this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n        }\n        else {\n          this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n        }\n        var hl = Math.pow(t1, this.bl);\n        var ll = Math.pow(t2, this.bl);\n        fl = this.el / hl;\n        gl = 0.5 * (fl - 1 / fl);\n        var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n        var pl = (ll - hl) / (ll + hl);\n        var dlon12 = adjust_lon(this.long1 - this.long2);\n        this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;\n        this.long0 = adjust_lon(this.long0);\n        var dlon10 = adjust_lon(this.long1 - this.long0);\n        this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);\n        this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n      }\n\n      if (this.no_off) {\n        this.uc = 0;\n      }\n      else {\n        if (this.lat0 >= 0) {\n          this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n        }\n        else {\n          this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n        }\n      }\n\n    }\n\n    /* Oblique Mercator forward equations--mapping lat,long to x,y\n        ----------------------------------------------------------*/\n    function forward$8(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var dlon = adjust_lon(lon - this.long0);\n      var us, vs;\n      var con;\n      if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n        if (lat > 0) {\n          con = -1;\n        }\n        else {\n          con = 1;\n        }\n        vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n        us = -1 * con * HALF_PI * this.al / this.bl;\n      }\n      else {\n        var t = tsfnz(this.e, lat, Math.sin(lat));\n        var ql = this.el / Math.pow(t, this.bl);\n        var sl = 0.5 * (ql - 1 / ql);\n        var tl = 0.5 * (ql + 1 / ql);\n        var vl = Math.sin(this.bl * (dlon));\n        var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n        if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n          vs = Number.POSITIVE_INFINITY;\n        }\n        else {\n          vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n        }\n        if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {\n          us = this.al * this.bl * (dlon);\n        }\n        else {\n          us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n        }\n      }\n\n      if (this.no_rot) {\n        p.x = this.x0 + us;\n        p.y = this.y0 + vs;\n      }\n      else {\n\n        us -= this.uc;\n        p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n        p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n      }\n      return p;\n    }\n\n    function inverse$8(p) {\n      var us, vs;\n      if (this.no_rot) {\n        vs = p.y - this.y0;\n        us = p.x - this.x0;\n      }\n      else {\n        vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n        us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n        us += this.uc;\n      }\n      var qp = Math.exp(-1 * this.bl * vs / this.al);\n      var sp = 0.5 * (qp - 1 / qp);\n      var tp = 0.5 * (qp + 1 / qp);\n      var vp = Math.sin(this.bl * us / this.al);\n      var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n      var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n      if (Math.abs(up - 1) < EPSLN) {\n        p.x = this.long0;\n        p.y = HALF_PI;\n      }\n      else if (Math.abs(up + 1) < EPSLN) {\n        p.x = this.long0;\n        p.y = -1 * HALF_PI;\n      }\n      else {\n        p.y = phi2z(this.e, ts);\n        p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n      }\n      return p;\n    }\n\n    var names$10 = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\n    var omerc = {\n      init: init$9,\n      forward: forward$8,\n      inverse: inverse$8,\n      names: names$10\n    };\n\n    function init$10() {\n\n      // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n      //double c_lat;                   /* center latitude                      */\n      //double c_lon;                   /* center longitude                     */\n      //double lat1;                    /* first standard parallel              */\n      //double lat2;                    /* second standard parallel             */\n      //double r_maj;                   /* major axis                           */\n      //double r_min;                   /* minor axis                           */\n      //double false_east;              /* x offset in meters                   */\n      //double false_north;             /* y offset in meters                   */\n\n      if (!this.lat2) {\n        this.lat2 = this.lat1;\n      } //if lat2 is not defined\n      if (!this.k0) {\n        this.k0 = 1;\n      }\n      this.x0 = this.x0 || 0;\n      this.y0 = this.y0 || 0;\n      // Standard Parallels cannot be equal and on opposite sides of the equator\n      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n        return;\n      }\n\n      var temp = this.b / this.a;\n      this.e = Math.sqrt(1 - temp * temp);\n\n      var sin1 = Math.sin(this.lat1);\n      var cos1 = Math.cos(this.lat1);\n      var ms1 = msfnz(this.e, sin1, cos1);\n      var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n      var sin2 = Math.sin(this.lat2);\n      var cos2 = Math.cos(this.lat2);\n      var ms2 = msfnz(this.e, sin2, cos2);\n      var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n      var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n      if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n        this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n      }\n      else {\n        this.ns = sin1;\n      }\n      if (isNaN(this.ns)) {\n        this.ns = sin1;\n      }\n      this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n      this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n      if (!this.title) {\n        this.title = \"Lambert Conformal Conic\";\n      }\n    }\n\n    // Lambert Conformal conic forward equations--mapping lat,long to x,y\n    // -----------------------------------------------------------------\n    function forward$9(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      // singular cases :\n      if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n        lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n      }\n\n      var con = Math.abs(Math.abs(lat) - HALF_PI);\n      var ts, rh1;\n      if (con > EPSLN) {\n        ts = tsfnz(this.e, lat, Math.sin(lat));\n        rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n      }\n      else {\n        con = lat * this.ns;\n        if (con <= 0) {\n          return null;\n        }\n        rh1 = 0;\n      }\n      var theta = this.ns * adjust_lon(lon - this.long0);\n      p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n      p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n      return p;\n    }\n\n    // Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n    // -----------------------------------------------------------------\n    function inverse$9(p) {\n\n      var rh1, con, ts;\n      var lat, lon;\n      var x = (p.x - this.x0) / this.k0;\n      var y = (this.rh - (p.y - this.y0) / this.k0);\n      if (this.ns > 0) {\n        rh1 = Math.sqrt(x * x + y * y);\n        con = 1;\n      }\n      else {\n        rh1 = -Math.sqrt(x * x + y * y);\n        con = -1;\n      }\n      var theta = 0;\n      if (rh1 !== 0) {\n        theta = Math.atan2((con * x), (con * y));\n      }\n      if ((rh1 !== 0) || (this.ns > 0)) {\n        con = 1 / this.ns;\n        ts = Math.pow((rh1 / (this.a * this.f0)), con);\n        lat = phi2z(this.e, ts);\n        if (lat === -9999) {\n          return null;\n        }\n      }\n      else {\n        lat = -HALF_PI;\n      }\n      lon = adjust_lon(theta / this.ns + this.long0);\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$11 = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\n    var lcc = {\n      init: init$10,\n      forward: forward$9,\n      inverse: inverse$9,\n      names: names$11\n    };\n\n    function init$11() {\n      this.a = 6377397.155;\n      this.es = 0.006674372230614;\n      this.e = Math.sqrt(this.es);\n      if (!this.lat0) {\n        this.lat0 = 0.863937979737193;\n      }\n      if (!this.long0) {\n        this.long0 = 0.7417649320975901 - 0.308341501185665;\n      }\n      /* if scale not set default to 0.9999 */\n      if (!this.k0) {\n        this.k0 = 0.9999;\n      }\n      this.s45 = 0.785398163397448; /* 45 */\n      this.s90 = 2 * this.s45;\n      this.fi0 = this.lat0;\n      this.e2 = this.es;\n      this.e = Math.sqrt(this.e2);\n      this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n      this.uq = 1.04216856380474;\n      this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n      this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n      this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n      this.k1 = this.k0;\n      this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n      this.s0 = 1.37008346281555;\n      this.n = Math.sin(this.s0);\n      this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n      this.ad = this.s90 - this.uq;\n    }\n\n    /* ellipsoid */\n    /* calculate xy from lat/lon */\n    /* Constants, identical to inverse transform function */\n    function forward$10(p) {\n      var gfi, u, deltav, s, d, eps, ro;\n      var lon = p.x;\n      var lat = p.y;\n      var delta_lon = adjust_lon(lon - this.long0);\n      /* Transformation */\n      gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n      u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n      deltav = -delta_lon * this.alfa;\n      s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n      d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n      eps = this.n * d;\n      ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n      p.y = ro * Math.cos(eps) / 1;\n      p.x = ro * Math.sin(eps) / 1;\n\n      if (!this.czech) {\n        p.y *= -1;\n        p.x *= -1;\n      }\n      return (p);\n    }\n\n    /* calculate lat/lon from xy */\n    function inverse$10(p) {\n      var u, deltav, s, d, eps, ro, fi1;\n      var ok;\n\n      /* Transformation */\n      /* revert y, x*/\n      var tmp = p.x;\n      p.x = p.y;\n      p.y = tmp;\n      if (!this.czech) {\n        p.y *= -1;\n        p.x *= -1;\n      }\n      ro = Math.sqrt(p.x * p.x + p.y * p.y);\n      eps = Math.atan2(p.y, p.x);\n      d = eps / Math.sin(this.s0);\n      s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n      u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n      deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n      p.x = this.long0 - deltav / this.alfa;\n      fi1 = u;\n      ok = 0;\n      var iter = 0;\n      do {\n        p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n        if (Math.abs(fi1 - p.y) < 0.0000000001) {\n          ok = 1;\n        }\n        fi1 = p.y;\n        iter += 1;\n      } while (ok === 0 && iter < 15);\n      if (iter >= 15) {\n        return null;\n      }\n\n      return (p);\n    }\n\n    var names$12 = [\"Krovak\", \"krovak\"];\n    var krovak = {\n      init: init$11,\n      forward: forward$10,\n      inverse: inverse$10,\n      names: names$12\n    };\n\n    var mlfn = function(e0, e1, e2, e3, phi) {\n      return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n    };\n\n    var e0fn = function(x) {\n      return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n    };\n\n    var e1fn = function(x) {\n      return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n    };\n\n    var e2fn = function(x) {\n      return (0.05859375 * x * x * (1 + 0.75 * x));\n    };\n\n    var e3fn = function(x) {\n      return (x * x * x * (35 / 3072));\n    };\n\n    var gN = function(a, e, sinphi) {\n      var temp = e * sinphi;\n      return a / Math.sqrt(1 - temp * temp);\n    };\n\n    var adjust_lat = function(x) {\n      return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n    };\n\n    var imlfn = function(ml, e0, e1, e2, e3) {\n      var phi;\n      var dphi;\n\n      phi = ml / e0;\n      for (var i = 0; i < 15; i++) {\n        dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n        phi += dphi;\n        if (Math.abs(dphi) <= 0.0000000001) {\n          return phi;\n        }\n      }\n\n      //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n      return NaN;\n    };\n\n    function init$12() {\n      if (!this.sphere) {\n        this.e0 = e0fn(this.es);\n        this.e1 = e1fn(this.es);\n        this.e2 = e2fn(this.es);\n        this.e3 = e3fn(this.es);\n        this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n      }\n    }\n\n    /* Cassini forward equations--mapping lat,long to x,y\n      -----------------------------------------------------------------------*/\n    function forward$11(p) {\n\n      /* Forward equations\n          -----------------*/\n      var x, y;\n      var lam = p.x;\n      var phi = p.y;\n      lam = adjust_lon(lam - this.long0);\n\n      if (this.sphere) {\n        x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n        y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n      }\n      else {\n        //ellipsoid\n        var sinphi = Math.sin(phi);\n        var cosphi = Math.cos(phi);\n        var nl = gN(this.a, this.e, sinphi);\n        var tl = Math.tan(phi) * Math.tan(phi);\n        var al = lam * Math.cos(phi);\n        var asq = al * al;\n        var cl = this.es * cosphi * cosphi / (1 - this.es);\n        var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n        x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n        y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n      }\n\n      p.x = x + this.x0;\n      p.y = y + this.y0;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$11(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var x = p.x / this.a;\n      var y = p.y / this.a;\n      var phi, lam;\n\n      if (this.sphere) {\n        var dd = y + this.lat0;\n        phi = Math.asin(Math.sin(dd) * Math.cos(x));\n        lam = Math.atan2(Math.tan(x), Math.cos(dd));\n      }\n      else {\n        /* ellipsoid */\n        var ml1 = this.ml0 / this.a + y;\n        var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n        if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n          p.x = this.long0;\n          p.y = HALF_PI;\n          if (y < 0) {\n            p.y *= -1;\n          }\n          return p;\n        }\n        var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n        var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n        var tl1 = Math.pow(Math.tan(phi1), 2);\n        var dl = x * this.a / nl1;\n        var dsq = dl * dl;\n        phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n        lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n      }\n\n      p.x = adjust_lon(lam + this.long0);\n      p.y = adjust_lat(phi);\n      return p;\n\n    }\n\n    var names$13 = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\n    var cass = {\n      init: init$12,\n      forward: forward$11,\n      inverse: inverse$11,\n      names: names$13\n    };\n\n    var qsfnz = function(eccent, sinphi) {\n      var con;\n      if (eccent > 1.0e-7) {\n        con = eccent * sinphi;\n        return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n      }\n      else {\n        return (2 * sinphi);\n      }\n    };\n\n    /*\n      reference\n        \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n        The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n      */\n\n    var S_POLE = 1;\n\n    var N_POLE = 2;\n    var EQUIT = 3;\n    var OBLIQ = 4;\n\n    /* Initialize the Lambert Azimuthal Equal Area projection\n      ------------------------------------------------------*/\n    function init$13() {\n      var t = Math.abs(this.lat0);\n      if (Math.abs(t - HALF_PI) < EPSLN) {\n        this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n      }\n      else if (Math.abs(t) < EPSLN) {\n        this.mode = this.EQUIT;\n      }\n      else {\n        this.mode = this.OBLIQ;\n      }\n      if (this.es > 0) {\n        var sinphi;\n\n        this.qp = qsfnz(this.e, 1);\n        this.mmf = 0.5 / (1 - this.es);\n        this.apa = authset(this.es);\n        switch (this.mode) {\n        case this.N_POLE:\n          this.dd = 1;\n          break;\n        case this.S_POLE:\n          this.dd = 1;\n          break;\n        case this.EQUIT:\n          this.rq = Math.sqrt(0.5 * this.qp);\n          this.dd = 1 / this.rq;\n          this.xmf = 1;\n          this.ymf = 0.5 * this.qp;\n          break;\n        case this.OBLIQ:\n          this.rq = Math.sqrt(0.5 * this.qp);\n          sinphi = Math.sin(this.lat0);\n          this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n          this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n          this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n          this.ymf = (this.xmf = this.rq) / this.dd;\n          this.xmf *= this.dd;\n          break;\n        }\n      }\n      else {\n        if (this.mode === this.OBLIQ) {\n          this.sinph0 = Math.sin(this.lat0);\n          this.cosph0 = Math.cos(this.lat0);\n        }\n      }\n    }\n\n    /* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n      -----------------------------------------------------------------------*/\n    function forward$12(p) {\n\n      /* Forward equations\n          -----------------*/\n      var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n      var lam = p.x;\n      var phi = p.y;\n\n      lam = adjust_lon(lam - this.long0);\n      if (this.sphere) {\n        sinphi = Math.sin(phi);\n        cosphi = Math.cos(phi);\n        coslam = Math.cos(lam);\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n          if (y <= EPSLN) {\n            return null;\n          }\n          y = Math.sqrt(2 / y);\n          x = y * cosphi * Math.sin(lam);\n          y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n        }\n        else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n          if (this.mode === this.N_POLE) {\n            coslam = -coslam;\n          }\n          if (Math.abs(phi + this.lat0) < EPSLN) {\n            return null;\n          }\n          y = FORTPI - phi * 0.5;\n          y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n          x = y * Math.sin(lam);\n          y *= coslam;\n        }\n      }\n      else {\n        sinb = 0;\n        cosb = 0;\n        b = 0;\n        coslam = Math.cos(lam);\n        sinlam = Math.sin(lam);\n        sinphi = Math.sin(phi);\n        q = qsfnz(this.e, sinphi);\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          sinb = q / this.qp;\n          cosb = Math.sqrt(1 - sinb * sinb);\n        }\n        switch (this.mode) {\n        case this.OBLIQ:\n          b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n          break;\n        case this.EQUIT:\n          b = 1 + cosb * coslam;\n          break;\n        case this.N_POLE:\n          b = HALF_PI + phi;\n          q = this.qp - q;\n          break;\n        case this.S_POLE:\n          b = phi - HALF_PI;\n          q = this.qp + q;\n          break;\n        }\n        if (Math.abs(b) < EPSLN) {\n          return null;\n        }\n        switch (this.mode) {\n        case this.OBLIQ:\n        case this.EQUIT:\n          b = Math.sqrt(2 / b);\n          if (this.mode === this.OBLIQ) {\n            y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n          }\n          else {\n            y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n          }\n          x = this.xmf * b * cosb * sinlam;\n          break;\n        case this.N_POLE:\n        case this.S_POLE:\n          if (q >= 0) {\n            x = (b = Math.sqrt(q)) * sinlam;\n            y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n          }\n          else {\n            x = y = 0;\n          }\n          break;\n        }\n      }\n\n      p.x = this.a * x + this.x0;\n      p.y = this.a * y + this.y0;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$12(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var x = p.x / this.a;\n      var y = p.y / this.a;\n      var lam, phi, cCe, sCe, q, rho, ab;\n      if (this.sphere) {\n        var cosz = 0,\n          rh, sinz = 0;\n\n        rh = Math.sqrt(x * x + y * y);\n        phi = rh * 0.5;\n        if (phi > 1) {\n          return null;\n        }\n        phi = 2 * Math.asin(phi);\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          sinz = Math.sin(phi);\n          cosz = Math.cos(phi);\n        }\n        switch (this.mode) {\n        case this.EQUIT:\n          phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n          x *= sinz;\n          y = cosz * rh;\n          break;\n        case this.OBLIQ:\n          phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n          x *= sinz * this.cosph0;\n          y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n          break;\n        case this.N_POLE:\n          y = -y;\n          phi = HALF_PI - phi;\n          break;\n        case this.S_POLE:\n          phi -= HALF_PI;\n          break;\n        }\n        lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n      }\n      else {\n        ab = 0;\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          x /= this.dd;\n          y *= this.dd;\n          rho = Math.sqrt(x * x + y * y);\n          if (rho < EPSLN) {\n            p.x = this.long0;\n            p.y = this.lat0;\n            return p;\n          }\n          sCe = 2 * Math.asin(0.5 * rho / this.rq);\n          cCe = Math.cos(sCe);\n          x *= (sCe = Math.sin(sCe));\n          if (this.mode === this.OBLIQ) {\n            ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n            q = this.qp * ab;\n            y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n          }\n          else {\n            ab = y * sCe / rho;\n            q = this.qp * ab;\n            y = rho * cCe;\n          }\n        }\n        else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n          if (this.mode === this.N_POLE) {\n            y = -y;\n          }\n          q = (x * x + y * y);\n          if (!q) {\n            p.x = this.long0;\n            p.y = this.lat0;\n            return p;\n          }\n          ab = 1 - q / this.qp;\n          if (this.mode === this.S_POLE) {\n            ab = -ab;\n          }\n        }\n        lam = Math.atan2(x, y);\n        phi = authlat(Math.asin(ab), this.apa);\n      }\n\n      p.x = adjust_lon(this.long0 + lam);\n      p.y = phi;\n      return p;\n    }\n\n    /* determine latitude from authalic latitude */\n    var P00 = 0.33333333333333333333;\n\n    var P01 = 0.17222222222222222222;\n    var P02 = 0.10257936507936507936;\n    var P10 = 0.06388888888888888888;\n    var P11 = 0.06640211640211640211;\n    var P20 = 0.01641501294219154443;\n\n    function authset(es) {\n      var t;\n      var APA = [];\n      APA[0] = es * P00;\n      t = es * es;\n      APA[0] += t * P01;\n      APA[1] = t * P10;\n      t *= es;\n      APA[0] += t * P02;\n      APA[1] += t * P11;\n      APA[2] = t * P20;\n      return APA;\n    }\n\n    function authlat(beta, APA) {\n      var t = beta + beta;\n      return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n    }\n\n    var names$14 = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\n    var laea = {\n      init: init$13,\n      forward: forward$12,\n      inverse: inverse$12,\n      names: names$14,\n      S_POLE: S_POLE,\n      N_POLE: N_POLE,\n      EQUIT: EQUIT,\n      OBLIQ: OBLIQ\n    };\n\n    var asinz = function(x) {\n      if (Math.abs(x) > 1) {\n        x = (x > 1) ? 1 : -1;\n      }\n      return Math.asin(x);\n    };\n\n    function init$14() {\n\n      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n        return;\n      }\n      this.temp = this.b / this.a;\n      this.es = 1 - Math.pow(this.temp, 2);\n      this.e3 = Math.sqrt(this.es);\n\n      this.sin_po = Math.sin(this.lat1);\n      this.cos_po = Math.cos(this.lat1);\n      this.t1 = this.sin_po;\n      this.con = this.sin_po;\n      this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n      this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n      this.sin_po = Math.sin(this.lat2);\n      this.cos_po = Math.cos(this.lat2);\n      this.t2 = this.sin_po;\n      this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n      this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n      this.sin_po = Math.sin(this.lat0);\n      this.cos_po = Math.cos(this.lat0);\n      this.t3 = this.sin_po;\n      this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n      if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n        this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n      }\n      else {\n        this.ns0 = this.con;\n      }\n      this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n      this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n    }\n\n    /* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n      -------------------------------------------------------------------*/\n    function forward$13(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      this.sin_phi = Math.sin(lat);\n      this.cos_phi = Math.cos(lat);\n\n      var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n      var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n      var theta = this.ns0 * adjust_lon(lon - this.long0);\n      var x = rh1 * Math.sin(theta) + this.x0;\n      var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$13(p) {\n      var rh1, qs, con, theta, lon, lat;\n\n      p.x -= this.x0;\n      p.y = this.rh - p.y + this.y0;\n      if (this.ns0 >= 0) {\n        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n        con = 1;\n      }\n      else {\n        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n        con = -1;\n      }\n      theta = 0;\n      if (rh1 !== 0) {\n        theta = Math.atan2(con * p.x, con * p.y);\n      }\n      con = rh1 * this.ns0 / this.a;\n      if (this.sphere) {\n        lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n      }\n      else {\n        qs = (this.c - con * con) / this.ns0;\n        lat = this.phi1z(this.e3, qs);\n      }\n\n      lon = adjust_lon(theta / this.ns0 + this.long0);\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    /* Function to compute phi1, the latitude for the inverse of the\n       Albers Conical Equal-Area projection.\n    -------------------------------------------*/\n    function phi1z(eccent, qs) {\n      var sinphi, cosphi, con, com, dphi;\n      var phi = asinz(0.5 * qs);\n      if (eccent < EPSLN) {\n        return phi;\n      }\n\n      var eccnts = eccent * eccent;\n      for (var i = 1; i <= 25; i++) {\n        sinphi = Math.sin(phi);\n        cosphi = Math.cos(phi);\n        con = eccent * sinphi;\n        com = 1 - con * con;\n        dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n        phi = phi + dphi;\n        if (Math.abs(dphi) <= 1e-7) {\n          return phi;\n        }\n      }\n      return null;\n    }\n\n    var names$15 = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\n    var aea = {\n      init: init$14,\n      forward: forward$13,\n      inverse: inverse$13,\n      names: names$15,\n      phi1z: phi1z\n    };\n\n    /*\n      reference:\n        Wolfram Mathworld \"Gnomonic Projection\"\n        http://mathworld.wolfram.com/GnomonicProjection.html\n        Accessed: 12th November 2009\n      */\n    function init$15() {\n\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      this.sin_p14 = Math.sin(this.lat0);\n      this.cos_p14 = Math.cos(this.lat0);\n      // Approximation for projecting points to the horizon (infinity)\n      this.infinity_dist = 1000 * this.a;\n      this.rc = 1;\n    }\n\n    /* Gnomonic forward equations--mapping lat,long to x,y\n        ---------------------------------------------------*/\n    function forward$14(p) {\n      var sinphi, cosphi; /* sin and cos value        */\n      var dlon; /* delta longitude value      */\n      var coslon; /* cos of longitude        */\n      var ksp; /* scale factor          */\n      var g;\n      var x, y;\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n          -----------------*/\n      dlon = adjust_lon(lon - this.long0);\n\n      sinphi = Math.sin(lat);\n      cosphi = Math.cos(lat);\n\n      coslon = Math.cos(dlon);\n      g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n      ksp = 1;\n      if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n        x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n      }\n      else {\n\n        // Point is in the opposing hemisphere and is unprojectable\n        // We still need to return a reasonable point, so we project\n        // to infinity, on a bearing\n        // equivalent to the northern hemisphere equivalent\n        // This is a reasonable approximation for short shapes and lines that\n        // straddle the horizon.\n\n        x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n        y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n      }\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$14(p) {\n      var rh; /* Rho */\n      var sinc, cosc;\n      var c;\n      var lon, lat;\n\n      /* Inverse equations\n          -----------------*/\n      p.x = (p.x - this.x0) / this.a;\n      p.y = (p.y - this.y0) / this.a;\n\n      p.x /= this.k0;\n      p.y /= this.k0;\n\n      if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n        c = Math.atan2(rh, this.rc);\n        sinc = Math.sin(c);\n        cosc = Math.cos(c);\n\n        lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n        lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n        lon = adjust_lon(this.long0 + lon);\n      }\n      else {\n        lat = this.phic0;\n        lon = 0;\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$16 = [\"gnom\"];\n    var gnom = {\n      init: init$15,\n      forward: forward$14,\n      inverse: inverse$14,\n      names: names$16\n    };\n\n    var iqsfnz = function(eccent, q) {\n      var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n      if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n        if (q < 0) {\n          return (-1 * HALF_PI);\n        }\n        else {\n          return HALF_PI;\n        }\n      }\n      //var phi = 0.5* q/(1-eccent*eccent);\n      var phi = Math.asin(0.5 * q);\n      var dphi;\n      var sin_phi;\n      var cos_phi;\n      var con;\n      for (var i = 0; i < 30; i++) {\n        sin_phi = Math.sin(phi);\n        cos_phi = Math.cos(phi);\n        con = eccent * sin_phi;\n        dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n        phi += dphi;\n        if (Math.abs(dphi) <= 0.0000000001) {\n          return phi;\n        }\n      }\n\n      //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n      return NaN;\n    };\n\n    /*\n      reference:\n        \"Cartographic Projection Procedures for the UNIX Environment-\n        A User's Manual\" by Gerald I. Evenden,\n        USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n    */\n    function init$16() {\n      //no-op\n      if (!this.sphere) {\n        this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n      }\n    }\n\n    /* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n        ------------------------------------------------------------*/\n    function forward$15(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var x, y;\n      /* Forward equations\n          -----------------*/\n      var dlon = adjust_lon(lon - this.long0);\n      if (this.sphere) {\n        x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n        y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n      }\n      else {\n        var qs = qsfnz(this.e, Math.sin(lat));\n        x = this.x0 + this.a * this.k0 * dlon;\n        y = this.y0 + this.a * qs * 0.5 / this.k0;\n      }\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n        ------------------------------------------------------------*/\n    function inverse$15(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var lon, lat;\n\n      if (this.sphere) {\n        lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n        lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n      }\n      else {\n        lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n        lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$17 = [\"cea\"];\n    var cea = {\n      init: init$16,\n      forward: forward$15,\n      inverse: inverse$15,\n      names: names$17\n    };\n\n    function init$17() {\n\n      this.x0 = this.x0 || 0;\n      this.y0 = this.y0 || 0;\n      this.lat0 = this.lat0 || 0;\n      this.long0 = this.long0 || 0;\n      this.lat_ts = this.lat_ts || 0;\n      this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n      this.rc = Math.cos(this.lat_ts);\n    }\n\n    // forward equations--mapping lat,long to x,y\n    // -----------------------------------------------------------------\n    function forward$16(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      var dlon = adjust_lon(lon - this.long0);\n      var dlat = adjust_lat(lat - this.lat0);\n      p.x = this.x0 + (this.a * dlon * this.rc);\n      p.y = this.y0 + (this.a * dlat);\n      return p;\n    }\n\n    // inverse equations--mapping x,y to lat/long\n    // -----------------------------------------------------------------\n    function inverse$16(p) {\n\n      var x = p.x;\n      var y = p.y;\n\n      p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n      p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n      return p;\n    }\n\n    var names$18 = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\n    var eqc = {\n      init: init$17,\n      forward: forward$16,\n      inverse: inverse$16,\n      names: names$18\n    };\n\n    var MAX_ITER$2 = 20;\n\n    function init$18() {\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      this.temp = this.b / this.a;\n      this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n      this.e = Math.sqrt(this.es);\n      this.e0 = e0fn(this.es);\n      this.e1 = e1fn(this.es);\n      this.e2 = e2fn(this.es);\n      this.e3 = e3fn(this.es);\n      this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n    }\n\n    /* Polyconic forward equations--mapping lat,long to x,y\n        ---------------------------------------------------*/\n    function forward$17(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var x, y, el;\n      var dlon = adjust_lon(lon - this.long0);\n      el = dlon * Math.sin(lat);\n      if (this.sphere) {\n        if (Math.abs(lat) <= EPSLN) {\n          x = this.a * dlon;\n          y = -1 * this.a * this.lat0;\n        }\n        else {\n          x = this.a * Math.sin(el) / Math.tan(lat);\n          y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n        }\n      }\n      else {\n        if (Math.abs(lat) <= EPSLN) {\n          x = this.a * dlon;\n          y = -1 * this.ml0;\n        }\n        else {\n          var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n          x = nl * Math.sin(el);\n          y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n        }\n\n      }\n      p.x = x + this.x0;\n      p.y = y + this.y0;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$17(p) {\n      var lon, lat, x, y, i;\n      var al, bl;\n      var phi, dphi;\n      x = p.x - this.x0;\n      y = p.y - this.y0;\n\n      if (this.sphere) {\n        if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n          lon = adjust_lon(x / this.a + this.long0);\n          lat = 0;\n        }\n        else {\n          al = this.lat0 + y / this.a;\n          bl = x * x / this.a / this.a + al * al;\n          phi = al;\n          var tanphi;\n          for (i = MAX_ITER$2; i; --i) {\n            tanphi = Math.tan(phi);\n            dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n            phi += dphi;\n            if (Math.abs(dphi) <= EPSLN) {\n              lat = phi;\n              break;\n            }\n          }\n          lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n        }\n      }\n      else {\n        if (Math.abs(y + this.ml0) <= EPSLN) {\n          lat = 0;\n          lon = adjust_lon(this.long0 + x / this.a);\n        }\n        else {\n\n          al = (this.ml0 + y) / this.a;\n          bl = x * x / this.a / this.a + al * al;\n          phi = al;\n          var cl, mln, mlnp, ma;\n          var con;\n          for (i = MAX_ITER$2; i; --i) {\n            con = this.e * Math.sin(phi);\n            cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n            mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n            mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n            ma = mln / this.a;\n            dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n            phi -= dphi;\n            if (Math.abs(dphi) <= EPSLN) {\n              lat = phi;\n              break;\n            }\n          }\n\n          //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n          cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n          lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n        }\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$19 = [\"Polyconic\", \"poly\"];\n    var poly = {\n      init: init$18,\n      forward: forward$17,\n      inverse: inverse$17,\n      names: names$19\n    };\n\n    /*\n      reference\n        Department of Land and Survey Technical Circular 1973/32\n          http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n        OSG Technical Report 4.1\n          http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n      */\n\n    /**\n     * iterations: Number of iterations to refine inverse transform.\n     *     0 -> km accuracy\n     *     1 -> m accuracy -- suitable for most mapping applications\n     *     2 -> mm accuracy\n     */\n\n\n    function init$19() {\n      this.A = [];\n      this.A[1] = 0.6399175073;\n      this.A[2] = -0.1358797613;\n      this.A[3] = 0.063294409;\n      this.A[4] = -0.02526853;\n      this.A[5] = 0.0117879;\n      this.A[6] = -0.0055161;\n      this.A[7] = 0.0026906;\n      this.A[8] = -0.001333;\n      this.A[9] = 0.00067;\n      this.A[10] = -0.00034;\n\n      this.B_re = [];\n      this.B_im = [];\n      this.B_re[1] = 0.7557853228;\n      this.B_im[1] = 0;\n      this.B_re[2] = 0.249204646;\n      this.B_im[2] = 0.003371507;\n      this.B_re[3] = -0.001541739;\n      this.B_im[3] = 0.041058560;\n      this.B_re[4] = -0.10162907;\n      this.B_im[4] = 0.01727609;\n      this.B_re[5] = -0.26623489;\n      this.B_im[5] = -0.36249218;\n      this.B_re[6] = -0.6870983;\n      this.B_im[6] = -1.1651967;\n\n      this.C_re = [];\n      this.C_im = [];\n      this.C_re[1] = 1.3231270439;\n      this.C_im[1] = 0;\n      this.C_re[2] = -0.577245789;\n      this.C_im[2] = -0.007809598;\n      this.C_re[3] = 0.508307513;\n      this.C_im[3] = -0.112208952;\n      this.C_re[4] = -0.15094762;\n      this.C_im[4] = 0.18200602;\n      this.C_re[5] = 1.01418179;\n      this.C_im[5] = 1.64497696;\n      this.C_re[6] = 1.9660549;\n      this.C_im[6] = 2.5127645;\n\n      this.D = [];\n      this.D[1] = 1.5627014243;\n      this.D[2] = 0.5185406398;\n      this.D[3] = -0.03333098;\n      this.D[4] = -0.1052906;\n      this.D[5] = -0.0368594;\n      this.D[6] = 0.007317;\n      this.D[7] = 0.01220;\n      this.D[8] = 0.00394;\n      this.D[9] = -0.0013;\n    }\n\n    /**\n        New Zealand Map Grid Forward  - long/lat to x/y\n        long/lat in radians\n      */\n    function forward$18(p) {\n      var n;\n      var lon = p.x;\n      var lat = p.y;\n\n      var delta_lat = lat - this.lat0;\n      var delta_lon = lon - this.long0;\n\n      // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n      // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n      var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n      var d_lambda = delta_lon;\n      var d_phi_n = 1; // d_phi^0\n\n      var d_psi = 0;\n      for (n = 1; n <= 10; n++) {\n        d_phi_n = d_phi_n * d_phi;\n        d_psi = d_psi + this.A[n] * d_phi_n;\n      }\n\n      // 2. Calculate theta\n      var th_re = d_psi;\n      var th_im = d_lambda;\n\n      // 3. Calculate z\n      var th_n_re = 1;\n      var th_n_im = 0; // theta^0\n      var th_n_re1;\n      var th_n_im1;\n\n      var z_re = 0;\n      var z_im = 0;\n      for (n = 1; n <= 6; n++) {\n        th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n        th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n        th_n_re = th_n_re1;\n        th_n_im = th_n_im1;\n        z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n        z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n      }\n\n      // 4. Calculate easting and northing\n      p.x = (z_im * this.a) + this.x0;\n      p.y = (z_re * this.a) + this.y0;\n\n      return p;\n    }\n\n    /**\n        New Zealand Map Grid Inverse  -  x/y to long/lat\n      */\n    function inverse$18(p) {\n      var n;\n      var x = p.x;\n      var y = p.y;\n\n      var delta_x = x - this.x0;\n      var delta_y = y - this.y0;\n\n      // 1. Calculate z\n      var z_re = delta_y / this.a;\n      var z_im = delta_x / this.a;\n\n      // 2a. Calculate theta - first approximation gives km accuracy\n      var z_n_re = 1;\n      var z_n_im = 0; // z^0\n      var z_n_re1;\n      var z_n_im1;\n\n      var th_re = 0;\n      var th_im = 0;\n      for (n = 1; n <= 6; n++) {\n        z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n        z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n        z_n_re = z_n_re1;\n        z_n_im = z_n_im1;\n        th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n        th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n      }\n\n      // 2b. Iterate to refine the accuracy of the calculation\n      //        0 iterations gives km accuracy\n      //        1 iteration gives m accuracy -- good enough for most mapping applications\n      //        2 iterations bives mm accuracy\n      for (var i = 0; i < this.iterations; i++) {\n        var th_n_re = th_re;\n        var th_n_im = th_im;\n        var th_n_re1;\n        var th_n_im1;\n\n        var num_re = z_re;\n        var num_im = z_im;\n        for (n = 2; n <= 6; n++) {\n          th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n          th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n          th_n_re = th_n_re1;\n          th_n_im = th_n_im1;\n          num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n          num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n        }\n\n        th_n_re = 1;\n        th_n_im = 0;\n        var den_re = this.B_re[1];\n        var den_im = this.B_im[1];\n        for (n = 2; n <= 6; n++) {\n          th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n          th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n          th_n_re = th_n_re1;\n          th_n_im = th_n_im1;\n          den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n          den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n        }\n\n        // Complex division\n        var den2 = den_re * den_re + den_im * den_im;\n        th_re = (num_re * den_re + num_im * den_im) / den2;\n        th_im = (num_im * den_re - num_re * den_im) / den2;\n      }\n\n      // 3. Calculate d_phi              ...                                    // and d_lambda\n      var d_psi = th_re;\n      var d_lambda = th_im;\n      var d_psi_n = 1; // d_psi^0\n\n      var d_phi = 0;\n      for (n = 1; n <= 9; n++) {\n        d_psi_n = d_psi_n * d_psi;\n        d_phi = d_phi + this.D[n] * d_psi_n;\n      }\n\n      // 4. Calculate latitude and longitude\n      // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n      var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n      var lon = this.long0 + d_lambda;\n\n      p.x = lon;\n      p.y = lat;\n\n      return p;\n    }\n\n    var names$20 = [\"New_Zealand_Map_Grid\", \"nzmg\"];\n    var nzmg = {\n      init: init$19,\n      forward: forward$18,\n      inverse: inverse$18,\n      names: names$20\n    };\n\n    /*\n      reference\n        \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n        The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n      */\n\n\n    /* Initialize the Miller Cylindrical projection\n      -------------------------------------------*/\n    function init$20() {\n      //no-op\n    }\n\n    /* Miller Cylindrical forward equations--mapping lat,long to x,y\n        ------------------------------------------------------------*/\n    function forward$19(p) {\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n          -----------------*/\n      var dlon = adjust_lon(lon - this.long0);\n      var x = this.x0 + this.a * dlon;\n      var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Miller Cylindrical inverse equations--mapping x,y to lat/long\n        ------------------------------------------------------------*/\n    function inverse$19(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n\n      var lon = adjust_lon(this.long0 + p.x / this.a);\n      var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$21 = [\"Miller_Cylindrical\", \"mill\"];\n    var mill = {\n      init: init$20,\n      forward: forward$19,\n      inverse: inverse$19,\n      names: names$21\n    };\n\n    var MAX_ITER$3 = 20;\n    function init$21() {\n      /* Place parameters in static storage for common use\n        -------------------------------------------------*/\n\n\n      if (!this.sphere) {\n        this.en = pj_enfn(this.es);\n      }\n      else {\n        this.n = 1;\n        this.m = 0;\n        this.es = 0;\n        this.C_y = Math.sqrt((this.m + 1) / this.n);\n        this.C_x = this.C_y / (this.m + 1);\n      }\n\n    }\n\n    /* Sinusoidal forward equations--mapping lat,long to x,y\n      -----------------------------------------------------*/\n    function forward$20(p) {\n      var x, y;\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n        -----------------*/\n      lon = adjust_lon(lon - this.long0);\n\n      if (this.sphere) {\n        if (!this.m) {\n          lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n        }\n        else {\n          var k = this.n * Math.sin(lat);\n          for (var i = MAX_ITER$3; i; --i) {\n            var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n            lat -= V;\n            if (Math.abs(V) < EPSLN) {\n              break;\n            }\n          }\n        }\n        x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n        y = this.a * this.C_y * lat;\n\n      }\n      else {\n\n        var s = Math.sin(lat);\n        var c = Math.cos(lat);\n        y = this.a * pj_mlfn(lat, s, c, this.en);\n        x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n      }\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$20(p) {\n      var lat, temp, lon, s;\n\n      p.x -= this.x0;\n      lon = p.x / this.a;\n      p.y -= this.y0;\n      lat = p.y / this.a;\n\n      if (this.sphere) {\n        lat /= this.C_y;\n        lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n        if (this.m) {\n          lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n        }\n        else if (this.n !== 1) {\n          lat = asinz(Math.sin(lat) / this.n);\n        }\n        lon = adjust_lon(lon + this.long0);\n        lat = adjust_lat(lat);\n      }\n      else {\n        lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n        s = Math.abs(lat);\n        if (s < HALF_PI) {\n          s = Math.sin(lat);\n          temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n          //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n          lon = adjust_lon(temp);\n        }\n        else if ((s - EPSLN) < HALF_PI) {\n          lon = this.long0;\n        }\n      }\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$22 = [\"Sinusoidal\", \"sinu\"];\n    var sinu = {\n      init: init$21,\n      forward: forward$20,\n      inverse: inverse$20,\n      names: names$22\n    };\n\n    function init$22() {}\n    /* Mollweide forward equations--mapping lat,long to x,y\n        ----------------------------------------------------*/\n    function forward$21(p) {\n\n      /* Forward equations\n          -----------------*/\n      var lon = p.x;\n      var lat = p.y;\n\n      var delta_lon = adjust_lon(lon - this.long0);\n      var theta = lat;\n      var con = Math.PI * Math.sin(lat);\n\n      /* Iterate using the Newton-Raphson method to find theta\n          -----------------------------------------------------*/\n      while (true) {\n        var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n        theta += delta_theta;\n        if (Math.abs(delta_theta) < EPSLN) {\n          break;\n        }\n      }\n      theta /= 2;\n\n      /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n           this is done here because of precision problems with \"cos(theta)\"\n           --------------------------------------------------------------------------*/\n      if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n        delta_lon = 0;\n      }\n      var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n      var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$21(p) {\n      var theta;\n      var arg;\n\n      /* Inverse equations\n          -----------------*/\n      p.x -= this.x0;\n      p.y -= this.y0;\n      arg = p.y / (1.4142135623731 * this.a);\n\n      /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n           a number very close to one is used instead.\n           -------------------------------------------------------------------*/\n      if (Math.abs(arg) > 0.999999999999) {\n        arg = 0.999999999999;\n      }\n      theta = Math.asin(arg);\n      var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n      if (lon < (-Math.PI)) {\n        lon = -Math.PI;\n      }\n      if (lon > Math.PI) {\n        lon = Math.PI;\n      }\n      arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n      if (Math.abs(arg) > 1) {\n        arg = 1;\n      }\n      var lat = Math.asin(arg);\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$23 = [\"Mollweide\", \"moll\"];\n    var moll = {\n      init: init$22,\n      forward: forward$21,\n      inverse: inverse$21,\n      names: names$23\n    };\n\n    function init$23() {\n\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      // Standard Parallels cannot be equal and on opposite sides of the equator\n      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n        return;\n      }\n      this.lat2 = this.lat2 || this.lat1;\n      this.temp = this.b / this.a;\n      this.es = 1 - Math.pow(this.temp, 2);\n      this.e = Math.sqrt(this.es);\n      this.e0 = e0fn(this.es);\n      this.e1 = e1fn(this.es);\n      this.e2 = e2fn(this.es);\n      this.e3 = e3fn(this.es);\n\n      this.sinphi = Math.sin(this.lat1);\n      this.cosphi = Math.cos(this.lat1);\n\n      this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n      this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n      if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n        this.ns = this.sinphi;\n      }\n      else {\n        this.sinphi = Math.sin(this.lat2);\n        this.cosphi = Math.cos(this.lat2);\n        this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n        this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n        this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n      }\n      this.g = this.ml1 + this.ms1 / this.ns;\n      this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n      this.rh = this.a * (this.g - this.ml0);\n    }\n\n    /* Equidistant Conic forward equations--mapping lat,long to x,y\n      -----------------------------------------------------------*/\n    function forward$22(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var rh1;\n\n      /* Forward equations\n          -----------------*/\n      if (this.sphere) {\n        rh1 = this.a * (this.g - lat);\n      }\n      else {\n        var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n        rh1 = this.a * (this.g - ml);\n      }\n      var theta = this.ns * adjust_lon(lon - this.long0);\n      var x = this.x0 + rh1 * Math.sin(theta);\n      var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$22(p) {\n      p.x -= this.x0;\n      p.y = this.rh - p.y + this.y0;\n      var con, rh1, lat, lon;\n      if (this.ns >= 0) {\n        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n        con = 1;\n      }\n      else {\n        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n        con = -1;\n      }\n      var theta = 0;\n      if (rh1 !== 0) {\n        theta = Math.atan2(con * p.x, con * p.y);\n      }\n\n      if (this.sphere) {\n        lon = adjust_lon(this.long0 + theta / this.ns);\n        lat = adjust_lat(this.g - rh1 / this.a);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      else {\n        var ml = this.g - rh1 / this.a;\n        lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n        lon = adjust_lon(this.long0 + theta / this.ns);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n\n    }\n\n    var names$24 = [\"Equidistant_Conic\", \"eqdc\"];\n    var eqdc = {\n      init: init$23,\n      forward: forward$22,\n      inverse: inverse$22,\n      names: names$24\n    };\n\n    /* Initialize the Van Der Grinten projection\n      ----------------------------------------*/\n    function init$24() {\n      //this.R = 6370997; //Radius of earth\n      this.R = this.a;\n    }\n\n    function forward$23(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      /* Forward equations\n        -----------------*/\n      var dlon = adjust_lon(lon - this.long0);\n      var x, y;\n\n      if (Math.abs(lat) <= EPSLN) {\n        x = this.x0 + this.R * dlon;\n        y = this.y0;\n      }\n      var theta = asinz(2 * Math.abs(lat / Math.PI));\n      if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n        x = this.x0;\n        if (lat >= 0) {\n          y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n        }\n        else {\n          y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n        }\n        //  return(OK);\n      }\n      var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n      var asq = al * al;\n      var sinth = Math.sin(theta);\n      var costh = Math.cos(theta);\n\n      var g = costh / (sinth + costh - 1);\n      var gsq = g * g;\n      var m = g * (2 / sinth - 1);\n      var msq = m * m;\n      var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n      if (dlon < 0) {\n        con = -con;\n      }\n      x = this.x0 + con;\n      //con = Math.abs(con / (Math.PI * this.R));\n      var q = asq + g;\n      con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n      if (lat >= 0) {\n        //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n        y = this.y0 + con;\n      }\n      else {\n        //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n        y = this.y0 - con;\n      }\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Van Der Grinten inverse equations--mapping x,y to lat/long\n      ---------------------------------------------------------*/\n    function inverse$23(p) {\n      var lon, lat;\n      var xx, yy, xys, c1, c2, c3;\n      var a1;\n      var m1;\n      var con;\n      var th1;\n      var d;\n\n      /* inverse equations\n        -----------------*/\n      p.x -= this.x0;\n      p.y -= this.y0;\n      con = Math.PI * this.R;\n      xx = p.x / con;\n      yy = p.y / con;\n      xys = xx * xx + yy * yy;\n      c1 = -Math.abs(yy) * (1 + xys);\n      c2 = c1 - 2 * yy * yy + xx * xx;\n      c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n      d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n      a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n      m1 = 2 * Math.sqrt(-a1 / 3);\n      con = ((3 * d) / a1) / m1;\n      if (Math.abs(con) > 1) {\n        if (con >= 0) {\n          con = 1;\n        }\n        else {\n          con = -1;\n        }\n      }\n      th1 = Math.acos(con) / 3;\n      if (p.y >= 0) {\n        lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n      }\n      else {\n        lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n      }\n\n      if (Math.abs(xx) < EPSLN) {\n        lon = this.long0;\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$25 = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\n    var vandg = {\n      init: init$24,\n      forward: forward$23,\n      inverse: inverse$23,\n      names: names$25\n    };\n\n    function init$25() {\n      this.sin_p12 = Math.sin(this.lat0);\n      this.cos_p12 = Math.cos(this.lat0);\n    }\n\n    function forward$24(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var sinphi = Math.sin(p.y);\n      var cosphi = Math.cos(p.y);\n      var dlon = adjust_lon(lon - this.long0);\n      var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n      if (this.sphere) {\n        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n          //North Pole case\n          p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n          p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n          return p;\n        }\n        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n          //South Pole case\n          p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n          p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n          return p;\n        }\n        else {\n          //default case\n          cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n          c = Math.acos(cos_c);\n          kp = c ? c / Math.sin(c) : 1;\n          p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n          p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n          return p;\n        }\n      }\n      else {\n        e0 = e0fn(this.es);\n        e1 = e1fn(this.es);\n        e2 = e2fn(this.es);\n        e3 = e3fn(this.es);\n        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n          //North Pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n          p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n          p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n          return p;\n        }\n        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n          //South Pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n          p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n          p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n          return p;\n        }\n        else {\n          //Default case\n          tanphi = sinphi / cosphi;\n          Nl1 = gN(this.a, this.e, this.sin_p12);\n          Nl = gN(this.a, this.e, sinphi);\n          psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n          Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n          if (Az === 0) {\n            s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n          }\n          else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n            s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n          }\n          else {\n            s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n          }\n          G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n          H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n          GH = G * H;\n          Hs = H * H;\n          s2 = s * s;\n          s3 = s2 * s;\n          s4 = s3 * s;\n          s5 = s4 * s;\n          c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n          p.x = this.x0 + c * Math.sin(Az);\n          p.y = this.y0 + c * Math.cos(Az);\n          return p;\n        }\n      }\n\n\n    }\n\n    function inverse$24(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n      if (this.sphere) {\n        rh = Math.sqrt(p.x * p.x + p.y * p.y);\n        if (rh > (2 * HALF_PI * this.a)) {\n          return;\n        }\n        z = rh / this.a;\n\n        sinz = Math.sin(z);\n        cosz = Math.cos(z);\n\n        lon = this.long0;\n        if (Math.abs(rh) <= EPSLN) {\n          lat = this.lat0;\n        }\n        else {\n          lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n          con = Math.abs(this.lat0) - HALF_PI;\n          if (Math.abs(con) <= EPSLN) {\n            if (this.lat0 >= 0) {\n              lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n            }\n            else {\n              lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n            }\n          }\n          else {\n            /*con = cosz - this.sin_p12 * Math.sin(lat);\n            if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n              //no-op, just keep the lon value as is\n            } else {\n              var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n              lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n            }*/\n            lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n          }\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      else {\n        e0 = e0fn(this.es);\n        e1 = e1fn(this.es);\n        e2 = e2fn(this.es);\n        e3 = e3fn(this.es);\n        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n          //North pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          rh = Math.sqrt(p.x * p.x + p.y * p.y);\n          M = Mlp - rh;\n          lat = imlfn(M / this.a, e0, e1, e2, e3);\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n          //South pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          rh = Math.sqrt(p.x * p.x + p.y * p.y);\n          M = rh - Mlp;\n\n          lat = imlfn(M / this.a, e0, e1, e2, e3);\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n        else {\n          //default case\n          rh = Math.sqrt(p.x * p.x + p.y * p.y);\n          Az = Math.atan2(p.x, p.y);\n          N1 = gN(this.a, this.e, this.sin_p12);\n          cosAz = Math.cos(Az);\n          tmp = this.e * this.cos_p12 * cosAz;\n          A = -tmp * tmp / (1 - this.es);\n          B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n          D = rh / N1;\n          Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n          F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n          psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n          lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n          sinpsi = Math.sin(psi);\n          lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n      }\n\n    }\n\n    var names$26 = [\"Azimuthal_Equidistant\", \"aeqd\"];\n    var aeqd = {\n      init: init$25,\n      forward: forward$24,\n      inverse: inverse$24,\n      names: names$26\n    };\n\n    function init$26() {\n      //double temp;      /* temporary variable    */\n\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      this.sin_p14 = Math.sin(this.lat0);\n      this.cos_p14 = Math.cos(this.lat0);\n    }\n\n    /* Orthographic forward equations--mapping lat,long to x,y\n        ---------------------------------------------------*/\n    function forward$25(p) {\n      var sinphi, cosphi; /* sin and cos value        */\n      var dlon; /* delta longitude value      */\n      var coslon; /* cos of longitude        */\n      var ksp; /* scale factor          */\n      var g, x, y;\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n          -----------------*/\n      dlon = adjust_lon(lon - this.long0);\n\n      sinphi = Math.sin(lat);\n      cosphi = Math.cos(lat);\n\n      coslon = Math.cos(dlon);\n      g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n      ksp = 1;\n      if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n        x = this.a * ksp * cosphi * Math.sin(dlon);\n        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n      }\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$25(p) {\n      var rh; /* height above ellipsoid      */\n      var z; /* angle          */\n      var sinz, cosz; /* sin of z and cos of z      */\n      var con;\n      var lon, lat;\n      /* Inverse equations\n          -----------------*/\n      p.x -= this.x0;\n      p.y -= this.y0;\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      z = asinz(rh / this.a);\n\n      sinz = Math.sin(z);\n      cosz = Math.cos(z);\n\n      lon = this.long0;\n      if (Math.abs(rh) <= EPSLN) {\n        lat = this.lat0;\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$27 = [\"ortho\"];\n    var ortho = {\n      init: init$26,\n      forward: forward$25,\n      inverse: inverse$25,\n      names: names$27\n    };\n\n    // QSC projection rewritten from the original PROJ4\n    // https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\n    /* constants */\n    var FACE_ENUM = {\n        FRONT: 1,\n        RIGHT: 2,\n        BACK: 3,\n        LEFT: 4,\n        TOP: 5,\n        BOTTOM: 6\n    };\n\n    var AREA_ENUM = {\n        AREA_0: 1,\n        AREA_1: 2,\n        AREA_2: 3,\n        AREA_3: 4\n    };\n\n    function init$27() {\n\n      this.x0 = this.x0 || 0;\n      this.y0 = this.y0 || 0;\n      this.lat0 = this.lat0 || 0;\n      this.long0 = this.long0 || 0;\n      this.lat_ts = this.lat_ts || 0;\n      this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n      /* Determine the cube face from the center of projection. */\n      if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n        this.face = FACE_ENUM.TOP;\n      } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n        this.face = FACE_ENUM.BOTTOM;\n      } else if (Math.abs(this.long0) <= FORTPI) {\n        this.face = FACE_ENUM.FRONT;\n      } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n        this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n      } else {\n        this.face = FACE_ENUM.BACK;\n      }\n\n      /* Fill in useful values for the ellipsoid <-> sphere shift\n       * described in [LK12]. */\n      if (this.es !== 0) {\n        this.one_minus_f = 1 - (this.a - this.b) / this.a;\n        this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n      }\n    }\n\n    // QSC forward equations--mapping lat,long to x,y\n    // -----------------------------------------------------------------\n    function forward$26(p) {\n      var xy = {x: 0, y: 0};\n      var lat, lon;\n      var theta, phi;\n      var t, mu;\n      /* nu; */\n      var area = {value: 0};\n\n      // move lon according to projection's lon\n      p.x -= this.long0;\n\n      /* Convert the geodetic latitude to a geocentric latitude.\n       * This corresponds to the shift from the ellipsoid to the sphere\n       * described in [LK12]. */\n      if (this.es !== 0) {//if (P->es != 0) {\n        lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n      } else {\n        lat = p.y;\n      }\n\n      /* Convert the input lat, lon into theta, phi as used by QSC.\n       * This depends on the cube face and the area on it.\n       * For the top and bottom face, we can compute theta and phi\n       * directly from phi, lam. For the other faces, we must use\n       * unit sphere cartesian coordinates as an intermediate step. */\n      lon = p.x; //lon = lp.lam;\n      if (this.face === FACE_ENUM.TOP) {\n        phi = HALF_PI - lat;\n        if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n          area.value = AREA_ENUM.AREA_0;\n          theta = lon - HALF_PI;\n        } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n          area.value = AREA_ENUM.AREA_1;\n          theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n        } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n          area.value = AREA_ENUM.AREA_2;\n          theta = lon + HALF_PI;\n        } else {\n          area.value = AREA_ENUM.AREA_3;\n          theta = lon;\n        }\n      } else if (this.face === FACE_ENUM.BOTTOM) {\n        phi = HALF_PI + lat;\n        if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n          area.value = AREA_ENUM.AREA_0;\n          theta = -lon + HALF_PI;\n        } else if (lon < FORTPI && lon >= -FORTPI) {\n          area.value = AREA_ENUM.AREA_1;\n          theta = -lon;\n        } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n          area.value = AREA_ENUM.AREA_2;\n          theta = -lon - HALF_PI;\n        } else {\n          area.value = AREA_ENUM.AREA_3;\n          theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n        }\n      } else {\n        var q, r, s;\n        var sinlat, coslat;\n        var sinlon, coslon;\n\n        if (this.face === FACE_ENUM.RIGHT) {\n          lon = qsc_shift_lon_origin(lon, +HALF_PI);\n        } else if (this.face === FACE_ENUM.BACK) {\n          lon = qsc_shift_lon_origin(lon, +SPI);\n        } else if (this.face === FACE_ENUM.LEFT) {\n          lon = qsc_shift_lon_origin(lon, -HALF_PI);\n        }\n        sinlat = Math.sin(lat);\n        coslat = Math.cos(lat);\n        sinlon = Math.sin(lon);\n        coslon = Math.cos(lon);\n        q = coslat * coslon;\n        r = coslat * sinlon;\n        s = sinlat;\n\n        if (this.face === FACE_ENUM.FRONT) {\n          phi = Math.acos(q);\n          theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n        } else if (this.face === FACE_ENUM.RIGHT) {\n          phi = Math.acos(r);\n          theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n        } else if (this.face === FACE_ENUM.BACK) {\n          phi = Math.acos(-q);\n          theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n        } else if (this.face === FACE_ENUM.LEFT) {\n          phi = Math.acos(-r);\n          theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n        } else {\n          /* Impossible */\n          phi = theta = 0;\n          area.value = AREA_ENUM.AREA_0;\n        }\n      }\n\n      /* Compute mu and nu for the area of definition.\n       * For mu, see Eq. (3-21) in [OL76], but note the typos:\n       * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n      mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n      t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n      /* Apply the result to the real area. */\n      if (area.value === AREA_ENUM.AREA_1) {\n        mu += HALF_PI;\n      } else if (area.value === AREA_ENUM.AREA_2) {\n        mu += SPI;\n      } else if (area.value === AREA_ENUM.AREA_3) {\n        mu += 1.5 * SPI;\n      }\n\n      /* Now compute x, y from mu and nu */\n      xy.x = t * Math.cos(mu);\n      xy.y = t * Math.sin(mu);\n      xy.x = xy.x * this.a + this.x0;\n      xy.y = xy.y * this.a + this.y0;\n\n      p.x = xy.x;\n      p.y = xy.y;\n      return p;\n    }\n\n    // QSC inverse equations--mapping x,y to lat/long\n    // -----------------------------------------------------------------\n    function inverse$26(p) {\n      var lp = {lam: 0, phi: 0};\n      var mu, nu, cosmu, tannu;\n      var tantheta, theta, cosphi, phi;\n      var t;\n      var area = {value: 0};\n\n      /* de-offset */\n      p.x = (p.x - this.x0) / this.a;\n      p.y = (p.y - this.y0) / this.a;\n\n      /* Convert the input x, y to the mu and nu angles as used by QSC.\n       * This depends on the area of the cube face. */\n      nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n      mu = Math.atan2(p.y, p.x);\n      if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n        area.value = AREA_ENUM.AREA_0;\n      } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n        area.value = AREA_ENUM.AREA_1;\n        mu -= HALF_PI;\n      } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n        area.value = AREA_ENUM.AREA_2;\n        mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n      } else {\n        area.value = AREA_ENUM.AREA_3;\n        mu += HALF_PI;\n      }\n\n      /* Compute phi and theta for the area of definition.\n       * The inverse projection is not described in the original paper, but some\n       * good hints can be found here (as of 2011-12-14):\n       * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n       * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n      t = (SPI / 12) * Math.tan(mu);\n      tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n      theta = Math.atan(tantheta);\n      cosmu = Math.cos(mu);\n      tannu = Math.tan(nu);\n      cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n      if (cosphi < -1) {\n        cosphi = -1;\n      } else if (cosphi > +1) {\n        cosphi = +1;\n      }\n\n      /* Apply the result to the real area on the cube face.\n       * For the top and bottom face, we can compute phi and lam directly.\n       * For the other faces, we must use unit sphere cartesian coordinates\n       * as an intermediate step. */\n      if (this.face === FACE_ENUM.TOP) {\n        phi = Math.acos(cosphi);\n        lp.phi = HALF_PI - phi;\n        if (area.value === AREA_ENUM.AREA_0) {\n          lp.lam = theta + HALF_PI;\n        } else if (area.value === AREA_ENUM.AREA_1) {\n          lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n        } else if (area.value === AREA_ENUM.AREA_2) {\n          lp.lam = theta - HALF_PI;\n        } else /* area.value == AREA_ENUM.AREA_3 */ {\n          lp.lam = theta;\n        }\n      } else if (this.face === FACE_ENUM.BOTTOM) {\n        phi = Math.acos(cosphi);\n        lp.phi = phi - HALF_PI;\n        if (area.value === AREA_ENUM.AREA_0) {\n          lp.lam = -theta + HALF_PI;\n        } else if (area.value === AREA_ENUM.AREA_1) {\n          lp.lam = -theta;\n        } else if (area.value === AREA_ENUM.AREA_2) {\n          lp.lam = -theta - HALF_PI;\n        } else /* area.value == AREA_ENUM.AREA_3 */ {\n          lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n        }\n      } else {\n        /* Compute phi and lam via cartesian unit sphere coordinates. */\n        var q, r, s;\n        q = cosphi;\n        t = q * q;\n        if (t >= 1) {\n          s = 0;\n        } else {\n          s = Math.sqrt(1 - t) * Math.sin(theta);\n        }\n        t += s * s;\n        if (t >= 1) {\n          r = 0;\n        } else {\n          r = Math.sqrt(1 - t);\n        }\n        /* Rotate q,r,s into the correct area. */\n        if (area.value === AREA_ENUM.AREA_1) {\n          t = r;\n          r = -s;\n          s = t;\n        } else if (area.value === AREA_ENUM.AREA_2) {\n          r = -r;\n          s = -s;\n        } else if (area.value === AREA_ENUM.AREA_3) {\n          t = r;\n          r = s;\n          s = -t;\n        }\n        /* Rotate q,r,s into the correct cube face. */\n        if (this.face === FACE_ENUM.RIGHT) {\n          t = q;\n          q = -r;\n          r = t;\n        } else if (this.face === FACE_ENUM.BACK) {\n          q = -q;\n          r = -r;\n        } else if (this.face === FACE_ENUM.LEFT) {\n          t = q;\n          q = r;\n          r = -t;\n        }\n        /* Now compute phi and lam from the unit sphere coordinates. */\n        lp.phi = Math.acos(-s) - HALF_PI;\n        lp.lam = Math.atan2(r, q);\n        if (this.face === FACE_ENUM.RIGHT) {\n          lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n        } else if (this.face === FACE_ENUM.BACK) {\n          lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n        } else if (this.face === FACE_ENUM.LEFT) {\n          lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n        }\n      }\n\n      /* Apply the shift from the sphere to the ellipsoid as described\n       * in [LK12]. */\n      if (this.es !== 0) {\n        var invert_sign;\n        var tanphi, xa;\n        invert_sign = (lp.phi < 0 ? 1 : 0);\n        tanphi = Math.tan(lp.phi);\n        xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n        lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n        if (invert_sign) {\n          lp.phi = -lp.phi;\n        }\n      }\n\n      lp.lam += this.long0;\n      p.x = lp.lam;\n      p.y = lp.phi;\n      return p;\n    }\n\n    /* Helper function for forward projection: compute the theta angle\n     * and determine the area number. */\n    function qsc_fwd_equat_face_theta(phi, y, x, area) {\n      var theta;\n      if (phi < EPSLN) {\n        area.value = AREA_ENUM.AREA_0;\n        theta = 0.0;\n      } else {\n        theta = Math.atan2(y, x);\n        if (Math.abs(theta) <= FORTPI) {\n          area.value = AREA_ENUM.AREA_0;\n        } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n          area.value = AREA_ENUM.AREA_1;\n          theta -= HALF_PI;\n        } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n          area.value = AREA_ENUM.AREA_2;\n          theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n        } else {\n          area.value = AREA_ENUM.AREA_3;\n          theta += HALF_PI;\n        }\n      }\n      return theta;\n    }\n\n    /* Helper function: shift the longitude. */\n    function qsc_shift_lon_origin(lon, offset) {\n      var slon = lon + offset;\n      if (slon < -SPI) {\n        slon += TWO_PI;\n      } else if (slon > +SPI) {\n        slon -= TWO_PI;\n      }\n      return slon;\n    }\n\n    var names$28 = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\n    var qsc = {\n      init: init$27,\n      forward: forward$26,\n      inverse: inverse$26,\n      names: names$28\n    };\n\n    // Robinson projection\n    // Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n    // Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\n    var COEFS_X = [\n        [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n        [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n        [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n        [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n        [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n        [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n        [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n        [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n        [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n        [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n        [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n        [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n        [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n        [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n        [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n        [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n        [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n        [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n        [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n    ];\n\n    var COEFS_Y = [\n        [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n        [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n        [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n        [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n        [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n        [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n        [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n        [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n        [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n        [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n        [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n        [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n        [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n        [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n        [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n        [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n        [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n        [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n        [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n    ];\n\n    var FXC = 0.8487;\n    var FYC = 1.3523;\n    var C1 = R2D/5; // rad to 5-degree interval\n    var RC1 = 1/C1;\n    var NODES = 18;\n\n    var poly3_val = function(coefs, x) {\n        return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n    };\n\n    var poly3_der = function(coefs, x) {\n        return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n    };\n\n    function newton_rapshon(f_df, start, max_err, iters) {\n        var x = start;\n        for (; iters; --iters) {\n            var upd = f_df(x);\n            x -= upd;\n            if (Math.abs(upd) < max_err) {\n                break;\n            }\n        }\n        return x;\n    }\n\n    function init$28() {\n        this.x0 = this.x0 || 0;\n        this.y0 = this.y0 || 0;\n        this.long0 = this.long0 || 0;\n        this.es = 0;\n        this.title = this.title || \"Robinson\";\n    }\n\n    function forward$27(ll) {\n        var lon = adjust_lon(ll.x - this.long0);\n\n        var dphi = Math.abs(ll.y);\n        var i = Math.floor(dphi * C1);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        dphi = R2D * (dphi - RC1 * i);\n        var xy = {\n            x: poly3_val(COEFS_X[i], dphi) * lon,\n            y: poly3_val(COEFS_Y[i], dphi)\n        };\n        if (ll.y < 0) {\n            xy.y = -xy.y;\n        }\n\n        xy.x = xy.x * this.a * FXC + this.x0;\n        xy.y = xy.y * this.a * FYC + this.y0;\n        return xy;\n    }\n\n    function inverse$27(xy) {\n        var ll = {\n            x: (xy.x - this.x0) / (this.a * FXC),\n            y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n        };\n\n        if (ll.y >= 1) { // pathologic case\n            ll.x /= COEFS_X[NODES][0];\n            ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n        } else {\n            // find table interval\n            var i = Math.floor(ll.y * NODES);\n            if (i < 0) {\n                i = 0;\n            } else if (i >= NODES) {\n                i = NODES - 1;\n            }\n            for (;;) {\n                if (COEFS_Y[i][0] > ll.y) {\n                    --i;\n                } else if (COEFS_Y[i+1][0] <= ll.y) {\n                    ++i;\n                } else {\n                    break;\n                }\n            }\n            // linear interpolation in 5 degree interval\n            var coefs = COEFS_Y[i];\n            var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n            // find t so that poly3_val(coefs, t) = ll.y\n            t = newton_rapshon(function(x) {\n                return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n            }, t, EPSLN, 100);\n\n            ll.x /= poly3_val(COEFS_X[i], t);\n            ll.y = (5 * i + t) * D2R;\n            if (xy.y < 0) {\n                ll.y = -ll.y;\n            }\n        }\n\n        ll.x = adjust_lon(ll.x + this.long0);\n        return ll;\n    }\n\n    var names$29 = [\"Robinson\", \"robin\"];\n    var robin = {\n      init: init$28,\n      forward: forward$27,\n      inverse: inverse$27,\n      names: names$29\n    };\n\n    function init$29() {\n        this.name = 'geocent';\n\n    }\n\n    function forward$28(p) {\n        var point = geodeticToGeocentric(p, this.es, this.a);\n        return point;\n    }\n\n    function inverse$28(p) {\n        var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n        return point;\n    }\n\n    var names$30 = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\n    var geocent = {\n        init: init$29,\n        forward: forward$28,\n        inverse: inverse$28,\n        names: names$30\n    };\n\n    var mode = {\n      N_POLE: 0,\n      S_POLE: 1,\n      EQUIT: 2,\n      OBLIQ: 3\n    };\n\n    var params = {\n      h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n      azi:   { def: 0, num: true, degrees: true }, // default is North\n      tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n      long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n      lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n    };\n\n    function init$30() {\n      Object.keys(params).forEach(function (p) {\n        if (typeof this[p] === \"undefined\") {\n          this[p] = params[p].def;\n        } else if (params[p].num && isNaN(this[p])) {\n          throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n        } else if (params[p].num) {\n          this[p] = parseFloat(this[p]);\n        }\n        if (params[p].degrees) {\n          this[p] = this[p] * D2R;\n        }\n      }.bind(this));\n\n      if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n        this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n      } else if (Math.abs(this.lat0) < EPSLN) {\n        this.mode = mode.EQUIT;\n      } else {\n        this.mode = mode.OBLIQ;\n        this.sinph0 = Math.sin(this.lat0);\n        this.cosph0 = Math.cos(this.lat0);\n      }\n\n      this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n      if (this.pn1 <= 0 || this.pn1 > 1e10) {\n        throw new Error(\"Invalid height\");\n      }\n      \n      this.p = 1 + this.pn1;\n      this.rp = 1 / this.p;\n      this.h1 = 1 / this.pn1;\n      this.pfact = (this.p + 1) * this.h1;\n      this.es = 0;\n\n      var omega = this.tilt;\n      var gamma = this.azi;\n      this.cg = Math.cos(gamma);\n      this.sg = Math.sin(gamma);\n      this.cw = Math.cos(omega);\n      this.sw = Math.sin(omega);\n    }\n\n    function forward$29(p) {\n      p.x -= this.long0;\n      var sinphi = Math.sin(p.y);\n      var cosphi = Math.cos(p.y);\n      var coslam = Math.cos(p.x);\n      var x, y;\n      switch (this.mode) {\n        case mode.OBLIQ:\n          y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n          break;\n        case mode.EQUIT:\n          y = cosphi * coslam;\n          break;\n        case mode.S_POLE:\n          y = -sinphi;\n          break;\n        case mode.N_POLE:\n          y = sinphi;\n          break;\n      }\n      y = this.pn1 / (this.p - y);\n      x = y * cosphi * Math.sin(p.x);\n\n      switch (this.mode) {\n        case mode.OBLIQ:\n          y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n          break;\n        case mode.EQUIT:\n          y *= sinphi;\n          break;\n        case mode.N_POLE:\n          y *= -(cosphi * coslam);\n          break;\n        case mode.S_POLE:\n          y *= cosphi * coslam;\n          break;\n      }\n\n      // Tilt \n      var yt, ba;\n      yt = y * this.cg + x * this.sg;\n      ba = 1 / (yt * this.sw * this.h1 + this.cw);\n      x = (x * this.cg - y * this.sg) * this.cw * ba;\n      y = yt * ba;\n\n      p.x = x * this.a;\n      p.y = y * this.a;\n      return p;\n    }\n\n    function inverse$29(p) {\n      p.x /= this.a;\n      p.y /= this.a;\n      var r = { x: p.x, y: p.y };\n\n      // Un-Tilt\n      var bm, bq, yt;\n      yt = 1 / (this.pn1 - p.y * this.sw);\n      bm = this.pn1 * p.x * yt;\n      bq = this.pn1 * p.y * this.cw * yt;\n      p.x = bm * this.cg + bq * this.sg;\n      p.y = bq * this.cg - bm * this.sg;\n\n      var rh = hypot(p.x, p.y);\n      if (Math.abs(rh) < EPSLN) {\n        r.x = 0;\n        r.y = p.y;\n      } else {\n        var cosz, sinz;\n        sinz = 1 - rh * rh * this.pfact;\n        sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n        cosz = Math.sqrt(1 - sinz * sinz);\n        switch (this.mode) {\n          case mode.OBLIQ:\n            r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n            p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n            p.x *= sinz * this.cosph0;\n            break;\n          case mode.EQUIT:\n            r.y = Math.asin(p.y * sinz / rh);\n            p.y = cosz * rh;\n            p.x *= sinz;\n            break;\n          case mode.N_POLE:\n            r.y = Math.asin(cosz);\n            p.y = -p.y;\n            break;\n          case mode.S_POLE:\n            r.y = -Math.asin(cosz);\n            break;\n        }\n        r.x = Math.atan2(p.x, p.y);\n      }\n\n      p.x = r.x + this.long0;\n      p.y = r.y;\n      return p;\n    }\n\n    var names$31 = [\"Tilted_Perspective\", \"tpers\"];\n    var tpers = {\n      init: init$30,\n      forward: forward$29,\n      inverse: inverse$29,\n      names: names$31\n    };\n\n    var includedProjections = function(proj4){\n      proj4.Proj.projections.add(tmerc);\n      proj4.Proj.projections.add(etmerc);\n      proj4.Proj.projections.add(utm);\n      proj4.Proj.projections.add(sterea);\n      proj4.Proj.projections.add(stere);\n      proj4.Proj.projections.add(somerc);\n      proj4.Proj.projections.add(omerc);\n      proj4.Proj.projections.add(lcc);\n      proj4.Proj.projections.add(krovak);\n      proj4.Proj.projections.add(cass);\n      proj4.Proj.projections.add(laea);\n      proj4.Proj.projections.add(aea);\n      proj4.Proj.projections.add(gnom);\n      proj4.Proj.projections.add(cea);\n      proj4.Proj.projections.add(eqc);\n      proj4.Proj.projections.add(poly);\n      proj4.Proj.projections.add(nzmg);\n      proj4.Proj.projections.add(mill);\n      proj4.Proj.projections.add(sinu);\n      proj4.Proj.projections.add(moll);\n      proj4.Proj.projections.add(eqdc);\n      proj4.Proj.projections.add(vandg);\n      proj4.Proj.projections.add(aeqd);\n      proj4.Proj.projections.add(ortho);\n      proj4.Proj.projections.add(qsc);\n      proj4.Proj.projections.add(robin);\n      proj4.Proj.projections.add(geocent);\n      proj4.Proj.projections.add(tpers);\n    };\n\n    proj4$1.defaultDatum = 'WGS84'; //default datum\n    proj4$1.Proj = Projection;\n    proj4$1.WGS84 = new proj4$1.Proj('WGS84');\n    proj4$1.Point = Point;\n    proj4$1.toPoint = toPoint;\n    proj4$1.defs = defs;\n    proj4$1.transform = transform;\n    proj4$1.mgrs = mgrs;\n    proj4$1.version = '2.6.3';\n    includedProjections(proj4$1);\n\n    return proj4$1;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/proj4/dist/proj4-src.js\n");

/***/ }),

/***/ "./node_modules/proj4/dist/proj4-src.js-exposed":
/*!******************************************************!*\
  !*** ./node_modules/proj4/dist/proj4-src.js-exposed ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {module.exports = global[\"proj4\"] = __webpack_require__(/*! -!./proj4-src.js */ \"./node_modules/proj4/dist/proj4-src.js\");\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL25vZGVfbW9kdWxlcy9wcm9qNC9kaXN0L3Byb2o0LXNyYy5qcy1leHBvc2VkPzkzMzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUZBQW1DLG1CQUFPLENBQUMsZ0VBQWtCLEUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvajQvZGlzdC9wcm9qNC1zcmMuanMtZXhwb3NlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wicHJvajRcIl0gPSByZXF1aXJlKFwiLSEuL3Byb2o0LXNyYy5qc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/proj4/dist/proj4-src.js-exposed\n");

/***/ }),

/***/ "./node_modules/sortablejs/Sortable.js":
/*!*********************************************!*\
  !*** ./node_modules/sortablejs/Sortable.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\n\n(function sortableModule(factory) {\n\t\"use strict\";\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\telse {}\n})(function sortableFactory() {\n\t\"use strict\";\n\n\tif (typeof window === \"undefined\" || !window.document) {\n\t\treturn function sortableError() {\n\t\t\tthrow new Error(\"Sortable.js requires a window with a document\");\n\t\t};\n\t}\n\n\tvar dragEl,\n\t\tparentEl,\n\t\tghostEl,\n\t\tcloneEl,\n\t\trootEl,\n\t\tnextEl,\n\t\tlastDownEl,\n\n\t\tscrollEl,\n\t\tscrollParentEl,\n\t\tscrollCustomFn,\n\n\t\toldIndex,\n\t\tnewIndex,\n\n\t\tactiveGroup,\n\t\tputSortable,\n\n\t\tautoScrolls = [],\n\t\tscrolling = false,\n\n\t\tawaitingDragStarted = false,\n\t\tignoreNextClick = false,\n\t\tsortables = [],\n\n\t\tpointerElemChangedInterval,\n\t\tlastPointerElemX,\n\t\tlastPointerElemY,\n\n\t\ttapEvt,\n\t\ttouchEvt,\n\n\t\tmoved,\n\n\n\t\tlastTarget,\n\t\tlastDirection,\n\t\tpastFirstInvertThresh = false,\n\t\tisCircumstantialInvert = false,\n\t\tlastMode, // 'swap' or 'insert'\n\n\t\ttargetMoveDistance,\n\n\t\t// For positioning ghost absolutely\n\t\tghostRelativeParent,\n\t\tghostRelativeParentInitialScroll = [], // (left, top)\n\n\n\t\tforRepaintDummy,\n\t\trealDragElRect, // dragEl rect after current animation\n\n\t\t/** @const */\n\t\tR_SPACE = /\\s+/g,\n\n\t\texpando = 'Sortable' + (new Date).getTime(),\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\t\tsetTimeout = win.setTimeout,\n\n\t\t$ = win.jQuery || win.Zepto,\n\t\tPolymer = win.Polymer,\n\n\t\tcaptureMode = {\n\t\t\tcapture: false,\n\t\t\tpassive: false\n\t\t},\n\n\t\tIE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\\.|msie|iemobile)/i),\n\t\tEdge = !!navigator.userAgent.match(/Edge/i),\n\t\tFireFox = !!navigator.userAgent.match(/firefox/i),\n\t\tSafari = !!(navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && !navigator.userAgent.match(/android/i)),\n\t\tIOS = !!(navigator.userAgent.match(/iP(ad|od|hone)/i)),\n\n\t\tPositionGhostAbsolutely = IOS,\n\n\t\tCSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\n\t\tsupportDraggable = ('draggable' in document.createElement('div')),\n\n\t\tsupportCssPointerEvents = (function() {\n\t\t\t// false when <= IE11\n\t\t\tif (IE11OrLess) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar el = document.createElement('x');\n\t\t\tel.style.cssText = 'pointer-events:auto';\n\t\t\treturn el.style.pointerEvents === 'auto';\n\t\t})(),\n\n\t\t_silent = false,\n\t\t_alignedSilent = false,\n\n\t\tabs = Math.abs,\n\t\tmin = Math.min,\n\t\tmax = Math.max,\n\n\t\tsavedInputChecked = [],\n\n\t\t_detectDirection = function(el, options) {\n\t\t\tvar elCSS = _css(el),\n\t\t\t\telWidth = parseInt(elCSS.width)\n\t\t\t\t\t- parseInt(elCSS.paddingLeft)\n\t\t\t\t\t- parseInt(elCSS.paddingRight)\n\t\t\t\t\t- parseInt(elCSS.borderLeftWidth)\n\t\t\t\t\t- parseInt(elCSS.borderRightWidth),\n\t\t\t\tchild1 = _getChild(el, 0, options),\n\t\t\t\tchild2 = _getChild(el, 1, options),\n\t\t\t\tfirstChildCSS = child1 && _css(child1),\n\t\t\t\tsecondChildCSS = child2 && _css(child2),\n\t\t\t\tfirstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + _getRect(child1).width,\n\t\t\t\tsecondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + _getRect(child2).width;\n\n\t\t\tif (elCSS.display === 'flex') {\n\t\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\n\t\t\t\t? 'vertical' : 'horizontal';\n\t\t\t}\n\n\t\t\tif (elCSS.display === 'grid') {\n\t\t\t\treturn elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';\n\t\t\t}\n\n\t\t\tif (child1 && firstChildCSS.float !== 'none') {\n\t\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\n\n\t\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\n\t\t\t\t\t'vertical' : 'horizontal';\n\t\t\t}\n\n\t\t\treturn (child1 &&\n\t\t\t\t(\n\t\t\t\t\tfirstChildCSS.display === 'block' ||\n\t\t\t\t\tfirstChildCSS.display === 'flex' ||\n\t\t\t\t\tfirstChildCSS.display === 'table' ||\n\t\t\t\t\tfirstChildCSS.display === 'grid' ||\n\t\t\t\t\tfirstChildWidth >= elWidth &&\n\t\t\t\t\telCSS[CSSFloatProperty] === 'none' ||\n\t\t\t\t\tchild2 &&\n\t\t\t\t\telCSS[CSSFloatProperty] === 'none' &&\n\t\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\n\t\t\t\t) ?\n\t\t\t\t'vertical' : 'horizontal'\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n\t\t * @param  {Number} x      X position\n\t\t * @param  {Number} y      Y position\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\n\t\t */\n\t\t_detectNearestEmptySortable = function(x, y) {\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\n\t\t\t\tif (_lastChild(sortables[i])) continue;\n\n\t\t\t\tvar rect = _getRect(sortables[i]),\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\n\n\t\t\t\tif (insideHorizontally && insideVertically) {\n\t\t\t\t\treturn sortables[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_isClientInRowColumn = function(x, y, el, axis, options) {\n\t\t\tvar targetRect = _getRect(el),\n\t\t\t\ttargetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,\n\t\t\t\ttargetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,\n\t\t\t\tmouseOnOppAxis = axis === 'vertical' ? x : y;\n\n\t\t\treturn targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;\n\t\t},\n\n\t\t_isElInRowColumn = function(el1, el2, axis) {\n\t\t\tvar el1Rect = el1 === dragEl && realDragElRect || _getRect(el1),\n\t\t\t\tel2Rect = el2 === dragEl && realDragElRect || _getRect(el2),\n\t\t\t\tel1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,\n\t\t\t\tel1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,\n\t\t\t\tel1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,\n\t\t\t\tel2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,\n\t\t\t\tel2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,\n\t\t\t\tel2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;\n\n\t\t\treturn (\n\t\t\t\tel1S1Opp === el2S1Opp ||\n\t\t\t\tel1S2Opp === el2S2Opp ||\n\t\t\t\t(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)\n\t\t\t);\n\t\t},\n\n\t\t_getParentAutoScrollElement = function(el, includeSelf) {\n\t\t\t// skip to window\n\t\t\tif (!el || !el.getBoundingClientRect) return _getWindowScrollingElement();\n\n\t\t\tvar elem = el;\n\t\t\tvar gotSelf = false;\n\t\t\tdo {\n\t\t\t\t// we don't need to get elem css if it isn't even overflowing in the first place (performance)\n\t\t\t\tif (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n\t\t\t\t\tvar elemCSS = _css(elem);\n\t\t\t\t\tif (\n\t\t\t\t\t\telem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') ||\n\t\t\t\t\t\telem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!elem || !elem.getBoundingClientRect || elem === document.body) return _getWindowScrollingElement();\n\n\t\t\t\t\t\tif (gotSelf || includeSelf) return elem;\n\t\t\t\t\t\tgotSelf = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t/* jshint boss:true */\n\t\t\t} while (elem = elem.parentNode);\n\n\t\t\treturn _getWindowScrollingElement();\n\t\t},\n\n\t\t_getWindowScrollingElement = function() {\n\t\t\tif (IE11OrLess) {\n\t\t\t\treturn document.documentElement;\n\t\t\t} else {\n\t\t\t\treturn document.scrollingElement;\n\t\t\t}\n\t\t},\n\n\t\t_scrollBy = function(el, x, y) {\n\t\t\tel.scrollLeft += x;\n\t\t\tel.scrollTop += y;\n\t\t},\n\n\t\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl, /**Boolean*/isFallback) {\n\t\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n\t\t\tif (options.scroll) {\n\t\t\t\tvar _this = rootEl ? rootEl[expando] : window,\n\t\t\t\t\tsens = options.scrollSensitivity,\n\t\t\t\t\tspeed = options.scrollSpeed,\n\n\t\t\t\t\tx = evt.clientX,\n\t\t\t\t\ty = evt.clientY,\n\n\t\t\t\t\twinScroller = _getWindowScrollingElement(),\n\n\t\t\t\t\tscrollThisInstance = false;\n\n\t\t\t\t// Detect scrollEl\n\t\t\t\tif (scrollParentEl !== rootEl) {\n\t\t\t\t\t_clearAutoScrolls();\n\n\t\t\t\t\tscrollEl = options.scroll;\n\t\t\t\t\tscrollCustomFn = options.scrollFn;\n\n\t\t\t\t\tif (scrollEl === true) {\n\t\t\t\t\t\tscrollEl = _getParentAutoScrollElement(rootEl, true);\n\t\t\t\t\t\tscrollParentEl = scrollEl;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tvar layersOut = 0;\n\t\t\t\tvar currentParent = scrollEl;\n\t\t\t\tdo {\n\t\t\t\t\tvar\tel = currentParent,\n\t\t\t\t\t\trect = _getRect(el),\n\n\t\t\t\t\t\ttop = rect.top,\n\t\t\t\t\t\tbottom = rect.bottom,\n\t\t\t\t\t\tleft = rect.left,\n\t\t\t\t\t\tright = rect.right,\n\n\t\t\t\t\t\twidth = rect.width,\n\t\t\t\t\t\theight = rect.height,\n\n\t\t\t\t\t\tscrollWidth,\n\t\t\t\t\t\tscrollHeight,\n\n\t\t\t\t\t\tcss,\n\n\t\t\t\t\t\tvx,\n\t\t\t\t\t\tvy,\n\n\t\t\t\t\t\tcanScrollX,\n\t\t\t\t\t\tcanScrollY,\n\n\t\t\t\t\t\tscrollPosX,\n\t\t\t\t\t\tscrollPosY;\n\n\n\t\t\t\t\tscrollWidth = el.scrollWidth;\n\t\t\t\t\tscrollHeight = el.scrollHeight;\n\n\t\t\t\t\tcss = _css(el);\n\n\t\t\t\t\tscrollPosX = el.scrollLeft;\n\t\t\t\t\tscrollPosY = el.scrollTop;\n\n\t\t\t\t\tif (el === winScroller) {\n\t\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll' || css.overflowX === 'visible');\n\t\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll' || css.overflowY === 'visible');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll');\n\t\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll');\n\t\t\t\t\t}\n\n\t\t\t\t\tvx = canScrollX && (abs(right - x) <= sens && (scrollPosX + width) < scrollWidth) - (abs(left - x) <= sens && !!scrollPosX);\n\n\t\t\t\t\tvy = canScrollY && (abs(bottom - y) <= sens && (scrollPosY + height) < scrollHeight) - (abs(top - y) <= sens && !!scrollPosY);\n\n\n\t\t\t\t\tif (!autoScrolls[layersOut]) {\n\t\t\t\t\t\tfor (var i = 0; i <= layersOut; i++) {\n\t\t\t\t\t\t\tif (!autoScrolls[i]) {\n\t\t\t\t\t\t\t\tautoScrolls[i] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n\t\t\t\t\t\tautoScrolls[layersOut].el = el;\n\t\t\t\t\t\tautoScrolls[layersOut].vx = vx;\n\t\t\t\t\t\tautoScrolls[layersOut].vy = vy;\n\n\t\t\t\t\t\tclearInterval(autoScrolls[layersOut].pid);\n\n\t\t\t\t\t\tif (el && (vx != 0 || vy != 0)) {\n\t\t\t\t\t\t\tscrollThisInstance = true;\n\t\t\t\t\t\t\t/* jshint loopfunc:true */\n\t\t\t\t\t\t\tautoScrolls[layersOut].pid = setInterval((function () {\n\t\t\t\t\t\t\t\t// emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n\t\t\t\t\t\t\t\tif (isFallback && this.layer === 0) {\n\t\t\t\t\t\t\t\t\tSortable.active._emulateDragOver(true);\n\t\t\t\t\t\t\t\t\tSortable.active._onTouchMove(touchEvt, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n\t\t\t\t\t\t\t\tvar scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n\t\t\t\t\t\t\t\tif ('function' === typeof(scrollCustomFn)) {\n\t\t\t\t\t\t\t\t\tif (scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt, touchEvt, autoScrolls[this.layer].el) !== 'continue') {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n\t\t\t\t\t\t\t}).bind({layer: layersOut}), 24);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlayersOut++;\n\t\t\t\t} while (options.bubbleScroll && currentParent !== winScroller && (currentParent = _getParentAutoScrollElement(currentParent, false)));\n\t\t\t\tscrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n\t\t\t}\n\t\t}, 30),\n\n\t\t_clearAutoScrolls = function () {\n\t\t\tautoScrolls.forEach(function(autoScroll) {\n\t\t\t\tclearInterval(autoScroll.pid);\n\t\t\t});\n\t\t\tautoScrolls = [];\n\t\t},\n\n\t\t_prepareGroup = function (options) {\n\t\t\tfunction toFn(value, pull) {\n\t\t\t\treturn function(to, from, dragEl, evt) {\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\n\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\n\t\t\t\t\t\t// Default pull value\n\t\t\t\t\t\t// Default pull and put value if same group\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (pull && value === 'clone') {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else if (typeof value === 'function') {\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\n\n\t\t\t\t\t\treturn (value === true ||\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar group = {};\n\t\t\tvar originalGroup = options.group;\n\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\n\t\t\t\toriginalGroup = {name: originalGroup};\n\t\t\t}\n\n\t\t\tgroup.name = originalGroup.name;\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\n\t\t\tgroup.revertClone = originalGroup.revertClone;\n\n\t\t\toptions.group = group;\n\t\t},\n\n\t\t_checkAlignment = function(evt) {\n\t\t\tif (!dragEl || !dragEl.parentNode) return;\n\t\t\tdragEl.parentNode[expando] && dragEl.parentNode[expando]._computeIsAligned(evt);\n\t\t},\n\n\t\t_isTrueParentSortable = function(el, target) {\n\t\t\tvar trueParent = target;\n\t\t\twhile (!trueParent[expando]) {\n\t\t\t\ttrueParent = trueParent.parentNode;\n\t\t\t}\n\n\t\t\treturn el === trueParent;\n\t\t},\n\n\t\t_artificalBubble = function(sortable, originalEvt, method) {\n\t\t\t// Artificial IE bubbling\n\t\t\tvar nextParent = sortable.parentNode;\n\t\t\twhile (nextParent && !nextParent[expando]) {\n\t\t\t\tnextParent = nextParent.parentNode;\n\t\t\t}\n\n\t\t\tif (nextParent) {\n\t\t\t\tnextParent[expando][method](_extend(originalEvt, {\n\t\t\t\t\tartificialBubble: true\n\t\t\t\t}));\n\t\t\t}\n\t\t},\n\n\t\t_hideGhostForTarget = function() {\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\n\t\t\t\t_css(ghostEl, 'display', 'none');\n\t\t\t}\n\t\t},\n\n\t\t_unhideGhostForTarget = function() {\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\n\t\t\t\t_css(ghostEl, 'display', '');\n\t\t\t}\n\t\t};\n\n\n\t// #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\tdocument.addEventListener('click', function(evt) {\n\t\tif (ignoreNextClick) {\n\t\t\tevt.preventDefault();\n\t\t\tevt.stopPropagation && evt.stopPropagation();\n\t\t\tevt.stopImmediatePropagation && evt.stopImmediatePropagation();\n\t\t\tignoreNextClick = false;\n\t\t\treturn false;\n\t\t}\n\t}, true);\n\n\tvar nearestEmptyInsertDetectEvent = function(evt) {\n\t\tevt = evt.touches ? evt.touches[0] : evt;\n\t\tif (dragEl) {\n\t\t\tvar nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n\t\t\tif (nearest) {\n\t\t\t\tnearest[expando]._onDragOver({\n\t\t\t\t\tclientX: evt.clientX,\n\t\t\t\t\tclientY: evt.clientY,\n\t\t\t\t\ttarget: nearest,\n\t\t\t\t\trootEl: nearest\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\t// We do not want this to be triggered if completed (bubbling canceled), so only define it here\n\t_on(document, 'dragover', nearestEmptyInsertDetectEvent);\n\t_on(document, 'mousemove', nearestEmptyInsertDetectEvent);\n\t_on(document, 'touchmove', nearestEmptyInsertDetectEvent);\n\n\t/**\n\t * @class  Sortable\n\t * @param  {HTMLElement}  el\n\t * @param  {Object}       [options]\n\t */\n\tfunction Sortable(el, options) {\n\t\tif (!(el && el.nodeType && el.nodeType === 1)) {\n\t\t\tthrow 'Sortable: `el` must be HTMLElement, not ' + {}.toString.call(el);\n\t\t}\n\n\t\tthis.el = el; // root element\n\t\tthis.options = options = _extend({}, options);\n\n\n\t\t// Export instance\n\t\tel[expando] = this;\n\n\t\t// Default options\n\t\tvar defaults = {\n\t\t\tgroup: null,\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tbubbleScroll: true,\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\n\t\t\tinvertSwap: false, // invert always\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\n\t\t\tremoveCloneOnHide: true,\n\t\t\tdirection: function() {\n\t\t\t\treturn _detectDirection(el, this.options);\n\t\t\t},\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tdragClass: 'sortable-drag',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tpreventOnFilter: true,\n\t\t\tanimation: 0,\n\t\t\teasing: null,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackOnBody: false,\n\t\t\tfallbackTolerance: 0,\n\t\t\tfallbackOffset: {x: 0, y: 0},\n\t\t\tsupportPointer: Sortable.supportPointer !== false && (\n\t\t\t\t('PointerEvent' in window) ||\n\t\t\t\twindow.navigator && ('msPointerEnabled' in window.navigator) // microsoft\n\t\t\t),\n\t\t\temptyInsertThreshold: 5\n\t\t};\n\n\n\t\t// Set default options\n\t\tfor (var name in defaults) {\n\t\t\t!(name in options) && (options[name] = defaults[name]);\n\t\t}\n\n\t\t_prepareGroup(options);\n\n\t\t// Bind all private methods\n\t\tfor (var fn in this) {\n\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t}\n\t\t}\n\n\t\t// Setup drag mode\n\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\tif (this.nativeDraggable) {\n\t\t\t// Touch start threshold cannot be greater than the native dragstart threshold\n\t\t\tthis.options.touchStartThreshold = 1;\n\t\t}\n\n\t\t// Bind events\n\t\tif (options.supportPointer) {\n\t\t\t_on(el, 'pointerdown', this._onTapStart);\n\t\t} else {\n\t\t\t_on(el, 'mousedown', this._onTapStart);\n\t\t\t_on(el, 'touchstart', this._onTapStart);\n\t\t}\n\n\t\tif (this.nativeDraggable) {\n\t\t\t_on(el, 'dragover', this);\n\t\t\t_on(el, 'dragenter', this);\n\t\t}\n\n\t\tsortables.push(this.el);\n\n\t\t// Restore sorting\n\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\n\t}\n\n\tSortable.prototype = /** @lends Sortable.prototype */ {\n\t\tconstructor: Sortable,\n\n\t\t_computeIsAligned: function(evt) {\n\t\t\tvar target;\n\n\t\t\tif (ghostEl && !supportCssPointerEvents) {\n\t\t\t\t_hideGhostForTarget();\n\t\t\t\ttarget = document.elementFromPoint(evt.clientX, evt.clientY);\n\t\t\t\t_unhideGhostForTarget();\n\t\t\t} else {\n\t\t\t\ttarget = evt.target;\n\t\t\t}\n\n\t\t\ttarget = _closest(target, this.options.draggable, this.el, false);\n\t\t\tif (_alignedSilent) return;\n\t\t\tif (!dragEl || dragEl.parentNode !== this.el) return;\n\n\t\t\tvar children = this.el.children;\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t// Don't change for target in case it is changed to aligned before onDragOver is fired\n\t\t\t\tif (_closest(children[i], this.options.draggable, this.el, false) && children[i] !== target) {\n\t\t\t\t\tchildren[i].sortableMouseAligned = _isClientInRowColumn(evt.clientX, evt.clientY, children[i], this._getDirection(evt, null), this.options);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Used for nulling last target when not in element, nothing to do with checking if aligned\n\t\t\tif (!_closest(target, this.options.draggable, this.el, true)) {\n\t\t\t\tlastTarget = null;\n\t\t\t}\n\n\t\t\t_alignedSilent = true;\n\t\t\tsetTimeout(function() {\n\t\t\t\t_alignedSilent = false;\n\t\t\t}, 30);\n\n\t\t},\n\n\t\t_getDirection: function(evt, target) {\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n\t\t},\n\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {\n\t\t\tif (!evt.cancelable) return;\n\t\t\tvar _this = this,\n\t\t\t\tel = this.el,\n\t\t\t\toptions = this.options,\n\t\t\t\tpreventOnFilter = options.preventOnFilter,\n\t\t\t\ttype = evt.type,\n\t\t\t\ttouch = evt.touches && evt.touches[0],\n\t\t\t\ttarget = (touch || evt).target,\n\t\t\t\toriginalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\n\t\t\t\tfilter = options.filter,\n\t\t\t\tstartIndex;\n\n\t\t\t_saveInputCheckedState(el);\n\n\n\t\t\t// IE: Calls events in capture mode if event element is nested. This ensures only correct element's _onTapStart goes through.\n\t\t\t// This process is also done in _onDragOver\n\t\t\tif (IE11OrLess && !evt.artificialBubble && !_isTrueParentSortable(el, target)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\t\t\tif (dragEl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n\t\t\t\treturn; // only left button and enabled\n\t\t\t}\n\n\t\t\t// cancel dnd if original target is content editable\n\t\t\tif (originalTarget.isContentEditable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttarget = _closest(target, options.draggable, el, false);\n\n\t\t\tif (!target) {\n\t\t\t\tif (IE11OrLess) {\n\t\t\t\t\t_artificalBubble(el, evt, '_onTapStart');\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (lastDownEl === target) {\n\t\t\t\t// Ignoring duplicate `down`\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the index of the dragged element within its parent\n\t\t\tstartIndex = _index(target, options.draggable);\n\n\t\t\t// Check filter\n\t\t\tif (typeof filter === 'function') {\n\t\t\t\tif (filter.call(this, evt, target, this)) {\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex);\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (filter) {\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {\n\t\t\t\t\tcriteria = _closest(originalTarget, criteria.trim(), el, false);\n\n\t\t\t\t\tif (criteria) {\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (filter) {\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.handle && !_closest(originalTarget, options.handle, el, false)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare `dragstart`\n\t\t\tthis._prepareDragStart(evt, touch, target, startIndex);\n\t\t},\n\n\n\t\t_handleAutoScroll: function(evt, fallback) {\n\t\t\tif (!dragEl || !this.options.scroll) return;\n\t\t\tvar x = evt.clientX,\n\t\t\t\ty = evt.clientY,\n\n\t\t\t\telem = document.elementFromPoint(x, y),\n\t\t\t\t_this = this;\n\n\t\t\t// IE does not seem to have native autoscroll,\n\t\t\t// Edge's autoscroll seems too conditional,\n\t\t\t// MACOS Safari does not have autoscroll,\n\t\t\t// Firefox and Chrome are good\n\t\t\tif (fallback || Edge || IE11OrLess || Safari) {\n\t\t\t\t_autoScroll(evt, _this.options, elem, fallback);\n\n\t\t\t\t// Listener for pointer element change\n\t\t\t\tvar ogElemScroller = _getParentAutoScrollElement(elem, true);\n\t\t\t\tif (\n\t\t\t\t\tscrolling &&\n\t\t\t\t\t(\n\t\t\t\t\t\t!pointerElemChangedInterval ||\n\t\t\t\t\t\tx !== lastPointerElemX ||\n\t\t\t\t\t\ty !== lastPointerElemY\n\t\t\t\t\t)\n\t\t\t\t) {\n\n\t\t\t\t\tpointerElemChangedInterval && clearInterval(pointerElemChangedInterval);\n\t\t\t\t\t// Detect for pointer elem change, emulating native DnD behaviour\n\t\t\t\t\tpointerElemChangedInterval = setInterval(function() {\n\t\t\t\t\t\tif (!dragEl) return;\n\t\t\t\t\t\t// could also check if scroll direction on newElem changes due to parent autoscrolling\n\t\t\t\t\t\tvar newElem = _getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\t\t\t\t\t\tif (newElem !== ogElemScroller) {\n\t\t\t\t\t\t\togElemScroller = newElem;\n\t\t\t\t\t\t\t_clearAutoScrolls();\n\t\t\t\t\t\t\t_autoScroll(evt, _this.options, ogElemScroller, fallback);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 10);\n\t\t\t\t\tlastPointerElemX = x;\n\t\t\t\t\tlastPointerElemY = y;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n\t\t\t\tif (!_this.options.bubbleScroll || _getParentAutoScrollElement(elem, true) === _getWindowScrollingElement()) {\n\t\t\t\t\t_clearAutoScrolls();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t_autoScroll(evt, _this.options, _getParentAutoScrollElement(elem, false), false);\n\t\t\t}\n\t\t},\n\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {\n\t\t\tvar _this = this,\n\t\t\t\tel = _this.el,\n\t\t\t\toptions = _this.options,\n\t\t\t\townerDocument = el.ownerDocument,\n\t\t\t\tdragStartFn;\n\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {\n\t\t\t\trootEl = el;\n\t\t\t\tdragEl = target;\n\t\t\t\tparentEl = dragEl.parentNode;\n\t\t\t\tnextEl = dragEl.nextSibling;\n\t\t\t\tlastDownEl = target;\n\t\t\t\tactiveGroup = options.group;\n\t\t\t\toldIndex = startIndex;\n\n\t\t\t\ttapEvt = {\n\t\t\t\t\ttarget: dragEl,\n\t\t\t\t\tclientX: (touch || evt).clientX,\n\t\t\t\t\tclientY: (touch || evt).clientY\n\t\t\t\t};\n\n\t\t\t\tthis._lastX = (touch || evt).clientX;\n\t\t\t\tthis._lastY = (touch || evt).clientY;\n\n\t\t\t\tdragEl.style['will-change'] = 'all';\n\t\t\t\t// undo animation if needed\n\t\t\t\tdragEl.style.transition = '';\n\t\t\t\tdragEl.style.transform = '';\n\n\t\t\t\tdragStartFn = function () {\n\t\t\t\t\t// Delayed drag has been triggered\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove\n\t\t\t\t\t_this._disableDelayedDragEvents();\n\n\t\t\t\t\tif (!FireFox && _this.nativeDraggable) {\n\t\t\t\t\t\tdragEl.draggable = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Bind the events: dragstart/dragend\n\t\t\t\t\t_this._triggerDragStart(evt, touch);\n\n\t\t\t\t\t// Drag start event\n\t\t\t\t\t_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex);\n\n\t\t\t\t\t// Chosen item\n\t\t\t\t\t_toggleClass(dragEl, options.chosenClass, true);\n\t\t\t\t};\n\n\t\t\t\t// Disable \"draggable\"\n\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {\n\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);\n\t\t\t\t});\n\n\t\t\t\tif (options.supportPointer) {\n\t\t\t\t\t_on(ownerDocument, 'pointerup', _this._onDrop);\n\t\t\t\t} else {\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._onDrop);\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._onDrop);\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._onDrop);\n\t\t\t\t}\n\n\t\t\t\t// Make dragEl draggable (must be before delay for FireFox)\n\t\t\t\tif (FireFox && this.nativeDraggable) {\n\t\t\t\t\tthis.options.touchStartThreshold = 4;\n\t\t\t\t\tdragEl.draggable = true;\n\t\t\t\t}\n\n\t\t\t\t// Delay is impossible for native DnD in Edge or IE\n\t\t\t\tif (options.delay && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\n\t\t\t\t\t// If the user moves the pointer or let go the click or touch\n\t\t\t\t\t// before the delay has been reached:\n\t\t\t\t\t// disable the delayed drag\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n\t\t\t\t\t_on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n\t\t\t\t\toptions.supportPointer && _on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n\t\t\t\t} else {\n\t\t\t\t\tdragStartFn();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/e) {\n\t\t\tvar touch = e.touches ? e.touches[0] : e;\n\t\t\tif (max(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY))\n\t\t\t\t\t>= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))\n\t\t\t) {\n\t\t\t\tthis._disableDelayedDrag();\n\t\t\t}\n\t\t},\n\n\t\t_disableDelayedDrag: function () {\n\t\t\tdragEl && _disableDraggable(dragEl);\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\tthis._disableDelayedDragEvents();\n\t\t},\n\n\t\t_disableDelayedDragEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\t\t\t_off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchend', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n\t\t\t_off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n\t\t\t_off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n\t\t},\n\n\t\t_triggerDragStart: function (/** Event */evt, /** Touch */touch) {\n\t\t\ttouch = touch || (evt.pointerType == 'touch' ? evt : null);\n\n\t\t\tif (!this.nativeDraggable || touch) {\n\t\t\t\tif (this.options.supportPointer) {\n\t\t\t\t\t_on(document, 'pointermove', this._onTouchMove);\n\t\t\t\t} else if (touch) {\n\t\t\t\t\t_on(document, 'touchmove', this._onTouchMove);\n\t\t\t\t} else {\n\t\t\t\t\t_on(document, 'mousemove', this._onTouchMove);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_on(dragEl, 'dragend', this);\n\t\t\t\t_on(rootEl, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (document.selection) {\n\t\t\t\t\t// Timeout neccessary for IE9\n\t\t\t\t\t_nextTick(function () {\n\t\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t},\n\n\t\t_dragStarted: function (fallback, evt) {\n\t\t\tawaitingDragStarted = false;\n\t\t\tif (rootEl && dragEl) {\n\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t_on(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t\t_on(document, 'dragover', _checkAlignment);\n\t\t\t\t}\n\t\t\t\tvar options = this.options;\n\n\t\t\t\t// Apply effect\n\t\t\t\t!fallback && _toggleClass(dragEl, options.dragClass, false);\n\t\t\t\t_toggleClass(dragEl, options.ghostClass, true);\n\n\t\t\t\t// In case dragging an animated element\n\t\t\t\t_css(dragEl, 'transform', '');\n\n\t\t\t\tSortable.active = this;\n\n\t\t\t\tfallback && this._appendGhost();\n\n\t\t\t\t// Drag start event\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, evt);\n\t\t\t} else {\n\t\t\t\tthis._nulling();\n\t\t\t}\n\t\t},\n\n\t\t_emulateDragOver: function (forAutoScroll) {\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\t_hideGhostForTarget();\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\tvar parent = target;\n\n\t\t\t\twhile (target && target.shadowRoot) {\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\t\tparent = target;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[expando]) {\n\t\t\t\t\t\t\tvar inserted;\n\n\t\t\t\t\t\t\tinserted = parent[expando]._onDragOver({\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (inserted && !this.options.dragoverBubble) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(touchEvt);\n\n\t\t\t\t_unhideGhostForTarget();\n\t\t\t}\n\t\t},\n\n\n\t\t_onTouchMove: function (/**TouchEvent*/evt, forAutoScroll) {\n\t\t\tif (tapEvt) {\n\t\t\t\tvar\toptions = this.options,\n\t\t\t\t\tfallbackTolerance = options.fallbackTolerance,\n\t\t\t\t\tfallbackOffset = options.fallbackOffset,\n\t\t\t\t\ttouch = evt.touches ? evt.touches[0] : evt,\n\t\t\t\t\tmatrix = ghostEl && _matrix(ghostEl),\n\t\t\t\t\tscaleX = ghostEl && matrix && matrix.a,\n\t\t\t\t\tscaleY = ghostEl && matrix && matrix.d,\n\t\t\t\t\trelativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && _getRelativeScrollOffset(ghostRelativeParent),\n\t\t\t\t\tdx = ((touch.clientX - tapEvt.clientX)\n\t\t\t\t\t\t\t+ fallbackOffset.x) / (scaleX || 1)\n\t\t\t\t\t\t\t+ (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),\n\t\t\t\t\tdy = ((touch.clientY - tapEvt.clientY)\n\t\t\t\t\t\t\t+ fallbackOffset.y) / (scaleY || 1)\n\t\t\t\t\t\t\t+ (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n\t\t\t\t// only set the status to dragging, when we are actually dragging\n\t\t\t\tif (!Sortable.active && !awaitingDragStarted) {\n\t\t\t\t\tif (fallbackTolerance &&\n\t\t\t\t\t\tmin(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._onDragStart(evt, true);\n\t\t\t\t}\n\n\t\t\t\t!forAutoScroll && this._handleAutoScroll(touch, true);\n\n\t\t\t\tmoved = true;\n\t\t\t\ttouchEvt = touch;\n\n\t\t\t\t_css(ghostEl, 'webkitTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'mozTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'msTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'transform', translate3d);\n\n\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t_appendGhost: function () {\n\t\t\t// Bug if using scale(): https://stackoverflow.com/questions/2637058\n\t\t\t// Not being adjusted for\n\t\t\tif (!ghostEl) {\n\t\t\t\tvar container = this.options.fallbackOnBody ? document.body : rootEl,\n\t\t\t\t\trect = _getRect(dragEl, true, container, !PositionGhostAbsolutely),\n\t\t\t\t\tcss = _css(dragEl),\n\t\t\t\t\toptions = this.options;\n\n\t\t\t\t// Position absolutely\n\t\t\t\tif (PositionGhostAbsolutely) {\n\t\t\t\t\t// Get relatively positioned parent\n\t\t\t\t\tghostRelativeParent = container;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\t_css(ghostRelativeParent, 'position') === 'static' &&\n\t\t\t\t\t\t_css(ghostRelativeParent, 'transform') === 'none' &&\n\t\t\t\t\t\tghostRelativeParent !== document\n\t\t\t\t\t) {\n\t\t\t\t\t\tghostRelativeParent = ghostRelativeParent.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document) {\n\t\t\t\t\t\tvar ghostRelativeParentRect = _getRect(ghostRelativeParent, true);\n\n\t\t\t\t\t\trect.top -= ghostRelativeParentRect.top;\n\t\t\t\t\t\trect.left -= ghostRelativeParentRect.left;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n\t\t\t\t\t\tif (ghostRelativeParent === document) ghostRelativeParent = _getWindowScrollingElement();\n\n\t\t\t\t\t\trect.top += ghostRelativeParent.scrollTop;\n\t\t\t\t\t\trect.left += ghostRelativeParent.scrollLeft;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tghostRelativeParent = _getWindowScrollingElement();\n\t\t\t\t\t}\n\t\t\t\t\tghostRelativeParentInitialScroll = _getRelativeScrollOffset(ghostRelativeParent);\n\t\t\t\t}\n\n\n\t\t\t\tghostEl = dragEl.cloneNode(true);\n\n\t\t\t\t_toggleClass(ghostEl, options.ghostClass, false);\n\t\t\t\t_toggleClass(ghostEl, options.fallbackClass, true);\n\t\t\t\t_toggleClass(ghostEl, options.dragClass, true);\n\n\t\t\t\t_css(ghostEl, 'box-sizing', 'border-box');\n\t\t\t\t_css(ghostEl, 'margin', 0);\n\t\t\t\t_css(ghostEl, 'top', rect.top);\n\t\t\t\t_css(ghostEl, 'left', rect.left);\n\t\t\t\t_css(ghostEl, 'width', rect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height);\n\t\t\t\t_css(ghostEl, 'opacity', '0.8');\n\t\t\t\t_css(ghostEl, 'position', (PositionGhostAbsolutely ? 'absolute' : 'fixed'));\n\t\t\t\t_css(ghostEl, 'zIndex', '100000');\n\t\t\t\t_css(ghostEl, 'pointerEvents', 'none');\n\n\t\t\t\tcontainer.appendChild(ghostEl);\n\t\t\t}\n\t\t},\n\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/fallback) {\n\t\t\tvar _this = this;\n\t\t\tvar dataTransfer = evt.dataTransfer;\n\t\t\tvar options = _this.options;\n\n\t\t\t// Setup clone\n\t\t\tcloneEl = _clone(dragEl);\n\n\t\t\tcloneEl.draggable = false;\n\t\t\tcloneEl.style['will-change'] = '';\n\n\t\t\tthis._hideClone();\n\n\t\t\t_toggleClass(cloneEl, _this.options.chosenClass, false);\n\n\n\t\t\t// #1143: IFrame support workaround\n\t\t\t_this._cloneId = _nextTick(function () {\n\t\t\t\tif (!_this.options.removeCloneOnHide) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t}\n\t\t\t\t_dispatchEvent(_this, rootEl, 'clone', dragEl);\n\t\t\t});\n\n\n\t\t\t!fallback && _toggleClass(dragEl, options.dragClass, true);\n\n\t\t\t// Set proper drop events\n\t\t\tif (fallback) {\n\t\t\t\tignoreNextClick = true;\n\t\t\t\t_this._loopId = setInterval(_this._emulateDragOver, 50);\n\t\t\t} else {\n\t\t\t\t// Undo what was set in _prepareDragStart before drag started\n\t\t\t\t_off(document, 'mouseup', _this._onDrop);\n\t\t\t\t_off(document, 'touchend', _this._onDrop);\n\t\t\t\t_off(document, 'touchcancel', _this._onDrop);\n\n\t\t\t\tif (dataTransfer) {\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';\n\t\t\t\t\toptions.setData && options.setData.call(_this, dataTransfer, dragEl);\n\t\t\t\t}\n\n\t\t\t\t_on(document, 'drop', _this);\n\n\t\t\t\t// #1276 fix:\n\t\t\t\t_css(dragEl, 'transform', 'translateZ(0)');\n\t\t\t}\n\n\t\t\tawaitingDragStarted = true;\n\n\t\t\t_this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\n\t\t\t_on(document, 'selectstart', _this);\n\t\t\tif (Safari) {\n\t\t\t\t_css(document.body, 'user-select', 'none');\n\t\t\t}\n\t\t},\n\n\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\n\t\t_onDragOver: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\ttarget = evt.target,\n\t\t\t\tdragRect,\n\t\t\t\ttargetRect,\n\t\t\t\trevert,\n\t\t\t\toptions = this.options,\n\t\t\t\tgroup = options.group,\n\t\t\t\tactiveSortable = Sortable.active,\n\t\t\t\tisOwner = (activeGroup === group),\n\t\t\t\tcanSort = options.sort,\n\t\t\t\t_this = this;\n\n\t\t\tif (_silent) return;\n\n\t\t\t// IE event order fix\n\t\t\tif (IE11OrLess && !evt.rootEl && !evt.artificialBubble && !_isTrueParentSortable(el, target)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return invocation when dragEl is inserted (or completed)\n\t\t\tfunction completed(insertion) {\n\t\t\t\tif (insertion) {\n\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactiveSortable._showClone(_this);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (activeSortable) {\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\n\t\t\t\t\t\t_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n\t\t\t\t\t\t_toggleClass(dragEl, options.ghostClass, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (putSortable !== _this && _this !== Sortable.active) {\n\t\t\t\t\t\tputSortable = _this;\n\t\t\t\t\t} else if (_this === Sortable.active) {\n\t\t\t\t\t\tputSortable = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Animation\n\t\t\t\t\tdragRect && _this._animate(dragRect, dragEl);\n\t\t\t\t\ttarget && targetRect && _this._animate(targetRect, target);\n\t\t\t\t}\n\n\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\n\t\t\t\t\tlastTarget = null;\n\t\t\t\t}\n\t\t\t\t// no bubbling and not fallback\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\n\t\t\t\t\t_this._handleAutoScroll(evt);\n\t\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(evt);\n\t\t\t\t}\n\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Call when dragEl has been inserted\n\t\t\tfunction changed() {\n\t\t\t\t_dispatchEvent(_this, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl, options.draggable), evt);\n\t\t\t}\n\n\n\t\t\tif (evt.preventDefault !== void 0) {\n\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t}\n\n\n\t\t\tmoved = true;\n\n\t\t\ttarget = _closest(target, options.draggable, el, true);\n\n\t\t\t// target is dragEl or target is animated\n\t\t\tif (!!_closest(evt.target, null, dragEl, true) || target.animated) {\n\t\t\t\treturn completed(false);\n\t\t\t}\n\n\t\t\tif (target !== dragEl) {\n\t\t\t\tignoreNextClick = false;\n\t\t\t}\n\n\t\t\tif (activeSortable && !options.disabled &&\n\t\t\t\t(isOwner\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n\t\t\t\t\t: (\n\t\t\t\t\t\tputSortable === this ||\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tvar axis = this._getDirection(evt, target);\n\n\t\t\t\tdragRect = _getRect(dragEl);\n\n\t\t\t\tif (revert) {\n\t\t\t\t\tthis._hideClone();\n\t\t\t\t\tparentEl = rootEl; // actualization\n\n\t\t\t\t\tif (nextEl) {\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trootEl.appendChild(dragEl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn completed(true);\n\t\t\t\t}\n\n\t\t\t\tvar elLastChild = _lastChild(el);\n\n\t\t\t\tif (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {\n\t\t\t\t\t// assign target only if condition is true\n\t\t\t\t\tif (elLastChild && el === evt.target) {\n\t\t\t\t\t\ttarget = elLastChild;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target) {\n\t\t\t\t\t\ttargetRect = _getRect(target);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactiveSortable._showClone(this);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\tparentEl = el; // actualization\n\t\t\t\t\t\trealDragElRect = null;\n\n\t\t\t\t\t\tchanged();\n\t\t\t\t\t\treturn completed(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\n\t\t\t\t\tvar direction = 0,\n\t\t\t\t\t\ttargetBeforeFirstSwap,\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\n\t\t\t\t\t\tscrolledPastTop = _isScrolledPast(target, 'top') || _isScrolledPast(dragEl, 'top'),\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n\n\t\t\t\t\tif (lastTarget !== target) {\n\t\t\t\t\t\tlastMode = null;\n\t\t\t\t\t\ttargetBeforeFirstSwap = _getRect(target)[side1];\n\t\t\t\t\t\tpastFirstInvertThresh = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\n\t\t\t\t\tif (\n\t\t\t\t\t\t_isElInRowColumn(dragEl, target, axis) && aligned ||\n\t\t\t\t\t\tdifferentLevel ||\n\t\t\t\t\t\tscrolledPastTop ||\n\t\t\t\t\t\toptions.invertSwap ||\n\t\t\t\t\t\tlastMode === 'insert' ||\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\n\t\t\t\t\t\tlastMode === 'swap'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// New target that we will be inside\n\t\t\t\t\t\tif (lastMode !== 'swap') {\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\n\t\t\t\t\t\t\tisCircumstantialInvert,\n\t\t\t\t\t\t\tlastTarget === target);\n\t\t\t\t\t\tlastMode = 'swap';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Insert at position\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\n\t\t\t\t\t\tlastMode = 'insert';\n\t\t\t\t\t}\n\t\t\t\t\tif (direction === 0) return completed(false);\n\n\t\t\t\t\trealDragElRect = null;\n\t\t\t\t\tlastTarget = target;\n\n\t\t\t\t\tlastDirection = direction;\n\n\t\t\t\t\ttargetRect = _getRect(target);\n\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\n\t\t\t\t\t\tafter = false;\n\n\t\t\t\t\tafter = direction === 1;\n\n\t\t\t\t\tvar moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n\t\t\t\t\tif (moveVector !== false) {\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\n\t\t\t\t\t\t\tafter = (moveVector === 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_silent = true;\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\n\n\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (after && !nextSibling) {\n\t\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\n\t\t\t\t\t\tif (scrolledPastTop) {\n\t\t\t\t\t\t\t_scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tparentEl = dragEl.parentNode; // actualization\n\n\t\t\t\t\t\t// must be done before animation\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n\t\t\t\t\t\t\ttargetMoveDistance = abs(targetBeforeFirstSwap - _getRect(target)[side1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanged();\n\n\t\t\t\t\t\treturn completed(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (el.contains(dragEl)) {\n\t\t\t\t\treturn completed(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (IE11OrLess && !evt.rootEl) {\n\t\t\t\t_artificalBubble(el, evt, '_onDragOver');\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = _getRect(target);\n\n\t\t\t\tif (target === dragEl) {\n\t\t\t\t\trealDragElRect = currentRect;\n\t\t\t\t}\n\n\t\t\t\tif (prevRect.nodeType === 1) {\n\t\t\t\t\tprevRect = _getRect(prevRect);\n\t\t\t\t}\n\n\t\t\t\t// Check if actually moving position\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\n\t\t\t\t) {\n\t\t\t\t\tvar matrix = _matrix(this.el),\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\t\t\t_css(target, 'transition', 'none');\n\t\t\t\t\t_css(target, 'transform', 'translate3d('\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\n\t\t\t\t\t);\n\n\t\t\t\t\tforRepaintDummy = target.offsetWidth; // repaint\n\t\t\t\t\t_css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n\t\t\t\t\t_css(target, 'transform', 'translate3d(0,0,0)');\n\t\t\t\t}\n\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\t_css(target, 'transition', '');\n\t\t\t\t\t_css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n\t\t_offUpEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\t_off(document, 'touchmove', this._onTouchMove);\n\t\t\t_off(document, 'pointermove', this._onTouchMove);\n\t\t\t_off(ownerDocument, 'mouseup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchend', this._onDrop);\n\t\t\t_off(ownerDocument, 'pointerup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchcancel', this._onDrop);\n\t\t\t_off(document, 'selectstart', this);\n\t\t},\n\n\t\t_onDrop: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\toptions = this.options;\n\t\t\tawaitingDragStarted = false;\n\t\t\tscrolling = false;\n\t\t\tisCircumstantialInvert = false;\n\t\t\tpastFirstInvertThresh = false;\n\n\t\t\tclearInterval(this._loopId);\n\n\t\t\tclearInterval(pointerElemChangedInterval);\n\t\t\t_clearAutoScrolls();\n\t\t\t_cancelThrottle();\n\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\t_cancelNextTick(this._cloneId);\n\t\t\t_cancelNextTick(this._dragStartId);\n\n\t\t\t// Unbind events\n\t\t\t_off(document, 'mousemove', this._onTouchMove);\n\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(document, 'drop', this);\n\t\t\t\t_off(el, 'dragstart', this._onDragStart);\n\t\t\t\t_off(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t_off(document, 'dragover', _checkAlignment);\n\t\t\t}\n\n\t\t\tif (Safari) {\n\t\t\t\t_css(document.body, 'user-select', '');\n\t\t\t}\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (evt) {\n\t\t\t\tif (moved) {\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\n\t\t\t\t\t// Remove clone\n\t\t\t\t\tcloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n\t\t\t\t}\n\n\t\t\t\tif (dragEl) {\n\t\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t\t_off(dragEl, 'dragend', this);\n\t\t\t\t\t}\n\n\t\t\t\t\t_disableDraggable(dragEl);\n\t\t\t\t\tdragEl.style['will-change'] = '';\n\n\t\t\t\t\t// Remove class's\n\t\t\t\t\t_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n\t\t\t\t\t_toggleClass(dragEl, this.options.chosenClass, false);\n\n\t\t\t\t\t// Drag stop event\n\t\t\t\t\t_dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, evt);\n\n\t\t\t\t\tif (rootEl !== parentEl) {\n\t\t\t\t\t\tnewIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t// Add event\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\n\t\t\t\t\t\t\t// Remove event\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\n\t\t\t\t\t\t\t// drag from one list and drop into another\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tputSortable && putSortable.save();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\n\t\t\t\t\t\t\tnewIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t\t// drag & drop within the same list\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Sortable.active) {\n\t\t\t\t\t\t/* jshint eqnull:true */\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\n\t\t\t\t\t\t\tnewIndex = oldIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\n\t\t\t\t\t\t// Save sorting\n\t\t\t\t\t\tthis.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tthis._nulling();\n\t\t},\n\n\t\t_nulling: function() {\n\t\t\trootEl =\n\t\t\tdragEl =\n\t\t\tparentEl =\n\t\t\tghostEl =\n\t\t\tnextEl =\n\t\t\tcloneEl =\n\t\t\tlastDownEl =\n\n\t\t\tscrollEl =\n\t\t\tscrollParentEl =\n\t\t\tautoScrolls.length =\n\n\t\t\tpointerElemChangedInterval =\n\t\t\tlastPointerElemX =\n\t\t\tlastPointerElemY =\n\n\t\t\ttapEvt =\n\t\t\ttouchEvt =\n\n\t\t\tmoved =\n\t\t\tnewIndex =\n\t\t\toldIndex =\n\n\t\t\tlastTarget =\n\t\t\tlastDirection =\n\n\t\t\tforRepaintDummy =\n\t\t\trealDragElRect =\n\n\t\t\tputSortable =\n\t\t\tactiveGroup =\n\t\t\tSortable.active = null;\n\n\t\t\tsavedInputChecked.forEach(function (el) {\n\t\t\t\tel.checked = true;\n\t\t\t});\n\n\t\t\tsavedInputChecked.length = 0;\n\t\t},\n\n\t\thandleEvent: function (/**Event*/evt) {\n\t\t\tswitch (evt.type) {\n\t\t\t\tcase 'drop':\n\t\t\t\tcase 'dragend':\n\t\t\t\t\tthis._onDrop(evt);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'dragenter':\n\t\t\t\tcase 'dragover':\n\t\t\t\t\tif (dragEl) {\n\t\t\t\t\t\tthis._onDragOver(evt);\n\t\t\t\t\t\t_globalDragOver(evt);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'selectstart':\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (_closest(el, options.draggable, this.el, false)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (_closest(el, this.options.draggable, rootEl, false)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn _closest(el, selector || this.options.draggable, this.el, false);\n\t\t},\n\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[expando] = null;\n\n\t\t\t_off(el, 'mousedown', this._onTapStart);\n\t\t\t_off(el, 'touchstart', this._onTapStart);\n\t\t\t_off(el, 'pointerdown', this._onTapStart);\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(el, 'dragover', this);\n\t\t\t\t_off(el, 'dragenter', this);\n\t\t\t}\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\tthis._onDrop();\n\n\t\t\tsortables.splice(sortables.indexOf(this.el), 1);\n\n\t\t\tthis.el = el = null;\n\t\t},\n\n\t\t_hideClone: function() {\n\t\t\tif (!cloneEl.cloneHidden) {\n\t\t\t\t_css(cloneEl, 'display', 'none');\n\t\t\t\tcloneEl.cloneHidden = true;\n\t\t\t\tif (cloneEl.parentNode && this.options.removeCloneOnHide) {\n\t\t\t\t\tcloneEl.parentNode.removeChild(cloneEl);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_showClone: function(putSortable) {\n\t\t\tif (putSortable.lastPutMode !== 'clone') {\n\t\t\t\tthis._hideClone();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (cloneEl.cloneHidden) {\n\t\t\t\t// show clone at dragEl or original position\n\t\t\t\tif (rootEl.contains(dragEl) && !this.options.group.revertClone) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t} else if (nextEl) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, nextEl);\n\t\t\t\t} else {\n\t\t\t\t\trootEl.appendChild(cloneEl);\n\t\t\t\t}\n\n\t\t\t\tif (this.options.group.revertClone) {\n\t\t\t\t\tthis._animate(dragEl, cloneEl);\n\t\t\t\t}\n\t\t\t\t_css(cloneEl, 'display', '');\n\t\t\t\tcloneEl.cloneHidden = false;\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {\n\t\tif (el) {\n\t\t\tctx = ctx || document;\n\n\t\t\tdo {\n\t\t\t\tif (\n\t\t\t\t\tselector != null &&\n\t\t\t\t\t(\n\t\t\t\t\t\tselector[0] === '>' && el.parentNode === ctx && _matches(el, selector.substring(1)) ||\n\t\t\t\t\t\t_matches(el, selector)\n\t\t\t\t\t) ||\n\t\t\t\t\tincludeCTX && el === ctx\n\t\t\t\t) {\n\t\t\t\t\treturn el;\n\t\t\t\t}\n\n\t\t\t\tif (el === ctx) break;\n\t\t\t\t/* jshint boss:true */\n\t\t\t} while (el = _getParentOrHost(el));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\n\tfunction _getParentOrHost(el) {\n\t\treturn (el.host && el !== document && el.host.nodeType)\n\t\t\t? el.host\n\t\t\t: el.parentNode;\n\t}\n\n\n\tfunction _globalDragOver(/**Event*/evt) {\n\t\tif (evt.dataTransfer) {\n\t\t\tevt.dataTransfer.dropEffect = 'move';\n\t\t}\n\t\tevt.cancelable && evt.preventDefault();\n\t}\n\n\n\tfunction _on(el, event, fn) {\n\t\tel.addEventListener(event, fn, captureMode);\n\t}\n\n\n\tfunction _off(el, event, fn) {\n\t\tel.removeEventListener(event, fn, captureMode);\n\t}\n\n\n\tfunction _toggleClass(el, name, state) {\n\t\tif (el && name) {\n\t\t\tif (el.classList) {\n\t\t\t\tel.classList[state ? 'add' : 'remove'](name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n\t\t\t\tel.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _css(el, prop, val) {\n\t\tvar style = el && el.style;\n\n\t\tif (style) {\n\t\t\tif (val === void 0) {\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {\n\t\t\t\t\tval = document.defaultView.getComputedStyle(el, '');\n\t\t\t\t}\n\t\t\t\telse if (el.currentStyle) {\n\t\t\t\t\tval = el.currentStyle;\n\t\t\t\t}\n\n\t\t\t\treturn prop === void 0 ? val : val[prop];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(prop in style) && prop.indexOf('webkit') === -1) {\n\t\t\t\t\tprop = '-webkit-' + prop;\n\t\t\t\t}\n\n\t\t\t\tstyle[prop] = val + (typeof val === 'string' ? '' : 'px');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _matrix(el) {\n\t\tvar appliedTransforms = '';\n\t\tdo {\n\t\t\tvar transform = _css(el, 'transform');\n\n\t\t\tif (transform && transform !== 'none') {\n\t\t\t\tappliedTransforms = transform + ' ' + appliedTransforms;\n\t\t\t}\n\t\t\t/* jshint boss:true */\n\t\t} while (el = el.parentNode);\n\n\t\tif (window.DOMMatrix) {\n\t\t\treturn new DOMMatrix(appliedTransforms);\n\t\t} else if (window.WebKitCSSMatrix) {\n\t\t\treturn new WebKitCSSMatrix(appliedTransforms);\n\t\t} else if (window.CSSMatrix) {\n\t\t\treturn new CSSMatrix(appliedTransforms);\n\t\t}\n\t}\n\n\n\tfunction _find(ctx, tagName, iterator) {\n\t\tif (ctx) {\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\n\n\t\t\tif (iterator) {\n\t\t\t\tfor (; i < n; i++) {\n\t\t\t\t\titerator(list[i], i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\n\n\tfunction _dispatchEvent(sortable, rootEl, name, targetEl, toEl, fromEl, startIndex, newIndex, originalEvt) {\n\t\tsortable = (sortable || rootEl[expando]);\n\t\tvar evt,\n\t\t\toptions = sortable.options,\n\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n\t\t// Support for new CustomEvent feature\n\t\tif (window.CustomEvent && !IE11OrLess && !Edge) {\n\t\t\tevt = new CustomEvent(name, {\n\t\t\t\tbubbles: true,\n\t\t\t\tcancelable: true\n\t\t\t});\n\t\t} else {\n\t\t\tevt = document.createEvent('Event');\n\t\t\tevt.initEvent(name, true, true);\n\t\t}\n\n\t\tevt.to = toEl || rootEl;\n\t\tevt.from = fromEl || rootEl;\n\t\tevt.item = targetEl || rootEl;\n\t\tevt.clone = cloneEl;\n\n\t\tevt.oldIndex = startIndex;\n\t\tevt.newIndex = newIndex;\n\n\t\tevt.originalEvent = originalEvt;\n\t\tevt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n\t\tif (rootEl) {\n\t\t\trootEl.dispatchEvent(evt);\n\t\t}\n\n\t\tif (options[onName]) {\n\t\t\toptions[onName].call(sortable, evt);\n\t\t}\n\t}\n\n\n\tfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\n\t\tvar evt,\n\t\t\tsortable = fromEl[expando],\n\t\t\tonMoveFn = sortable.options.onMove,\n\t\t\tretVal;\n\t\t// Support for new CustomEvent feature\n\t\tif (window.CustomEvent && !IE11OrLess && !Edge) {\n\t\t\tevt = new CustomEvent('move', {\n\t\t\t\tbubbles: true,\n\t\t\t\tcancelable: true\n\t\t\t});\n\t\t} else {\n\t\t\tevt = document.createEvent('Event');\n\t\t\tevt.initEvent('move', true, true);\n\t\t}\n\n\t\tevt.to = toEl;\n\t\tevt.from = fromEl;\n\t\tevt.dragged = dragEl;\n\t\tevt.draggedRect = dragRect;\n\t\tevt.related = targetEl || toEl;\n\t\tevt.relatedRect = targetRect || _getRect(toEl);\n\t\tevt.willInsertAfter = willInsertAfter;\n\n\t\tevt.originalEvent = originalEvt;\n\n\t\tfromEl.dispatchEvent(evt);\n\n\t\tif (onMoveFn) {\n\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n\tfunction _disableDraggable(el) {\n\t\tel.draggable = false;\n\t}\n\n\tfunction _unsilent() {\n\t\t_silent = false;\n\t}\n\n\t/**\n\t * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n\t * and non-draggable elements\n\t * @param  {HTMLElement} el       The parent element\n\t * @param  {Number} childNum      The index of the child\n\t * @param  {Object} options       Parent Sortable's options\n\t * @return {HTMLElement}          The child at index childNum, or null if not found\n\t */\n\tfunction _getChild(el, childNum, options) {\n\t\tvar currentChild = 0,\n\t\t\ti = 0,\n\t\t\tchildren = el.children;\n\n\t\twhile (i < children.length) {\n\t\t\tif (\n\t\t\t\tchildren[i].style.display !== 'none' &&\n\t\t\t\tchildren[i] !== ghostEl &&\n\t\t\t\tchildren[i] !== dragEl &&\n\t\t\t\t_closest(children[i], options.draggable, el, false)\n\t\t\t) {\n\t\t\t\tif (currentChild === childNum) {\n\t\t\t\t\treturn children[i];\n\t\t\t\t}\n\t\t\t\tcurrentChild++;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n\t * @param  {HTMLElement} el       Parent element\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\n\t */\n\tfunction _lastChild(el) {\n\t\tvar last = el.lastElementChild;\n\n\t\twhile (last && (last === ghostEl || last.style.display === 'none')) {\n\t\t\tlast = last.previousElementSibling;\n\t\t}\n\n\t\treturn last || null;\n\t}\n\n\tfunction _ghostIsLast(evt, axis, el) {\n\t\tvar elRect = _getRect(_lastChild(el)),\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\n\t\t\tspacer = 10;\n\n\t\treturn (\n\t\t\taxis === 'vertical' ?\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\n\t\t);\n\t}\n\n\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n\t\tvar targetRect = _getRect(target),\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\n\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\n\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\n\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\n\t\t\tdragRect = _getRect(dragEl),\n\t\t\tinvert = false;\n\n\n\t\tif (!invertSwap) {\n\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\n\t\t\t\tif (!pastFirstInvertThresh &&\n\t\t\t\t\t(lastDirection === 1 ?\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\n\t\t\t\t\tpastFirstInvertThresh = true;\n\t\t\t\t}\n\n\t\t\t\tif (!pastFirstInvertThresh) {\n\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\n\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\n\t\t\t\t\t// dragEl shadow (target move distance shadow)\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastDirection === 1 ?\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lastDirection * -1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tinvert = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Regular\n\t\t\t\tif (\n\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\n\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\n\t\t\t\t) {\n\t\t\t\t\treturn _getInsertDirection(target);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinvert = invert || invertSwap;\n\n\t\tif (invert) {\n\t\t\t// Invert of regular\n\t\t\tif (\n\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\n\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\n\t\t\t)\n\t\t\t{\n\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Gets the direction dragEl must be swapped relative to target in order to make it\n\t * seem that dragEl has been \"inserted\" into that element's position\n\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n\t * @return {Number}                   Direction dragEl must be swapped\n\t */\n\tfunction _getInsertDirection(target) {\n\t\tvar dragElIndex = _index(dragEl),\n\t\t\ttargetIndex = _index(target);\n\n\t\tif (dragElIndex < targetIndex) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t * Generate id\n\t * @param   {HTMLElement} el\n\t * @returns {String}\n\t * @private\n\t */\n\tfunction _generateId(el) {\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,\n\t\t\ti = str.length,\n\t\t\tsum = 0;\n\n\t\twhile (i--) {\n\t\t\tsum += str.charCodeAt(i);\n\t\t}\n\n\t\treturn sum.toString(36);\n\t}\n\n\t/**\n\t * Returns the index of an element within its parent for a selected set of\n\t * elements\n\t * @param  {HTMLElement} el\n\t * @param  {selector} selector\n\t * @return {number}\n\t */\n\tfunction _index(el, selector) {\n\t\tvar index = 0;\n\n\t\tif (!el || !el.parentNode) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (el && (el = el.previousElementSibling)) {\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== cloneEl) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tfunction _matches(/**HTMLElement*/el, /**String*/selector) {\n\t\tif (el) {\n\t\t\ttry {\n\t\t\t\tif (el.matches) {\n\t\t\t\t\treturn el.matches(selector);\n\t\t\t\t} else if (el.msMatchesSelector) {\n\t\t\t\t\treturn el.msMatchesSelector(selector);\n\t\t\t\t} else if (el.webkitMatchesSelector) {\n\t\t\t\t\treturn el.webkitMatchesSelector(selector);\n\t\t\t\t}\n\t\t\t} catch(_) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tvar _throttleTimeout;\n\tfunction _throttle(callback, ms) {\n\t\treturn function () {\n\t\t\tif (!_throttleTimeout) {\n\t\t\t\tvar args = arguments,\n\t\t\t\t\t_this = this;\n\n\t\t\t\t_throttleTimeout = setTimeout(function () {\n\t\t\t\t\tif (args.length === 1) {\n\t\t\t\t\t\tcallback.call(_this, args[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback.apply(_this, args);\n\t\t\t\t\t}\n\n\t\t\t\t\t_throttleTimeout = void 0;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction _cancelThrottle() {\n\t\tclearTimeout(_throttleTimeout);\n\t\t_throttleTimeout = void 0;\n\t}\n\n\tfunction _extend(dst, src) {\n\t\tif (dst && src) {\n\t\t\tfor (var key in src) {\n\t\t\t\tif (src.hasOwnProperty(key)) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\n\tfunction _clone(el) {\n\t\tif (Polymer && Polymer.dom) {\n\t\t\treturn Polymer.dom(el).cloneNode(true);\n\t\t}\n\t\telse if ($) {\n\t\t\treturn $(el).clone(true)[0];\n\t\t}\n\t\telse {\n\t\t\treturn el.cloneNode(true);\n\t\t}\n\t}\n\n\tfunction _saveInputCheckedState(root) {\n\t\tsavedInputChecked.length = 0;\n\n\t\tvar inputs = root.getElementsByTagName('input');\n\t\tvar idx = inputs.length;\n\n\t\twhile (idx--) {\n\t\t\tvar el = inputs[idx];\n\t\t\tel.checked && savedInputChecked.push(el);\n\t\t}\n\t}\n\n\tfunction _nextTick(fn) {\n\t\treturn setTimeout(fn, 0);\n\t}\n\n\tfunction _cancelNextTick(id) {\n\t\treturn clearTimeout(id);\n\t}\n\n\n\t/**\n\t * Returns the \"bounding client rect\" of given element\n\t * @param  {HTMLElement} el                The element whose boundingClientRect is wanted\n\t * @param  {[HTMLElement]} container       the parent the element will be placed in\n\t * @param  {[Boolean]} adjustForTransform  Whether the rect should compensate for parent's transform\n\t * @return {Object}                        The boundingClientRect of el\n\t */\n\tfunction _getRect(el, adjustForTransform, container, adjustForFixed) {\n\t\tif (!el.getBoundingClientRect && el !== win) return;\n\n\t\tvar elRect,\n\t\t\ttop,\n\t\t\tleft,\n\t\t\tbottom,\n\t\t\tright,\n\t\t\theight,\n\t\t\twidth;\n\n\t\tif (el !== win && el !== _getWindowScrollingElement()) {\n\t\t\telRect = el.getBoundingClientRect();\n\t\t\ttop = elRect.top;\n\t\t\tleft = elRect.left;\n\t\t\tbottom = elRect.bottom;\n\t\t\tright = elRect.right;\n\t\t\theight = elRect.height;\n\t\t\twidth = elRect.width;\n\t\t} else {\n\t\t\ttop = 0;\n\t\t\tleft = 0;\n\t\t\tbottom = window.innerHeight;\n\t\t\tright = window.innerWidth;\n\t\t\theight = window.innerHeight;\n\t\t\twidth = window.innerWidth;\n\t\t}\n\n\t\tif (adjustForFixed && el !== win) {\n\t\t\t// Adjust for translate()\n\t\t\tcontainer = container || el.parentNode;\n\n\t\t\t// solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n\t\t\t// Not needed on <= IE11\n\t\t\tif (!IE11OrLess) {\n\t\t\t\tdo {\n\t\t\t\t\tif (container && container.getBoundingClientRect && _css(container, 'transform') !== 'none') {\n\t\t\t\t\t\tvar containerRect = container.getBoundingClientRect();\n\n\t\t\t\t\t\t// Set relative to edges of padding box of container\n\t\t\t\t\t\ttop -= containerRect.top + parseInt(_css(container, 'border-top-width'));\n\t\t\t\t\t\tleft -= containerRect.left + parseInt(_css(container, 'border-left-width'));\n\t\t\t\t\t\tbottom = top + elRect.height;\n\t\t\t\t\t\tright = left + elRect.width;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t} while (container = container.parentNode);\n\t\t\t}\n\t\t}\n\n\t\tif (adjustForTransform && el !== win) {\n\t\t\t// Adjust for scale()\n\t\t\tvar matrix = _matrix(container || el),\n\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\tif (matrix) {\n\t\t\t\ttop /= scaleY;\n\t\t\t\tleft /= scaleX;\n\n\t\t\t\twidth /= scaleX;\n\t\t\t\theight /= scaleY;\n\n\t\t\t\tbottom = top + height;\n\t\t\t\tright = left + width;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttop: top,\n\t\t\tleft: left,\n\t\t\tbottom: bottom,\n\t\t\tright: right,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\n\t/**\n\t * Checks if a side of an element is scrolled past a side of it's parents\n\t * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question\n\t * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')\n\t * @return {HTMLElement}           The parent scroll element that the el's side is scrolled past, or null if there is no such element\n\t */\n\tfunction _isScrolledPast(el, side) {\n\t\tvar parent = _getParentAutoScrollElement(el, true),\n\t\t\telSide = _getRect(el)[side];\n\n\t\t/* jshint boss:true */\n\t\twhile (parent) {\n\t\t\tvar parentSide = _getRect(parent)[side],\n\t\t\t\tvisible;\n\n\t\t\tif (side === 'top' || side === 'left') {\n\t\t\t\tvisible = elSide >= parentSide;\n\t\t\t} else {\n\t\t\t\tvisible = elSide <= parentSide;\n\t\t\t}\n\n\t\t\tif (!visible) return parent;\n\n\t\t\tif (parent === _getWindowScrollingElement()) break;\n\n\t\t\tparent = _getParentAutoScrollElement(parent, false);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n\t * The value is returned in real pixels.\n\t * @param  {HTMLElement} el\n\t * @return {Array}             Offsets in the format of [left, top]\n\t */\n\tfunction _getRelativeScrollOffset(el) {\n\t\tvar offsetLeft = 0,\n\t\t\toffsetTop = 0,\n\t\t\twinScroller = _getWindowScrollingElement();\n\n\t\tif (el) {\n\t\t\tdo {\n\t\t\t\tvar matrix = _matrix(el),\n\t\t\t\t\tscaleX = matrix.a,\n\t\t\t\t\tscaleY = matrix.d;\n\n\t\t\t\toffsetLeft += el.scrollLeft * scaleX;\n\t\t\t\toffsetTop += el.scrollTop * scaleY;\n\t\t\t} while (el !== winScroller && (el = el.parentNode));\n\t\t}\n\n\t\treturn [offsetLeft, offsetTop];\n\t}\n\n\t// Fixed #973:\n\t_on(document, 'touchmove', function(evt) {\n\t\tif ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t});\n\n\n\t// Export utils\n\tSortable.utils = {\n\t\ton: _on,\n\t\toff: _off,\n\t\tcss: _css,\n\t\tfind: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!_closest(el, selector, el, false);\n\t\t},\n\t\textend: _extend,\n\t\tthrottle: _throttle,\n\t\tclosest: _closest,\n\t\ttoggleClass: _toggleClass,\n\t\tclone: _clone,\n\t\tindex: _index,\n\t\tnextTick: _nextTick,\n\t\tcancelNextTick: _cancelNextTick,\n\t\tdetectDirection: _detectDirection,\n\t\tgetChild: _getChild\n\t};\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.8.4';\n\treturn Sortable;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sortablejs/Sortable.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, description, version, date, leafletExtName, leafletExtVersion, olExtName, olExtVersion, itownsExtName, itownsExtVersion, main, module, directories, scripts, repository, author, keywords, license, bugs, homepage, dependencies, devDependencies, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"geoportal-extensions\\\",\\\"description\\\":\\\"French Geoportal Extensions for OpenLayers, Leaflet and iTowns libraries\\\",\\\"version\\\":\\\"2.3.0\\\",\\\"date\\\":\\\"02/12/2020\\\",\\\"leafletExtName\\\":\\\"French Geoportal Extension for Leaflet\\\",\\\"leafletExtVersion\\\":\\\"2.1.6\\\",\\\"olExtName\\\":\\\"French Geoportal Extension for OpenLayers\\\",\\\"olExtVersion\\\":\\\"3.0.12\\\",\\\"itownsExtName\\\":\\\"French Geoportal Extension for Itowns\\\",\\\"itownsExtVersion\\\":\\\"2.3.0\\\",\\\"main\\\":\\\"dist/leaflet/GpPluginLeaflet.js, dist/openlayers/GpPluginOpenLayers.js, dist/itowns/GpPluginItowns.js\\\",\\\"module\\\":\\\"src/Leaflet/index.js, src/OpenLayers/index.js, src/Itowns/index.js\\\",\\\"directories\\\":{},\\\"scripts\\\":{\\\"setup\\\":\\\"npm install\\\",\\\"clean\\\":\\\"echo \\\\\\\"Warning: target not yet implemented!\\\\\\\" && exit 0\\\",\\\"eslint\\\":\\\"eslint src/\\\",\\\"test\\\":\\\"npm run test:serve\\\",\\\"test:serve\\\":\\\"cd test && webpack-dev-server --hot --config webpack.test.serve.js\\\",\\\"sample\\\":\\\"npm run sample:serve\\\",\\\"sample:serve\\\":\\\"npm run sample:ol:serve\\\",\\\"sample:itowns:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.itowns --https --open-page samples/index-itowns-map.html --content-base . --output-public-path '/dist/itowns/' --port 9001 --open 'google-chrome'\\\",\\\"sample:leaflet:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.leaflet --https --open-page samples/index-leaflet-map.html --content-base . --output-public-path '/dist/leaflet/' --port 9001 --open 'google-chrome'\\\",\\\"sample:ol:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.openlayers --https --open-page samples/index-openlayers-map.html --content-base . --output-public-path '/dist/openlayers/' --port 9001 --open 'google-chrome'\\\",\\\"doc\\\":\\\"npm run doc:serve\\\",\\\"doc:serve\\\":\\\"npm run doc:ol:serve\\\",\\\"doc:itowns:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.itowns --content-base jsdoc/itowns --port 9001 --open\\\",\\\"doc:leaflet:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.leaflet --content-base jsdoc/leaflet --port 9001 --open\\\",\\\"doc:ol:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.openlayers --content-base jsdoc/openlayers --port 9001 --open\\\",\\\"build:dev\\\":\\\"npm-run-all --print-label --print-name build:*:dev\\\",\\\"build:prod\\\":\\\"npm-run-all --print-label --print-name build:*:prod\\\",\\\"build:src\\\":\\\"npm-run-all --print-label --print-name build:*:src\\\",\\\"build\\\":\\\"npm-run-all --print-label --print-name build:*:*\\\",\\\"build:itowns\\\":\\\"npm-run-all --print-label --print-name build:itowns:*\\\",\\\"build:itowns:dev\\\":\\\"webpack --config build/webpack/webpack.config.itowns --mode=development\\\",\\\"build:itowns:prod\\\":\\\"webpack --config build/webpack/webpack.config.itowns --mode=production\\\",\\\"build:itowns:src\\\":\\\"webpack --config build/webpack/webpack.config.itowns --mode=none\\\",\\\"build:ol\\\":\\\"npm-run-all --print-label --print-name build:ol:*\\\",\\\"build:ol:dev\\\":\\\"webpack --config build/webpack/webpack.config.openlayers --mode=development\\\",\\\"build:ol:prod\\\":\\\"webpack --config build/webpack/webpack.config.openlayers --mode=production\\\",\\\"build:ol:src\\\":\\\"webpack --config build/webpack/webpack.config.openlayers --mode=none\\\",\\\"build:leaflet\\\":\\\"npm-run-all --print-label --print-name build:leaflet:*\\\",\\\"build:leaflet:dev\\\":\\\"webpack --config build/webpack/webpack.config.leaflet --mode=development\\\",\\\"build:leaflet:prod\\\":\\\"webpack --config build/webpack/webpack.config.leaflet --mode=production\\\",\\\"build:leaflet:src\\\":\\\"webpack --config build/webpack/webpack.config.leaflet --mode=none\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"https://github.com/IGNF/geoportal-extensions.git\\\"},\\\"author\\\":\\\"IGNF\\\",\\\"keywords\\\":[\\\"geoportail\\\",\\\"javascript\\\",\\\"OpenLayers\\\",\\\"Leaflet\\\",\\\"Itowns\\\",\\\"3D\\\"],\\\"license\\\":\\\"CECILL-B\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/IGNF/geoportal-extensions/issues\\\"},\\\"homepage\\\":\\\"https://github.com/IGNF/geoportal-extensions#readme\\\",\\\"dependencies\\\":{\\\"@mapbox/mapbox-gl-style-spec\\\":\\\"13.11.0\\\",\\\"eventbusjs\\\":\\\"0.2.0\\\",\\\"geoportal-access-lib\\\":\\\"2.1.6\\\",\\\"itowns\\\":\\\"2.27.0\\\",\\\"leaflet\\\":\\\"1.7.1\\\",\\\"leaflet-draw\\\":\\\"1.0.4\\\",\\\"loglevel\\\":\\\"^1.6.7\\\",\\\"ol\\\":\\\"5.3.0\\\",\\\"ol-mapbox-style\\\":\\\"4.2.1\\\",\\\"proj4\\\":\\\"^2.6.2\\\",\\\"proj4leaflet\\\":\\\"1.0.2\\\",\\\"sortablejs\\\":\\\"1.8.4\\\",\\\"three\\\":\\\"^0.121.1\\\",\\\"whatwg-fetch\\\":\\\"3.0.0\\\"},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.4.4\\\",\\\"@babel/plugin-transform-template-literals\\\":\\\"^7.7.4\\\",\\\"@babel/preset-env\\\":\\\"^7.4.4\\\",\\\"babel-loader\\\":\\\"^8.0.5\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"chalk\\\":\\\"^4.0.0\\\",\\\"clean-webpack-plugin\\\":\\\"^3.0.0\\\",\\\"copy-webpack-plugin\\\":\\\"^5.0.3\\\",\\\"core-js\\\":\\\"^3.6.4\\\",\\\"css-loader\\\":\\\"^3.4.2\\\",\\\"eslint\\\":\\\"^6.8.0\\\",\\\"eslint-config-standard\\\":\\\"^14.1.1\\\",\\\"eslint-loader\\\":\\\"^4.0.0\\\",\\\"eslint-plugin-import\\\":\\\"^2.17.2\\\",\\\"eslint-plugin-node\\\":\\\"^11.1.0\\\",\\\"eslint-plugin-promise\\\":\\\"^4.1.1\\\",\\\"eslint-plugin-standard\\\":\\\"^4.0.0\\\",\\\"exports-loader\\\":\\\"^0.7.0\\\",\\\"expose-loader\\\":\\\"^0.7.5\\\",\\\"fs-extra\\\":\\\"^9.0.0\\\",\\\"handlebars\\\":\\\"^4.7.5\\\",\\\"handlebars-layouts\\\":\\\"^3.1.4\\\",\\\"html-webpack-plugin\\\":\\\"^4.0.4\\\",\\\"jsdoc-webpack-plugin\\\":\\\"^0.3.0\\\",\\\"mini-css-extract-plugin\\\":\\\"^0.9.0\\\",\\\"mocha\\\":\\\"^7.1.1\\\",\\\"mocha-loader\\\":\\\"^5.0.0\\\",\\\"npm-run-all\\\":\\\"^4.1.5\\\",\\\"optimize-css-assets-webpack-plugin\\\":\\\"^5.0.1\\\",\\\"path\\\":\\\"^0.12.7\\\",\\\"replace-bundle-webpack-plugin\\\":\\\"^1.0.0\\\",\\\"requirejs\\\":\\\"^2.3.6\\\",\\\"responsive-loader\\\":\\\"^1.2.0\\\",\\\"speed-measure-webpack-plugin\\\":\\\"^1.3.0\\\",\\\"string-template\\\":\\\"^1.0.0\\\",\\\"style-loader\\\":\\\"^1.1.3\\\",\\\"terser-webpack-plugin\\\":\\\"^2.0.0\\\",\\\"url-loader\\\":\\\"^4.0.0\\\",\\\"webpack\\\":\\\"^4.30.0\\\",\\\"webpack-cli\\\":\\\"^3.3.1\\\",\\\"webpack-dev-server\\\":\\\"^3.3.1\\\",\\\"webpack-node-externals\\\":\\\"^1.7.2\\\"}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL3BhY2thZ2UuanNvbi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/Common/CSS/GPboostRelief.css":
/*!******************************************!*\
  !*** ./src/Common/CSS/GPboostRelief.css ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQYm9vc3RSZWxpZWYuY3NzPzFmMzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUGJvb3N0UmVsaWVmLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPboostRelief.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPdrawing.css":
/*!**************************************!*\
  !*** ./src/Common/CSS/GPdrawing.css ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQZHJhd2luZy5jc3M/MmI2NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQZHJhd2luZy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPdrawing.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPelevationPath.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPelevationPath.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQZWxldmF0aW9uUGF0aC5jc3M/NTAxYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQZWxldmF0aW9uUGF0aC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPelevationPath.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPgeneralWidget.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPgeneralWidget.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQZ2VuZXJhbFdpZGdldC5jc3M/ZjJkYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQZ2VuZXJhbFdpZGdldC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPgeneralWidget.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPgetFeatureInfo.css":
/*!*********************************************!*\
  !*** ./src/Common/CSS/GPgetFeatureInfo.css ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQZ2V0RmVhdHVyZUluZm8uY3NzPzU5NTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUGdldEZlYXR1cmVJbmZvLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPgetFeatureInfo.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPisochron.css":
/*!***************************************!*\
  !*** ./src/Common/CSS/GPisochron.css ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQaXNvY2hyb24uY3NzPzI2MjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUGlzb2Nocm9uLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPisochron.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPlayerSwitcher.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPlayerSwitcher.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQbGF5ZXJTd2l0Y2hlci5jc3M/MzFlZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQbGF5ZXJTd2l0Y2hlci5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPlayerSwitcher.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPlocation.css":
/*!***************************************!*\
  !*** ./src/Common/CSS/GPlocation.css ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQbG9jYXRpb24uY3NzPzIzYjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUGxvY2F0aW9uLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPlocation.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPmeasureArea.css":
/*!******************************************!*\
  !*** ./src/Common/CSS/GPmeasureArea.css ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQbWVhc3VyZUFyZWEuY3NzP2Q4ZmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUG1lYXN1cmVBcmVhLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPmeasureArea.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPmeasureAzimuth.css":
/*!*********************************************!*\
  !*** ./src/Common/CSS/GPmeasureAzimuth.css ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQbWVhc3VyZUF6aW11dGguY3NzP2IxMmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUG1lYXN1cmVBemltdXRoLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPmeasureAzimuth.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPmeasureLength.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPmeasureLength.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQbWVhc3VyZUxlbmd0aC5jc3M/Njg4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQbWVhc3VyZUxlbmd0aC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPmeasureLength.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPmeasureToolTip.css":
/*!*********************************************!*\
  !*** ./src/Common/CSS/GPmeasureToolTip.css ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQbWVhc3VyZVRvb2xUaXAuY3NzPzMyOTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUG1lYXN1cmVUb29sVGlwLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPmeasureToolTip.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPmousePosition.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPmousePosition.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQbW91c2VQb3NpdGlvbi5jc3M/MjliNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQbW91c2VQb3NpdGlvbi5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPmousePosition.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPreverseGeocoding.css":
/*!***********************************************!*\
  !*** ./src/Common/CSS/GPreverseGeocoding.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQcmV2ZXJzZUdlb2NvZGluZy5jc3M/OTZiOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQcmV2ZXJzZUdlb2NvZGluZy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPreverseGeocoding.css\n");

/***/ }),

/***/ "./src/Common/CSS/GProute.css":
/*!************************************!*\
  !*** ./src/Common/CSS/GProute.css ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQcm91dGUuY3NzPzU1MzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUHJvdXRlLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/CSS/GProute.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPsearchEngine.css":
/*!*******************************************!*\
  !*** ./src/Common/CSS/GPsearchEngine.css ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQc2VhcmNoRW5naW5lLmNzcz81ZTIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL0NvbW1vbi9DU1MvR1BzZWFyY2hFbmdpbmUuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPsearchEngine.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPwaiting.css":
/*!**************************************!*\
  !*** ./src/Common/CSS/GPwaiting.css ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ1NTL0dQd2FpdGluZy5jc3M/OTMwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9Db21tb24vQ1NTL0dQd2FpdGluZy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPwaiting.css\n");

/***/ }),

/***/ "./src/Common/Controls/AttributionDOM.js":
/*!***********************************************!*\
  !*** ./src/Common/Controls/AttributionDOM.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// FIXME not use !?\nvar AttributionDOM = {\n  // ################################################################### //\n  // ######################### Main container ########################## //\n  // ################################################################### //\n\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Creation du container principal (DOM)\n   *\n   * @returns {DOMElement} div DOM\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPAttribution\");\n    container.className = \"GPwidget\";\n    return container;\n  },\n\n  /**\n   * Creation du selecteur (caché) pour l'affichage/masquage des attributions (DOM)\n   *\n   * @returns {DOMElement} checkbox DOM\n   */\n  _createMainAttributionsShowElement: function _createMainAttributionsShowElement() {\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPshowAttributionsList\");\n    input.type = \"checkbox\";\n    return input;\n  },\n\n  /**\n   * Création de l'élément liste des attributions (DOM)\n   *\n   * @returns {DOMElement} liste DOM\n   */\n  _createAttributionsList: function _createAttributionsList() {\n    var ul = document.createElement(\"ul\");\n    ul.id = this._addUID(\"GPAttributionsList\");\n    return ul;\n  },\n\n  /**\n   * Création du conteneur principal des attributions (DOM)\n   *\n   * @returns {DOMElement} div DOM\n   */\n  _createMainAttributionsListContainer: function _createMainAttributionsListContainer() {\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPAttributionsListContainer\");\n    return div;\n  },\n\n  /**\n   * Création du container du picto du controle (DOM)\n   * @param {Boolean} collapsed - collapsed\n   * @returns {DOMElement} label DOM\n   */\n  _createMainPictoElement: function _createMainPictoElement(collapsed) {\n    var self = this;\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowAttributionsListPicto\");\n    label.className = \"GPshowAdvancedToolPicto\";\n    label.htmlFor = this._addUID(\"GPshowAttributionsList\");\n    label.title = \"Afficher/masquer les attributions\";\n    var spanOpen = document.createElement(\"span\");\n    spanOpen.id = this._addUID(\"GPshowAttributionsListOpenClose\");\n    spanOpen.className = \"GPshowAdvancedToolOpen\";\n    spanOpen.innerHTML = collapsed ? \"i\" : \"»\";\n    /** Evenement de type 'click' sur le picto du controle */\n\n    spanOpen.addEventListener(\"click\", function () {\n      spanOpen.innerHTML = document.getElementById(self._addUID(\"GPshowAttributionsList\")).checked ? \"i\" : \"»\";\n    });\n    label.appendChild(spanOpen);\n    return label;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (AttributionDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ29udHJvbHMvQXR0cmlidXRpb25ET00uanM/ODEyNCJdLCJuYW1lcyI6WyJBdHRyaWJ1dGlvbkRPTSIsIl9hZGRVSUQiLCJpZCIsInVpZCIsIl91aWQiLCJfY3JlYXRlTWFpbkNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJfY3JlYXRlTWFpbkF0dHJpYnV0aW9uc1Nob3dFbGVtZW50IiwiaW5wdXQiLCJ0eXBlIiwiX2NyZWF0ZUF0dHJpYnV0aW9uc0xpc3QiLCJ1bCIsIl9jcmVhdGVNYWluQXR0cmlidXRpb25zTGlzdENvbnRhaW5lciIsImRpdiIsIl9jcmVhdGVNYWluUGljdG9FbGVtZW50IiwiY29sbGFwc2VkIiwic2VsZiIsImxhYmVsIiwiaHRtbEZvciIsInRpdGxlIiwic3Bhbk9wZW4iLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGVja2VkIiwiYXBwZW5kQ2hpbGQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQSxJQUFJQSxjQUFjLEdBQUc7QUFFakI7QUFDQTtBQUNBOztBQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsU0FBTyxFQUFHLGlCQUFVQyxFQUFWLEVBQWM7QUFDcEIsUUFBSUMsR0FBRyxHQUFJLEtBQUtDLElBQU4sR0FBY0YsRUFBRSxHQUFHLEdBQUwsR0FBVyxLQUFLRSxJQUE5QixHQUFxQ0YsRUFBL0M7QUFDQSxXQUFPQyxHQUFQO0FBQ0gsR0FkZ0I7O0FBZ0JqQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0lFLDZCQUEyQixFQUFHLHVDQUFZO0FBQ3RDLFFBQUlDLFNBQVMsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0FGLGFBQVMsQ0FBQ0osRUFBVixHQUFlLEtBQUtELE9BQUwsQ0FBYSxlQUFiLENBQWY7QUFDQUssYUFBUyxDQUFDRyxTQUFWLEdBQXNCLFVBQXRCO0FBRUEsV0FBT0gsU0FBUDtBQUNILEdBM0JnQjs7QUE2QmpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUksb0NBQWtDLEVBQUcsOENBQVk7QUFDN0MsUUFBSUMsS0FBSyxHQUFHSixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBWjtBQUNBRyxTQUFLLENBQUNULEVBQU4sR0FBVyxLQUFLRCxPQUFMLENBQWEsd0JBQWIsQ0FBWDtBQUNBVSxTQUFLLENBQUNDLElBQU4sR0FBYSxVQUFiO0FBQ0EsV0FBT0QsS0FBUDtBQUNILEdBdkNnQjs7QUF5Q2pCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUUseUJBQXVCLEVBQUcsbUNBQVk7QUFDbEMsUUFBSUMsRUFBRSxHQUFHUCxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVDtBQUNBTSxNQUFFLENBQUNaLEVBQUgsR0FBUSxLQUFLRCxPQUFMLENBQWEsb0JBQWIsQ0FBUjtBQUNBLFdBQU9hLEVBQVA7QUFDSCxHQWxEZ0I7O0FBb0RqQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLHNDQUFvQyxFQUFHLGdEQUFZO0FBQy9DLFFBQUlDLEdBQUcsR0FBR1QsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQVY7QUFDQVEsT0FBRyxDQUFDZCxFQUFKLEdBQVMsS0FBS0QsT0FBTCxDQUFhLDZCQUFiLENBQVQ7QUFFQSxXQUFPZSxHQUFQO0FBQ0gsR0E5RGdCOztBQWdFakI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNJQyx5QkFBdUIsRUFBRyxpQ0FBVUMsU0FBVixFQUFxQjtBQUMzQyxRQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUVBLFFBQUlDLEtBQUssR0FBR2IsUUFBUSxDQUFDQyxhQUFULENBQXVCLE9BQXZCLENBQVo7QUFDQVksU0FBSyxDQUFDbEIsRUFBTixHQUFXLEtBQUtELE9BQUwsQ0FBYSw2QkFBYixDQUFYO0FBQ0FtQixTQUFLLENBQUNYLFNBQU4sR0FBa0IseUJBQWxCO0FBQ0FXLFNBQUssQ0FBQ0MsT0FBTixHQUFnQixLQUFLcEIsT0FBTCxDQUFhLHdCQUFiLENBQWhCO0FBQ0FtQixTQUFLLENBQUNFLEtBQU4sR0FBYyxtQ0FBZDtBQUVBLFFBQUlDLFFBQVEsR0FBR2hCLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixNQUF2QixDQUFmO0FBQ0FlLFlBQVEsQ0FBQ3JCLEVBQVQsR0FBYyxLQUFLRCxPQUFMLENBQWEsaUNBQWIsQ0FBZDtBQUNBc0IsWUFBUSxDQUFDZCxTQUFULEdBQXFCLHdCQUFyQjtBQUNBYyxZQUFRLENBQUNDLFNBQVQsR0FBcUJOLFNBQVMsR0FBRyxHQUFILEdBQVMsR0FBdkM7QUFDQTs7QUFDQUssWUFBUSxDQUFDRSxnQkFBVCxDQUEwQixPQUExQixFQUFtQyxZQUFZO0FBQzNDRixjQUFRLENBQUNDLFNBQVQsR0FBc0JqQixRQUFRLENBQUNtQixjQUFULENBQXdCUCxJQUFJLENBQUNsQixPQUFMLENBQWEsd0JBQWIsQ0FBeEIsRUFBZ0UwQixPQUFqRSxHQUE0RSxHQUE1RSxHQUFrRixHQUF2RztBQUNILEtBRkQ7QUFJQVAsU0FBSyxDQUFDUSxXQUFOLENBQWtCTCxRQUFsQjtBQUVBLFdBQU9ILEtBQVA7QUFDSDtBQTFGZ0IsQ0FBckI7QUE4RmVwQiw2RUFBZiIsImZpbGUiOiIuL3NyYy9Db21tb24vQ29udHJvbHMvQXR0cmlidXRpb25ET00uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGSVhNRSBub3QgdXNlICE/XG52YXIgQXR0cmlidXRpb25ET00gPSB7XG5cbiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIC8vXG4gICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyBNYWluIGNvbnRhaW5lciAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyAvL1xuICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgLy9cblxuICAgIC8qKlxuICAgICogQWRkIHV1aWQgdG8gdGhlIHRhZyBJRFxuICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gaWQgc2VsZWN0b3JcbiAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHVpZCAtIGlkIHNlbGVjdG9yIHdpdGggYW4gdW5pcXVlIGlkXG4gICAgKi9cbiAgICBfYWRkVUlEIDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciB1aWQgPSAodGhpcy5fdWlkKSA/IGlkICsgXCItXCIgKyB0aGlzLl91aWQgOiBpZDtcbiAgICAgICAgcmV0dXJuIHVpZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRpb24gZHUgY29udGFpbmVyIHByaW5jaXBhbCAoRE9NKVxuICAgICAqXG4gICAgICogQHJldHVybnMge0RPTUVsZW1lbnR9IGRpdiBET01cbiAgICAgKi9cbiAgICBfY3JlYXRlTWFpbkNvbnRhaW5lckVsZW1lbnQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb250YWluZXIuaWQgPSB0aGlzLl9hZGRVSUQoXCJHUEF0dHJpYnV0aW9uXCIpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gXCJHUHdpZGdldFwiO1xuXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0aW9uIGR1IHNlbGVjdGV1ciAoY2FjaMOpKSBwb3VyIGwnYWZmaWNoYWdlL21hc3F1YWdlIGRlcyBhdHRyaWJ1dGlvbnMgKERPTSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtET01FbGVtZW50fSBjaGVja2JveCBET01cbiAgICAgKi9cbiAgICBfY3JlYXRlTWFpbkF0dHJpYnV0aW9uc1Nob3dFbGVtZW50IDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGlucHV0LmlkID0gdGhpcy5fYWRkVUlEKFwiR1BzaG93QXR0cmlidXRpb25zTGlzdFwiKTtcbiAgICAgICAgaW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcsOpYXRpb24gZGUgbCfDqWzDqW1lbnQgbGlzdGUgZGVzIGF0dHJpYnV0aW9ucyAoRE9NKVxuICAgICAqXG4gICAgICogQHJldHVybnMge0RPTUVsZW1lbnR9IGxpc3RlIERPTVxuICAgICAqL1xuICAgIF9jcmVhdGVBdHRyaWJ1dGlvbnNMaXN0IDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIHVsLmlkID0gdGhpcy5fYWRkVUlEKFwiR1BBdHRyaWJ1dGlvbnNMaXN0XCIpO1xuICAgICAgICByZXR1cm4gdWw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyw6lhdGlvbiBkdSBjb250ZW5ldXIgcHJpbmNpcGFsIGRlcyBhdHRyaWJ1dGlvbnMgKERPTSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtET01FbGVtZW50fSBkaXYgRE9NXG4gICAgICovXG4gICAgX2NyZWF0ZU1haW5BdHRyaWJ1dGlvbnNMaXN0Q29udGFpbmVyIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZGl2LmlkID0gdGhpcy5fYWRkVUlEKFwiR1BBdHRyaWJ1dGlvbnNMaXN0Q29udGFpbmVyXCIpO1xuXG4gICAgICAgIHJldHVybiBkaXY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyw6lhdGlvbiBkdSBjb250YWluZXIgZHUgcGljdG8gZHUgY29udHJvbGUgKERPTSlcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNvbGxhcHNlZCAtIGNvbGxhcHNlZFxuICAgICAqIEByZXR1cm5zIHtET01FbGVtZW50fSBsYWJlbCBET01cbiAgICAgKi9cbiAgICBfY3JlYXRlTWFpblBpY3RvRWxlbWVudCA6IGZ1bmN0aW9uIChjb2xsYXBzZWQpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgbGFiZWwuaWQgPSB0aGlzLl9hZGRVSUQoXCJHUHNob3dBdHRyaWJ1dGlvbnNMaXN0UGljdG9cIik7XG4gICAgICAgIGxhYmVsLmNsYXNzTmFtZSA9IFwiR1BzaG93QWR2YW5jZWRUb29sUGljdG9cIjtcbiAgICAgICAgbGFiZWwuaHRtbEZvciA9IHRoaXMuX2FkZFVJRChcIkdQc2hvd0F0dHJpYnV0aW9uc0xpc3RcIik7XG4gICAgICAgIGxhYmVsLnRpdGxlID0gXCJBZmZpY2hlci9tYXNxdWVyIGxlcyBhdHRyaWJ1dGlvbnNcIjtcblxuICAgICAgICB2YXIgc3Bhbk9wZW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgc3Bhbk9wZW4uaWQgPSB0aGlzLl9hZGRVSUQoXCJHUHNob3dBdHRyaWJ1dGlvbnNMaXN0T3BlbkNsb3NlXCIpO1xuICAgICAgICBzcGFuT3Blbi5jbGFzc05hbWUgPSBcIkdQc2hvd0FkdmFuY2VkVG9vbE9wZW5cIjtcbiAgICAgICAgc3Bhbk9wZW4uaW5uZXJIVE1MID0gY29sbGFwc2VkID8gXCJpXCIgOiBcIsK7XCI7XG4gICAgICAgIC8qKiBFdmVuZW1lbnQgZGUgdHlwZSAnY2xpY2snIHN1ciBsZSBwaWN0byBkdSBjb250cm9sZSAqL1xuICAgICAgICBzcGFuT3Blbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Bhbk9wZW4uaW5uZXJIVE1MID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGYuX2FkZFVJRChcIkdQc2hvd0F0dHJpYnV0aW9uc0xpc3RcIikpLmNoZWNrZWQpID8gXCJpXCIgOiBcIsK7XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxhYmVsLmFwcGVuZENoaWxkKHNwYW5PcGVuKTtcblxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBdHRyaWJ1dGlvbkRPTTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/Controls/AttributionDOM.js\n");

/***/ }),

/***/ "./src/Common/Controls/BoostReliefDOM.js":
/*!***********************************************!*\
  !*** ./src/Common/Controls/BoostReliefDOM.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar BoostReliefDOM = {\n  // ################################################################### //\n  // ######################### Main container ########################## //\n  // ################################################################### //\n\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Creation du container principal (DOM)\n   *\n   * @returns {DOMElement} container - layer switcher DOM element\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPboostRelief\");\n    container.className = \"GPwidget\";\n    return container;\n  },\n\n  /**\n   * Creation du selecteur (caché) pour l'affichage/masquage des slides de boostRelief (DOM)\n   *\n   * @param {Boolean} collapsed - option indiquant si le control est déplié\n   *\n   * @returns {DOMElement} checkbox DOM\n   */\n  _createMainBoostReliefShowElement: function _createMainBoostReliefShowElement(collapsed) {\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPshowBoostReliefList\");\n    input.type = \"checkbox\";\n\n    if (collapsed) {\n      input.checked = true;\n    }\n\n    return input;\n  },\n  // ################################################################### //\n  // ############################ Relief tool ########################### //\n  // ################################################################### //\n\n  /**\n   * Creation du container des outils avancés du layer (DOM)\n   *\n   * @param {Object} brOptions - options du control boostRelief\n   *\n   * @returns {DOMElement} container\n   */\n  _createAdvancedToolElement: function _createAdvancedToolElement(brOptions) {\n    // exemple :\n    // <div id=\"GPadvancedToolsRelief_ID_Layer1\" class=\"GPlayerAdvancedToolsRelief\">\n    //     <!-- _createAdvancedToolOpacityElement -->\n    // </div>\n    var container = document.createElement(\"div\");\n    container.className = \"GPlayerAdvancedToolsRelief\";\n\n    var array = this._createAdvancedToolReliefElement(brOptions.scale, brOptions.defaultBoost);\n\n    for (var j = 0; j < array.length; j++) {\n      container.appendChild(array[j]);\n    }\n\n    return container;\n  },\n\n  /**\n   * Creation de l'icone de gestion du relief du layer (DOM)\n   *\n   * @param {Object} scale - définition de l'echelle que le slider utilise (min,max,step)\n   * @param {Number} defaultBoost - valeur d'exageration par défaut\n   *\n   * @returns {DOMElement[]} array of two containers\n   */\n  _createAdvancedToolReliefElement: function _createAdvancedToolReliefElement(scale, defaultBoost) {\n    // exemple :\n    // <div id=\"GPReliefLayerId_ID_Layer1\" class=\"GPlayerReliefLayerId\" title=\"Layer ID\">\n    //     <span id=\"GPReliefLayerId_ID_Layer1\">Layer1</span>\n    // </div>\n    //\n    // <div id=\"GPrelief_ID_Layer1\" class=\"GPlayerRelief\" title=\"Opacité\">\n    //   <input id=\"GPreliefRange_ID_Layer1\" type=\"range\" value=\"100\" oninput=\"GPchangeLayerRelief(this);\" onchange=\"GPchangeLayerRelief(this);\">\n    // </div>\n    // <div class=\"GPlayerReliefValue\" id=\"GPreliefValueDiv_ID_Layer1\">\n    //   <span id=\"GPreliefValue_ID_Layer1\">100</span>\n    //   %\n    // </div>\n    var list = []; // curseur pour changer l'exageration du relief\n\n    var divB = document.createElement(\"div\");\n    divB.className = \"GPlayerRelief\";\n    divB.title = \"Relief\"; // le relief est à un facteur 1 par défaut\n\n    var relief = 1;\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPreliefValueDiv\");\n    input.type = \"range\"; // echelle de 1 à 50 par defaut\n\n    if (!scale) {\n      scale = {\n        min: 1,\n        max: 50,\n        step: 1\n      };\n    }\n\n    ;\n    input.min = scale.min || 1;\n    input.max = scale.max || 50;\n    input.step = scale.step || 1; // le relief est à un facteur 1 par défaut\n\n    var defaultBoostValue = 1;\n\n    if (defaultBoost) {\n      defaultBoostValue = defaultBoost;\n    } // the reliefValue given must me in the slider range\n\n\n    if (defaultBoostValue > input.max) {\n      defaultBoostValue = input.max;\n    }\n\n    if (defaultBoostValue < input.min) {\n      defaultBoostValue = input.min;\n    } // mise à jour des couches et du slider une fois le controle ajouté\n\n\n    input.value = defaultBoostValue; // add event for relief change\n\n    var context = this;\n\n    if (input.addEventListener) {\n      input.addEventListener(\"change\", function (e) {\n        context._onChangeLayerRelief(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"onchange\", function (e) {\n        context._onChangeLayerRelief(e);\n      });\n    }\n\n    if (input.addEventListener) {\n      input.addEventListener(\"input\", function (e) {\n        context._onChangeLayerRelief(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"oninput\", function (e) {\n        context._onChangeLayerRelief(e);\n      });\n    }\n\n    divB.appendChild(input); // Valeur d'echelle du relief\n\n    var divC = document.createElement(\"div\");\n    divC.id = this._addUID(\"GPreliefValueDiv\");\n    divC.className = \"GPlayerReliefValue\";\n    var span = document.createElement(\"span\");\n    span.id = this._addUID(\"GPreliefValue\");\n    span.innerHTML = \"x\" + relief;\n    divC.appendChild(span);\n    list.push(divB);\n    list.push(divC);\n    return list;\n  },\n\n  /**\n   * Création du conteneur principal des couches MNT boostRelief (DOM)\n   *\n   * @returns {DOMElement} div DOM\n   */\n  _createMainBoostReliefListContainer: function _createMainBoostReliefListContainer() {\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPBoostReliefListContainer\");\n    div.className = \"GPpanel\";\n    return div;\n  },\n\n  /**\n   * Show boostRelief control\n   * @param {Boolean} isDesktop - specifies if the support is desktop or tactile\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMainPictoElement: function _createMainPictoElement() {\n    var self = this;\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowBoostReliefListPicto\");\n    label.className = \"GPshowAdvancedToolPicto\";\n    label.htmlFor = this._addUID(\"GPshowBoostReliefList\");\n    label.title = \"Afficher/Masquer le control d'exageration du relief\";\n    var spanOpenClose = document.createElement(\"span\");\n    spanOpenClose.id = this._addUID(\"GPshowBoostReliefOpenClose\");\n    spanOpenClose.className = \"GPshowAdvancedToolOpen\";\n    /** Evenement de type 'click' sur le picto du controle */\n\n    label.addEventListener(\"click\", function () {\n      if (document.getElementById(self._addUID(\"GPshowBoostReliefList\")).checked) {\n        document.getElementById(self._addUID(\"GPBoostReliefListContainer\")).style.display = \"none\";\n      } else {\n        document.getElementById(self._addUID(\"GPBoostReliefListContainer\")).style.display = \"block\";\n      }\n    });\n    label.appendChild(spanOpenClose);\n    return label;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (BoostReliefDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Controls/BoostReliefDOM.js\n");

/***/ }),

/***/ "./src/Common/Controls/LayerSwitcherDOM.js":
/*!*************************************************!*\
  !*** ./src/Common/Controls/LayerSwitcherDOM.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sortablejs */ \"./node_modules/sortablejs/Sortable.js\");\n/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sortablejs__WEBPACK_IMPORTED_MODULE_0__);\n\nvar LayerSwitcherDOM = {\n  /**\n   * Creation du drag and drop\n   *\n   * @param {Object} elementDraggable - Element HTML (DOM) Container\n   * @param {Object} context - this\n   */\n  _createDraggableElement: function _createDraggableElement(elementDraggable, context) {\n    sortablejs__WEBPACK_IMPORTED_MODULE_0___default.a.create(elementDraggable, {\n      handle: \".GPlayerName\",\n      draggable: \".draggable-layer\",\n      ghostClass: \"GPghostLayer\",\n      animation: 200,\n      // Call event function on drag and drop\n      onEnd: function onEnd(e) {\n        // FIXME pas terrrible, mais il faut bien passer ce contexte...\n        context._onDragAndDropLayerClick(e);\n      }\n    });\n  },\n  // ################################################################### //\n  // ######################### Main container ########################## //\n  // ################################################################### //\n\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Creation du container principal (DOM)\n   *\n   * @returns {DOMElement} container - layer switcher DOM element\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPlayerSwitcher\");\n    container.className = \"GPwidget\";\n    return container;\n  },\n\n  /**\n   * Creation du container principal d\"affichage des layers (DOM)\n   *\n   * @returns {DOMElement} input - element for minimizing/maximizing the layer switcher\n   */\n  _createMainLayersShowElement: function _createMainLayersShowElement() {\n    // <!-- Hidden checkbox for minimizing/maximizing -->\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPshowLayersList\");\n    input.type = \"checkbox\";\n    return input;\n  },\n\n  /**\n   * Creation du container principal des layers (DOM)\n   *\n   * @returns {DOMElement} container - layers list container\n   */\n  _createMainLayersElement: function _createMainLayersElement() {\n    // ajout de la liste des layers dans le container principal\n    // <div id=\"GPlayersList\" class=\"GPpanel\">\n    //   (...)\n    // </div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPlayersList\");\n    div.className = \"GPpanel\";\n    return div;\n  },\n\n  /**\n   * Creation du container du picto du controle (DOM)\n   *\n   * @returns {DOMElement} label\n   */\n  _createMainPictoElement: function _createMainPictoElement() {\n    var self = this; // exemple :\n    // <!-- Label for minimizing/maximizing -->\n    // <label id=\"GPshowLayersListPicto\" class=\"GPshowAdvancedToolPicto\" for=\"GPshowLayersList\" title=\"Afficher/masquer le gestionnaire de couches\">\n    //    <span id=\"GPshowLayersListOpen\" class=\"GPshowAdvancedToolOpen\"></span><span id=\"GPshowLayersListClose\"></span>\n    // </label>\n\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowLayersListPicto\");\n    label.className = \"GPshowAdvancedToolPicto\";\n    label.htmlFor = this._addUID(\"GPshowLayersList\");\n    label.title = \"Afficher/masquer le gestionnaire de couches\";\n    var spanOpen = document.createElement(\"span\");\n    spanOpen.id = this._addUID(\"GPshowLayersListOpen\");\n    spanOpen.className = \"GPshowAdvancedToolOpen\";\n    spanOpen.addEventListener(\"click\", function () {\n      if (document.getElementById(self._addUID(\"GPshowLayersList\")).checked) {\n        var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n        for (var i = 0; i < layers.length; i++) {\n          layers[i].className = \"GPlayerInfo\";\n        }\n\n        document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n      }\n    });\n    label.appendChild(spanOpen);\n    var spanClose = document.createElement(\"span\");\n    spanClose.addEventListener(\"click\", function () {\n      if (document.getElementById(self._addUID(\"GPshowLayersList\")).checked) {\n        var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n        for (var i = 0; i < layers.length; i++) {\n          layers[i].className = \"GPlayerInfo\";\n        }\n\n        document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n      }\n    });\n    spanClose.id = self._addUID(\"GPshowLayersListClose\");\n    label.appendChild(spanClose);\n    return label;\n  },\n\n  /**\n   * Creation du container du panneau d\"information (DOM)\n   *\n   * @returns {DOMElement} container\n   */\n  _createMainInfoElement: function _createMainInfoElement() {\n    // gestion du panneau d\"information dans le container principal\n    // <div id=\"GPlayerInfoPanel\" class=\"GPlayerInfoPanelClosed\">...</div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPlayerInfoPanel\");\n    div.className = \"GPpanel GPlayerInfoPanelClosed\";\n    return div;\n  },\n  // ################################################################### //\n  // ######################### Layer container ######################### //\n  // ################################################################### //\n\n  /**\n   * Creation du container du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   * @param {Object} obj.layer - couche (ol ou leaflet)\n   * @param {String} obj.id - identifiant de la couche (pour ol ou leaflet)\n   * @param {String} obj.title - nom de la couche à afficher dans le controle\n   * @param {String} obj.description - description de la couche à afficher\n   * @param {Boolean} obj.visibility - visibilité de la couche dans la carte (true or false)\n   * @param {Float} obj.opacity - opacité de la couche\n   *\n   * @returns {DOMElement} container\n   */\n  _createContainerLayerElement: function _createContainerLayerElement(obj) {\n    // exemple :\n    // <div id=\"GPlayerSwitcher_ID_Layer1\" class=\"GPlayerSwitcher_layer outOfRange\">\n    //     <!-- Basic toolbar : visibility / layer name\n    //     _createBasicToolElement\n    //           _createBasicToolVisibilityElement\n    //           _createBasicToolNameElement\n    //     -->\n    //     <!-- Hidden checkbox + label for showing advanced toolbar\n    //     _createAdvancedToolShowElement\n    //     -->\n    //     <!-- Advanced toolbar : layer info / opacity slider / opacity value / removal\n    //     _createAdvancedToolElement\n    //           _createAdvancedToolDeleteElement\n    //           _createAdvancedToolInformationElement\n    //           _createAdvancedToolOpacityElement\n    //     -->\n    // </div>\n    // <!-- Layer entry in layer list -->\n    // <!-- Every item is marked with layerID, which is defined at layer import -->\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPlayerSwitcher_ID_\" + obj.id);\n    container.className = \"GPlayerSwitcher_layer draggable-layer\"; // ajout des outils basiques (visibility / layer name)\n\n    container.appendChild(this._createBasicToolElement(obj)); // liste des outils avancés (layer info / opacity slider / opacity value / removal)\n\n    var array = this._createAdvancedToolShowElement(obj);\n\n    for (var i = 0; i < array.length; i++) {\n      container.appendChild(array[i]);\n    } // ajout des outils avancés\n\n\n    container.appendChild(this._createAdvancedToolElement(obj));\n    return container;\n  },\n  // ################################################################### //\n  // ############################ Layer tool ########################### //\n  // ################################################################### //\n\n  /**\n   * Creation du container des outils basiques du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createBasicToolElement: function _createBasicToolElement(obj) {\n    // exemple :\n    // <div id=\"GPbasicTools_ID_1\" class=\"GPlayerBasicTools\">\n    //      <!-- _createBasicToolVisibilityElement -->\n    //      <!-- _createBasicToolNameElement -->\n    // </div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPbasicTools_ID_\" + obj.id);\n    div.className = \"GPlayerBasicTools\";\n    div.appendChild(this._createBasicToolNameElement(obj));\n\n    var array = this._createBasicToolVisibilityElement(obj);\n\n    for (var i = 0; i < array.length; i++) {\n      div.appendChild(array[i]);\n    }\n\n    return div;\n  },\n\n  /**\n   * Creation du nom du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createBasicToolNameElement: function _createBasicToolNameElement(obj) {\n    // exemple :\n    // <span id=\"GPname_ID_Layer1\" class=\"GPlayerName\" title=\"Quartiers prioritaires de la ville\">Quartiers prioritaires de la ville</span>\n    var span = document.createElement(\"span\");\n    span.id = this._addUID(\"GPname_ID_\" + obj.id);\n    span.className = \"GPlayerName\";\n    span.title = obj.description || obj.title;\n    span.innerHTML = obj.title;\n    return span;\n  },\n\n  /**\n   * Creation de l'icone de visibilité du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n    * @returns {DOMElement[]} array containing input and label elements\n   */\n  _createBasicToolVisibilityElement: function _createBasicToolVisibilityElement(obj) {\n    // exemple :\n    // <input type=\"checkbox\" id=\"GPvisibility_ID_Layer1\" checked=\"\">\n    // <label for=\"GPvisibility_ID_Layer1\" id=\"GPvisibilityPicto_ID_Layer1\" class=\"GPlayerVisibility\" title=\"Afficher/masquer la couche\"></label>\n    var list = [];\n    var checked = typeof obj.visibility !== \"undefined\" ? obj.visibility : true;\n\n    var id = this._addUID(\"GPvisibility_ID_\" + obj.id);\n\n    var input = document.createElement(\"input\");\n    input.id = id;\n    input.type = \"checkbox\";\n    input.checked = checked;\n    var label = document.createElement(\"label\");\n    label.htmlFor = id;\n    label.id = this._addUID(\"GPvisibilityPicto_ID_\" + obj.id);\n    label.className = \"GPlayerVisibility\";\n    label.title = \"Afficher/masquer la couche\"; // add event for visibility change\n\n    var context = this;\n\n    if (input.addEventListener) {\n      input.addEventListener(\"click\", function (e) {\n        context._onVisibilityLayerClick(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"onclick\", function (e) {\n        context._onVisibilityLayerClick(e);\n      });\n    }\n\n    list.push(input);\n    list.push(label);\n    return list;\n  },\n\n  /**\n   * Creation de l'affichage du menu des outils avancés du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement[]} array containing input and label elements\n   */\n  _createAdvancedToolShowElement: function _createAdvancedToolShowElement(obj) {\n    // <input type=\"checkbox\" id=\"GPshowAdvancedTools_ID_Layer1\">\n    // <label for=\"GPshowAdvancedTools_ID_Layer1\" id=\"GPshowAdvancedToolsPicto_ID_Layer1\" class=\"GPshowMoreOptions GPshowLayerAdvancedTools\" title=\"Plus d'outils\"></label>\n    var list = [];\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowAdvancedToolsPicto_ID_\" + obj.id);\n    label.htmlFor = this._addUID(\"GPshowAdvancedTools_ID_\" + obj.id);\n    label.title = \"Plus d'outils\";\n    label.className = \"GPshowMoreOptions GPshowLayerAdvancedTools\";\n    var input = document.createElement(\"input\");\n    input.type = \"checkbox\";\n    input.id = this._addUID(\"GPshowAdvancedTools_ID_\" + obj.id);\n    list.push(input);\n    list.push(label);\n    return list;\n  },\n\n  /**\n   * Creation du container des outils avancés du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createAdvancedToolElement: function _createAdvancedToolElement(obj) {\n    // exemple :\n    // <div id=\"GPadvancedTools_ID_Layer1\" class=\"GPlayerAdvancedTools\">\n    //     <!-- _createAdvancedToolDeleteElement -->\n    //     <!-- _createAdvancedToolInformationElement -->\n    //     <!-- _createAdvancedToolOpacityElement -->\n    // </div>\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPadvancedTools_ID_\" + obj.id);\n    container.className = \"GPlayerAdvancedTools\";\n    container.appendChild(this._createAdvancedToolDeleteElement(obj)); // si on n'a de l'informations à afficher, on met en place ce composant\n\n    if (obj.title && obj.description) {\n      container.appendChild(this._createAdvancedToolInformationElement(obj));\n    }\n\n    if (obj.type !== \"feature\") {\n      var array = this._createAdvancedToolOpacityElement(obj);\n\n      for (var i = 0; i < array.length; i++) {\n        container.appendChild(array[i]);\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Creation de l'icone de suppression du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createAdvancedToolDeleteElement: function _createAdvancedToolDeleteElement(obj) {\n    // exemple :\n    // <div id=\"GPremove_ID_Layer1\" class=\"GPlayerRemove\" title=\"Supprimer la couche\" onclick=\"GPdropLayer(this);\"></div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPremove_ID_\" + obj.id);\n    div.className = \"GPlayerRemove\";\n    div.title = \"Supprimer la couche\";\n    div.layerId = obj.id;\n    var context = this;\n\n    if (div.addEventListener) {\n      div.addEventListener(\"click\", function (e) {\n        context._onDropLayerClick(e);\n      });\n    } else if (div.attachEvent) {\n      // internet explorer\n      div.attachEvent(\"onclick\", function (e) {\n        context._onDropLayerClick(e);\n      });\n    }\n\n    return div;\n  },\n\n  /**\n   * Creation de l'icone d'information du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createAdvancedToolInformationElement: function _createAdvancedToolInformationElement(obj) {\n    // exemple :\n    // <div id=\"GPinfo_ID_Layer1\" class=\"GPlayerInfo\" title=\"Informations/légende\" onclick=\"GPopenLayerInfo(this);\"></div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPinfo_ID_\" + obj.id);\n    div.className = \"GPlayerInfo\";\n    div.title = \"Informations/légende\";\n    div.layerId = obj.id; // add event on click\n\n    var context = this;\n\n    if (div.addEventListener) {\n      div.addEventListener(\"click\", function (e) {\n        context._onOpenLayerInfoClick(e);\n      });\n    } else if (div.attachEvent) {\n      // internet explorer\n      div.attachEvent(\"onclick\", function (e) {\n        context._onOpenLayerInfoClick(e);\n      });\n    }\n\n    return div;\n  },\n\n  /**\n   * Creation de l'icone de gestion de l'opacité du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement[]} array of two containers\n   */\n  _createAdvancedToolOpacityElement: function _createAdvancedToolOpacityElement(obj) {\n    // exemple :\n    // <div id=\"GPopacity_ID_Layer1\" class=\"GPlayerOpacity\" title=\"Opacité\">\n    //   <input id=\"GPopacityRange_ID_Layer1\" type=\"range\" value=\"100\" oninput=\"GPchangeLayerOpacity(this);\" onchange=\"GPchangeLayerOpacity(this);\">\n    // </div>\n    // <div class=\"GPlayerOpacityValue\" id=\"GPopacityValueDiv_ID_Layer1\">\n    //   <span id=\"GPopacityValue_ID_Layer1\">100</span>\n    //   %\n    // </div>\n    var list = []; // curseur pour changer l'opacité\n\n    var divO = document.createElement(\"div\");\n    divO.id = this._addUID(\"GPopacity_ID_\" + obj.id);\n    divO.className = \"GPlayerOpacity\";\n    divO.title = \"Opacité\";\n    var opacity = typeof obj.opacity !== \"undefined\" ? obj.opacity : 1;\n    opacity = Math.round(opacity * 100);\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPopacityValueDiv_ID_\" + obj.id);\n    input.type = \"range\";\n    input.value = opacity; // add event for opacity change\n\n    var context = this;\n\n    if (input.addEventListener) {\n      input.addEventListener(\"change\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"onchange\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    }\n\n    if (input.addEventListener) {\n      input.addEventListener(\"input\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"oninput\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    }\n\n    divO.appendChild(input); // Valeur d'opacité\n\n    var divC = document.createElement(\"div\");\n    divC.id = this._addUID(\"GPopacityValueDiv_ID_\" + obj.id);\n    divC.className = \"GPlayerOpacityValue\";\n    var span = document.createElement(\"span\");\n    span.id = this._addUID(\"GPopacityValue_ID_\" + obj.id);\n    span.innerHTML = opacity + \"%\";\n    divC.appendChild(span);\n    list.push(divO);\n    list.push(divC);\n    return list;\n  },\n  // ################################################################### //\n  // ############################ Layer info ########################### //\n  // ################################################################### //\n\n  /**\n   * Creation du container du layer info (DOM)\n   *\n   * TODO GPlayerInfoPopup : ???\n   * TODO GPlayerInfoLink  : mettre en forme les échelles !\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createContainerLayerInfoElement: function _createContainerLayerInfoElement(obj) {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPlayerInfoContent\");\n    var title = document.createElement(\"div\");\n    title.id = this._addUID(\"GPlayerInfoTitle\");\n    title.innerHTML = obj.title;\n    container.appendChild(title);\n\n    if (obj.quicklookUrl) {\n      var quick = document.createElement(\"div\");\n      quick.id = this._addUID(\"GPlayerInfoQuicklook\");\n      quick.title = \"Afficher un aperçu de la couche\";\n      var refquick = document.createElement(\"a\");\n      refquick.href = obj.quicklookUrl;\n      refquick.appendChild(quick);\n      container.appendChild(refquick);\n    }\n\n    var close = document.createElement(\"div\");\n    close.id = this._addUID(\"GPlayerInfoClose\");\n    close.title = \"Fermer la fenêtre\";\n    var self = this;\n    /** Call event function on close click */\n\n    var onCloseClick = function onCloseClick() {\n      document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n      var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n      for (var i = 0; i < layers.length; i++) {\n        layers[i].className = \"GPlayerInfo\";\n      }\n    };\n\n    if (close.addEventListener) {\n      close.addEventListener(\"click\", onCloseClick);\n    } else if (close.attachEvent) {\n      // internet explorer\n      close.attachEvent(\"onclick\", onCloseClick);\n    }\n\n    container.appendChild(close);\n    var desc = document.createElement(\"div\");\n    desc.id = this._addUID(\"GPlayerInfoDescription\");\n    desc.innerHTML = obj.description;\n    container.appendChild(desc);\n\n    if (obj.metadata) {\n      var mtd = document.createElement(\"div\");\n      mtd.id = this._addUID(\"GPlayerInfoMetadata\");\n      var mtdtitle = document.createElement(\"div\");\n      mtdtitle.className = \"GPlayerInfoSubtitle\";\n      mtdtitle.innerHTML = \"Métadonnées\";\n      mtd.appendChild(mtdtitle);\n\n      for (var i = 0; i < obj.metadata.length; i++) {\n        var urlmtd = obj.metadata[i].url;\n        var mtdlink = document.createElement(\"div\");\n        mtdlink.className = \"GPlayerInfoLink\";\n        var refmtd = document.createElement(\"a\");\n        refmtd.href = urlmtd;\n        refmtd.innerHTML = urlmtd;\n        mtdlink.appendChild(refmtd);\n        mtd.appendChild(mtdlink);\n      }\n\n      if (obj.metadata.length !== 0) {\n        container.appendChild(mtd);\n      }\n    }\n\n    if (obj.legends) {\n      var lgd = document.createElement(\"div\");\n      lgd.id = this._addUID(\"GPlayerInfoLegend\");\n      var lgdtitle = document.createElement(\"div\");\n      lgdtitle.className = \"GPlayerInfoSubtitle\";\n      lgdtitle.innerHTML = \"Légende\";\n      lgd.appendChild(lgdtitle);\n      var legends = {};\n      var maxScale = obj.maxScaleDenominator || 560000000; // on crée un tableau temporaire pour ordonner les légendes selon le dénominateur d'échelle\n\n      for (var k = 0; k < obj.legends.length; k++) {\n        var minScale = obj.legends[k].minScaleDenominator;\n\n        if (minScale) {\n          var s = minScale.toString();\n          minScale = Math.round(parseInt(s.substring(0, 3), 10) / 10) * Math.pow(10, s.length - 2);\n        } else {\n          minScale = 270;\n        }\n\n        legends[minScale] = obj.legends[k];\n      }\n\n      for (var scale in legends) {\n        if (legends.hasOwnProperty(scale)) {\n          var urllgd = legends[scale].url; // on n'affiche pas les légendes pointant vers \"nolegend.jpg\"\n\n          if (typeof urllgd === \"string\" && urllgd.toLowerCase().indexOf(\"nolegend.jpg\") === -1) {\n            // TODO GPlayerInfoPopup\n            var lgdlink = document.createElement(\"div\");\n            lgdlink.className = \"GPlayerInfoLink\";\n            maxScale = legends[scale].maxScaleDenominator || maxScale;\n            var reflgd = document.createElement(\"a\");\n            reflgd.href = urllgd;\n            reflgd.innerHTML = \"Du 1/\" + scale + \" au 1/\" + maxScale;\n            lgdlink.appendChild(reflgd);\n            lgd.appendChild(lgdlink);\n          } else {\n            delete legends[scale];\n          }\n        }\n      }\n\n      if (Object.keys(legends).length !== 0) {\n        container.appendChild(lgd);\n      }\n    }\n\n    return container;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerSwitcherDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Controls/LayerSwitcherDOM.js\n");

/***/ }),

/***/ "./src/Common/Controls/MiniGlobeDOM.js":
/*!*********************************************!*\
  !*** ./src/Common/Controls/MiniGlobeDOM.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar MiniGlobeDOM = {\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Main container (DOM)\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPminiglobeContainer\");\n    container.className = \"GPwidget\";\n    container.style.width = \"100px\";\n    container.style.height = \"100px\";\n    return container;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MiniGlobeDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ29udHJvbHMvTWluaUdsb2JlRE9NLmpzPzBiNTQiXSwibmFtZXMiOlsiTWluaUdsb2JlRE9NIiwiX2FkZFVJRCIsImlkIiwidWlkIiwiX3VpZCIsIl9jcmVhdGVNYWluQ29udGFpbmVyRWxlbWVudCIsImNvbnRhaW5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsSUFBSUEsWUFBWSxHQUFHO0FBRWY7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxTQUFPLEVBQUcsaUJBQVVDLEVBQVYsRUFBYztBQUNwQixRQUFJQyxHQUFHLEdBQUksS0FBS0MsSUFBTixHQUFjRixFQUFFLEdBQUcsR0FBTCxHQUFXLEtBQUtFLElBQTlCLEdBQXFDRixFQUEvQztBQUNBLFdBQU9DLEdBQVA7QUFDSCxHQVZjOztBQVlmO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUUsNkJBQTJCLEVBQUcsdUNBQVk7QUFDdEMsUUFBSUMsU0FBUyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQUYsYUFBUyxDQUFDSixFQUFWLEdBQWUsS0FBS0QsT0FBTCxDQUFhLHNCQUFiLENBQWY7QUFDQUssYUFBUyxDQUFDRyxTQUFWLEdBQXNCLFVBQXRCO0FBQ0FILGFBQVMsQ0FBQ0ksS0FBVixDQUFnQkMsS0FBaEIsR0FBd0IsT0FBeEI7QUFDQUwsYUFBUyxDQUFDSSxLQUFWLENBQWdCRSxNQUFoQixHQUF5QixPQUF6QjtBQUNBLFdBQU9OLFNBQVA7QUFDSDtBQXhCYyxDQUFuQjtBQTJCZU4sMkVBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NvbnRyb2xzL01pbmlHbG9iZURPTS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNaW5pR2xvYmVET00gPSB7XG5cbiAgICAvKipcbiAgICAqIEFkZCB1dWlkIHRvIHRoZSB0YWcgSURcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIGlkIHNlbGVjdG9yXG4gICAgKiBAcmV0dXJucyB7U3RyaW5nfSB1aWQgLSBpZCBzZWxlY3RvciB3aXRoIGFuIHVuaXF1ZSBpZFxuICAgICovXG4gICAgX2FkZFVJRCA6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdWlkID0gKHRoaXMuX3VpZCkgPyBpZCArIFwiLVwiICsgdGhpcy5fdWlkIDogaWQ7XG4gICAgICAgIHJldHVybiB1aWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1haW4gY29udGFpbmVyIChET00pXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RE9NRWxlbWVudH0gRE9NIGVsZW1lbnRcbiAgICAgKi9cbiAgICBfY3JlYXRlTWFpbkNvbnRhaW5lckVsZW1lbnQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb250YWluZXIuaWQgPSB0aGlzLl9hZGRVSUQoXCJHUG1pbmlnbG9iZUNvbnRhaW5lclwiKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiR1B3aWRnZXRcIjtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gXCIxMDBweFwiO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDBweFwiO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1pbmlHbG9iZURPTTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/Controls/MiniGlobeDOM.js\n");

/***/ }),

/***/ "./src/Common/Controls/MousePositionDOM.js":
/*!*************************************************!*\
  !*** ./src/Common/Controls/MousePositionDOM.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar MousePositionDOM = {\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Main container (DOM)\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPmousePosition\");\n    container.className = \"GPwidget\";\n    return container;\n  },\n  // ################################################################### //\n  // ################### Methods of main container ##################### //\n  // ################################################################### //\n\n  /**\n   * Hidden checkbox for minimizing/maximizing\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createShowMousePositionElement: function _createShowMousePositionElement() {\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPshowMousePosition\");\n    input.type = \"checkbox\";\n    return input;\n  },\n\n  /**\n   * Show mouse position control\n   * @param {Boolean} isDesktop - specifies if the support is desktop or tactile\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createShowMousePositionPictoElement: function _createShowMousePositionPictoElement(isDesktop) {\n    // contexte d'execution\n    var self = this;\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowMousePositionPicto\");\n    label.className = \"GPshowAdvancedToolPicto\";\n    label.htmlFor = this._addUID(\"GPshowMousePosition\");\n    label.title = \"Afficher les coordonnées du curseur\"; // FIXME detection disponible dans le JS !\n    // Detection : test for desktop or tactile\n    // var isDesktop = true;\n    // var userAgent = window.navigator.userAgent.toLowerCase();\n    // if (userAgent.indexOf(\"iphone\") !== -1 ||\n    // userAgent.indexOf(\"ipod\") !== -1 ||\n    // userAgent.indexOf(\"ipad\") !== -1 ||\n    // userAgent.indexOf(\"android\") !== -1 ||\n    // userAgent.indexOf(\"mobile\") !== -1 ||\n    // userAgent.indexOf(\"blackberry\") !== -1 ||\n    // userAgent.indexOf(\"tablet\") !== -1 ||\n    // userAgent.indexOf(\"phone\") !== -1 ||\n    // userAgent.indexOf(\"touch\") !== -1 ) {\n    //     isDesktop = false;\n    // }\n    // if (userAgent.indexOf(\"msie\") !== -1 ||\n    // userAgent.indexOf(\"trident\") !== -1) {\n    //     isDesktop = true;\n    // }\n    // Show map center localisation if panel opened and tactile support\n\n    label.addEventListener(\"click\", function (e) {\n      var mapCenterClass = \"\";\n\n      if (!document.getElementById(self._addUID(\"GPshowMousePosition\")).checked && !isDesktop) {\n        mapCenterClass = \"GPmapCenterVisible\";\n      }\n\n      document.getElementById(\"GPmapCenter\").className = mapCenterClass;\n      self.onShowMousePositionClick(e);\n    });\n    var spanOpen = document.createElement(\"span\");\n    spanOpen.id = this._addUID(\"GPshowMousePositionOpen\");\n    spanOpen.className = \"GPshowAdvancedToolOpen\";\n    label.appendChild(spanOpen);\n    return label;\n  },\n\n  /**\n   * mouse position panel\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMousePositionPanelElement: function _createMousePositionPanelElement() {\n    var panel = document.createElement(\"div\");\n    panel.id = this._addUID(\"GPmousePositionPanel\");\n    panel.className = \"GPpanel\"; // FIXME on decompose la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n    // div.appendChild(this._createMousePositionPanelHeaderElement());\n    // div.appendChild(this._createMousePositionPanelBasicElement());\n    // div.appendChild(this._createShowMousePositionSettingsElement());\n    // div.appendChild(this._createMousePositionSettingsElement());\n\n    return panel;\n  },\n\n  /**\n   * Map center localisation (tactile use)\n   *\n   * @returns {DOMElement} container\n   */\n  _createMapCenter: function _createMapCenter() {\n    var div = document.createElement(\"div\");\n    div.id = \"GPmapCenter\";\n    div.className = \"\";\n    return div;\n  },\n  // ################################################################### //\n  // ####################### Panel container ########################### //\n  // ################################################################### //\n\n  /**\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelHeaderElement: function _createMousePositionPanelHeaderElement() {\n    var container = document.createElement(\"div\");\n    container.className = \"GPpanelHeader\";\n    var divTitle = document.createElement(\"div\");\n    divTitle.className = \"GPpanelTitle\";\n    divTitle.innerHTML = \"Coordonnées\";\n    container.appendChild(divTitle);\n    var divClose = document.createElement(\"div\");\n    divClose.id = \"GPmousePositionPanelClose\";\n    divClose.className = \"GPpanelClose\";\n    divClose.title = \"Fermer le panneau\"; // Link panel close / visibility checkbox\n\n    var self = this;\n\n    if (divClose.addEventListener) {\n      divClose.addEventListener(\"click\", function () {\n        document.getElementById(self._addUID(\"GPshowMousePositionPicto\")).click();\n      }, false);\n    } else if (divClose.attachEvent) {\n      divClose.attachEvent(\"onclick\", function () {\n        document.getElementById(self._addUID(\"GPshowMousePositionPicto\")).click();\n      });\n    }\n\n    container.appendChild(divClose);\n    return container;\n  },\n\n  /**\n   * coordinate panel\n   * @param {Boolean} [displayAltitude] - specifies if the altitude panel must be displayed\n   * @param {Boolean} [displayCoordinates] - specifies if the coordinates panel must be displayed\n   * @param {Boolean} [editCoordinates] - specifies if the coordinates edition is allowed\n   * @param {Boolean} [currentProjectionUnits] - specifies if the current projection units\n   *\n   * FIXME\n   * call this._createMousePositionPanelBasicCoordinateElement\n   * call this._createMousePositionPanelBasicAltitudeElement\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMousePositionPanelBasicElement: function _createMousePositionPanelBasicElement(displayAltitude, displayCoordinates, editCoordinates, currentProjectionUnits) {\n    // default Values\n    displayAltitude = typeof displayAltitude === \"undefined\" ? true : displayAltitude;\n    displayCoordinates = typeof displayCoordinates === \"undefined\" ? true : displayCoordinates;\n    editCoordinates = typeof editCoordinates === \"undefined\" ? false : editCoordinates;\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPmousePositionBasicPanel\"); // FIXME on devrait decomposer la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n\n    container.appendChild(this._createMousePositionPanelBasicCoordinateElement(displayCoordinates, editCoordinates, currentProjectionUnits));\n    container.appendChild(this._createMousePositionPanelEditToolsElement(editCoordinates));\n    container.appendChild(this._createMousePositionPanelBasicAltitudeElement(displayAltitude));\n    return container;\n  },\n\n  /**\n   * create coordinate elements\n   *\n   * @param {String} coordType - (\"Lon\" ou \"Lat\")\n   * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n   *\n   * @returns {Array} list of DOM elements\n   */\n  _createCoordinateElement: function _createCoordinateElement(coordType, editCoordinates) {\n    var context = this;\n\n    if ([\"Lon\", \"Lat\"].indexOf(coordType) === -1) {\n      return [];\n    }\n\n    var list = [];\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPmousePosition\" + coordType);\n    input.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input.readOnly = true;\n\n    if (editCoordinates) {\n      input.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input.addEventListener(\"change\", function (e) {\n        this.classList.remove(\"error\");\n        var valid = context.validateExtentCoordinate(coordType, this.value, e);\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input);\n    var span = document.createElement(\"span\");\n    span.className = \"GPmousePositionUnits\";\n    list.push(span);\n    return list;\n  },\n\n  /**\n   *\n   * @param {String} coordType - (\"Lon\" ou \"Lat\")\n   * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n   *\n   * @returns {Array} list of DOM elements\n   */\n  _createDMSCoordinateElement: function _createDMSCoordinateElement(coordType, editCoordinates) {\n    if ([\"Lon\", \"Lat\"].indexOf(coordType) === -1) {\n      return [];\n    }\n\n    var context = this;\n    var list = [];\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPmousePosition\" + coordType + \"Degrees\");\n    input.className = \"GPSexagesimal\";\n    input.setAttribute(\"name\", \"degrees\");\n    input.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input.readOnly = true;\n    input.dataset.min = 0;\n    input.dataset.max = coordType === \"Lon\" ? 180 : 90;\n\n    if (editCoordinates) {\n      input.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input.addEventListener(\"change\", function () {\n        this.classList.remove(\"error\");\n\n        var valid = context._checkDMSDegrees(coordType, this);\n\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input);\n    var span = document.createElement(\"span\");\n    span.className = \"GPmousePositionSexagesimalLabel\";\n    span.innerHTML = \"°\";\n    list.push(span);\n    var input1 = document.createElement(\"input\");\n    input1.id = this._addUID(\"GPmousePosition\" + coordType + \"Minutes\");\n    input1.className = \"GPSexagesimal\";\n    input1.setAttribute(\"name\", \"minutes\");\n    input1.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input1.readOnly = true;\n    input1.dataset.min = 0;\n    input1.dataset.max = 59;\n\n    if (editCoordinates) {\n      input1.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input1.addEventListener(\"change\", function () {\n        this.classList.remove(\"error\");\n\n        var valid = context._checkDMSElement(this);\n\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input1);\n    var span1 = document.createElement(\"span\");\n    span1.className = \"GPmousePositionSexagesimalLabel\";\n    span1.innerHTML = \"'\";\n    list.push(span1);\n    var input2 = document.createElement(\"input\");\n    input2.id = this._addUID(\"GPmousePosition\" + coordType + \"Seconds\");\n    input2.className = \"GPSexagesimalsec\";\n    input2.setAttribute(\"name\", \"seconds\");\n    input2.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input2.readOnly = true;\n    input2.dataset.min = 0;\n    input2.dataset.max = 59;\n\n    if (editCoordinates) {\n      input2.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input2.addEventListener(\"change\", function () {\n        this.classList.remove(\"error\");\n\n        var valid = context._checkDMSElement(this, true);\n\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input2);\n    var span2 = document.createElement(\"span\");\n    span2.className = \"GPmousePositionSexagesimalLabel\";\n    span2.innerHTML = \"''\";\n    list.push(span2);\n    var select = document.createElement(\"select\");\n    select.id = this._addUID(\"GPmousePosition\" + coordType + \"Direction\");\n    select.className = \"GPmousePositionDirection\";\n    select.setAttribute(\"name\", \"direction\");\n    select.disabled = true;\n    var option = document.createElement(\"option\");\n    option.value = coordType === \"Lon\" ? \"E\" : \"N\";\n    option.innerHTML = coordType === \"Lon\" ? \"E\" : \"N\";\n    select.appendChild(option);\n    var option1 = document.createElement(\"option\");\n    option1.value = coordType === \"Lon\" ? \"O\" : \"S\";\n    option1.innerHTML = coordType === \"Lon\" ? \"O\" : \"S\";\n    select.appendChild(option1);\n    list.push(select);\n    return list;\n  },\n\n  /**\n   * @param {Boolean} [display=false] - specifies if the coordinates panel must be displayed\n   * @param {Boolean} [editCoordinates] - specifies if the coordinates edition is allowed\n   * @param {Boolean} [currentProjectionUnits] - specifies if the current projection units\n   *\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelBasicCoordinateElement: function _createMousePositionPanelBasicCoordinateElement(display, editCoordinates, currentProjectionUnits) {\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPmousePositionCoordinate\");\n    div.style.display = display ? \"block\" : \"none\"; // latitude\n\n    var divLat = document.createElement(\"div\");\n    var spanLat = document.createElement(\"span\");\n    spanLat.className = \"GPmousePositionLabel\";\n    spanLat.id = this._addUID(\"GPmousePositionLatLabel\");\n    spanLat.innerHTML = \"Latitude : \";\n    divLat.appendChild(spanLat);\n    var span = document.createElement(\"span\");\n    span.id = this._addUID(\"GPmousePositionLatCoordinate\");\n    var arrayCoords;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords = this._createDMSCoordinateElement(\"Lat\", editCoordinates);\n    } else {\n      arrayCoords = this._createCoordinateElement(\"Lat\", editCoordinates);\n    }\n\n    for (var i = 0; i < arrayCoords.length; i++) {\n      span.appendChild(arrayCoords[i]);\n    }\n\n    divLat.appendChild(span);\n    div.appendChild(divLat); // longitude\n\n    var divLon = document.createElement(\"div\");\n    var spanLon = document.createElement(\"span\");\n    spanLon.className = \"GPmousePositionLabel\";\n    spanLon.id = this._addUID(\"GPmousePositionLonLabel\");\n    spanLon.innerHTML = \"Longitude : \";\n    divLon.appendChild(spanLon);\n    var span1 = document.createElement(\"span\");\n    span1.id = this._addUID(\"GPmousePositionLonCoordinate\");\n    var arrayCoords1;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords1 = this._createDMSCoordinateElement(\"Lon\", editCoordinates);\n    } else {\n      arrayCoords1 = this._createCoordinateElement(\"Lon\", editCoordinates);\n    }\n\n    for (var j = 0; j < arrayCoords1.length; j++) {\n      span1.appendChild(arrayCoords1[j]);\n    }\n\n    divLon.appendChild(span1);\n    div.appendChild(divLon);\n    return div;\n  },\n\n  /**\n   * @param {Boolean} [display=false] - specifies if the altitude panel must be displayed\n   *\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelBasicAltitudeElement: function _createMousePositionPanelBasicAltitudeElement(display) {\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPmousePositionAltitude\");\n    div.style.display = display ? \"block\" : \"none\";\n    var spanLabel = document.createElement(\"span\");\n    spanLabel.className = \"GPmousePositionLabel\";\n    spanLabel.innerHTML = \"Altitude : \";\n    div.appendChild(spanLabel);\n    var spanAlt = document.createElement(\"span\");\n    spanAlt.className = \"GPmousePositionCoords\";\n    spanAlt.id = this._addUID(\"GPmousePositionAlt\");\n    spanAlt.innerHTML = \"...\";\n    div.appendChild(spanAlt);\n    var spanUnits = document.createElement(\"span\");\n    spanUnits.className = \"GPmousePositionAltitudeUnits\";\n    spanUnits.innerHTML = \"m\";\n    div.appendChild(spanUnits);\n    return div;\n  },\n\n  /**\n   * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n   *\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelEditToolsElement: function _createMousePositionPanelEditToolsElement(editCoordinates) {\n    var context = this;\n    var div = document.createElement(\"div\");\n    div.className = \"GPmousePositionPanelEditTools\";\n    div.id = this._addUID(\"GPmousePositionPanelEditTools\");\n\n    if (!editCoordinates) {\n      div.style.display = \"none\";\n    }\n\n    var span1 = document.createElement(\"span\");\n    span1.className = \"GPmousePositionEditTool\";\n    span1.id = this._addUID(\"GPmousePositionLocate\");\n    span1.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n\n    if (editCoordinates) {\n      span1.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeLocateClick();\n      });\n    }\n\n    div.appendChild(span1);\n    var span2 = document.createElement(\"span\");\n    span2.className = \"GPmousePositionEditTool\";\n    span2.id = this._addUID(\"GPmousePositionCloseEdit\");\n    span2.title = \"Quitter la saisie des coordonnées\";\n    span2.style.display = \"none\";\n\n    if (editCoordinates) {\n      span2.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(false);\n      });\n    }\n\n    div.appendChild(span2);\n    return div;\n  },\n  // ################################################################### //\n  // #################### Settings container ########################### //\n  // ################################################################### //\n\n  /**\n   * @param {Boolean} [display=false] - specifies if the settings panel must be displayed\n   *\n   * @returns {DOMElement[]} array containing input and label elements\n   */\n  _createShowMousePositionSettingsElement: function _createShowMousePositionSettingsElement(display) {\n    var list = [];\n    var context = this;\n    var input = document.createElement(\"input\");\n    input.type = \"checkbox\";\n    input.id = this._addUID(\"GPshowMousePositionSettings\");\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowMousePositionSettingsPicto\");\n    label.htmlFor = this._addUID(\"GPshowMousePositionSettings\");\n    label.title = \"Réglages\";\n    label.className = \"GPshowMoreOptionsImage GPshowMoreOptions GPshowMousePositionSettingsPicto\"; // FIXME classname and id ?\n\n    label.style.display = display ? \"block\" : \"none\";\n\n    if (label.addEventListener) {\n      label.addEventListener(\"click\", function (e) {\n        if (typeof context.onShowMousePositionSettingsClick === \"function\") {\n          context.onShowMousePositionSettingsClick(e);\n        }\n      }, false);\n    } else if (label.attachEvent) {\n      label.attachEvent(\"onclick\", function (e) {\n        if (typeof context.onShowMousePositionSettingsClick === \"function\") {\n          context.onShowMousePositionSettingsClick(e);\n        }\n      });\n    }\n\n    list.push(input);\n    list.push(label);\n    return list;\n  },\n\n  /**\n   * settings panel\n   * @param {Boolean} [display=true] - specifies if the settings panel must be displayed\n   *\n   * FIXME\n   * don't call this._createMousePositionSettingsSystemsElement\n   * don't call this._createMousePositionSettingsUnitsElement\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMousePositionSettingsElement: function _createMousePositionSettingsElement(display) {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPmousePositionSettings\");\n    container.style.display = display === undefined || display ? \"block\" : \"none\";\n    var span = document.createElement(\"span\");\n    span.className = \"GPmousePositionSettingsLabel\";\n    span.innerHTML = \"Système de référence\";\n    container.appendChild(span); // FIXME on decompose la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n    // FIXME tableau statique !\n    // var systems = [\n    //     {\n    //         code : \"GEOGRAPHIC\",\n    //         label : \"Géographique\"\n    //     },\n    //     {\n    //         code : \"MERCATOR\",\n    //         label : \"Mercator\"\n    //     },\n    //     {\n    //         code : \"LAMB93\",\n    //         label : \"Lambert 93\"\n    //     },\n    //     {\n    //         code : \"LAMB2E\",\n    //         label : \"Lambert II étendu\"\n    //     }\n    // ];\n    //\n    // var selectSystem = this._createMousePositionSettingsSystemsElement(systems);\n    //\n    // container.appendChild(selectSystem);\n    // FIXME on decompose la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n    // FIXME tableau statique !\n    // var units = [\n    //     {\n    //         code : \"DEC\",\n    //         label : \"degrés décimaux\",\n    //     },\n    //     {\n    //         code : \"DMS\",\n    //         label : \"degrés sexagésimaux\",\n    //     },\n    //     {\n    //         code : \"RAD\",\n    //         label : \"radians\",\n    //     },\n    //     {\n    //         code : \"GON\",\n    //         label : \"grades\"\n    //     }\n    // ];\n    //\n    // var selectUnits = this._createMousePositionSettingsUnitsElement(units);\n    //\n    // container.appendChild(selectUnits);\n\n    return container;\n  },\n\n  /**\n   * @param {Object[]} systems - list of systems\n   *\n   * @returns {DOMElement} DOM element select\n   */\n  _createMousePositionSettingsSystemsElement: function _createMousePositionSettingsSystemsElement(systems) {\n    // contexte d'execution\n    var context = this;\n    var selectSystem = document.createElement(\"select\");\n    selectSystem.id = this._addUID(\"GPmousePositionProjectionSystem\");\n    selectSystem.className = \"GPinputSelect GPmousePositionSettingsSelect\";\n    selectSystem.addEventListener(\"change\", function (e) {\n      context.onMousePositionProjectionSystemChange(e);\n    });\n    selectSystem.addEventListener(\"mouseover\", function (e) {\n      // FIXME mettre une condition si target === option\n      if (e.target.nodeName !== \"OPTION\") {\n        context.onMousePositionProjectionSystemMouseOver(e);\n      }\n    });\n\n    for (var i = 0; i < systems.length; i++) {\n      var obj = systems[i];\n      var option = document.createElement(\"option\");\n      option.value = obj.code;\n      option.text = obj.label || i; // option.label = obj.label;\n\n      selectSystem.appendChild(option);\n    }\n\n    return selectSystem;\n  },\n\n  /**\n   * @param {Object[]} units - list of units\n   *\n   * @returns {DOMElement} DOM element select\n   */\n  _createMousePositionSettingsUnitsElement: function _createMousePositionSettingsUnitsElement(units) {\n    // contexte d'execution\n    var context = this;\n    var selectUnits = document.createElement(\"select\");\n    selectUnits.id = this._addUID(\"GPmousePositionProjectionUnits\");\n    selectUnits.className = \"GPinputSelect GPmousePositionSettingsSelect\";\n    selectUnits.addEventListener(\"change\", function (e) {\n      context.onMousePositionProjectionUnitsChange(e);\n    });\n\n    for (var j = 0; j < units.length; j++) {\n      var obj = units[j];\n      var option = document.createElement(\"option\");\n      option.value = obj.code ? obj.code : j;\n      option.text = obj.label || j; // option.label = obj.label;\n\n      selectUnits.appendChild(option);\n    }\n\n    return selectUnits;\n  },\n\n  /**\n   * @param {String} [currentProjectionType=\"Metric\"] - \"Geographical\" or \"Metric\"\n   */\n  _resetLabelElements: function _resetLabelElements(currentProjectionType) {\n    // Changement des labels dans le formulaire de saisie\n    var spanLat = document.getElementById(this._addUID(\"GPmousePositionLatLabel\"));\n    spanLat.innerHTML = currentProjectionType === \"Geographical\" ? \"Latitude :\" : \"X :\";\n    var spanLon = document.getElementById(this._addUID(\"GPmousePositionLonLabel\"));\n    spanLon.innerHTML = currentProjectionType === \"Geographical\" ? \"Longitude :\" : \"Y :\";\n  },\n\n  /**\n   * @param {String} currentProjectionUnits - projection units\n   */\n  _resetUnitElements: function _resetUnitElements(currentProjectionUnits) {\n    var value = \"\";\n\n    if (currentProjectionUnits === \"M\" || currentProjectionUnits === \"KM\") {\n      value = currentProjectionUnits.toLowerCase();\n    }\n\n    var elts = document.getElementsByClassName(\"GPmousePositionUnits\");\n\n    for (var e = 0; e < elts.length; e++) {\n      elts[e].innerHTML = value;\n    }\n  },\n\n  /**\n   * @method _resetCoordinateElements\n   * @param {Boolean} editCoordinates - edit coordinates option\n   * @param {String} currentProjectionType - current projection type\n   * @param {String} currentProjectionUnits - current projection unit\n   */\n  _resetCoordinateElements: function _resetCoordinateElements(editCoordinates, currentProjectionType, currentProjectionUnits) {\n    // Suppression de tous les enfants de GPmousePositionLatCoordinate\n    var latElt = document.getElementById(this._addUID(\"GPmousePositionLatCoordinate\"));\n\n    while (latElt.firstChild) {\n      latElt.removeChild(latElt.firstChild);\n    }\n\n    var arrayCoords;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords = this._createDMSCoordinateElement(\"Lat\", editCoordinates);\n    } else {\n      arrayCoords = this._createCoordinateElement(\"Lat\", editCoordinates);\n    }\n\n    for (var i = 0; i < arrayCoords.length; i++) {\n      latElt.appendChild(arrayCoords[i]);\n    } // Suppression de tous les enfants de GPmousePositionLonCoordinate\n\n\n    var lonElt = document.getElementById(this._addUID(\"GPmousePositionLonCoordinate\"));\n\n    while (lonElt.firstChild) {\n      lonElt.removeChild(lonElt.firstChild);\n    }\n\n    var arrayCoords1;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords1 = this._createDMSCoordinateElement(\"Lon\", editCoordinates);\n    } else {\n      arrayCoords1 = this._createCoordinateElement(\"Lon\", editCoordinates);\n    }\n\n    for (var j = 0; j < arrayCoords1.length; j++) {\n      lonElt.appendChild(arrayCoords1[j]);\n    } // FIXME on simule un deplacement ?\n    // this.onMapMove();\n\n  },\n\n  /**\n   * Set/unset editing mode\n   *\n   * @method _setEditMode\n   * @param {Boolean} editing - active edit coordinates mode\n   */\n  _setEditMode: function _setEditMode(editing) {\n    var locateElt = document.getElementById(this._addUID(\"GPmousePositionLocate\"));\n    locateElt.title = editing ? \"Aller à la position ...\" : \"Cliquer pour saisir des coordonnées\";\n    var closeEditElt = document.getElementById(this._addUID(\"GPmousePositionCloseEdit\"));\n    closeEditElt.style.display = editing ? \"inline-block\" : \"none\";\n    var selector = \"div[id^=\" + this._addUID(\"GPmousePositionCoordinate\") + \"]\";\n    var inputs = document.querySelectorAll(selector + \" input\");\n\n    for (var i = 0; i < inputs.length; i++) {\n      inputs[i].readOnly = !editing;\n\n      if (editing) {\n        inputs[i].value = \"\";\n        inputs[i].classList.remove(\"error\");\n      }\n    }\n\n    var selects = document.querySelectorAll(selector + \" select\");\n\n    for (var j = 0; j < selects.length; j++) {\n      selects[j].disabled = !editing;\n    }\n  },\n\n  /**\n   *\n   * @param {DOMElement} input - input element\n   * @param {Boolean} isFloat - check for float value\n   *\n   * @returns {Boolean} true if input value is within bounds\n   */\n  _checkDMSElement: function _checkDMSElement(input, isFloat) {\n    var b = isFloat !== undefined;\n    var value = input.value;\n\n    if (b) {\n      value = value.replace(\",\", \".\");\n    }\n\n    if (isNaN(value)) {\n      return false;\n    }\n\n    var v = parseFloat(value);\n\n    if (!b && (v | 0) !== v) {\n      // is it an integer\n      return false;\n    }\n\n    var min = Number(input.dataset.min);\n    var max = Number(input.dataset.max);\n    return v >= min && v <= max;\n  },\n\n  /**\n   * @param {String} coordType - \"Lon\" or \"Lat\"\n   * @param {DOMElement} input - input element\n   *\n   * @returns {Boolean} true if input value is within bounds\n   */\n  _checkDMSDegrees: function _checkDMSDegrees(coordType, input) {\n    if (isNaN(input.value)) {\n      return false;\n    }\n\n    var v = parseFloat(input.value);\n\n    if ((v | 0) !== v) {\n      // is it an integer\n      return false;\n    }\n\n    var min = Number(input.dataset.min);\n    var max = Number(input.dataset.max);\n\n    if (v < min || v > max) {\n      return false;\n    }\n\n    var inputMinutes = document.getElementById(this._addUID(\"GPmousePosition\" + coordType + \"Minutes\"));\n    var inputSeconds = document.getElementById(this._addUID(\"GPmousePosition\" + coordType + \"Seconds\"));\n\n    if (v >= max) {\n      inputMinutes.dataset.max = 0;\n      inputSeconds.dataset.max = 0;\n    } else {\n      inputMinutes.dataset.max = 59;\n      inputSeconds.dataset.max = 59.9999;\n    }\n\n    return true;\n  },\n  // ################################################################### //\n  // ####################### handlers Event ############################ //\n  // ################################################################### //\n\n  /**\n   * Function displaying coordinates from cursor position (desktop)\n   * or map center (tactile)\n   * @param {Object} coordinate - coordinates\n   */\n  GPdisplayCoords: function GPdisplayCoords(coordinate) {\n    // Compute coords in case of cursor position (desktop)\n    if (coordinate && coordinate != null) {\n      var labelLon = document.getElementById(this._addUID(\"GPmousePositionLonLabel\"));\n      var labelLat = document.getElementById(this._addUID(\"GPmousePositionLatLabel\"));\n\n      if (coordinate.x || coordinate.y) {\n        labelLat.innerHTML = \"X : \";\n        labelLon.innerHTML = \"Y : \";\n      } else if (coordinate.e || coordinate.n) {\n        labelLat.innerHTML = \"E : \";\n        labelLon.innerHTML = \"N : \";\n      } else {\n        labelLat.innerHTML = \"Latitude : \";\n        labelLon.innerHTML = \"Longitude : \";\n      }\n\n      if (_typeof(coordinate.lat) === \"object\" && _typeof(coordinate.lng) === \"object\") {\n        var parts = {\n          lng: \"Lon\",\n          lat: \"Lat\"\n        };\n        var units = [\"Degrees\", \"Minutes\", \"Seconds\"];\n\n        for (var p in parts) {\n          for (var u = 0; u < units.length; ++u) {\n            var selector = \"GPmousePosition\" + parts[p] + units[u];\n            var elt = document.getElementById(this._addUID(selector));\n            var key = units[u].charAt(0).toLowerCase();\n            elt.value = coordinate[p][key];\n          }\n        } // directions\n\n\n        document.getElementById(this._addUID(\"GPmousePositionLonDirection\")).value = coordinate.lng.direction;\n        document.getElementById(this._addUID(\"GPmousePositionLatDirection\")).value = coordinate.lat.direction;\n      } else {\n        var elLat = document.getElementById(this._addUID(\"GPmousePositionLat\"));\n        var elLon = document.getElementById(this._addUID(\"GPmousePositionLon\"));\n        elLat.value = coordinate.x || coordinate.lat || coordinate.e || \"0\";\n        elLon.value = coordinate.y || coordinate.lng || coordinate.lon || coordinate.n || \"0\"; // les unites\n\n        var unit = coordinate.unit === undefined ? \"\" : coordinate.unit;\n        var elements = document.getElementsByClassName(\"GPmousePositionUnits\");\n\n        for (var n = 0; n < elements.length; ++n) {\n          elements[n].innerHTML = unit;\n        }\n      }\n    }\n  },\n\n  /**\n   * Function displaying altitude from cursor position (desktop)\n   * or map center (tactile)\n   * @param {Object} coordinate - coordinates\n   * @param {Number} altitudeTimeoutDelay - when the mouse stop moving, delay before the altitude request is launched\n   * @param {Number} noDataValue - the no data value\n   * @param {Number} noDataValueTolerance - the no data value tolerance\n   */\n  GPdisplayElevation: function GPdisplayElevation(coordinate, altitudeTimeoutDelay, noDataValue, noDataValueTolerance) {\n    // contexte d'execution\n    var self = this; // Latency for altitude request\n\n    var altitudeTimeout;\n\n    if (!altitudeTimeoutDelay) {\n      altitudeTimeoutDelay = 500;\n    }\n\n    clearTimeout(altitudeTimeout);\n    document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"...\";\n\n    if (noDataValue == null) {\n      noDataValue = -99999;\n    }\n\n    if (noDataValueTolerance == null) {\n      noDataValueTolerance = 99980;\n    }\n\n    var maxThreshold = noDataValue + noDataValueTolerance;\n    var minThreshold = noDataValue - noDataValueTolerance; // Compute coords in case of cursor position (desktop)\n\n    if (coordinate && coordinate != null) {\n      // If no altitude panel, don't call altitude request\n      if (document.getElementById(this._addUID(\"GPmousePositionAltitude\"))) {\n        altitudeTimeout = setTimeout(function () {\n          self.onRequestAltitude(coordinate, function (z) {\n            if (minThreshold < z && z < maxThreshold) {\n              self.GPresetElevation();\n            } else {\n              document.getElementById(self._addUID(\"GPmousePositionAlt\")).innerHTML = z;\n            }\n          });\n        }, altitudeTimeoutDelay);\n      }\n    }\n  },\n\n  /**\n   * Function reseting altitude value\n   */\n  GPresetElevation: function GPresetElevation() {\n    if (document.getElementById(this._addUID(\"GPmousePositionAltitude\"))) {\n      document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"---\";\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MousePositionDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Controls/MousePositionDOM.js\n");

/***/ }),

/***/ "./src/Common/Controls/ScaleDOM.js":
/*!*****************************************!*\
  !*** ./src/Common/Controls/ScaleDOM.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar ScaleDOM = {\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Main container (DOM)\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPscaleContainer\");\n    container.className = \"GPwidget\";\n    return container;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (ScaleDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vQ29udHJvbHMvU2NhbGVET00uanM/ZTM3MiJdLCJuYW1lcyI6WyJTY2FsZURPTSIsIl9hZGRVSUQiLCJpZCIsInVpZCIsIl91aWQiLCJfY3JlYXRlTWFpbkNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsSUFBSUEsUUFBUSxHQUFHO0FBRVg7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxTQUFPLEVBQUcsaUJBQVVDLEVBQVYsRUFBYztBQUNwQixRQUFJQyxHQUFHLEdBQUksS0FBS0MsSUFBTixHQUFjRixFQUFFLEdBQUcsR0FBTCxHQUFXLEtBQUtFLElBQTlCLEdBQXFDRixFQUEvQztBQUNBLFdBQU9DLEdBQVA7QUFDSCxHQVZVOztBQVlYO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUUsNkJBQTJCLEVBQUcsdUNBQVk7QUFDdEMsUUFBSUMsU0FBUyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQUYsYUFBUyxDQUFDSixFQUFWLEdBQWUsS0FBS0QsT0FBTCxDQUFhLGtCQUFiLENBQWY7QUFDQUssYUFBUyxDQUFDRyxTQUFWLEdBQXNCLFVBQXRCO0FBQ0EsV0FBT0gsU0FBUDtBQUNIO0FBdEJVLENBQWY7QUF5QmVOLHVFQUFmIiwiZmlsZSI6Ii4vc3JjL0NvbW1vbi9Db250cm9scy9TY2FsZURPTS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBTY2FsZURPTSA9IHtcblxuICAgIC8qKlxuICAgICogQWRkIHV1aWQgdG8gdGhlIHRhZyBJRFxuICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gaWQgc2VsZWN0b3JcbiAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHVpZCAtIGlkIHNlbGVjdG9yIHdpdGggYW4gdW5pcXVlIGlkXG4gICAgKi9cbiAgICBfYWRkVUlEIDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciB1aWQgPSAodGhpcy5fdWlkKSA/IGlkICsgXCItXCIgKyB0aGlzLl91aWQgOiBpZDtcbiAgICAgICAgcmV0dXJuIHVpZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWFpbiBjb250YWluZXIgKERPTSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtET01FbGVtZW50fSBET00gZWxlbWVudFxuICAgICAqL1xuICAgIF9jcmVhdGVNYWluQ29udGFpbmVyRWxlbWVudCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnRhaW5lci5pZCA9IHRoaXMuX2FkZFVJRChcIkdQc2NhbGVDb250YWluZXJcIik7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcIkdQd2lkZ2V0XCI7XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2NhbGVET007XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Controls/ScaleDOM.js\n");

/***/ }),

/***/ "./src/Common/Styles.js":
/*!******************************!*\
  !*** ./src/Common/Styles.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CSS_GPboostRelief_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSS/GPboostRelief.css */ \"./src/Common/CSS/GPboostRelief.css\");\n/* harmony import */ var _CSS_GPboostRelief_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPboostRelief_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CSS_GPdrawing_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSS/GPdrawing.css */ \"./src/Common/CSS/GPdrawing.css\");\n/* harmony import */ var _CSS_GPdrawing_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPdrawing_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _CSS_GPelevationPath_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSS/GPelevationPath.css */ \"./src/Common/CSS/GPelevationPath.css\");\n/* harmony import */ var _CSS_GPelevationPath_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPelevationPath_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CSS/GPgeneralWidget.css */ \"./src/Common/CSS/GPgeneralWidget.css\");\n/* harmony import */ var _CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _CSS_GPgetFeatureInfo_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CSS/GPgetFeatureInfo.css */ \"./src/Common/CSS/GPgetFeatureInfo.css\");\n/* harmony import */ var _CSS_GPgetFeatureInfo_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPgetFeatureInfo_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _CSS_GPisochron_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CSS/GPisochron.css */ \"./src/Common/CSS/GPisochron.css\");\n/* harmony import */ var _CSS_GPisochron_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPisochron_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _CSS_GPlayerSwitcher_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CSS/GPlayerSwitcher.css */ \"./src/Common/CSS/GPlayerSwitcher.css\");\n/* harmony import */ var _CSS_GPlayerSwitcher_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPlayerSwitcher_css__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _CSS_GPlocation_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CSS/GPlocation.css */ \"./src/Common/CSS/GPlocation.css\");\n/* harmony import */ var _CSS_GPlocation_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPlocation_css__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _CSS_GPmeasureArea_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CSS/GPmeasureArea.css */ \"./src/Common/CSS/GPmeasureArea.css\");\n/* harmony import */ var _CSS_GPmeasureArea_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPmeasureArea_css__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _CSS_GPmeasureAzimuth_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./CSS/GPmeasureAzimuth.css */ \"./src/Common/CSS/GPmeasureAzimuth.css\");\n/* harmony import */ var _CSS_GPmeasureAzimuth_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPmeasureAzimuth_css__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _CSS_GPmeasureLength_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./CSS/GPmeasureLength.css */ \"./src/Common/CSS/GPmeasureLength.css\");\n/* harmony import */ var _CSS_GPmeasureLength_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPmeasureLength_css__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _CSS_GPmeasureToolTip_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CSS/GPmeasureToolTip.css */ \"./src/Common/CSS/GPmeasureToolTip.css\");\n/* harmony import */ var _CSS_GPmeasureToolTip_css__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPmeasureToolTip_css__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _CSS_GPmousePosition_css__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./CSS/GPmousePosition.css */ \"./src/Common/CSS/GPmousePosition.css\");\n/* harmony import */ var _CSS_GPmousePosition_css__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPmousePosition_css__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _CSS_GPreverseGeocoding_css__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./CSS/GPreverseGeocoding.css */ \"./src/Common/CSS/GPreverseGeocoding.css\");\n/* harmony import */ var _CSS_GPreverseGeocoding_css__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPreverseGeocoding_css__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _CSS_GProute_css__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CSS/GProute.css */ \"./src/Common/CSS/GProute.css\");\n/* harmony import */ var _CSS_GProute_css__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_CSS_GProute_css__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _CSS_GPsearchEngine_css__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./CSS/GPsearchEngine.css */ \"./src/Common/CSS/GPsearchEngine.css\");\n/* harmony import */ var _CSS_GPsearchEngine_css__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPsearchEngine_css__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _CSS_GPwaiting_css__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./CSS/GPwaiting.css */ \"./src/Common/CSS/GPwaiting.css\");\n/* harmony import */ var _CSS_GPwaiting_css__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPwaiting_css__WEBPACK_IMPORTED_MODULE_16__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vU3R5bGVzLmpzP2QzOWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL0NvbW1vbi9TdHlsZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL0NTUy9HUGJvb3N0UmVsaWVmLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1BkcmF3aW5nLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1BlbGV2YXRpb25QYXRoLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1BnZW5lcmFsV2lkZ2V0LmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1BnZXRGZWF0dXJlSW5mby5jc3NcIjtcbmltcG9ydCBcIi4vQ1NTL0dQaXNvY2hyb24uY3NzXCI7XG5pbXBvcnQgXCIuL0NTUy9HUGxheWVyU3dpdGNoZXIuY3NzXCI7XG5pbXBvcnQgXCIuL0NTUy9HUGxvY2F0aW9uLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1BtZWFzdXJlQXJlYS5jc3NcIjtcbmltcG9ydCBcIi4vQ1NTL0dQbWVhc3VyZUF6aW11dGguY3NzXCI7XG5pbXBvcnQgXCIuL0NTUy9HUG1lYXN1cmVMZW5ndGguY3NzXCI7XG5pbXBvcnQgXCIuL0NTUy9HUG1lYXN1cmVUb29sVGlwLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1Btb3VzZVBvc2l0aW9uLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1ByZXZlcnNlR2VvY29kaW5nLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1Byb3V0ZS5jc3NcIjtcbmltcG9ydCBcIi4vQ1NTL0dQc2VhcmNoRW5naW5lLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvR1B3YWl0aW5nLmNzc1wiO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Common/Styles.js\n");

/***/ }),

/***/ "./src/Common/Utils.js":
/*!*****************************!*\
  !*** ./src/Common/Utils.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n* @module Utils\n* @alias Gp.olUtils\n* @description\n* ...\n*\n* @example\n* detectSupport();\n* assign();\n* mergeParams();\n*/\nvar Utils = {\n  /**\n   * this method is called by the constructor.\n   * this information is useful to switch to touch mode.\n   * Detection : test for desktop or tactile\n   *\n   * @returns {Boolean} isDesktop - true for desktop userAgent, false for mobile\n   */\n  detectSupport: function detectSupport() {\n    var isDesktop = true;\n    var userAgent = window.navigator.userAgent.toLowerCase();\n\n    if (userAgent.indexOf(\"iphone\") !== -1 || userAgent.indexOf(\"ipod\") !== -1 || userAgent.indexOf(\"ipad\") !== -1 || userAgent.indexOf(\"android\") !== -1 || userAgent.indexOf(\"mobile\") !== -1 || userAgent.indexOf(\"blackberry\") !== -1 || userAgent.indexOf(\"tablet\") !== -1 || userAgent.indexOf(\"phone\") !== -1 || userAgent.indexOf(\"touch\") !== -1) {\n      isDesktop = false;\n    }\n\n    if (userAgent.indexOf(\"msie\") !== -1 || userAgent.indexOf(\"trident\") !== -1) {\n      isDesktop = true;\n    }\n\n    return isDesktop;\n  },\n\n  /**\n   *  Copies all source object members to dest\n   *\n   * @param {Object} dest - destination object where properties and method will be copied\n   * @param {Object} source - source object from which properties and method will be copied\n   * @returns {Object} dest\n   */\n  assign: function assign(dest, source) {\n    dest = dest || {};\n\n    for (var prop in source) {\n      if (source.hasOwnProperty(prop)) {\n        dest[prop] = source[prop];\n      }\n    }\n\n    return dest;\n  },\n\n  /**\n   * Merge two objects parameters (deeper than assign)\n   *\n   * @param {Object} dest     - destination object where properties and method will be merge\n   * @param {Object} source   - source object from which properties and method will be merge\n   * @param {Boolean} replace - replace destination value by source if exists or not (true by default)\n   */\n  mergeParams: function mergeParams(dest, source, replace) {\n    if (!dest || !source) {\n      return;\n    }\n\n    if (typeof replace === \"undefined\") {\n      replace = true;\n    }\n\n    for (var param in source) {\n      if (source.hasOwnProperty(param)) {\n        if (_typeof(source[param]) === \"object\") {\n          if (dest.hasOwnProperty(param)) {\n            this.mergeParams(dest[param], source[param], replace);\n          } else {\n            dest[param] = source[param];\n          }\n        } else {\n          if (dest.hasOwnProperty(param)) {\n            if (replace) {\n              dest[param] = source[param];\n            }\n          } else {\n            dest[param] = source[param];\n          }\n        }\n      }\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Utils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vVXRpbHMuanM/MTM1ZSJdLCJuYW1lcyI6WyJVdGlscyIsImRldGVjdFN1cHBvcnQiLCJpc0Rlc2t0b3AiLCJ1c2VyQWdlbnQiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJhc3NpZ24iLCJkZXN0Iiwic291cmNlIiwicHJvcCIsImhhc093blByb3BlcnR5IiwibWVyZ2VQYXJhbXMiLCJyZXBsYWNlIiwicGFyYW0iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxLQUFLLEdBQUc7QUFFUjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxlQUFhLEVBQUcseUJBQVk7QUFDeEIsUUFBSUMsU0FBUyxHQUFHLElBQWhCO0FBQ0EsUUFBSUMsU0FBUyxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJGLFNBQWpCLENBQTJCRyxXQUEzQixFQUFoQjs7QUFFQSxRQUFJSCxTQUFTLENBQUNJLE9BQVYsQ0FBa0IsUUFBbEIsTUFBZ0MsQ0FBQyxDQUFqQyxJQUNBSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsTUFBbEIsTUFBOEIsQ0FBQyxDQUQvQixJQUVBSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsTUFBbEIsTUFBOEIsQ0FBQyxDQUYvQixJQUdBSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsU0FBbEIsTUFBaUMsQ0FBQyxDQUhsQyxJQUlBSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsUUFBbEIsTUFBZ0MsQ0FBQyxDQUpqQyxJQUtBSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsWUFBbEIsTUFBb0MsQ0FBQyxDQUxyQyxJQU1BSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsUUFBbEIsTUFBZ0MsQ0FBQyxDQU5qQyxJQU9BSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsT0FBbEIsTUFBK0IsQ0FBQyxDQVBoQyxJQVFBSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsT0FBbEIsTUFBK0IsQ0FBQyxDQVJwQyxFQVF1QztBQUNuQ0wsZUFBUyxHQUFHLEtBQVo7QUFDSDs7QUFFRCxRQUFJQyxTQUFTLENBQUNJLE9BQVYsQ0FBa0IsTUFBbEIsTUFBOEIsQ0FBQyxDQUEvQixJQUNBSixTQUFTLENBQUNJLE9BQVYsQ0FBa0IsU0FBbEIsTUFBaUMsQ0FBQyxDQUR0QyxFQUN5QztBQUNyQ0wsZUFBUyxHQUFHLElBQVo7QUFDSDs7QUFFRCxXQUFPQSxTQUFQO0FBQ0gsR0EvQk87O0FBaUNSO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lNLFFBQU0sRUFBRyxnQkFBVUMsSUFBVixFQUFnQkMsTUFBaEIsRUFBd0I7QUFDN0JELFFBQUksR0FBR0EsSUFBSSxJQUFJLEVBQWY7O0FBQ0EsU0FBSyxJQUFJRSxJQUFULElBQWlCRCxNQUFqQixFQUF5QjtBQUNyQixVQUFJQSxNQUFNLENBQUNFLGNBQVAsQ0FBc0JELElBQXRCLENBQUosRUFBaUM7QUFDN0JGLFlBQUksQ0FBQ0UsSUFBRCxDQUFKLEdBQWFELE1BQU0sQ0FBQ0MsSUFBRCxDQUFuQjtBQUNIO0FBQ0o7O0FBQ0QsV0FBT0YsSUFBUDtBQUNILEdBaERPOztBQWtEUjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJSSxhQUFXLEVBQUcscUJBQVVKLElBQVYsRUFBZ0JDLE1BQWhCLEVBQXdCSSxPQUF4QixFQUFpQztBQUMzQyxRQUFJLENBQUNMLElBQUQsSUFBUyxDQUFDQyxNQUFkLEVBQXNCO0FBQ2xCO0FBQ0g7O0FBQ0QsUUFBSSxPQUFPSSxPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2hDQSxhQUFPLEdBQUcsSUFBVjtBQUNIOztBQUNELFNBQUssSUFBSUMsS0FBVCxJQUFrQkwsTUFBbEIsRUFBMEI7QUFDdEIsVUFBSUEsTUFBTSxDQUFDRSxjQUFQLENBQXNCRyxLQUF0QixDQUFKLEVBQWtDO0FBQzlCLFlBQUksUUFBT0wsTUFBTSxDQUFDSyxLQUFELENBQWIsTUFBeUIsUUFBN0IsRUFBdUM7QUFDbkMsY0FBSU4sSUFBSSxDQUFDRyxjQUFMLENBQW9CRyxLQUFwQixDQUFKLEVBQWdDO0FBQzVCLGlCQUFLRixXQUFMLENBQWlCSixJQUFJLENBQUNNLEtBQUQsQ0FBckIsRUFBOEJMLE1BQU0sQ0FBQ0ssS0FBRCxDQUFwQyxFQUE2Q0QsT0FBN0M7QUFDSCxXQUZELE1BRU87QUFDSEwsZ0JBQUksQ0FBQ00sS0FBRCxDQUFKLEdBQWNMLE1BQU0sQ0FBQ0ssS0FBRCxDQUFwQjtBQUNIO0FBQ0osU0FORCxNQU1PO0FBQ0gsY0FBSU4sSUFBSSxDQUFDRyxjQUFMLENBQW9CRyxLQUFwQixDQUFKLEVBQWdDO0FBQzVCLGdCQUFJRCxPQUFKLEVBQWE7QUFDVEwsa0JBQUksQ0FBQ00sS0FBRCxDQUFKLEdBQWNMLE1BQU0sQ0FBQ0ssS0FBRCxDQUFwQjtBQUNIO0FBQ0osV0FKRCxNQUlPO0FBQ0hOLGdCQUFJLENBQUNNLEtBQUQsQ0FBSixHQUFjTCxNQUFNLENBQUNLLEtBQUQsQ0FBcEI7QUFDSDtBQUNKO0FBQ0o7QUFDSjtBQUNKO0FBbkZPLENBQVo7QUFzRmVmLG9FQUFmIiwiZmlsZSI6Ii4vc3JjL0NvbW1vbi9VdGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBAbW9kdWxlIFV0aWxzXG4qIEBhbGlhcyBHcC5vbFV0aWxzXG4qIEBkZXNjcmlwdGlvblxuKiAuLi5cbipcbiogQGV4YW1wbGVcbiogZGV0ZWN0U3VwcG9ydCgpO1xuKiBhc3NpZ24oKTtcbiogbWVyZ2VQYXJhbXMoKTtcbiovXG52YXIgVXRpbHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAqIHRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZnVsIHRvIHN3aXRjaCB0byB0b3VjaCBtb2RlLlxuICAgICAqIERldGVjdGlvbiA6IHRlc3QgZm9yIGRlc2t0b3Agb3IgdGFjdGlsZVxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IGlzRGVza3RvcCAtIHRydWUgZm9yIGRlc2t0b3AgdXNlckFnZW50LCBmYWxzZSBmb3IgbW9iaWxlXG4gICAgICovXG4gICAgZGV0ZWN0U3VwcG9ydCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzRGVza3RvcCA9IHRydWU7XG4gICAgICAgIHZhciB1c2VyQWdlbnQgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmICh1c2VyQWdlbnQuaW5kZXhPZihcImlwaG9uZVwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwiaXBvZFwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwiaXBhZFwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwiYW5kcm9pZFwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwibW9iaWxlXCIpICE9PSAtMSB8fFxuICAgICAgICAgICAgdXNlckFnZW50LmluZGV4T2YoXCJibGFja2JlcnJ5XCIpICE9PSAtMSB8fFxuICAgICAgICAgICAgdXNlckFnZW50LmluZGV4T2YoXCJ0YWJsZXRcIikgIT09IC0xIHx8XG4gICAgICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZihcInBob25lXCIpICE9PSAtMSB8fFxuICAgICAgICAgICAgdXNlckFnZW50LmluZGV4T2YoXCJ0b3VjaFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlzRGVza3RvcCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKFwibXNpZVwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwidHJpZGVudFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlzRGVza3RvcCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNEZXNrdG9wO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAgQ29waWVzIGFsbCBzb3VyY2Ugb2JqZWN0IG1lbWJlcnMgdG8gZGVzdFxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRlc3QgLSBkZXN0aW5hdGlvbiBvYmplY3Qgd2hlcmUgcHJvcGVydGllcyBhbmQgbWV0aG9kIHdpbGwgYmUgY29waWVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSAtIHNvdXJjZSBvYmplY3QgZnJvbSB3aGljaCBwcm9wZXJ0aWVzIGFuZCBtZXRob2Qgd2lsbCBiZSBjb3BpZWRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gICAgICovXG4gICAgYXNzaWduIDogZnVuY3Rpb24gKGRlc3QsIHNvdXJjZSkge1xuICAgICAgICBkZXN0ID0gZGVzdCB8fCB7fTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICBkZXN0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSB0d28gb2JqZWN0cyBwYXJhbWV0ZXJzIChkZWVwZXIgdGhhbiBhc3NpZ24pXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGVzdCAgICAgLSBkZXN0aW5hdGlvbiBvYmplY3Qgd2hlcmUgcHJvcGVydGllcyBhbmQgbWV0aG9kIHdpbGwgYmUgbWVyZ2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlICAgLSBzb3VyY2Ugb2JqZWN0IGZyb20gd2hpY2ggcHJvcGVydGllcyBhbmQgbWV0aG9kIHdpbGwgYmUgbWVyZ2VcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlcGxhY2UgLSByZXBsYWNlIGRlc3RpbmF0aW9uIHZhbHVlIGJ5IHNvdXJjZSBpZiBleGlzdHMgb3Igbm90ICh0cnVlIGJ5IGRlZmF1bHQpXG4gICAgICovXG4gICAgbWVyZ2VQYXJhbXMgOiBmdW5jdGlvbiAoZGVzdCwgc291cmNlLCByZXBsYWNlKSB7XG4gICAgICAgIGlmICghZGVzdCB8fCAhc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXBsYWNlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBwYXJhbSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbcGFyYW1dID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0Lmhhc093blByb3BlcnR5KHBhcmFtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXJnZVBhcmFtcyhkZXN0W3BhcmFtXSwgc291cmNlW3BhcmFtXSwgcmVwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0W3BhcmFtXSA9IHNvdXJjZVtwYXJhbV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdC5oYXNPd25Qcm9wZXJ0eShwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtwYXJhbV0gPSBzb3VyY2VbcGFyYW1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtwYXJhbV0gPSBzb3VyY2VbcGFyYW1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXRpbHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Utils.js\n");

/***/ }),

/***/ "./src/Common/Utils/AutoLoadConfig.js":
/*!********************************************!*\
  !*** ./src/Common/Utils/AutoLoadConfig.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! geoportal-access-lib */ \"./node_modules/geoportal-access-lib/src/Gp.js\");\n\n\n(function () {\n  var scripts = document.getElementsByTagName(\"script\");\n  var key = scripts[scripts.length - 1].getAttribute(\"data-key\"); // in case of several keys\n\n  if (key) {\n    var splitKeys = key.split(/;|,|\\|/);\n\n    if (key && splitKeys.length > 1) {\n      var keys = [];\n\n      for (var i = 0; i < splitKeys.length; i++) {\n        keys.push(splitKeys[i]);\n      }\n\n      key = keys;\n    }\n  }\n\n  var url = scripts[scripts.length - 1].getAttribute(\"data-url\");\n  var timeout = scripts[scripts.length - 1].getAttribute(\"data-timeout\"); // callback\n\n  var success = function success() {// Pas de messages en mode prod\n    // console.log(\"GetConfig success!\");\n  }; // callback\n\n\n  var error = function error(e) {\n    throw new Error(\"Configuration load failed : \" + e.message);\n  };\n\n  if (!key && !url) {\n    // pas de message d'information !\n    // console.log(\"WARNING : parameters missing 'data-key' and 'data-url', the loading of configuration can not be done !\");\n    return;\n  }\n\n  var options = {\n    apiKey: key,\n    onSuccess: success,\n    onFailure: error\n  };\n\n  if (url) {\n    options.serverUrl = url;\n    options.callbackSuffix = \"\";\n  }\n\n  if (timeout) {\n    options.timeOut = timeout;\n  } // test d'existance de la varibale globale Gp.Config\n\n\n  if (!geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Config) {\n    // appel du service\n    geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Services.getConfig(options);\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vVXRpbHMvQXV0b0xvYWRDb25maWcuanM/ODA0YyJdLCJuYW1lcyI6WyJzY3JpcHRzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImtleSIsImxlbmd0aCIsImdldEF0dHJpYnV0ZSIsInNwbGl0S2V5cyIsInNwbGl0Iiwia2V5cyIsImkiLCJwdXNoIiwidXJsIiwidGltZW91dCIsInN1Y2Nlc3MiLCJlcnJvciIsImUiLCJFcnJvciIsIm1lc3NhZ2UiLCJvcHRpb25zIiwiYXBpS2V5Iiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwic2VydmVyVXJsIiwiY2FsbGJhY2tTdWZmaXgiLCJ0aW1lT3V0IiwiR3AiLCJDb25maWciLCJTZXJ2aWNlcyIsImdldENvbmZpZyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOztBQUVBLENBQUMsWUFBWTtBQUNULE1BQUlBLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxvQkFBVCxDQUE4QixRQUE5QixDQUFkO0FBRUEsTUFBSUMsR0FBRyxHQUFHSCxPQUFPLENBQUNBLE9BQU8sQ0FBQ0ksTUFBUixHQUFpQixDQUFsQixDQUFQLENBQTRCQyxZQUE1QixDQUF5QyxVQUF6QyxDQUFWLENBSFMsQ0FJVDs7QUFDQSxNQUFJRixHQUFKLEVBQVM7QUFDTCxRQUFJRyxTQUFTLEdBQUdILEdBQUcsQ0FBQ0ksS0FBSixDQUFVLFFBQVYsQ0FBaEI7O0FBQ0EsUUFBSUosR0FBRyxJQUFJRyxTQUFTLENBQUNGLE1BQVYsR0FBbUIsQ0FBOUIsRUFBaUM7QUFDN0IsVUFBSUksSUFBSSxHQUFHLEVBQVg7O0FBQ0EsV0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxTQUFTLENBQUNGLE1BQTlCLEVBQXNDSyxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDRCxZQUFJLENBQUNFLElBQUwsQ0FBVUosU0FBUyxDQUFDRyxDQUFELENBQW5CO0FBQ0g7O0FBQ0ROLFNBQUcsR0FBR0ssSUFBTjtBQUNIO0FBQ0o7O0FBQ0QsTUFBSUcsR0FBRyxHQUFHWCxPQUFPLENBQUNBLE9BQU8sQ0FBQ0ksTUFBUixHQUFpQixDQUFsQixDQUFQLENBQTRCQyxZQUE1QixDQUF5QyxVQUF6QyxDQUFWO0FBQ0EsTUFBSU8sT0FBTyxHQUFHWixPQUFPLENBQUNBLE9BQU8sQ0FBQ0ksTUFBUixHQUFpQixDQUFsQixDQUFQLENBQTRCQyxZQUE1QixDQUF5QyxjQUF6QyxDQUFkLENBaEJTLENBa0JUOztBQUNBLE1BQUlRLE9BQU8sR0FBRyxTQUFWQSxPQUFVLEdBQVksQ0FDdEI7QUFDQTtBQUNILEdBSEQsQ0FuQlMsQ0F3QlQ7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQVVDLENBQVYsRUFBYTtBQUNyQixVQUFNLElBQUlDLEtBQUosQ0FBVSxpQ0FBaUNELENBQUMsQ0FBQ0UsT0FBN0MsQ0FBTjtBQUNILEdBRkQ7O0FBSUEsTUFBSSxDQUFDZCxHQUFELElBQVEsQ0FBQ1EsR0FBYixFQUFrQjtBQUNkO0FBQ0E7QUFDQTtBQUNIOztBQUVELE1BQUlPLE9BQU8sR0FBRztBQUNWQyxVQUFNLEVBQUdoQixHQURDO0FBRVZpQixhQUFTLEVBQUdQLE9BRkY7QUFHVlEsYUFBUyxFQUFHUDtBQUhGLEdBQWQ7O0FBTUEsTUFBSUgsR0FBSixFQUFTO0FBQ0xPLFdBQU8sQ0FBQ0ksU0FBUixHQUFvQlgsR0FBcEI7QUFDQU8sV0FBTyxDQUFDSyxjQUFSLEdBQXlCLEVBQXpCO0FBQ0g7O0FBRUQsTUFBSVgsT0FBSixFQUFhO0FBQ1RNLFdBQU8sQ0FBQ00sT0FBUixHQUFrQlosT0FBbEI7QUFDSCxHQWhEUSxDQWtEVDs7O0FBQ0EsTUFBSSxDQUFDYSw0REFBRSxDQUFDQyxNQUFSLEVBQWdCO0FBQ1o7QUFDQUQsZ0VBQUUsQ0FBQ0UsUUFBSCxDQUFZQyxTQUFaLENBQXNCVixPQUF0QjtBQUNIO0FBQ0osQ0F2REQiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL0F1dG9Mb2FkQ29uZmlnLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdwIGZyb20gXCJnZW9wb3J0YWwtYWNjZXNzLWxpYlwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cbiAgICB2YXIga2V5ID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLmdldEF0dHJpYnV0ZShcImRhdGEta2V5XCIpO1xuICAgIC8vIGluIGNhc2Ugb2Ygc2V2ZXJhbCBrZXlzXG4gICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgc3BsaXRLZXlzID0ga2V5LnNwbGl0KC87fCx8XFx8Lyk7XG4gICAgICAgIGlmIChrZXkgJiYgc3BsaXRLZXlzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGl0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChzcGxpdEtleXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0ga2V5cztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgdXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLmdldEF0dHJpYnV0ZShcImRhdGEtdXJsXCIpO1xuICAgIHZhciB0aW1lb3V0ID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLmdldEF0dHJpYnV0ZShcImRhdGEtdGltZW91dFwiKTtcblxuICAgIC8vIGNhbGxiYWNrXG4gICAgdmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFBhcyBkZSBtZXNzYWdlcyBlbiBtb2RlIHByb2RcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJHZXRDb25maWcgc3VjY2VzcyFcIik7XG4gICAgfTtcblxuICAgIC8vIGNhbGxiYWNrXG4gICAgdmFyIGVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uZmlndXJhdGlvbiBsb2FkIGZhaWxlZCA6IFwiICsgZS5tZXNzYWdlKTtcbiAgICB9O1xuXG4gICAgaWYgKCFrZXkgJiYgIXVybCkge1xuICAgICAgICAvLyBwYXMgZGUgbWVzc2FnZSBkJ2luZm9ybWF0aW9uICFcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJXQVJOSU5HIDogcGFyYW1ldGVycyBtaXNzaW5nICdkYXRhLWtleScgYW5kICdkYXRhLXVybCcsIHRoZSBsb2FkaW5nIG9mIGNvbmZpZ3VyYXRpb24gY2FuIG5vdCBiZSBkb25lICFcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgYXBpS2V5IDoga2V5LFxuICAgICAgICBvblN1Y2Nlc3MgOiBzdWNjZXNzLFxuICAgICAgICBvbkZhaWx1cmUgOiBlcnJvclxuICAgIH07XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICAgIG9wdGlvbnMuc2VydmVyVXJsID0gdXJsO1xuICAgICAgICBvcHRpb25zLmNhbGxiYWNrU3VmZml4ID0gXCJcIjtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCkge1xuICAgICAgICBvcHRpb25zLnRpbWVPdXQgPSB0aW1lb3V0O1xuICAgIH1cblxuICAgIC8vIHRlc3QgZCdleGlzdGFuY2UgZGUgbGEgdmFyaWJhbGUgZ2xvYmFsZSBHcC5Db25maWdcbiAgICBpZiAoIUdwLkNvbmZpZykge1xuICAgICAgICAvLyBhcHBlbCBkdSBzZXJ2aWNlXG4gICAgICAgIEdwLlNlcnZpY2VzLmdldENvbmZpZyhvcHRpb25zKTtcbiAgICB9XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Common/Utils/AutoLoadConfig.js\n");

/***/ }),

/***/ "./src/Common/Utils/CheckRightManagement.js":
/*!**************************************************!*\
  !*** ./src/Common/Utils/CheckRightManagement.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config */ \"./src/Common/Utils/Config.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  /**\n   * Contrôle des droits sur les ressources.\n   *\n   * @param {Object} options - liste des options\n   * @param {String} options.key - clef API\n   * @param {Array} options.resources - liste des ressources\n   * @param {Array} options.services - liste des services\n   * @returns {Object} rightManagement - undefined ou {\n   *       key : \"\",\n   *       service-1 : [resource-1, resource-2],\n   *       service-2 : [resource-1, resource-2]\n   * }\n   */\n  check: function check(options) {\n    // logger\n    var logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"checkrightmanagement\"); // si aucune option n'est renseignée...\n\n    if (!options) {\n      // message orienté pour le developpeur !\n      logger.error(\"WARNING : \" + \"no parameter specified !\");\n      return;\n    } // les options\n\n\n    var _key = options.key;\n\n    var _resources = options.resources || [];\n\n    var _services = options.services || []; // si aucune information sur les ressources,\n    // il est impossible de controler quelquechose !!!\n\n\n    if (!_resources || _resources.length === 0) {\n      // message orienté pour le developpeur !\n      logger.error(\"WARNING : \" + \"no parameter 'resources' specified !\");\n      return;\n    } // si aucune information sur les services,\n    // il est impossible de controler quelquechose !!!\n\n\n    if (!_services || _services.length === 0) {\n      // message orienté pour le developpeur !\n      logger.error(\"WARNING : \" + \"no parameter 'services' specified !\");\n      return;\n    } // les ressources controlées :\n    // Ex.\n    // {\n    //   \"Itineraire\"     : [\"Pieton\", \"Voiture\"],\n    //   \"Geocode\"        : [\"PositionOfInterest\", \"StreetAddress\", \"CadastralParcel\", \"Administratif\"],\n    //   \"AutoCompletion\" : [\"PositionOfInterest\", \"StreetAddress\", \"CadastralParcel\", \"Administratif\"],\n    //   \"Elevation\"      : [\"SERVICE_CALCUL_ALTIMETRIQUE_RSC\"]\n    // }\n\n\n    var _rightManagement = {}; // la clef API n'est pas renseignée\n\n    if (!_key) {\n      // on verifie si l'autoconfiguration est disponible\n      if (!_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n        // si l'autoconfiguration n'est pas chargée,\n        // aucune vérification des droits est possible...\n        logger.warn(\"WARNING : \" + \"The 'apiKey' parameter is missing, \" + \"and the contract key configuration has not been loaded, \" + \"so impossible to check yours rights !\");\n        return;\n      } else {\n        // si l'autoconfiguration est chargée,\n        // on recupere la clef API, et on en profitera ensuite pour controler\n        // les droits sur les ressources.\n        // FIXME par defaut, on recupere toujours la première...\n        _key = Object.keys(_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].configuration.generalOptions.apiKeys)[0];\n        logger.log(_key);\n      }\n    } // la clef API est renseignée ou recuperée de l'autoconfiguration\n\n\n    if (_key) {\n      // on verifie si l'autoconfiguration est disponible\n      if (!_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n        // si l'autoconfiguration n'est pas chargée,\n        // il est toujours possible de requeter le service avec une clef API,\n        // mais les droits sur les ressources ne sont pas garantis, on risque\n        // d'obtenir des erreurs 403 forbidden...\n        // la responsabilité revient à l'utilisateur (message d'information)...\n        logger.warn(\"WARNING : \" + \"the contract key configuration has not been loaded, \" + \"so be carefull !\"); // les ressouces non controlées\n\n        var _noRightManagement = {};\n\n        for (var i = 0; i < _services.length; i++) {\n          var service = _services[i];\n          _noRightManagement[service] = [];\n\n          for (var j = 0; j < _resources.length; j++) {\n            var resource = _resources[j];\n\n            _noRightManagement[service].push(resource);\n          }\n        } // on ajoute la clef\n\n\n        _noRightManagement.key = _key;\n        logger.log(\"right management not checked\", _noRightManagement);\n        return _noRightManagement;\n      } else {\n        // si l'autoconf est chargée,\n        // on verifie la correspondance entre la clef et l'autoconfiguration,\n        // on previent l'utilisateur (message d'information) s'il n'a\n        // pas de droits sur certaines ressources ...\n        // doit on ecarter les ressources sans droit ?\n        // oui, si possible avec un message d'information pour l'utilisateur...\n        for (var k = 0; k < _resources.length; k++) {\n          var _resource = _resources[k];\n\n          for (var l = 0; l < _services.length; l++) {\n            var _service = _services[l];\n            var params = _Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getServiceParams(_resource, _service, _key);\n\n            if (!params || Object.keys(params).length === 0) {\n              logger.warn(\"WARNING : \" + \"The contract key configuration has no rights to load this geoportal \" + \"resource (\" + _resource + \") \" + \"for this service (\" + _service + \") \");\n              continue;\n            }\n\n            if (!_rightManagement[_service]) {\n              _rightManagement[_service] = [];\n            }\n\n            _rightManagement[_service].push(_resource);\n          }\n        }\n\n        if (!_rightManagement || Object.keys(_rightManagement).length === 0) {\n          logger.warn(\"WARNING : \" + \"The contract key configuration has been loaded, \" + \"and the 'apiKey' parameter has been set, \" + \"but, there is a problem on the mapping between the contract and the key !\");\n          return;\n        } // on ajoute la clef\n\n\n        _rightManagement.key = _key;\n        logger.log(\"right management checked\", _rightManagement);\n        return _rightManagement;\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Utils/CheckRightManagement.js\n");

/***/ }),

/***/ "./src/Common/Utils/ColorUtils.js":
/*!****************************************!*\
  !*** ./src/Common/Utils/ColorUtils.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n* @module ColorUtils\n* @alias Gp.ColorUtils\n* @description\n* ...\n*\n* @example\n* rgbaToHex();\n* hexToRgba();\n*/\nvar ColorUtils = {\n  /**\n   * Converts rgba String to #RRGGBBAA\n   * (Code adapted from : https://gist.github.com/mstssk/afda4ce9e5c335fd79cd)\n   *\n   * @param {String} rgba - A color of RGB or RGBA format.\n   * @returns {Object} hex and opacity formated values\n   */\n  rgbaToHex: function rgbaToHex(rgba) {\n    // number to hex conversion\n    function hex(number) {\n      if (number > 255) {\n        throw new Error(\"'\" + number + \"'' is greater than 255(0xff);\");\n      }\n\n      var str = Number(number).toString(16);\n      return (\"0\" + str).slice(-2);\n    }\n\n    var regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(0?.?\\d+)\\s*)?\\)/;\n    var parsed = regex.exec(rgba);\n\n    if (!parsed) {\n      throw new Error(\"Invalid format: \" + rgba);\n    }\n\n    var red = parsed[1];\n    var green = parsed[2];\n    var blue = parsed[3];\n    var alpha = parsed[4];\n    var elems = [hex(red), hex(green), hex(blue)];\n    var result = {};\n    result.hex = \"#\" + elems.join(\"\");\n\n    if (alpha) {\n      // elems.push(hex(alpha));\n      result.opacity = parseFloat(alpha);\n    }\n\n    return result;\n  },\n\n  /**\n   * Converts hex color and opacity value to rgba String.\n   * (Code adapted from : http://stackoverflow.com/a/5624139)\n   * @param {String} hex - A color value on RGB format (hexa).\n   * @param {Number} opacity - A opacity value.\n   * @returns {String} A color of RGB or RGBA format\n   */\n  hexToRgba: function hexToRgba(hex, opacity) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n    if (!hex) {\n      throw new Error(\"Invalid format\");\n    }\n\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n    var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    rgb = rgb ? {\n      r: parseInt(rgb[1], 16),\n      g: parseInt(rgb[2], 16),\n      b: parseInt(rgb[3], 16)\n    } : null;\n    var result = rgb ? \"rgba(\" + rgb.r + \", \" + rgb.g + \", \" + rgb.b + \", \" + opacity + \")\" : null;\n    return result;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (ColorUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vVXRpbHMvQ29sb3JVdGlscy5qcz8zYjhkIl0sIm5hbWVzIjpbIkNvbG9yVXRpbHMiLCJyZ2JhVG9IZXgiLCJyZ2JhIiwiaGV4IiwibnVtYmVyIiwiRXJyb3IiLCJzdHIiLCJOdW1iZXIiLCJ0b1N0cmluZyIsInNsaWNlIiwicmVnZXgiLCJwYXJzZWQiLCJleGVjIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYWxwaGEiLCJlbGVtcyIsInJlc3VsdCIsImpvaW4iLCJvcGFjaXR5IiwicGFyc2VGbG9hdCIsImhleFRvUmdiYSIsInNob3J0aGFuZFJlZ2V4IiwicmVwbGFjZSIsIm0iLCJyIiwiZyIsImIiLCJyZ2IiLCJwYXJzZUludCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLFVBQVUsR0FBRztBQUNiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLFdBQVMsRUFBRyxtQkFBVUMsSUFBVixFQUFnQjtBQUN4QjtBQUNBLGFBQVNDLEdBQVQsQ0FBY0MsTUFBZCxFQUFzQjtBQUNsQixVQUFJQSxNQUFNLEdBQUcsR0FBYixFQUFrQjtBQUNkLGNBQU0sSUFBSUMsS0FBSixDQUFVLE1BQU1ELE1BQU4sR0FBZSwrQkFBekIsQ0FBTjtBQUNIOztBQUNELFVBQUlFLEdBQUcsR0FBR0MsTUFBTSxDQUFDSCxNQUFELENBQU4sQ0FBZUksUUFBZixDQUF3QixFQUF4QixDQUFWO0FBQ0EsYUFBTyxDQUFDLE1BQU1GLEdBQVAsRUFBWUcsS0FBWixDQUFrQixDQUFDLENBQW5CLENBQVA7QUFDSDs7QUFDRCxRQUFJQyxLQUFLLEdBQUcsbUVBQVo7QUFDQSxRQUFJQyxNQUFNLEdBQUdELEtBQUssQ0FBQ0UsSUFBTixDQUFXVixJQUFYLENBQWI7O0FBQ0EsUUFBSSxDQUFDUyxNQUFMLEVBQWE7QUFDVCxZQUFNLElBQUlOLEtBQUosQ0FBVSxxQkFBcUJILElBQS9CLENBQU47QUFDSDs7QUFDRCxRQUFJVyxHQUFHLEdBQUdGLE1BQU0sQ0FBQyxDQUFELENBQWhCO0FBQ0EsUUFBSUcsS0FBSyxHQUFHSCxNQUFNLENBQUMsQ0FBRCxDQUFsQjtBQUNBLFFBQUlJLElBQUksR0FBR0osTUFBTSxDQUFDLENBQUQsQ0FBakI7QUFDQSxRQUFJSyxLQUFLLEdBQUdMLE1BQU0sQ0FBQyxDQUFELENBQWxCO0FBQ0EsUUFBSU0sS0FBSyxHQUFHLENBQUNkLEdBQUcsQ0FBQ1UsR0FBRCxDQUFKLEVBQVdWLEdBQUcsQ0FBQ1csS0FBRCxDQUFkLEVBQXVCWCxHQUFHLENBQUNZLElBQUQsQ0FBMUIsQ0FBWjtBQUNBLFFBQUlHLE1BQU0sR0FBRyxFQUFiO0FBQ0FBLFVBQU0sQ0FBQ2YsR0FBUCxHQUFhLE1BQU1jLEtBQUssQ0FBQ0UsSUFBTixDQUFXLEVBQVgsQ0FBbkI7O0FBQ0EsUUFBSUgsS0FBSixFQUFXO0FBQ1A7QUFDQUUsWUFBTSxDQUFDRSxPQUFQLEdBQWlCQyxVQUFVLENBQUNMLEtBQUQsQ0FBM0I7QUFDSDs7QUFDRCxXQUFPRSxNQUFQO0FBQ0gsR0FsQ1k7O0FBb0NiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lJLFdBQVMsRUFBRyxtQkFBVW5CLEdBQVYsRUFBZWlCLE9BQWYsRUFBd0I7QUFDaEM7QUFDQSxRQUFJRyxjQUFjLEdBQUcsa0NBQXJCOztBQUNBLFFBQUksQ0FBQ3BCLEdBQUwsRUFBVTtBQUNOLFlBQU0sSUFBSUUsS0FBSixDQUFVLGdCQUFWLENBQU47QUFDSDs7QUFDREYsT0FBRyxHQUFHQSxHQUFHLENBQUNxQixPQUFKLENBQVlELGNBQVosRUFBNEIsVUFBVUUsQ0FBVixFQUFhQyxDQUFiLEVBQWdCQyxDQUFoQixFQUFtQkMsQ0FBbkIsRUFBc0I7QUFDcEQsYUFBT0YsQ0FBQyxHQUFHQSxDQUFKLEdBQVFDLENBQVIsR0FBWUEsQ0FBWixHQUFnQkMsQ0FBaEIsR0FBb0JBLENBQTNCO0FBQ0gsS0FGSyxDQUFOO0FBSUEsUUFBSUMsR0FBRyxHQUFHLDRDQUE0Q2pCLElBQTVDLENBQWlEVCxHQUFqRCxDQUFWO0FBQ0EwQixPQUFHLEdBQUdBLEdBQUcsR0FBRztBQUNSSCxPQUFDLEVBQUdJLFFBQVEsQ0FBQ0QsR0FBRyxDQUFDLENBQUQsQ0FBSixFQUFTLEVBQVQsQ0FESjtBQUVSRixPQUFDLEVBQUdHLFFBQVEsQ0FBQ0QsR0FBRyxDQUFDLENBQUQsQ0FBSixFQUFTLEVBQVQsQ0FGSjtBQUdSRCxPQUFDLEVBQUdFLFFBQVEsQ0FBQ0QsR0FBRyxDQUFDLENBQUQsQ0FBSixFQUFTLEVBQVQ7QUFISixLQUFILEdBSUwsSUFKSjtBQUtBLFFBQUlYLE1BQU0sR0FBR1csR0FBRyxHQUFHLFVBQVVBLEdBQUcsQ0FBQ0gsQ0FBZCxHQUFrQixJQUFsQixHQUF5QkcsR0FBRyxDQUFDRixDQUE3QixHQUFpQyxJQUFqQyxHQUF3Q0UsR0FBRyxDQUFDRCxDQUE1QyxHQUFnRCxJQUFoRCxHQUF1RFIsT0FBdkQsR0FBaUUsR0FBcEUsR0FBMEUsSUFBMUY7QUFDQSxXQUFPRixNQUFQO0FBQ0g7QUE3RFksQ0FBakI7QUFnRWVsQix5RUFBZiIsImZpbGUiOiIuL3NyYy9Db21tb24vVXRpbHMvQ29sb3JVdGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBAbW9kdWxlIENvbG9yVXRpbHNcbiogQGFsaWFzIEdwLkNvbG9yVXRpbHNcbiogQGRlc2NyaXB0aW9uXG4qIC4uLlxuKlxuKiBAZXhhbXBsZVxuKiByZ2JhVG9IZXgoKTtcbiogaGV4VG9SZ2JhKCk7XG4qL1xudmFyIENvbG9yVXRpbHMgPSB7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgcmdiYSBTdHJpbmcgdG8gI1JSR0dCQkFBXG4gICAgICogKENvZGUgYWRhcHRlZCBmcm9tIDogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbXN0c3NrL2FmZGE0Y2U5ZTVjMzM1ZmQ3OWNkKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHJnYmEgLSBBIGNvbG9yIG9mIFJHQiBvciBSR0JBIGZvcm1hdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBoZXggYW5kIG9wYWNpdHkgZm9ybWF0ZWQgdmFsdWVzXG4gICAgICovXG4gICAgcmdiYVRvSGV4IDogZnVuY3Rpb24gKHJnYmEpIHtcbiAgICAgICAgLy8gbnVtYmVyIHRvIGhleCBjb252ZXJzaW9uXG4gICAgICAgIGZ1bmN0aW9uIGhleCAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID4gMjU1KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ1wiICsgbnVtYmVyICsgXCInJyBpcyBncmVhdGVyIHRoYW4gMjU1KDB4ZmYpO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdHIgPSBOdW1iZXIobnVtYmVyKS50b1N0cmluZygxNik7XG4gICAgICAgICAgICByZXR1cm4gKFwiMFwiICsgc3RyKS5zbGljZSgtMik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZ2V4ID0gL3JnYmE/XFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyooPzosXFxzKigwPy4/XFxkKylcXHMqKT9cXCkvO1xuICAgICAgICB2YXIgcGFyc2VkID0gcmVnZXguZXhlYyhyZ2JhKTtcbiAgICAgICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZm9ybWF0OiBcIiArIHJnYmEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWQgPSBwYXJzZWRbMV07XG4gICAgICAgIHZhciBncmVlbiA9IHBhcnNlZFsyXTtcbiAgICAgICAgdmFyIGJsdWUgPSBwYXJzZWRbM107XG4gICAgICAgIHZhciBhbHBoYSA9IHBhcnNlZFs0XTtcbiAgICAgICAgdmFyIGVsZW1zID0gW2hleChyZWQpLCBoZXgoZ3JlZW4pLCBoZXgoYmx1ZSldO1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIHJlc3VsdC5oZXggPSBcIiNcIiArIGVsZW1zLmpvaW4oXCJcIik7XG4gICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgLy8gZWxlbXMucHVzaChoZXgoYWxwaGEpKTtcbiAgICAgICAgICAgIHJlc3VsdC5vcGFjaXR5ID0gcGFyc2VGbG9hdChhbHBoYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgaGV4IGNvbG9yIGFuZCBvcGFjaXR5IHZhbHVlIHRvIHJnYmEgU3RyaW5nLlxuICAgICAqIChDb2RlIGFkYXB0ZWQgZnJvbSA6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU2MjQxMzkpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGhleCAtIEEgY29sb3IgdmFsdWUgb24gUkdCIGZvcm1hdCAoaGV4YSkuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHkgLSBBIG9wYWNpdHkgdmFsdWUuXG4gICAgICogQHJldHVybnMge1N0cmluZ30gQSBjb2xvciBvZiBSR0Igb3IgUkdCQSBmb3JtYXRcbiAgICAgKi9cbiAgICBoZXhUb1JnYmEgOiBmdW5jdGlvbiAoaGV4LCBvcGFjaXR5KSB7XG4gICAgICAgIC8vIEV4cGFuZCBzaG9ydGhhbmQgZm9ybSAoZS5nLiBcIjAzRlwiKSB0byBmdWxsIGZvcm0gKGUuZy4gXCIwMDMzRkZcIilcbiAgICAgICAgdmFyIHNob3J0aGFuZFJlZ2V4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaTtcbiAgICAgICAgaWYgKCFoZXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGhleCA9IGhleC5yZXBsYWNlKHNob3J0aGFuZFJlZ2V4LCBmdW5jdGlvbiAobSwgciwgZywgYikge1xuICAgICAgICAgICAgcmV0dXJuIHIgKyByICsgZyArIGcgKyBiICsgYjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJnYiA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xuICAgICAgICByZ2IgPSByZ2IgPyB7XG4gICAgICAgICAgICByIDogcGFyc2VJbnQocmdiWzFdLCAxNiksXG4gICAgICAgICAgICBnIDogcGFyc2VJbnQocmdiWzJdLCAxNiksXG4gICAgICAgICAgICBiIDogcGFyc2VJbnQocmdiWzNdLCAxNilcbiAgICAgICAgfSA6IG51bGw7XG4gICAgICAgIHZhciByZXN1bHQgPSByZ2IgPyBcInJnYmEoXCIgKyByZ2IuciArIFwiLCBcIiArIHJnYi5nICsgXCIsIFwiICsgcmdiLmIgKyBcIiwgXCIgKyBvcGFjaXR5ICsgXCIpXCIgOiBudWxsO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yVXRpbHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Utils/ColorUtils.js\n");

/***/ }),

/***/ "./src/Common/Utils/Config.js":
/*!************************************!*\
  !*** ./src/Common/Utils/Config.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"config\");\nvar Config = {\n  /** autoconf */\n  configuration: null,\n\n  /**\n   * Controle du chargement de l'autoconf\n   *\n   * @returns {Boolean} isConfigLoaded - True si l'autoconf a déjà été chargée, False sinon.\n   */\n  isConfigLoaded: function isConfigLoaded() {\n    var scope = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : {};\n\n    if (scope.Gp && scope.Gp.Config && Object.keys(scope.Gp.Config).length !== 0) {\n      this.configuration = scope.Gp.Config;\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Recuperation de l'identifiant d'une couche donnée\n   *\n   * @param {String} layerName - nom de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n   * @param {String} service   - nom du service (par ex. \"WMS\" ou \"WMTS\")\n   * @returns {String} layerId - identifiant de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS$GEOPORTAIL:OGC:WMTS\")\n   */\n  getLayerId: function getLayerId(layerName, service) {\n    var layerId = null; // layer\n    // key : [layerName]$[contexte]:OGC:[service]\n    // ex : \"ORTHOIMAGERY.ORTHOPHOTOS$GEOPORTAIL:OGC:WMTS\"\n    // service\n    // key : [layerName]$[contexte];[service]\n    // ex : PositionOfInterest$OGC:OPENLS;ReverseGeocode\n\n    if (this.configuration) {\n      var layers = this.configuration[\"layers\"];\n\n      for (var key in layers) {\n        if (layers.hasOwnProperty(key)) {\n          var parts = key.split(\"$\");\n\n          if (layerName === parts[0]) {\n            if (parts[1]) {\n              var servicePartsLayer = parts[1].split(\":\");\n              var servicePartsService = parts[1].split(\";\");\n\n              if (servicePartsService[1] === service) {\n                layerId = key;\n                break;\n              }\n\n              if (servicePartsLayer[2] === service) {\n                layerId = key;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!layerId) {\n      logger.error(\"ERROR layer id (layer name: \" + layerName + \" / service: \" + service + \") was not found !?\");\n    }\n\n    return layerId;\n  },\n\n  /**\n   * Récupération des paramètres nécessaires à l'affichage d'une couche WMS ou WMTS\n   *\n   * @param {String} layerName - nom de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n   * @param {String} service   - nom du service (par ex. \"WMS\" ou \"WMTS\")\n   * @param {String} [apiKey]  - Clé de contrat API\n   * @returns {Object} params  - paramètres du service (WMS ou WMTS) pour la couche donnée\n   * @returns {String} params.url        - Url du service à requêter pour afficher la couche\n   * @returns {String} params.version    - Version du service\n   * @returns {String} params.styles     - Style par défaut de la couche\n   * @returns {String} params.format     - Format par défaut de la couche\n   * @returns {String} params.projection - Projection par défaut de la couche\n   * @returns {Number} params.minScale   - Dénominateur d'échelle minimum de la couche\n   * @returns {Number} params.maxScale   - Dénominateur d'échelle maximum de la couche\n   * @returns {Gp.BBox} params.extent    - Etendue de la couche, dans la projection de la couche\n   * @returns {Array} params.legends     - Tableau des légendes associées à la couche\n   * @returns {Array} params.metadata    - Tableau des métadonnées associées à la couche\n   * @returns {Array} params.originators - Tableau des originators associés à la couche\n   * @returns {Array} params.title       - Nom de la resource, lisible par un humain.\n   * @returns {Array} params.description - Url de l'image d'aperçu rapide de la ressource.\n   * @returns {Array} params.quicklookUrl- Tableau des originators associés à la couche\n   * @returns {String} params.[TMSLink]          - Identifiant de la pyramide (TMS), dans le cas d'une couche WMTS\n   * @returns {Gp.Point} params.[matrixOrigin]   - Origine de la matrice (top left corner), dans le cas d'une couche WMTS\n   * @returns {Array} params.[nativeResolutions] - Tableau regroupant les résolutions de chaque niveau de la matrice, dans le cas d'une couche WMTS\n   * @returns {Array} params.[matrixIds]         - Tableau regroupant les identifiants de chaque niveau de la matrice, dans le cas d'une couche WMTS\n   */\n  getLayerParams: function getLayerParams(layerName, service, apiKey) {\n    var params = {};\n\n    if (this.configuration) {\n      // récupération de l'identifiant complet de la couche.\n      var layerId = this.getLayerId(layerName, service);\n\n      if (layerId) {\n        // récupération de l'objet de configuration de la couche\n        var layerConf = this.configuration.layers[layerId]; // controle de la clef\n\n        var key = layerConf.apiKeys[0];\n\n        if (apiKey) {\n          if (apiKey !== key) {\n            logger.error(\"ERROR different keys (\" + apiKey + \" !== \" + key + \") !?\");\n            return;\n          }\n        }\n\n        apiKey = apiKey || key;\n        params.key = apiKey; // récupération des paramètres du service\n\n        params.url = layerConf.getServerUrl(apiKey);\n        params.version = layerConf.getServiceParams().version;\n        params.styles = layerConf.getDefaultStyle();\n        params.format = layerConf.getDefaultFormat();\n        params.projection = layerConf.getDefaultProjection(); // récupération des infos de la couche\n\n        params.minScale = layerConf.getMinScaleDenominator();\n        params.maxScale = layerConf.getMaxScaleDenominator();\n        params.extent = layerConf.getBBOX();\n        params.legends = layerConf.getLegends();\n        params.metadata = layerConf.getMetadata();\n        params.originators = layerConf.getOriginators();\n        params.title = layerConf.getTitle();\n        params.description = layerConf.getDescription();\n        params.quicklookUrl = layerConf.getQuicklookUrl(); // WMTS : récupération des tileMatrixSetLimits\n\n        if (layerConf.wmtsOptions) {\n          params.tileMatrixSetLimits = layerConf.wmtsOptions.tileMatrixSetLimits;\n        } // WMTS : récupération des paramètres de la pyramide (TMS)\n\n\n        var TMSLink = layerConf.getTMSID();\n\n        if (TMSLink) {\n          params.TMSLink = TMSLink;\n          var tmsConf = this.configuration.getTMSConf(TMSLink); // Get matrix origin : Gp.Point = Object{x:Float, y:Float}\n\n          params.matrixOrigin = tmsConf.getTopLeftCorner();\n          params.nativeResolutions = tmsConf.nativeResolutions;\n          params.matrixIds = tmsConf.matrixIds;\n          params.tileMatrices = tmsConf.tileMatrices;\n        }\n      }\n    }\n\n    return params;\n  },\n\n  /**\n   * Recuperation des parametres d'un service\n   *\n   * @param {String} [resource] - \"PositionOfInterest\", \"StreetAddress\", \"Voiture\", \"Pieton\", ...\n   * @param {String} [service] - Geocode, Itineraire, ...\n   * @param {String} [apiKey]  - Clé de contrat API\n   * @returns {Object} params - paramètres de la ressource\n   * @returns {String} params. -\n   * @returns {String} params. -\n   * @returns {String} params. -\n   */\n  getServiceParams: function getServiceParams(resource, service, apiKey) {\n    var params = {};\n\n    if (this.configuration) {\n      // récupération de l'identifiant complet de la couche.\n      var layerId = this.getLayerId(resource, service);\n\n      if (layerId) {\n        // récupération de l'objet de configuration de la couche\n        var layerConf = this.configuration.layers[layerId]; // controle de la clef\n\n        var key = layerConf.apiKeys[0];\n\n        if (apiKey) {\n          if (apiKey !== key) {\n            return;\n          }\n        }\n\n        apiKey = apiKey || key;\n        params.key = apiKey; // récupération des paramètres du service\n\n        params.url = layerConf.getServerUrl(apiKey);\n        params.version = layerConf.getServiceParams().version; // récupération des infos de la couche\n\n        params.extent = layerConf.getBBOX();\n        params.title = layerConf.getTitle();\n        params.description = layerConf.getDescription();\n      }\n    }\n\n    return params;\n  },\n\n  /**\n   * Resolution en geographique\n   *\n   * @returns {Array} resolutions\n   */\n  getResolutions: function getResolutions() {\n    var resolutions = [];\n\n    if (this.configuration) {\n      resolutions = this.configuration[\"generalOptions\"][\"wgs84Resolutions\"];\n    }\n\n    return resolutions;\n  },\n\n  /**\n   * Recuperation des parametres TMS de la configuration\n   * @param {String} tmsName - tile matrix set name\n   *\n   * @returns {Object} tile matrix set\n   */\n  getTileMatrix: function getTileMatrix(tmsName) {\n    var tms = {};\n\n    if (this.configuration) {\n      if (tmsName) {\n        tms = this.configuration[\"tileMatrixSets\"][tmsName.toUpperCase()];\n      }\n    }\n\n    return tms;\n  },\n\n  /**\n   * Récupération des contraintes générales d'une couche donnée : extent, minScale, maxScale, projection\n   *\n   * @param {String} layerId - identifiant de la couche\n   * @returns {Object} params - contraintes de la couche\n   * @returns {String} params.projection - Projection par défaut de la couche\n   * @returns {Number} params.minScale   - Dénominateur d'échelle minimum de la couche\n   * @returns {Number} params.maxScale   - Dénominateur d'échelle maximum de la couche\n   * @returns {Gp.BBox} params.extent    - Etendue de la couche, dans la projection de la couche\n   */\n  getGlobalConstraints: function getGlobalConstraints(layerId) {\n    var params = {};\n\n    if (layerId) {\n      // récupération de l'objet de configuration de la couche\n      var layerConf = this.configuration.layers[layerId];\n      params.projection = layerConf.getDefaultProjection();\n      params.minScale = layerConf.getMinScaleDenominator();\n      params.maxScale = layerConf.getMaxScaleDenominator();\n      params.extent = layerConf.getBBOX();\n    }\n\n    return params;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Config);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Utils/Config.js\n");

/***/ }),

/***/ "./src/Common/Utils/LayerUtils.js":
/*!****************************************!*\
  !*** ./src/Common/Utils/LayerUtils.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n* @module LayerUtils\n* @alias Gp.LayerUtils\n* @description\n* ...\n*\n* @example\n* getZoomLevelFromScaleDenominator();\n* getAttributions();\n* intersects();\n*/\nvar LayerUtils = {\n  /**\n   * Obtenir le ZoomLevel à partir du ScaleDenominator\n   * @param {Number} scaleDenominator - the scale denominator\n   * @param {String} crs - the crs\n   *\n   * @returns {Integer} zoom level\n   */\n  getZoomLevelFromScaleDenominator: function getZoomLevelFromScaleDenominator(scaleDenominator, crs) {\n    // ------------------------------------------------- //\n    // Code issu de l'API Geoportal/Catalogue/Config.js  //\n    // ------------------------------------------------- //\n    //     var configuration = Gp.Config;\n    //     var general = configuration.generalOptions;\n    //     var layers  = configuration.layersContext;\n    //\n    //     for (var tms in general.tileMatrixSets) {\n    //         var tileMatrixSet = general.tileMatrixSets[tms];\n    //         // IGN's WMTS bug : epsg:nnnn instead of EPSG:nnnn\n    //         var crs = tileMatrixSet.supportedCRS = tileMatrixSet.supportedCRS.replace(/epsg/,\"EPSG\");\n    //\n    //         if (!Geoportal.Catalogue.CRSRESOLUTIONS.hasOwnProperty(crs)) {\n    //             var p= new OpenLayers.Projection(crs);\n    //             Geoportal.Catalogue.CRSRESOLUTIONS[crs]= [];\n    //             var matrixIds= tileMatrixSet.matrixIds;\n    //             for (var i= 0, li= matrixIds.length; i<li; ++i) {\n    //                 var mid= matrixIds[i];\n    //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].push(\n    //                     0.00028*mid.scaleDenominator\n    //                     /(OpenLayers.METERS_PER_INCH*OpenLayers.INCHES_PER_UNIT[p.getUnits()]));\n    //                     mid.supportedCRS= mid.supportedCRS.replace(/epsg/,\"EPSG\");\n    //                 }\n    //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].sort(function (a,b){ return b-a; });\n    //             }\n    //         }\n    //         var llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84'];\n    //         if (!llR) {\n    //             llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84']= general.resolutions.slice();\n    //         }\n    //         var wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857'];\n    //         if (!wmR) {//FIXME : should never happened !!\n    //             // reproject resolutions from CRS84 to WebMercator (transform resolutions from degree/px to meter/px)\n    //             wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857']= new Array(llR.length);\n    //             for (var i= 0, len= llR.length; i<len; i++) {\n    //                 var pt= new OpenLayers.LonLat(llR[i], 0);\n    //                 pt.transform(OpenLayers.Projection.CRS84, OpenLayers.Projection.WebMercator);\n    //                 wmR[i]= pt.lon;\n    //             }\n    //         }\n    //         Geoportal.Catalogue.RESOLUTIONS= wmR;\n    //\n    //         var getResolutionsFromCRS= function(crs) {\n    //             if (OpenLayers.Projection.WebMercator.isAliasOf(crs)) {\n    //                 return wmR;\n    //             }\n    //             if (OpenLayers.Projection.CRS84.isAliasOf(crs)) {\n    //                 return llR;\n    //             }\n    //             return Geoportal.Catalogue.CRSRESOLUTIONS[crs]?Geoportal.Catalogue.CRSRESOLUTIONS[crs]:null ;\n    //         };\n    //\n    //         var retrieveZoomFromResolution= function(resolutions, resolution) {\n    //             for (var i= 0, li= resolutions.length; i<li; i++) {\n    //                 if (resolutions[i]-resolution <= resolutions[li-1]) {\n    //                     return i;\n    //                 }\n    //             }\n    //             return -1;\n    //         };\n    //\n    //         var getZoomLevelFromScaleDenominator= function(scaleDenominator,crs) {\n    //             var resolution= scaleDenominator * 0.00028;\n    //             var R= getResolutionsFromCRS(crs);\n    //             if (R) {\n    //                 return retrieveZoomFromResolution(R,resolution);\n    //             }\n    //             resolution= resolution/(OpenLayers.METERS_PER_INCH * OpenLayers.INCHES_PER_UNIT[\"degrees\"]);\n    //             return retrieveZoomFromResolution(llR,resolution);\n    //         };\n    //\n    //         var getZoomLevelFromResolution= function(resolution,crs){\n    //             var R= getResolutionsFromCRS(crs);\n    //             if (R) {\n    //                 return retrieveZoomFromResolution(R,resolution);\n    //             }\n    //             var pt0= new OpenLayers.LonLat(0, 0);\n    //             var pt1= new OpenLayers.LonLat(1, 0);\n    //             pt0.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n    //             pt1.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n    //             resolution= resolution*(Math.abs(pt1.lon-pt0.lon));\n    //             return retrieveZoomFromResolution(llR,resolution);\n    //         };\n    // par defaut, on utilise la projection WebMercator (EPSG:3857 = PM)\n    // soit la liste des resolutions natives\n    var resolutionsNatives = {};\n\n    switch (crs) {\n      case \"EPSG:2154\":\n        resolutionsNatives = {\n          0: 104579.224549894,\n          1: 52277.5323537905,\n          2: 26135.4870785954,\n          3: 13066.8913818,\n          4: 6533.2286041135,\n          5: 3266.5595244627,\n          6: 1633.2660045974,\n          7: 816.629554986,\n          8: 408.3139146768,\n          9: 204.1567415109,\n          10: 102.0783167832,\n          11: 51.0391448966,\n          12: 25.5195690743,\n          13: 12.7597836936,\n          14: 6.379891636,\n          15: 3.1899457653,\n          16: 1.5949728695,\n          17: 0.7974864315,\n          18: 0.3987432149,\n          19: 0.1993716073,\n          20: 0.0996858037,\n          21: 0.0498429018\n        };\n        break;\n\n      default:\n        resolutionsNatives = {\n          0: 156543.033928041,\n          1: 78271.51696402048,\n          2: 39135.758482010235,\n          3: 19567.87924100512,\n          4: 9783.93962050256,\n          5: 4891.96981025128,\n          6: 2445.98490512564,\n          7: 1222.99245256282,\n          8: 611.49622628141,\n          9: 305.7481131407048,\n          10: 152.8740565703525,\n          11: 76.43702828517624,\n          12: 38.21851414258813,\n          13: 19.10925707129406,\n          14: 9.554628535647032,\n          15: 4.777314267823516,\n          16: 2.388657133911758,\n          17: 1.194328566955879,\n          18: 0.5971642834779395,\n          19: 0.2985821417389697,\n          20: 0.1492910708694849,\n          21: 0.0746455354347424\n        };\n        break;\n    } // gestion des autres SRS\n    // TODO\n    // if (crs) {\n    // }\n\n\n    var resolution = scaleDenominator * 0.00028;\n\n    for (var index in resolutionsNatives) {\n      if (resolutionsNatives.hasOwnProperty(index)) {\n        if (resolutionsNatives[index] <= resolution) {\n          index = parseInt(index, 10);\n          return index;\n        }\n      }\n    }\n\n    return 0; // -1 ?\n  },\n\n  /**\n   * Get attributions list for a layer, based on current zoom and extent\n   *\n   * @param {Object} params - function params\n   * @param {Array.<Float>} params.extent - map current geographical extent (EPSG:4326) : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n   * @param {Number} params.zoom - map current zoom\n   * @param {String} params.crs - map current projection code (ex \"EPSG:2154\")\n   * @param {Boolean} params.visibility - layer visibility\n   * @param {Gp.Services.Config.Originator} params.originators - resource originators (from Gp.Config.layers[].originators)\n   * @returns {Object} attributions - associative array, mapping originators url (keys) with their properties : html attributions elements\n   */\n  getAttributions: function getAttributions(params) {\n    var zoom = params.zoom;\n    var attributions = [];\n\n    if (params.originators != null && params.visibility) {\n      // drawLogo = boolean, true if attribution should be displayed (zoom, extent), false otherwise\n      var drawLogo;\n\n      for (var j = 0, jl = params.originators.length; j < jl; j++) {\n        drawLogo = true;\n        var originator = params.originators[j];\n        var constraints = params.originators[j].constraints || [];\n\n        for (var k = 0, kl = constraints.length; k < kl; k++) {\n          var constraint = constraints[k];\n          drawLogo = true;\n          var minZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.maxScaleDenominator, params.crs);\n          var maxZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.minScaleDenominator, params.crs) || 21; // min zoom constraints\n\n          if (minZoomLevel && minZoomLevel > zoom) {\n            drawLogo = false;\n          } // max zoom constraints\n\n\n          if (drawLogo && maxZoomLevel !== null && maxZoomLevel < zoom) {\n            drawLogo = false;\n          } // bbox constraints\n\n\n          var bbox = constraint.bbox;\n\n          if (drawLogo && bbox) {\n            drawLogo = false;\n            var viewExtent = params.extent;\n\n            if (viewExtent) {\n              var bounds = [bbox.top, bbox.left, bbox.bottom, bbox.right];\n\n              if (this.intersects(viewExtent, bounds)) {\n                // at least one constraint matches the map ones\n                drawLogo = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (drawLogo) {\n          // on a un originator qui correspond au zoom et à l'étendue.\n          var logo = originator.logo;\n          var url = originator.url;\n          var name = originator.name ? originator.name : \"\";\n          var text = originator.attribution;\n          var container = document.createElement(\"div\");\n          container.className = \"gp-control-attribution\"; // on crée un lien dans tous les cas (même s'il ne pointe pas vers une référence), pour avoir accès à la class CSS (pour surcharge)\n\n          var link = null;\n          link = document.createElement(\"a\");\n          link.className = \"gp-control-attribution-link\";\n          link.target = \"_blank\";\n          container.appendChild(link);\n\n          if (url) {\n            link.href = url;\n          }\n\n          var bImage = !!logo;\n          var image = null; // si on a un logo, on l'affiche à l'interieur du lien\n\n          if (bImage) {\n            image = document.createElement(\"img\");\n\n            if (link) {\n              image.className = \"gp-control-attribution-image\";\n              link.appendChild(image);\n            } else {\n              image.className = \"\";\n              container.appendChild(image);\n            }\n\n            image.src = logo; // FIXME : mixContent !\n\n            image.title = text || name;\n            image.style.height = \"30px\";\n            image.style.width = \"30px\";\n          } else {\n            // sinon, on affiche le nom de l'originator, ou sa description ou l'url.\n            if (name) {\n              link.textContent = name;\n            } else if (text) {\n              link.textContent = text;\n            } else if (url) {\n              link.textContent = url;\n            } else {\n              link.textContent = \"\";\n            }\n          }\n\n          attributions.push(container.innerHTML + \" \");\n        }\n      }\n    }\n\n    return attributions;\n  },\n\n  /**\n   * Determines if one extent (extent1) intersects another (extent2)\n   *\n   * @param {Array.<Float>} extent1 - First extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n   * @param {Array.<Float>} extent2 - Second extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n   * @return {Boolean} intersects - True if the two extents intersect, false otherwise.\n   */\n  intersects: function intersects(extent1, extent2) {\n    var intersectsX = extent1[1] <= extent2[3] && extent2[1] <= extent1[3];\n    var intersectsY = extent1[2] <= extent2[0] && extent2[2] <= extent1[0];\n    return intersectsX && intersectsY;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Utils/LayerUtils.js\n");

/***/ }),

/***/ "./src/Common/Utils/LoggerByDefault.js":
/*!*********************************************!*\
  !*** ./src/Common/Utils/LoggerByDefault.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n\nvar LoggerByDefault = {\n  /**\n   *logger statique\n   * @param {String} [name=\"default\"] - the logger name\n   *\n   * @returns {Object} logger\n   */\n  getLogger: function getLogger(name) {\n    // Substitute global constants configured at compile time\n    // cf. webpack.config.js\n    // on masque cette constante afin d'eviter \"referenceerror not defined\"\n    \"false\".match(/true/) ? loglevel__WEBPACK_IMPORTED_MODULE_0__[\"disableAll\"]() : loglevel__WEBPACK_IMPORTED_MODULE_0__[\"enableAll\"]();\n    var logname = name || \"default\";\n    return loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"](logname);\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LoggerByDefault);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0LmpzPzVjOTAiXSwibmFtZXMiOlsiTG9nZ2VyQnlEZWZhdWx0IiwiZ2V0TG9nZ2VyIiwibmFtZSIsIm1hdGNoIiwiTG9nIiwibG9nbmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQSxJQUFJQSxlQUFlLEdBQUc7QUFDbEI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLFdBQVMsRUFBRyxtQkFBVUMsSUFBVixFQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQyxxQkFBaUJDLEtBQWpCLENBQXVCLE1BQXZCLENBQUQsR0FDTUMsbURBQUEsRUFETixHQUN5QkEsa0RBQUEsRUFEekI7QUFFQSxRQUFJQyxPQUFPLEdBQUdILElBQUksSUFBSSxTQUF0QjtBQUNBLFdBQU9FLGtEQUFBLENBQWNDLE9BQWQsQ0FBUDtBQUNIO0FBZmlCLENBQXRCO0FBa0JlTCw4RUFBZiIsImZpbGUiOiIuL3NyYy9Db21tb24vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTG9nIGZyb20gXCJsb2dsZXZlbFwiO1xuXG52YXIgTG9nZ2VyQnlEZWZhdWx0ID0ge1xuICAgIC8qKlxuICAgICAqbG9nZ2VyIHN0YXRpcXVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lPVwiZGVmYXVsdFwiXSAtIHRoZSBsb2dnZXIgbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge09iamVjdH0gbG9nZ2VyXG4gICAgICovXG4gICAgZ2V0TG9nZ2VyIDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgLy8gU3Vic3RpdHV0ZSBnbG9iYWwgY29uc3RhbnRzIGNvbmZpZ3VyZWQgYXQgY29tcGlsZSB0aW1lXG4gICAgICAgIC8vIGNmLiB3ZWJwYWNrLmNvbmZpZy5qc1xuICAgICAgICAvLyBvbiBtYXNxdWUgY2V0dGUgY29uc3RhbnRlIGFmaW4gZCdldml0ZXIgXCJyZWZlcmVuY2VlcnJvciBub3QgZGVmaW5lZFwiXG4gICAgICAgIChcIl9fUFJPRFVDVElPTl9fXCIubWF0Y2goL3RydWUvKSlcbiAgICAgICAgICAgID8gTG9nLmRpc2FibGVBbGwoKSA6IExvZy5lbmFibGVBbGwoKTtcbiAgICAgICAgdmFyIGxvZ25hbWUgPSBuYW1lIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgICByZXR1cm4gTG9nLmdldExvZ2dlcihsb2duYW1lKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXJCeURlZmF1bHQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Utils/LoggerByDefault.js\n");

/***/ }),

/***/ "./src/Common/Utils/MathUtils.js":
/*!***************************************!*\
  !*** ./src/Common/Utils/MathUtils.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n* @module MathUtils\n* @alias Gp.MathUtils\n* @description\n* ...\n*\n* @example\n* modulo();\n* decimalToDMS();\n* toInteger();\n* isInteger();\n* toFloat();\n*/\nvar MathUtils = {\n  /**\n   * Reste de la division euclidienne\n   * @param {Number} a - divisor\n   * @param {Number} b - quotient\n   * @returns {Number} Modulo\n   */\n  modulo: function modulo(a, b) {\n    var r = a % b;\n    return r * b < 0 ? r + b : r;\n  },\n\n  /**\n   * Transform degrees, minutes, seconds form decimal degrees -\n   * Largely inspired by the private function degreesToStringHDMS from ol/coordinate.js\n   *\n   * @param {Number} degrees - decimal degrees\n   * @param {Array} hemispheres - \"NS\" ou \"EO\"\n   * @param {Number} numDigits - number of digits for seconds\n   * @returns {Object} DMS coordinate\n   */\n  decimalToDMS: function decimalToDMS(degrees, hemispheres, numDigits) {\n    var normalizedDegrees = this.modulo(degrees + 180, 360) - 180;\n    var x = Math.abs(3600 * normalizedDegrees);\n    var dflPrecision = numDigits || 0;\n    var precision = Math.pow(10, dflPrecision);\n    var deg = Math.floor(x / 3600);\n    var min = Math.floor((x - deg * 3600) / 60);\n    var sec = x - deg * 3600 - min * 60;\n    sec = Math.ceil(sec * precision) / precision;\n\n    if (sec >= 60) {\n      sec = 0;\n      min += 1;\n    }\n\n    if (min >= 60) {\n      min = 0;\n      deg += 1;\n    }\n\n    var direction = hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n    return {\n      d: deg,\n      m: min,\n      s: sec,\n      direction: direction\n    };\n  },\n\n  /**\n   * Converts string to Integer\n   *\n   * @param {String} s - string number\n   * @param {Numeric} base - between 2 and 36\n   * @returns {null|Numeric} result\n   */\n  toInteger: function toInteger(s, base) {\n    var _base = base || 10;\n\n    var n = parseInt(s, _base);\n\n    if (!isNaN(n) && isFinite(n)) {\n      return n;\n    }\n\n    return null;\n  },\n\n  /**\n   * check if s represents an integer\n   *\n   * @param {String} s - string number\n   * @returns {Boolean} is integer\n   */\n  isInteger: function isInteger(s) {\n    if (isNaN(s)) {\n      return false;\n    }\n\n    var v = parseFloat(s);\n    return (v | 0) === v;\n  },\n\n  /**\n   * Converts s to float\n   *\n   * @param {String} s - string number\n   * @returns {null|Numeric} result\n   */\n  toFloat: function toFloat(s) {\n    var n = parseFloat(s);\n\n    if (!isNaN(n) && isFinite(n)) {\n      return n;\n    }\n\n    return null;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MathUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vVXRpbHMvTWF0aFV0aWxzLmpzPzIzMWUiXSwibmFtZXMiOlsiTWF0aFV0aWxzIiwibW9kdWxvIiwiYSIsImIiLCJyIiwiZGVjaW1hbFRvRE1TIiwiZGVncmVlcyIsImhlbWlzcGhlcmVzIiwibnVtRGlnaXRzIiwibm9ybWFsaXplZERlZ3JlZXMiLCJ4IiwiTWF0aCIsImFicyIsImRmbFByZWNpc2lvbiIsInByZWNpc2lvbiIsInBvdyIsImRlZyIsImZsb29yIiwibWluIiwic2VjIiwiY2VpbCIsImRpcmVjdGlvbiIsImNoYXJBdCIsImQiLCJtIiwicyIsInRvSW50ZWdlciIsImJhc2UiLCJfYmFzZSIsIm4iLCJwYXJzZUludCIsImlzTmFOIiwiaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJ2IiwicGFyc2VGbG9hdCIsInRvRmxvYXQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxTQUFTLEdBQUc7QUFDWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsUUFBTSxFQUFHLGdCQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDckIsUUFBSUMsQ0FBQyxHQUFHRixDQUFDLEdBQUdDLENBQVo7QUFDQSxXQUFPQyxDQUFDLEdBQUdELENBQUosR0FBUSxDQUFSLEdBQVlDLENBQUMsR0FBR0QsQ0FBaEIsR0FBb0JDLENBQTNCO0FBQ0gsR0FWVzs7QUFZWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsY0FBWSxFQUFHLHNCQUFVQyxPQUFWLEVBQW1CQyxXQUFuQixFQUFnQ0MsU0FBaEMsRUFBMkM7QUFDdEQsUUFBSUMsaUJBQWlCLEdBQUcsS0FBS1IsTUFBTCxDQUFZSyxPQUFPLEdBQUcsR0FBdEIsRUFBMkIsR0FBM0IsSUFBa0MsR0FBMUQ7QUFDQSxRQUFJSSxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLE9BQU9ILGlCQUFoQixDQUFSO0FBQ0EsUUFBSUksWUFBWSxHQUFHTCxTQUFTLElBQUksQ0FBaEM7QUFDQSxRQUFJTSxTQUFTLEdBQUdILElBQUksQ0FBQ0ksR0FBTCxDQUFTLEVBQVQsRUFBYUYsWUFBYixDQUFoQjtBQUVBLFFBQUlHLEdBQUcsR0FBR0wsSUFBSSxDQUFDTSxLQUFMLENBQVdQLENBQUMsR0FBRyxJQUFmLENBQVY7QUFDQSxRQUFJUSxHQUFHLEdBQUdQLElBQUksQ0FBQ00sS0FBTCxDQUFXLENBQUNQLENBQUMsR0FBR00sR0FBRyxHQUFHLElBQVgsSUFBbUIsRUFBOUIsQ0FBVjtBQUNBLFFBQUlHLEdBQUcsR0FBR1QsQ0FBQyxHQUFJTSxHQUFHLEdBQUcsSUFBWCxHQUFvQkUsR0FBRyxHQUFHLEVBQXBDO0FBQ0FDLE9BQUcsR0FBR1IsSUFBSSxDQUFDUyxJQUFMLENBQVVELEdBQUcsR0FBR0wsU0FBaEIsSUFBNkJBLFNBQW5DOztBQUVBLFFBQUlLLEdBQUcsSUFBSSxFQUFYLEVBQWU7QUFDWEEsU0FBRyxHQUFHLENBQU47QUFDQUQsU0FBRyxJQUFJLENBQVA7QUFDSDs7QUFFRCxRQUFJQSxHQUFHLElBQUksRUFBWCxFQUFlO0FBQ1hBLFNBQUcsR0FBRyxDQUFOO0FBQ0FGLFNBQUcsSUFBSSxDQUFQO0FBQ0g7O0FBRUQsUUFBSUssU0FBUyxHQUFHZCxXQUFXLENBQUNlLE1BQVosQ0FBbUJiLGlCQUFpQixHQUFHLENBQXBCLEdBQXdCLENBQXhCLEdBQTRCLENBQS9DLENBQWhCO0FBQ0EsV0FBTztBQUNIYyxPQUFDLEVBQUdQLEdBREQ7QUFFSFEsT0FBQyxFQUFHTixHQUZEO0FBR0hPLE9BQUMsRUFBR04sR0FIRDtBQUlIRSxlQUFTLEVBQUdBO0FBSlQsS0FBUDtBQU1ILEdBakRXOztBQW1EWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJSyxXQUFTLEVBQUcsbUJBQVVELENBQVYsRUFBYUUsSUFBYixFQUFtQjtBQUMzQixRQUFJQyxLQUFLLEdBQUdELElBQUksSUFBSSxFQUFwQjs7QUFDQSxRQUFJRSxDQUFDLEdBQUdDLFFBQVEsQ0FBQ0wsQ0FBRCxFQUFJRyxLQUFKLENBQWhCOztBQUNBLFFBQUksQ0FBQ0csS0FBSyxDQUFDRixDQUFELENBQU4sSUFBYUcsUUFBUSxDQUFDSCxDQUFELENBQXpCLEVBQThCO0FBQzFCLGFBQU9BLENBQVA7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQWpFVzs7QUFtRVo7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lJLFdBQVMsRUFBRyxtQkFBVVIsQ0FBVixFQUFhO0FBQ3JCLFFBQUlNLEtBQUssQ0FBQ04sQ0FBRCxDQUFULEVBQWM7QUFDVixhQUFPLEtBQVA7QUFDSDs7QUFFRCxRQUFJUyxDQUFDLEdBQUdDLFVBQVUsQ0FBQ1YsQ0FBRCxDQUFsQjtBQUNBLFdBQVEsQ0FBQ1MsQ0FBQyxHQUFHLENBQUwsTUFBWUEsQ0FBcEI7QUFDSCxHQWhGVzs7QUFrRlo7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lFLFNBQU8sRUFBRyxpQkFBVVgsQ0FBVixFQUFhO0FBQ25CLFFBQUlJLENBQUMsR0FBR00sVUFBVSxDQUFDVixDQUFELENBQWxCOztBQUNBLFFBQUksQ0FBQ00sS0FBSyxDQUFDRixDQUFELENBQU4sSUFBYUcsUUFBUSxDQUFDSCxDQUFELENBQXpCLEVBQThCO0FBQzFCLGFBQU9BLENBQVA7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSDtBQTlGVyxDQUFoQjtBQWlHZTdCLHdFQUFmIiwiZmlsZSI6Ii4vc3JjL0NvbW1vbi9VdGlscy9NYXRoVXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQG1vZHVsZSBNYXRoVXRpbHNcbiogQGFsaWFzIEdwLk1hdGhVdGlsc1xuKiBAZGVzY3JpcHRpb25cbiogLi4uXG4qXG4qIEBleGFtcGxlXG4qIG1vZHVsbygpO1xuKiBkZWNpbWFsVG9ETVMoKTtcbiogdG9JbnRlZ2VyKCk7XG4qIGlzSW50ZWdlcigpO1xuKiB0b0Zsb2F0KCk7XG4qL1xudmFyIE1hdGhVdGlscyA9IHtcbiAgICAvKipcbiAgICAgKiBSZXN0ZSBkZSBsYSBkaXZpc2lvbiBldWNsaWRpZW5uZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhIC0gZGl2aXNvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiIC0gcXVvdGllbnRcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBNb2R1bG9cbiAgICAgKi9cbiAgICBtb2R1bG8gOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgciA9IGEgJSBiO1xuICAgICAgICByZXR1cm4gciAqIGIgPCAwID8gciArIGIgOiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm0gZGVncmVlcywgbWludXRlcywgc2Vjb25kcyBmb3JtIGRlY2ltYWwgZGVncmVlcyAtXG4gICAgICogTGFyZ2VseSBpbnNwaXJlZCBieSB0aGUgcHJpdmF0ZSBmdW5jdGlvbiBkZWdyZWVzVG9TdHJpbmdIRE1TIGZyb20gb2wvY29vcmRpbmF0ZS5qc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlZ3JlZXMgLSBkZWNpbWFsIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBoZW1pc3BoZXJlcyAtIFwiTlNcIiBvdSBcIkVPXCJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbnVtRGlnaXRzIC0gbnVtYmVyIG9mIGRpZ2l0cyBmb3Igc2Vjb25kc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IERNUyBjb29yZGluYXRlXG4gICAgICovXG4gICAgZGVjaW1hbFRvRE1TIDogZnVuY3Rpb24gKGRlZ3JlZXMsIGhlbWlzcGhlcmVzLCBudW1EaWdpdHMpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWREZWdyZWVzID0gdGhpcy5tb2R1bG8oZGVncmVlcyArIDE4MCwgMzYwKSAtIDE4MDtcbiAgICAgICAgdmFyIHggPSBNYXRoLmFicygzNjAwICogbm9ybWFsaXplZERlZ3JlZXMpO1xuICAgICAgICB2YXIgZGZsUHJlY2lzaW9uID0gbnVtRGlnaXRzIHx8IDA7XG4gICAgICAgIHZhciBwcmVjaXNpb24gPSBNYXRoLnBvdygxMCwgZGZsUHJlY2lzaW9uKTtcblxuICAgICAgICB2YXIgZGVnID0gTWF0aC5mbG9vcih4IC8gMzYwMCk7XG4gICAgICAgIHZhciBtaW4gPSBNYXRoLmZsb29yKCh4IC0gZGVnICogMzYwMCkgLyA2MCk7XG4gICAgICAgIHZhciBzZWMgPSB4IC0gKGRlZyAqIDM2MDApIC0gKG1pbiAqIDYwKTtcbiAgICAgICAgc2VjID0gTWF0aC5jZWlsKHNlYyAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG5cbiAgICAgICAgaWYgKHNlYyA+PSA2MCkge1xuICAgICAgICAgICAgc2VjID0gMDtcbiAgICAgICAgICAgIG1pbiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1pbiA+PSA2MCkge1xuICAgICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICAgIGRlZyArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGhlbWlzcGhlcmVzLmNoYXJBdChub3JtYWxpemVkRGVncmVlcyA8IDAgPyAxIDogMCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkIDogZGVnLFxuICAgICAgICAgICAgbSA6IG1pbixcbiAgICAgICAgICAgIHMgOiBzZWMsXG4gICAgICAgICAgICBkaXJlY3Rpb24gOiBkaXJlY3Rpb25cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgc3RyaW5nIHRvIEludGVnZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzIC0gc3RyaW5nIG51bWJlclxuICAgICAqIEBwYXJhbSB7TnVtZXJpY30gYmFzZSAtIGJldHdlZW4gMiBhbmQgMzZcbiAgICAgKiBAcmV0dXJucyB7bnVsbHxOdW1lcmljfSByZXN1bHRcbiAgICAgKi9cbiAgICB0b0ludGVnZXIgOiBmdW5jdGlvbiAocywgYmFzZSkge1xuICAgICAgICB2YXIgX2Jhc2UgPSBiYXNlIHx8IDEwO1xuICAgICAgICB2YXIgbiA9IHBhcnNlSW50KHMsIF9iYXNlKTtcbiAgICAgICAgaWYgKCFpc05hTihuKSAmJiBpc0Zpbml0ZShuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGlmIHMgcmVwcmVzZW50cyBhbiBpbnRlZ2VyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcyAtIHN0cmluZyBudW1iZXJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXMgaW50ZWdlclxuICAgICAqL1xuICAgIGlzSW50ZWdlciA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIGlmIChpc05hTihzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHYgPSBwYXJzZUZsb2F0KHMpO1xuICAgICAgICByZXR1cm4gKCh2IHwgMCkgPT09IHYpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBzIHRvIGZsb2F0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcyAtIHN0cmluZyBudW1iZXJcbiAgICAgKiBAcmV0dXJucyB7bnVsbHxOdW1lcmljfSByZXN1bHRcbiAgICAgKi9cbiAgICB0b0Zsb2F0IDogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgdmFyIG4gPSBwYXJzZUZsb2F0KHMpO1xuICAgICAgICBpZiAoIWlzTmFOKG4pICYmIGlzRmluaXRlKG4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXRoVXRpbHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Utils/MathUtils.js\n");

/***/ }),

/***/ "./src/Common/Utils/ProxyUtils.js":
/*!****************************************!*\
  !*** ./src/Common/Utils/ProxyUtils.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n\n/**\n* @module ProxyUtils\n* @alias Gp.ProxyUtils\n* @description\n* ...\n*\n* @example\n* proxifyUrl();\n*/\n\nvar ProxyUtils = {\n  /**\n   * Ajoute un proxy aux url des couches vecteurs si besoin.\n   *\n   * @param {String} url - Url to proxify.\n   * @param {Object} [proxyOptions] - Object defining proxy options.\n   * @param {String} proxyOptions.proxyUrl - Proxy URL.\n   * @param {Array.<String>} [proxyOptions.noProxyDomains] - Proxy will not be used for this list of domain names.\n   *\n   * @returns {String} proxy url\n   */\n  proxifyUrl: function proxifyUrl(url, proxyOptions) {\n    // logger\n    var logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"proxifyUrl\");\n\n    if (!proxyOptions || !proxyOptions.hasOwnProperty(\"proxyUrl\") || proxyOptions.proxyUrl === null || proxyOptions.proxyUrl.trim().length === 0) {\n      return url;\n    } // on regarde si l'url nest pas dans les domaines sans proxy\n\n\n    if (proxyOptions.noProxyDomains && Array.isArray(proxyOptions.noProxyDomains) && proxyOptions.noProxyDomains.length > 0) {\n      for (var i in proxyOptions.noProxyDomains) {\n        logger.trace(\"[ProxyUtils] proxifyUrl : analyzing \" + proxyOptions.noProxyDomains[i]);\n\n        if (url.indexOf(proxyOptions.noProxyDomains[i]) !== -1) {\n          logger.info(\"[ProxyUtils] proxifyUrl : \" + url + \" found in noProxyDomains list (\" + proxyOptions.noProxyDomains[i] + \").\");\n          return url;\n        }\n      }\n    }\n\n    return proxyOptions.proxyUrl + encodeURIComponent(url);\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProxyUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vVXRpbHMvUHJveHlVdGlscy5qcz8wYmY1Il0sIm5hbWVzIjpbIlByb3h5VXRpbHMiLCJwcm94aWZ5VXJsIiwidXJsIiwicHJveHlPcHRpb25zIiwibG9nZ2VyIiwiTG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiaGFzT3duUHJvcGVydHkiLCJwcm94eVVybCIsInRyaW0iLCJsZW5ndGgiLCJub1Byb3h5RG9tYWlucyIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJ0cmFjZSIsImluZGV4T2YiLCJpbmZvIiwiZW5jb2RlVVJJQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFHO0FBQ2I7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsWUFBVSxFQUFHLG9CQUFVQyxHQUFWLEVBQWVDLFlBQWYsRUFBNkI7QUFDdEM7QUFFQSxRQUFJQyxNQUFNLEdBQUdDLHFFQUFNLENBQUNDLFNBQVAsQ0FBaUIsWUFBakIsQ0FBYjs7QUFFQSxRQUFJLENBQUNILFlBQUQsSUFDQSxDQUFDQSxZQUFZLENBQUNJLGNBQWIsQ0FBNEIsVUFBNUIsQ0FERCxJQUVBSixZQUFZLENBQUNLLFFBQWIsS0FBMEIsSUFGMUIsSUFHQUwsWUFBWSxDQUFDSyxRQUFiLENBQXNCQyxJQUF0QixHQUE2QkMsTUFBN0IsS0FBd0MsQ0FINUMsRUFHK0M7QUFDM0MsYUFBT1IsR0FBUDtBQUNILEtBVnFDLENBV3RDOzs7QUFDQSxRQUFJQyxZQUFZLENBQUNRLGNBQWIsSUFDQUMsS0FBSyxDQUFDQyxPQUFOLENBQWNWLFlBQVksQ0FBQ1EsY0FBM0IsQ0FEQSxJQUVBUixZQUFZLENBQUNRLGNBQWIsQ0FBNEJELE1BQTVCLEdBQXFDLENBRnpDLEVBRTRDO0FBQ3hDLFdBQUssSUFBSUksQ0FBVCxJQUFjWCxZQUFZLENBQUNRLGNBQTNCLEVBQTJDO0FBQ3ZDUCxjQUFNLENBQUNXLEtBQVAsQ0FBYSx5Q0FBeUNaLFlBQVksQ0FBQ1EsY0FBYixDQUE0QkcsQ0FBNUIsQ0FBdEQ7O0FBQ0EsWUFBSVosR0FBRyxDQUFDYyxPQUFKLENBQVliLFlBQVksQ0FBQ1EsY0FBYixDQUE0QkcsQ0FBNUIsQ0FBWixNQUFnRCxDQUFDLENBQXJELEVBQXdEO0FBQ3BEVixnQkFBTSxDQUFDYSxJQUFQLENBQVksK0JBQStCZixHQUEvQixHQUFxQyxpQ0FBckMsR0FBeUVDLFlBQVksQ0FBQ1EsY0FBYixDQUE0QkcsQ0FBNUIsQ0FBekUsR0FBMEcsSUFBdEg7QUFDQSxpQkFBT1osR0FBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxXQUFPQyxZQUFZLENBQUNLLFFBQWIsR0FBd0JVLGtCQUFrQixDQUFDaEIsR0FBRCxDQUFqRDtBQUNIO0FBbkNZLENBQWpCO0FBc0NlRix5RUFBZiIsImZpbGUiOiIuL3NyYy9Db21tb24vVXRpbHMvUHJveHlVdGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uL0NvbW1vbi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcblxuLyoqXG4qIEBtb2R1bGUgUHJveHlVdGlsc1xuKiBAYWxpYXMgR3AuUHJveHlVdGlsc1xuKiBAZGVzY3JpcHRpb25cbiogLi4uXG4qXG4qIEBleGFtcGxlXG4qIHByb3hpZnlVcmwoKTtcbiovXG52YXIgUHJveHlVdGlscyA9IHtcbiAgICAvKipcbiAgICAgKiBBam91dGUgdW4gcHJveHkgYXV4IHVybCBkZXMgY291Y2hlcyB2ZWN0ZXVycyBzaSBiZXNvaW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gVXJsIHRvIHByb3hpZnkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm94eU9wdGlvbnNdIC0gT2JqZWN0IGRlZmluaW5nIHByb3h5IG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3h5T3B0aW9ucy5wcm94eVVybCAtIFByb3h5IFVSTC5cbiAgICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBbcHJveHlPcHRpb25zLm5vUHJveHlEb21haW5zXSAtIFByb3h5IHdpbGwgbm90IGJlIHVzZWQgZm9yIHRoaXMgbGlzdCBvZiBkb21haW4gbmFtZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBwcm94eSB1cmxcbiAgICAgKi9cbiAgICBwcm94aWZ5VXJsIDogZnVuY3Rpb24gKHVybCwgcHJveHlPcHRpb25zKSB7XG4gICAgICAgIC8vIGxvZ2dlclxuXG4gICAgICAgIHZhciBsb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwicHJveGlmeVVybFwiKTtcblxuICAgICAgICBpZiAoIXByb3h5T3B0aW9ucyB8fFxuICAgICAgICAgICAgIXByb3h5T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcInByb3h5VXJsXCIpIHx8XG4gICAgICAgICAgICBwcm94eU9wdGlvbnMucHJveHlVcmwgPT09IG51bGwgfHxcbiAgICAgICAgICAgIHByb3h5T3B0aW9ucy5wcm94eVVybC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9uIHJlZ2FyZGUgc2kgbCd1cmwgbmVzdCBwYXMgZGFucyBsZXMgZG9tYWluZXMgc2FucyBwcm94eVxuICAgICAgICBpZiAocHJveHlPcHRpb25zLm5vUHJveHlEb21haW5zICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHByb3h5T3B0aW9ucy5ub1Byb3h5RG9tYWlucykgJiZcbiAgICAgICAgICAgIHByb3h5T3B0aW9ucy5ub1Byb3h5RG9tYWlucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIHByb3h5T3B0aW9ucy5ub1Byb3h5RG9tYWlucykge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcIltQcm94eVV0aWxzXSBwcm94aWZ5VXJsIDogYW5hbHl6aW5nIFwiICsgcHJveHlPcHRpb25zLm5vUHJveHlEb21haW5zW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAodXJsLmluZGV4T2YocHJveHlPcHRpb25zLm5vUHJveHlEb21haW5zW2ldKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJbUHJveHlVdGlsc10gcHJveGlmeVVybCA6IFwiICsgdXJsICsgXCIgZm91bmQgaW4gbm9Qcm94eURvbWFpbnMgbGlzdCAoXCIgKyBwcm94eU9wdGlvbnMubm9Qcm94eURvbWFpbnNbaV0gKyBcIikuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJveHlPcHRpb25zLnByb3h5VXJsICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJveHlVdGlscztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/Utils/ProxyUtils.js\n");

/***/ }),

/***/ "./src/Common/Utils/SelectorID.js":
/*!****************************************!*\
  !*** ./src/Common/Utils/SelectorID.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * formalisme d'un tag ID :\n * -> NAME(_ORDER)-1460636385836\n *\n * Ex.\n *   GProutePoints-1460636385836\n *   GProutePoint_10-1460636385836\n */\nvar SelectorID = {\n  /**\n   * Construction d'un identifiant statique basé sur le timestamp,\n   * et qui s'incremente de +1 à chaque appel\n   */\n  generate: function () {\n    var timestamp = Math.floor(Date.now());\n    return function () {\n      return timestamp++;\n    };\n  }(),\n\n  /**\n   * nom du tag\n   * @param {String} id - the id\n   *\n   * @returns {String} index\n   */\n  name: function name(id) {\n    var name = null;\n    var i = id.lastIndexOf(\"-\");\n\n    if (i === -1) {\n      name = id;\n    } else {\n      name = id.substring(0, i);\n    }\n\n    return name;\n  },\n\n  /**\n   * numero d'identifiant du tag\n   * @param {String} id - the id\n   *\n   * @returns {String} index\n   */\n  index: function index(id) {\n    var index = null;\n    var name = this.name(id); // if (name !== id) {\n\n    var i = name.lastIndexOf(\"_\");\n\n    if (i !== -1) {\n      index = name.substring(i + 1);\n    } // }\n\n\n    return index;\n  },\n\n  /**\n   * uuid du tag\n   * @param {String} id - the id\n   *\n   * @returns {String} uuid\n   */\n  uuid: function uuid(id) {\n    var uuid = null;\n    var i = id.lastIndexOf(\"-\");\n\n    if (i !== -1) {\n      uuid = parseInt(id.substring(i + 1), 10);\n    }\n\n    return uuid;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (SelectorID);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9Db21tb24vVXRpbHMvU2VsZWN0b3JJRC5qcz9lNmM1Il0sIm5hbWVzIjpbIlNlbGVjdG9ySUQiLCJnZW5lcmF0ZSIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJuYW1lIiwiaWQiLCJpIiwibGFzdEluZGV4T2YiLCJzdWJzdHJpbmciLCJpbmRleCIsInV1aWQiLCJwYXJzZUludCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsVUFBVSxHQUFHO0FBRWI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsVUFBUSxFQUFJLFlBQVk7QUFDcEIsUUFBSUMsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsSUFBSSxDQUFDQyxHQUFMLEVBQVgsQ0FBaEI7QUFDQSxXQUFPLFlBQVk7QUFDZixhQUFPSixTQUFTLEVBQWhCO0FBQ0gsS0FGRDtBQUdILEdBTFUsRUFORTs7QUFhYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUssTUFBSSxFQUFHLGNBQVVDLEVBQVYsRUFBYztBQUNqQixRQUFJRCxJQUFJLEdBQUcsSUFBWDtBQUVBLFFBQUlFLENBQUMsR0FBR0QsRUFBRSxDQUFDRSxXQUFILENBQWUsR0FBZixDQUFSOztBQUNBLFFBQUlELENBQUMsS0FBSyxDQUFDLENBQVgsRUFBYztBQUNWRixVQUFJLEdBQUdDLEVBQVA7QUFDSCxLQUZELE1BRU87QUFDSEQsVUFBSSxHQUFHQyxFQUFFLENBQUNHLFNBQUgsQ0FBYSxDQUFiLEVBQWdCRixDQUFoQixDQUFQO0FBQ0g7O0FBRUQsV0FBT0YsSUFBUDtBQUNILEdBOUJZOztBQWdDYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUssT0FBSyxFQUFHLGVBQVVKLEVBQVYsRUFBYztBQUNsQixRQUFJSSxLQUFLLEdBQUcsSUFBWjtBQUVBLFFBQUlMLElBQUksR0FBRyxLQUFLQSxJQUFMLENBQVVDLEVBQVYsQ0FBWCxDQUhrQixDQUlsQjs7QUFDQSxRQUFJQyxDQUFDLEdBQUdGLElBQUksQ0FBQ0csV0FBTCxDQUFpQixHQUFqQixDQUFSOztBQUNBLFFBQUlELENBQUMsS0FBSyxDQUFDLENBQVgsRUFBYztBQUNWRyxXQUFLLEdBQUdMLElBQUksQ0FBQ0ksU0FBTCxDQUFlRixDQUFDLEdBQUcsQ0FBbkIsQ0FBUjtBQUNILEtBUmlCLENBU2xCOzs7QUFFQSxXQUFPRyxLQUFQO0FBQ0gsR0FsRFk7O0FBb0RiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxNQUFJLEVBQUcsY0FBVUwsRUFBVixFQUFjO0FBQ2pCLFFBQUlLLElBQUksR0FBRyxJQUFYO0FBRUEsUUFBSUosQ0FBQyxHQUFHRCxFQUFFLENBQUNFLFdBQUgsQ0FBZSxHQUFmLENBQVI7O0FBQ0EsUUFBSUQsQ0FBQyxLQUFLLENBQUMsQ0FBWCxFQUFjO0FBQ1ZJLFVBQUksR0FBR0MsUUFBUSxDQUFDTixFQUFFLENBQUNHLFNBQUgsQ0FBYUYsQ0FBQyxHQUFHLENBQWpCLENBQUQsRUFBc0IsRUFBdEIsQ0FBZjtBQUNIOztBQUVELFdBQU9JLElBQVA7QUFDSDtBQW5FWSxDQUFqQjtBQXVFZWIseUVBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL1NlbGVjdG9ySUQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGZvcm1hbGlzbWUgZCd1biB0YWcgSUQgOlxuICogLT4gTkFNRShfT1JERVIpLTE0NjA2MzYzODU4MzZcbiAqXG4gKiBFeC5cbiAqICAgR1Byb3V0ZVBvaW50cy0xNDYwNjM2Mzg1ODM2XG4gKiAgIEdQcm91dGVQb2ludF8xMC0xNDYwNjM2Mzg1ODM2XG4gKi9cbnZhciBTZWxlY3RvcklEID0ge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0aW9uIGQndW4gaWRlbnRpZmlhbnQgc3RhdGlxdWUgYmFzw6kgc3VyIGxlIHRpbWVzdGFtcCxcbiAgICAgKiBldCBxdWkgcydpbmNyZW1lbnRlIGRlICsxIMOgIGNoYXF1ZSBhcHBlbFxuICAgICAqL1xuICAgIGdlbmVyYXRlIDogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wKys7XG4gICAgICAgIH07XG4gICAgfSkoKSxcblxuICAgIC8qKlxuICAgICAqIG5vbSBkdSB0YWdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGluZGV4XG4gICAgICovXG4gICAgbmFtZSA6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG5cbiAgICAgICAgdmFyIGkgPSBpZC5sYXN0SW5kZXhPZihcIi1cIik7XG4gICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgICAgbmFtZSA9IGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmFtZSA9IGlkLnN1YnN0cmluZygwLCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBudW1lcm8gZCdpZGVudGlmaWFudCBkdSB0YWdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGluZGV4XG4gICAgICovXG4gICAgaW5kZXggOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbnVsbDtcblxuICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZShpZCk7XG4gICAgICAgIC8vIGlmIChuYW1lICE9PSBpZCkge1xuICAgICAgICB2YXIgaSA9IG5hbWUubGFzdEluZGV4T2YoXCJfXCIpO1xuICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGluZGV4ID0gbmFtZS5zdWJzdHJpbmcoaSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHV1aWQgZHUgdGFnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gdGhlIGlkXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB1dWlkXG4gICAgICovXG4gICAgdXVpZCA6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdXVpZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIGkgPSBpZC5sYXN0SW5kZXhPZihcIi1cIik7XG4gICAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICAgICAgdXVpZCA9IHBhcnNlSW50KGlkLnN1YnN0cmluZyhpICsgMSksIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1dWlkO1xuICAgIH1cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0b3JJRDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/Utils/SelectorID.js\n");

/***/ }),

/***/ "./src/Itowns/CRS/CRS.js":
/*!*******************************!*\
  !*** ./src/Itowns/CRS/CRS.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar CRS = {\n  /**\n   * CRS : WGS84\n   *\n   * @property EPSG:4326\n   * @private\n   */\n  \"EPSG:4326\": \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +units=degrees\",\n\n  /**\n   * CRS : PseudoMercator\n   *\n   * @property EPSG:3857\n   * @private\n   */\n  \"EPSG:3857\": \"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\",\n\n  /**\n   * CRS : Lambert 93\n   *\n   * @property EPSG:2154\n   * @private\n   */\n  \"EPSG:2154\": \"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : Lambert 2 extended\n   *\n   * @property EPSG:27572\n   * @private\n   */\n  \"EPSG:27572\": \"+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 20N (Guadeloupe, Martinique)\n   *\n   * @property EPSG:32620\n   * @private\n   */\n  \"EPSG:32620\": \"+proj=utm +zone=20 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 21N (Saint-Pierre-et-Miquelon)\n   *\n   * @property EPSG:4467\n   * @private\n   */\n  \"EPSG:4467\": \"+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 22N (Guyane)\n   *\n   * @property EPSG:2972\n   * @private\n   */\n  \"EPSG:2972\": \"+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 30N (France métropolitaine)\n   *\n   * @property EPSG:32630\n   * @private\n   */\n  \"EPSG:32630\": \"+proj=utm +zone=30 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 31N (France métropolitaine)\n   *\n   * @property EPSG:32631\n   * @private\n   */\n  \"EPSG:32631\": \"+proj=utm +zone=31 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 32N (France métropolitaine)\n   *\n   * @property EPSG:32632\n   * @private\n   */\n  \"EPSG:32632\": \"+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 38S (Mayotte)\n   *\n   * @property EPSG:4471\n   * @private\n   */\n  \"EPSG:4471\": \"+proj=utm +zone=38 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 40S (Réunion)\n   *\n   * @property EPSG:2975\n   * @private\n   */\n  \"EPSG:2975\": \"+proj=utm +zone=40 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 5S (Polynésie)\n   *\n   * @property EPSG:3296\n   * @private\n   */\n  \"EPSG:3296\": \"+proj=utm +zone=5 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 6S (Polynésie)\n   *\n   * @property EPSG:3297\n   * @private\n   */\n  \"EPSG:3297\": \"+proj=utm +zone=6 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 7S (Polynésie)\n   *\n   * @property EPSG:32707\n   * @private\n   */\n  \"EPSG:32707\": \"+proj=utm +zone=7 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 8S (Polynésie)\n   *\n   * @property EPSG:32708\n   * @private\n   */\n  \"EPSG:32708\": \"+proj=utm +zone=8 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 12N (Ile de Clipperton)\n   *\n   * @property EPSG:26912\n   * @private\n   */\n  \"EPSG:26912\": \"+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 42S (Iles Kerguelen)\n   *\n   * @property EPSG:32742\n   * @private\n   */\n  \"EPSG:32742\": \"+proj=utm +zone=42 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 39S (Iles Crozet)\n   *\n   * @property EPSG:32739\n   * @private\n   */\n  \"EPSG:32739\": \"+proj=utm +zone=39 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 43S (Iles St-Paul et Amsterdam)\n   *\n   * @property EPSG:32743\n   * @private\n   */\n  \"EPSG:32743\": \"+proj=utm +zone=43 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : Stéréographique polaire (Terre Adelie)\n   *\n   * @property EPSG:2986\n   * @private\n   */\n  \"EPSG:2986\": \"\",\n\n  /**\n   * CRS : UTM 37S (Iles du canal de Mozambique)\n   *\n   * @property EPSG:32737\n   * @private\n   */\n  \"EPSG:32737\": \"+proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 38S (Iles du canal de Mozambique)\n   *\n   * @property EPSG:32738\n   * @private\n   */\n  \"EPSG:32738\": \"+proj=utm +zone=38 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 1S (Wallis-et-Futuna)\n   *\n   * @property EPSG:2988\n   * @private\n   */\n  \"EPSG:2988\": \"+proj=utm +zone=1 +south +ellps=intl +towgs84=253,-132,-127,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : RGNC91-93 (Nouvelle-Calédonie)\n   *\n   * @property EPSG:3163\n   * @private\n   */\n  \"EPSG:3163\": \"+proj=lcc +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5 +lon_0=166 +x_0=400000 +y_0=300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (CRS);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/CRS/CRS.js\n");

/***/ }),

/***/ "./src/Itowns/CSS/Controls/Attribution/GPattributionItowns.css":
/*!*********************************************************************!*\
  !*** ./src/Itowns/CSS/Controls/Attribution/GPattributionItowns.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ1NTL0NvbnRyb2xzL0F0dHJpYnV0aW9uL0dQYXR0cmlidXRpb25JdG93bnMuY3NzPzY0YjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvSXRvd25zL0NTUy9Db250cm9scy9BdHRyaWJ1dGlvbi9HUGF0dHJpYnV0aW9uSXRvd25zLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Itowns/CSS/Controls/Attribution/GPattributionItowns.css\n");

/***/ }),

/***/ "./src/Itowns/CSS/Controls/BoostRelief/GPboostReliefItowns.css":
/*!*********************************************************************!*\
  !*** ./src/Itowns/CSS/Controls/BoostRelief/GPboostReliefItowns.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ1NTL0NvbnRyb2xzL0Jvb3N0UmVsaWVmL0dQYm9vc3RSZWxpZWZJdG93bnMuY3NzPzE3MmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvSXRvd25zL0NTUy9Db250cm9scy9Cb29zdFJlbGllZi9HUGJvb3N0UmVsaWVmSXRvd25zLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Itowns/CSS/Controls/BoostRelief/GPboostReliefItowns.css\n");

/***/ }),

/***/ "./src/Itowns/CSS/Controls/LayerSwitcher/GPlayerSwitcherItowns.css":
/*!*************************************************************************!*\
  !*** ./src/Itowns/CSS/Controls/LayerSwitcher/GPlayerSwitcherItowns.css ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ1NTL0NvbnRyb2xzL0xheWVyU3dpdGNoZXIvR1BsYXllclN3aXRjaGVySXRvd25zLmNzcz85ZWFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL0l0b3ducy9DU1MvQ29udHJvbHMvTGF5ZXJTd2l0Y2hlci9HUGxheWVyU3dpdGNoZXJJdG93bnMuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Itowns/CSS/Controls/LayerSwitcher/GPlayerSwitcherItowns.css\n");

/***/ }),

/***/ "./src/Itowns/CSS/Controls/MiniGlobe/GPminiGlobeItowns.css":
/*!*****************************************************************!*\
  !*** ./src/Itowns/CSS/Controls/MiniGlobe/GPminiGlobeItowns.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ1NTL0NvbnRyb2xzL01pbmlHbG9iZS9HUG1pbmlHbG9iZUl0b3ducy5jc3M/MTU2YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9JdG93bnMvQ1NTL0NvbnRyb2xzL01pbmlHbG9iZS9HUG1pbmlHbG9iZUl0b3ducy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Itowns/CSS/Controls/MiniGlobe/GPminiGlobeItowns.css\n");

/***/ }),

/***/ "./src/Itowns/CSS/Controls/MousePosition/GPmousePositionItowns.css":
/*!*************************************************************************!*\
  !*** ./src/Itowns/CSS/Controls/MousePosition/GPmousePositionItowns.css ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ1NTL0NvbnRyb2xzL01vdXNlUG9zaXRpb24vR1Btb3VzZVBvc2l0aW9uSXRvd25zLmNzcz9iNDY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL0l0b3ducy9DU1MvQ29udHJvbHMvTW91c2VQb3NpdGlvbi9HUG1vdXNlUG9zaXRpb25JdG93bnMuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Itowns/CSS/Controls/MousePosition/GPmousePositionItowns.css\n");

/***/ }),

/***/ "./src/Itowns/CSS/Controls/Scale/GPscaleItowns.css":
/*!*********************************************************!*\
  !*** ./src/Itowns/CSS/Controls/Scale/GPscaleItowns.css ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ1NTL0NvbnRyb2xzL1NjYWxlL0dQc2NhbGVJdG93bnMuY3NzPzZlNTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvSXRvd25zL0NTUy9Db250cm9scy9TY2FsZS9HUHNjYWxlSXRvd25zLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Itowns/CSS/Controls/Scale/GPscaleItowns.css\n");

/***/ }),

/***/ "./src/Itowns/CSS/GPgeneralWidgetItowns.css":
/*!**************************************************!*\
  !*** ./src/Itowns/CSS/GPgeneralWidgetItowns.css ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ1NTL0dQZ2VuZXJhbFdpZGdldEl0b3ducy5jc3M/OTk1OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9JdG93bnMvQ1NTL0dQZ2VuZXJhbFdpZGdldEl0b3ducy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Itowns/CSS/GPgeneralWidgetItowns.css\n");

/***/ }),

/***/ "./src/Itowns/Controls/Attributions.js":
/*!*********************************************!*\
  !*** ./src/Itowns/Controls/Attributions.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GlobeViewExtended */ \"./src/Itowns/GlobeViewExtended.js\");\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Utils_LayerUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Utils/LayerUtils */ \"./src/Common/Utils/LayerUtils.js\");\n/* harmony import */ var _Common_Controls_AttributionDOM__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Controls/AttributionDOM */ \"./src/Common/Controls/AttributionDOM.js\");\n/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget */ \"./src/Itowns/Controls/Widget.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLogger(\"Attributions\");\n/**\n * @classdesc\n * Control to manage layers attributions\n *\n * @constructor\n * @alias itowns.control.Attributions\n * @extends {itowns.control.Widget}\n * @param {Object} aOptions - control options\n * @param {Object} [aOptions.options] - Itowns.control.Control options\n * @param {Boolean} [aOptions.options.collapsed = false] - Specify if the control has to be opened or not.\n * @fires attributions:update\n * @example\n * var attribution = new itowns.control.Attritbution({\n *  options : {\n *      collapsed: true\n *  }\n * });\n * // listeners for attributions update :\n * attribution.addEventListener(\"attributions:update\", function (e) {...});\n */\n\nfunction Attributions(aOptions) {\n  aOptions = aOptions || {};\n  var options = aOptions.options || {};\n\n  if (!(this instanceof Attributions)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  }\n\n  if (options && _typeof(options) !== \"object\") {\n    throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n  }\n\n  this._initialize(options);\n\n  var container = this._initContainer(options);\n\n  _Widget__WEBPACK_IMPORTED_MODULE_6__[\"default\"].call(this, {\n    name: \"Attributions\",\n    element: container,\n    target: options.target,\n    position: options.position\n  });\n}\n/*\n * @lends module:Attributions\n */\n\n\nAttributions.prototype = Object.create(_Widget__WEBPACK_IMPORTED_MODULE_6__[\"default\"].prototype, {}); // retrieves methods of the common class AttributionDOM\n\n_Common_Utils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].assign(Attributions.prototype, _Common_Controls_AttributionDOM__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n/**\n * Constructor (alias)\n *\n * @private\n */\n\nAttributions.prototype.constructor = Attributions; // ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\n\nAttributions.prototype.setGlobe = function (globe) {\n  // info : this function is called after a globe.addWidget() or a globe.removeWidget()\n  if (globe) {\n    // In the case of the adding of a control to the globe\n    var self = this; // Adding of the listeners\n    // At every globe movement, attributions may be updated,\n    // according to layers on globe, and their visibility.\n\n    this._callbacks.onPreRenderCallBack = function (e) {\n      var allLayers = e.colorLayersId.concat(e.elevationLayersId);\n\n      self._inRangeUpdate(allLayers, e.extent);\n    };\n\n    globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.PRE_RENDER, this._callbacks.onPreRenderCallBack);\n    globe.preRenderEventFetchViewExtent();\n    globe.preRenderEventFetchLayersDisplayed();\n  } else {\n    // delete listener\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.PRE_RENDER, this._callbacks.onPreRenderCallBack); // delete DOM\n\n\n    while (this._element.hasChildNodes()) {\n      this._element.removeChild(this._element.lastChild);\n    }\n\n    this._element.parentNode.removeChild(this._element);\n  } // call original setGlobe method\n\n\n  _Widget__WEBPACK_IMPORTED_MODULE_6__[\"default\"].prototype.setGlobe.call(this, globe);\n};\n/**\n * Collapse or display control main container\n *\n * @param {Boolean} collapsed - True to collapse control, False to display it\n */\n\n\nAttributions.prototype.setCollapsed = function (collapsed) {\n  if (collapsed === undefined) {\n    logger.error(\"Attributions:setCollapsed - missing collapsed parameter\");\n    return;\n  }\n\n  var isCollapsed = this.getCollapsed();\n\n  if (collapsed && isCollapsed || !collapsed && !isCollapsed) {\n    return;\n  }\n\n  document.getElementById(this._addUID(\"GPshowAttributionsList\")).checked = !collapsed;\n};\n/**\n * Returns true if widget is collapsed (minimize), false otherwise\n *\n * @return {Boolean} collapsed\n */\n\n\nAttributions.prototype.getCollapsed = function () {\n  return !document.getElementById(this._addUID(\"GPshowAttributionsList\")).checked;\n}; // ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize Attributions control (called by constructor)\n *\n * @param {Object} options - Itowns.control.Control options\n * @private\n */\n\n\nAttributions.prototype._initialize = function (options) {\n  // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n  this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_3__[\"default\"].generate(); // div which will contain the list divs.\n\n  this._AttributionContainer = null; // callbacks\n\n  this._callbacks = {}; // options\n\n  this._options = options;\n};\n/**\n * Creates control main container\n *\n * @method _initContainer\n * @param {Object} options - control options\n * @returns {DOMElement} container - widget container\n * @private\n */\n\n\nAttributions.prototype._initContainer = function (options) {\n  var container = this._createMainContainerElement(); // adds in the main container the layer display selector\n\n\n  var inputShow = this._createMainAttributionsShowElement();\n\n  container.appendChild(inputShow); // handles the \"collapsed\" mode\n\n  if (!options.collapsed) {\n    inputShow.checked = \"checked\";\n  } // adds the layer list in the main container\n\n\n  var divA = this._attributionListContainer = this._createMainAttributionsListContainer();\n\n  var ulA = this._createAttributionsList();\n\n  divA.appendChild(ulA);\n  container.appendChild(divA); // adds the widget picto in the main container\n\n  var picto = this._createMainPictoElement(options.collapsed);\n\n  container.appendChild(picto);\n  return container;\n};\n/**\n * Checks layers range\n *\n * @method _inRangeUpdate\n * @param {Array} layersDisplayed - Id of the layers diplayed on screen\n * @param {Object} extent - The globe view extent\n * @private\n */\n\n\nAttributions.prototype._inRangeUpdate = function (layersDisplayed, extent) {\n  var globe = this.getGlobe();\n  var scaleDenominator = 1 / globe.getScale();\n  var attributions = new Map();\n\n  for (var h = 0; h < layersDisplayed.length; h++) {\n    var layer = globe.getLayerById(layersDisplayed[h]);\n    var ori = layer.source.attribution;\n\n    if (ori) {\n      for (var j = 0; j < ori.length; j++) {\n        // if the attribution is already added, we skip to not add it several times\n        if (attributions.has(ori[j].name)) {\n          continue;\n        }\n\n        ; // if no constraints are associated to the originator, we just add the attribution\n\n        if (!ori[j].constraints || !ori[j].constraints[0]) {\n          // adds the attribution in the Map() called 'attributions'\n          attributions.set(ori[j].name, ori[j]);\n          continue;\n        } // if the minScaleDenominator exists\n\n\n        if (ori[j].constraints[0].minScaleDenominator) {\n          // if min/maxScaleDenominator are equals, we display the attribution corresponding to the zoom level associated to the scale denominator\n          if (ori[j].constraints[0].minScaleDenominator === ori[j].constraints[0].maxScaleDenominator) {\n            // retrieves the zoom level\n            var attributionZoomLevel = _Common_Utils_LayerUtils__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getZoomLevelFromScaleDenominator(ori[j].constraints[0].minScaleDenominator); // selects the scaledenominators around the corresponding zoom level\n\n            var maxAttributionScaleDenominator = (this._resolutionsWGS84[attributionZoomLevel] + this._resolutionsWGS84[attributionZoomLevel - 1]) / (0.00028 * 2);\n            var minAttributionScaleDenominator = (this._resolutionsWGS84[attributionZoomLevel] + this._resolutionsWGS84[attributionZoomLevel + 1]) / (0.00028 * 2);\n\n            if (!(maxAttributionScaleDenominator > scaleDenominator && scaleDenominator > minAttributionScaleDenominator)) {\n              continue;\n            } // either, we check we are located between the minScaleDenominator and the maxScaleDenominator\n\n          } else if (!(ori[j].constraints[0].minScaleDenominator < scaleDenominator && scaleDenominator < ori[j].constraints[0].maxScaleDenominator)) {\n            continue;\n          }\n        } // checks if 'bbox\" exists\n\n\n        if (ori[j].constraints[0].bbox) {\n          // checks if we are into the bbox limits\n          var intersectsX = ori[j].constraints[0].bbox.left <= extent.east && extent.west <= ori[j].constraints[0].bbox.right;\n          var intersectsY = ori[j].constraints[0].bbox.bottom <= extent.north && extent.south <= ori[j].constraints[0].bbox.top;\n\n          if (intersectsX && intersectsY) {\n            // adds the attribution in the Map() called 'attributions'\n            attributions.set(ori[j].name, ori[j]);\n          } // if 'bbox' attribute doesn't exist\n\n        } else if (!ori[j].constraints[0].bbox) {\n          attributions.set(ori[j].name, ori[j]);\n        }\n      }\n    }\n  }\n\n  if (attributions.size) {\n    this._updateAttributionListContainer(attributions);\n    /**\n    * event triggered when the attributions are updated\n    *\n    * @event attributions:update\n    * @type Object\n    * @property {Map} attributions - list of attributions\n    */\n\n\n    this.dispatchEvent({\n      type: \"attributions:update\",\n      attributions: attributions\n    });\n  }\n}; // ################################################################### //\n// ######################### DOM events ############################## //\n// ################################################################### //\n\n/**\n * Updates the layer list container\n *\n * @method _updateAttributionListContainer\n * @param {Map} attributions - map of attributions\n * @private\n */\n\n\nAttributions.prototype._updateAttributionListContainer = function (attributions) {\n  var element = document.getElementById(this._addUID(\"GPAttributionsList\"));\n  document.getElementById(this._addUID(\"GPAttributionsList\")).parentNode.removeChild(element);\n\n  var ul = this._createAttributionsList();\n\n  attributions.forEach(function (a) {\n    var li = document.createElement(\"li\");\n    var link = document.createElement(\"a\");\n    link.href = a.url;\n    link.innerHTML = a.name + \"&nbsp\";\n    link.target = \"_blank\";\n    li.id = a.name.replace(/\\s/g, \"\");\n    li.appendChild(link);\n    ul.appendChild(li);\n  });\n\n  this._attributionListContainer.appendChild(ul);\n};\n\nAttributions.prototype._resolutionsWGS84 = {\n  0: 156543.033928041,\n  1: 78271.51696402048,\n  2: 39135.758482010235,\n  3: 19567.87924100512,\n  4: 9783.93962050256,\n  5: 4891.96981025128,\n  6: 2445.98490512564,\n  7: 1222.99245256282,\n  8: 611.49622628141,\n  9: 305.7481131407048,\n  10: 152.8740565703525,\n  11: 76.43702828517624,\n  12: 38.21851414258813,\n  13: 19.10925707129406,\n  14: 9.554628535647032,\n  15: 4.777314267823516,\n  16: 2.388657133911758,\n  17: 1.194328566955879,\n  18: 0.5971642834779395,\n  19: 0.2985821417389697,\n  20: 0.1492910708694849,\n  21: 0.0746455354347424\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Attributions);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/Attributions.js\n");

/***/ }),

/***/ "./src/Itowns/Controls/BoostRelief.js":
/*!********************************************!*\
  !*** ./src/Itowns/Controls/BoostRelief.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Controls_BoostReliefDOM__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Controls/BoostReliefDOM */ \"./src/Common/Controls/BoostReliefDOM.js\");\n/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget */ \"./src/Itowns/Controls/Widget.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"BoostRelief\");\n/**\n * @classdesc\n * Control to manage globe layers : their order, visibility and relief, and display their informations (title, description, legends, metadata...)\n *\n * @constructor\n * @extends {itowns.control.Widget}\n * @alias itowns.control.BoostRelief\n * @param {Object} brOptions - control options\n * @param {Object} [brOptions.scale] - Defines the scale used to boost the relief\n * @param {Number} [brOptions.scale.min] - Minimum of the scale - 1 by default\n * @param {Number} [brOptions.scale.max] - Maximum of the scale - 50 by default\n * @param {Number} [brOptions.scale.step] - Step of the scale - 1 by default\n * @param {Boolean} [brOptions.collapsed = true] - Specify if widget has to be collapsed (true) or not (false) on globe loading.\n * @param {Boolean} [brOptions.defaultBoost = 1] - Default boost value applied to the widget and the elevation layers when loaded\n * @example\n * var boostRelief = new itowns.control.BoostRelief({\n *      scale : {\n *          max : 30,\n *          step : 2\n *      },\n *      defaultBoost : 6\n * })\n */\n\nfunction BoostRelief(brOptions) {\n  brOptions = brOptions || {};\n  var options = brOptions.options || {};\n\n  if (!(this instanceof BoostRelief)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  }\n\n  if (options && _typeof(options) !== \"object\") {\n    throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n  }\n\n  this._initialize();\n\n  var container = this._initContainer(brOptions);\n\n  var targetDiv = document.getElementById(options.target) || null;\n  _Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].call(this, {\n    name: \"BoostRelief\",\n    element: container,\n    target: targetDiv\n  });\n}\n/*\n * @lends module:BoostRelief\n */\n\n\nBoostRelief.prototype = Object.create(_Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prototype, {}); // retrieves methods of the common class BoostReliefDOM\n\n_Common_Utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].assign(BoostRelief.prototype, _Common_Controls_BoostReliefDOM__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n/**\n * Constructor (alias)\n *\n * @private\n */\n\nBoostRelief.prototype.constructor = BoostRelief; // ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\n\nBoostRelief.prototype.setGlobe = function (globe) {\n  // TODO - removing listeners\n  // this._globe.removeLayerListener(layers[j], GlobeViewExtended.EVENTS.Relief_PROPERTY_CHANGED, this._callbacks.onReliefLayerCallBack);\n  // deletes the layerSwitcher DOM\n  if (!globe) {\n    while (this._element.hasChildNodes()) {\n      this._element.removeChild(this._element.lastChild);\n    }\n\n    this._element.parentNode.removeChild(this._element);\n  } // calls original setGlobe method\n\n\n  _Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prototype.setGlobe.call(this, globe);\n};\n/**\n * Collapse or display control main container\n *\n * @param {Boolean} collapsed - True to collapse control, False to display it\n */\n\n\nBoostRelief.prototype.setCollapsed = function (collapsed) {\n  if (collapsed === undefined) {\n    logger.error(\"BoostRelief:setCollapsed - missing collapsed parameter\");\n    return;\n  }\n\n  if (typeof collapsed !== \"boolean\") {\n    logger.error(\"BoostRelief:setCollapsed - collapsed parameter is not a boolean\");\n    return;\n  }\n\n  var isCollapsed = this.getCollapsed();\n\n  if (collapsed && isCollapsed || !collapsed && !isCollapsed) {\n    return;\n  }\n\n  var controlDiv = document.getElementById(this._addUID(\"GPBoostReliefListContainer\"));\n\n  if (collapsed) {\n    controlDiv.style.display = \"block\";\n    document.getElementById(this._addUID(\"GPshowBoostReliefList\")).checked = true;\n  } else {\n    controlDiv.style.display = \"none\";\n    document.getElementById(this._addUID(\"GPshowBoostReliefList\")).checked = false;\n  }\n};\n/**\n * Returns true if widget is collapsed (minimize), false otherwise\n * @return {Boolean} is collapsed\n */\n\n\nBoostRelief.prototype.getCollapsed = function () {\n  return document.getElementById(this._addUID(\"GPshowBoostReliefList\")).checked;\n}; // ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize BoostRelief control (called by constructor)\n *\n * @private\n */\n\n\nBoostRelief.prototype._initialize = function () {\n  // id of the control ; used to suffix the CSS id (handles cases with severel controls on the same page)\n  this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_2__[\"default\"].generate(); // {Object} control layers list. Each key is a layer id, and its value is an object of layers options (layer, id, relief, visibility, title, description...)\n\n  this._layers = {}; // callbacks\n\n  this._callbacks = {};\n};\n/**\n * Creates control main container\n *\n * @method _initContainer\n * @param {Object} brOptions - control options\n * @returns {DOMElement} container - widget container\n * @private\n */\n\n\nBoostRelief.prototype._initContainer = function (brOptions) {\n  var container = this._createMainContainerElement(); // adds in the main container the layer display selector\n\n\n  var inputShow = this._createMainBoostReliefShowElement(brOptions.collapsed);\n\n  container.appendChild(inputShow); // adds the layer list in the main container\n\n  var divA = this._boostReliefListContainer = this._createMainBoostReliefListContainer();\n\n  var boostReliefList = this._createAdvancedToolElement(brOptions);\n\n  divA.appendChild(boostReliefList);\n  container.appendChild(divA); // adds the widget picto in the main container\n\n  var picto = this._createMainPictoElement();\n\n  container.appendChild(picto);\n\n  if (brOptions.collapsed) {\n    divA.style.display = \"block\";\n  } else {\n    divA.style.display = \"none\";\n  }\n\n  return container;\n}; // ################################################################### //\n// ######################### DOM events ############################## //\n// ################################################################### //\n\n/**\n * Changes layer relief on layer relief picto click\n *\n * @method _onChangeLayerRelief\n * @param {Object} e - HTML event\n * @private\n */\n\n\nBoostRelief.prototype._onChangeLayerRelief = function (e) {\n  var reliefValue = parseInt(e.target.value);\n  var reliefId = document.getElementById(this._addUID(\"GPreliefValue\"));\n  reliefId.innerHTML = \"x\" + reliefValue;\n\n  this._updateLayersRelief(reliefValue);\n};\n/**\n * Updates relief values of all elevation layers\n *\n * @method _updateLayerRelief\n * @param {Number} reliefValue - relief value\n * @private\n */\n\n\nBoostRelief.prototype._updateLayersRelief = function (reliefValue) {\n  var globe = this.getGlobe();\n\n  function updateScale(layer, value) {\n    layer.scale = value;\n    globe.notifyChange(layer);\n  } // if the scale of a single elevationLayer change, we update the scale of all others\n\n\n  var elevationLayers = globe.getElevationLayers();\n\n  for (var i = 0; i < elevationLayers.length; i++) {\n    updateScale(elevationLayers[i], reliefValue);\n  }\n};\n/**\n * Updates relief slider and all elevation layers with the given boost value\n *\n * @method changeBoost\n * @param {Number} reliefValue - relief value\n */\n\n\nBoostRelief.prototype.changeBoost = function (reliefValue) {\n  var layerReliefInput = document.getElementById(this._addUID(\"GPreliefValueDiv\"));\n\n  if (!layerReliefInput) {\n    logger.error(\"BoostRelief:changeBoost - boostRelief slider not loaded\");\n    return;\n  } // the reliefValue given must me in the slider range\n\n\n  if (reliefValue > layerReliefInput.max) {\n    reliefValue = layerReliefInput.max;\n  }\n\n  if (reliefValue < layerReliefInput.min) {\n    reliefValue = layerReliefInput.min;\n  } // updates the relief of all the elevationlayers\n\n\n  this._updateLayersRelief(reliefValue); // updates the slider cursor\n\n\n  layerReliefInput.value = reliefValue; // updates the slider text\n\n  var layerReliefSpan = document.getElementById(this._addUID(\"GPreliefValue\"));\n\n  if (layerReliefSpan) {\n    layerReliefSpan.innerHTML = \"x\" + reliefValue;\n  }\n};\n/**\n * Gets layer id from div id\n *\n * @method _resolveLayerId\n * @param {String} divId - HTML div id\n * @returns {String} layer id\n * @private\n */\n\n\nBoostRelief.prototype._resolveLayerId = function (divId) {\n  var divName = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_2__[\"default\"].name(divId); // ex GPvisibilityPicto_ID_26\n\n  return divName.substring(divName.indexOf(\"_ID_\") + 4); // ex. 26\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (BoostRelief);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/BoostRelief.js\n");

/***/ }),

/***/ "./src/Itowns/Controls/LayerSwitcher.js":
/*!**********************************************!*\
  !*** ./src/Itowns/Controls/LayerSwitcher.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GlobeViewExtended */ \"./src/Itowns/GlobeViewExtended.js\");\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Controls_LayerSwitcherDOM__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Controls/LayerSwitcherDOM */ \"./src/Common/Controls/LayerSwitcherDOM.js\");\n/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget */ \"./src/Itowns/Controls/Widget.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLogger(\"LayerSwitcher\");\n/**\n * @classdesc\n * Control to manage globe layers : their order, visibility and opacity, and display their informations (title, description, legends, metadata...)\n *\n * @constructor\n * @extends {itowns.control.Widget}\n * @alias itowns.control.LayerSwitcher\n * @param {Object} lsOptions - control options\n * @param {Array} [lsOptions.layers] - list of layers to be configured. Each array element is an object, with following properties :\n * @param {String} [lsOptions.layers.id] - ol.layer.Layer layer to be configured (that has been added to globe)\n * @param {Object} [lsOptions.layers.config] - custom configuration object for layer information (title, description, legends, metadata, quicklook url), with following properties :\n * @param {String} [lsOptions.layers.config.title] - layer alias, to be displayed in widget layer list. E.g. : \"Cartes IGN\"\n * @param {String} [lsOptions.layers.config.description] - layer description, to be displayed on title hover, or in layer information panel.\n * @param {String} [lsOptions.layers.config.quicklookUrl] - link to a quick look image for this layer.\n * @param {Array} [lsOptions.layers.config.legends] - array of layer legends. Each array element is an object, with following properties :\n *      - url (String, mandatory) : link to a legend\n *      - minScaleDenominator (Number, optional) : min scale denominator for legend validity.\n * @param {Array} [lsOptions.layers.config.metadata] - array of layer metadata. Each array element is an object, with property url (String, mandatory) : link to a metadata\n * @param {Object} [lsOptions.options] - Itowns.control.Control options\n * @param {Boolean} [lsOptions.options.collapsed = true] - Specify if widget has to be collapsed (true) or not (false) on globe loading.\n * @example\n * var layerSwitcher = new itowns.control.LayerSwitcher({\n *  layers : [\n *      {\n *          id : \"myLayer\",\n *          config : {\n *              title : \"test layer name 1\",\n *              description : \"test layer desc 1\",\n *          }\n *      }\n *  ],\n *  options : {\n *      collapsed : false\n *  }\n * ));\n */\n\nfunction LayerSwitcher(lsOptions) {\n  lsOptions = lsOptions || {};\n  var options = lsOptions.options || {};\n  var layers = lsOptions.layers || [];\n\n  if (!(this instanceof LayerSwitcher)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  }\n\n  if (layers && !Array.isArray(layers)) {\n    throw new Error(\"ERROR WRONG_TYPE : layers should be an array\");\n  }\n\n  if (options && _typeof(options) !== \"object\") {\n    throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n  }\n\n  this._initialize(options, layers);\n\n  var container = this._initContainer(options); // property to save layers conf added after the LS is initialized\n\n\n  this._addedLayerConf = {};\n  _Widget__WEBPACK_IMPORTED_MODULE_5__[\"default\"].call(this, {\n    name: \"LayerSwitcher\",\n    element: container,\n    target: options.target,\n    position: options.position\n  });\n}\n/*\n * @lends module:LayerSwitcher\n */\n\n\nLayerSwitcher.prototype = Object.create(_Widget__WEBPACK_IMPORTED_MODULE_5__[\"default\"].prototype, {}); // retrieves methods of the common class LayerSwitcherDOM\n\n_Common_Utils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].assign(LayerSwitcher.prototype, _Common_Controls_LayerSwitcherDOM__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n/**\n * Constructor (alias)\n *\n * @private\n */\n\nLayerSwitcher.prototype.constructor = LayerSwitcher; // ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\n\nLayerSwitcher.prototype.setGlobe = function (globe) {\n  var layers;\n\n  if (globe) {\n    // in the case the control is added to the globe\n    var self = this; // add options layers to layerlist.\n    // (only the layers configurated by the user in the options of the layerSwitcher )\n    // the other layers of the map will be added in the setGlobe method\n\n    for (var i = 0; i < this._initLayers.length; i++) {\n      // retrieves the layer...\n      var layer = null;\n\n      if (this._initLayers[i].id) {\n        layer = globe.getLayerById(this._initLayers[i].id);\n      }\n\n      if (layer && this._initLayers[i].displayed) {\n        // .. and the infos of the configuration if they exist (title, description, legends, quicklook, metadata)\n        var conf = this._initLayers[i].config || {};\n        var layerOptions = {\n          title: conf.title || layer.title || this._initLayers[i].id,\n          description: conf.description || null,\n          legends: conf.legends || [],\n          metadata: conf.metadata || [],\n          quicklookUrl: conf.quicklookUrl || null\n        };\n\n        if (typeof conf.ipr !== \"undefined\") {\n          layerOptions.ipr = conf.ipr;\n        }\n\n        if (typeof conf.opacity !== \"undefined\") {\n          layerOptions.opacity = conf.opacity;\n        }\n\n        if (typeof conf.visibility !== \"undefined\") {\n          layerOptions.visibility = conf.visibility;\n        }\n\n        this._layers[layer.id] = layerOptions;\n      }\n    } // adds the layers\n\n\n    this._addGlobeLayers(globe); // adding of listeners\n\n\n    this._callbacks.onOpacityLayerCallBack = function (e) {\n      self._updateLayerOpacity(e.target.id, e[\"new\"].opacity);\n    };\n\n    this._callbacks.onVisibilityLayerCallBack = function (e) {\n      self._updateLayerVisibility(e.target.id, e[\"new\"].visible);\n    }; // At every globe movement, layer switcher may be updated,\n    // according to layers on globe, and their range.\n\n\n    this._callbacks.onChangedViewCallBack = function (e) {\n      self._inRangeUpdate(e.colorLayersId);\n    };\n\n    globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.PRE_RENDER, this._callbacks.onChangedViewCallBack); // prerender events returns visible layers\n\n    globe.preRenderEventFetchColorLayersDisplayed();\n\n    this._callbacks.onAddedLayerCallBack = function (e) {\n      var id = e.layerId;\n\n      if (self) {\n        if (!self._layerDisplayedInLayerSwitcher(id)) {\n          return;\n        }\n\n        var layer = self.getGlobe().getLayerById(id);\n\n        if (layer.type === \"elevation\") {\n          return;\n        }\n\n        var layerConf = self._getLayerConf(id) || self._addedLayerConf[id];\n\n        if (layerConf) {\n          self.addLayer(layer, layerConf);\n        } else {\n          self.addLayer(layer);\n        }\n      }\n    };\n\n    globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.LAYER_ADDED, this._callbacks.onAddedLayerCallBack);\n\n    this._callbacks.onRemovedLayerCallBack = function (e) {\n      var id = e.layerId; // update the index max and delete the layer from the layerswitcher\n\n      if (self) {\n        self.removeLayer(id);\n      }\n    };\n\n    globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.LAYER_REMOVED, this._callbacks.onRemovedLayerCallBack);\n\n    this._callbacks.onIndexLayerCallBack = function (e) {\n      var arraysEquals = function arraysEquals(a1, a2) {\n        if (a1.length !== a2.length) {\n          return false;\n        }\n\n        for (var i = 0; i < a1.length; ++i) {\n          if (a1[i] !== a2[i]) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      if (!arraysEquals(e[\"new\"].sequence, e.previous.sequence)) {\n        self._updateLayerListContainer();\n      }\n    };\n\n    globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.LAYERS_ORDER_CHANGED, this._callbacks.onIndexLayerCallBack);\n    layers = globe.getColorLayers();\n\n    for (var ii = 0; ii < layers.length; ++ii) {\n      globe.addLayerListener(layers[ii], _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.OPACITY_PROPERTY_CHANGED, this._callbacks.onOpacityLayerCallBack);\n      globe.addLayerListener(layers[ii], _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.VISIBLE_PROPERTY_CHANGED, this._callbacks.onVisibilityLayerCallBack);\n\n      self._updateLayerVisibility(layers[ii].id, layers[ii].visible);\n\n      self._updateLayerOpacity(layers[ii].id, layers[ii].opacity);\n    }\n  } else {\n    // removes the listeners associated to the deleted layerswitcher\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.PRE_RENDER, this._callbacks.onChangedViewCallBack);\n\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.LAYER_ADDED, this._callbacks.onAddedLayerCallBack);\n\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.LAYER_REMOVED, this._callbacks.onRemovedLayerCallBack);\n\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.LAYERS_ORDER_CHANGED, this._callbacks.onIndexLayerCallBack);\n\n    layers = this._globe.getColorLayers();\n\n    for (var j = 0; j < layers.length; ++j) {\n      this._globe.removeLayerListener(layers[j], _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.OPACITY_PROPERTY_CHANGED, this._callbacks.onOpacityLayerCallBack);\n\n      this._globe.removeLayerListener(layers[j], _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.VISIBLE_PROPERTY_CHANGED, this._callbacks.onVisibilityLayerCallBack);\n    } // deletes the layerSwitcher DOM\n\n\n    while (this._element.hasChildNodes()) {\n      this._element.removeChild(this._element.lastChild);\n    }\n\n    this._element.parentNode.removeChild(this._element);\n  } // calls original setGlobe method\n\n\n  _Widget__WEBPACK_IMPORTED_MODULE_5__[\"default\"].prototype.setGlobe.call(this, globe);\n};\n/**\n * Adds a new layer to control (when added to globe) or add new layer configuration\n *\n * @param {Object} layer - layer to add to layer switcher\n * @param {Object} [config] - additional options for layer configuration\n * @param {Object} [config.title] - layer title (default is layer identifier)\n * @param {Object} [config.description] - layer description (default is null)\n * @param {Object} [config.legends] - layer legends (default is an empty array)\n * @param {Object} [config.metadata] - layer metadata (default is an empty array)\n * @param {Object} [config.quicklookUrl] - layer quicklookUrl (default is null)\n * @example\n *   layerSwitcher.addLayer({\n *       layer : gpParcels,\n *       config : {\n *           title : \"Parcelles cadastrales\",\n *           description : \"description de la couche\",\n *           quicklookUrl : \"http://quicklookUrl.fr\"\n *       }\n *   })\n */\n\n\nLayerSwitcher.prototype.addLayer = function (layer, config) {\n  config = config || {};\n  var globe = this.getGlobe();\n\n  if (!layer) {\n    logger.error(\"LayerSwitcher:addLayer - missing layer parameter\");\n    return;\n  }\n\n  var id = layer.id;\n\n  if (id === \"undefined\") {\n    logger.error(\"LayerSwitcher:addLayer - configuration cannot be set for \" + layer + \" layer (layer id not found)\");\n    return;\n  } // subscription to the events\n\n\n  globe.addLayerListener(layer, _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.OPACITY_PROPERTY_CHANGED, this._callbacks.onOpacityLayerCallBack);\n  globe.addLayerListener(layer, _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.VISIBLE_PROPERTY_CHANGED, this._callbacks.onVisibilityLayerCallBack); // make sure layer is in globe layers\n\n  var LayerInGlobe = globe.getLayerById(id);\n\n  if (!LayerInGlobe) {\n    logger.error(\"LayerSwitcher:addLayer - configuration cannot be set for \", layer, \" layer (layer is not in globe layers )\");\n    return;\n  } // if layer is not already in layers list, add it to control (layers list and container div)\n\n\n  if (!this._layers[id]) {\n    // 1. add layer to layers list\n    var layerInfos = this._getLayerInfo(layer) || {};\n    var layerOptions = {\n      title: config.title || layerInfos._title || id,\n      description: config.description || layerInfos._description || null,\n      legends: config.legends || layerInfos._legends || [],\n      metadata: config.metadata || layerInfos._metadata || [],\n      quicklookUrl: config.quicklookUrl || layerInfos._quicklookUrl || null\n    };\n\n    if (typeof config.ipr !== \"undefined\") {\n      layerOptions.ipr = config.ipr;\n      layer.attribution = layerOptions.ipr;\n    }\n\n    if (typeof config.opacity !== \"undefined\") {\n      layerOptions.opacity = config.opacity;\n      layer.opacity = layerOptions.opacity;\n    }\n\n    if (typeof config.visibility !== \"undefined\") {\n      layerOptions.visibility = config.visibility;\n      layer.visible = layerOptions.visibility;\n    }\n\n    this._layers[id] = layerOptions; // creation of the div of the layer which will be added to the layerSwitcher\n\n    this._layers[id].div = this._createLayerDiv(id);\n\n    this._updateLayerListContainer(); // user may also add a new configuration for an already added layer\n\n  } else if (this._layers[id] && config) {\n    // add new configuration parameters to layer informations\n    for (var prop in config) {\n      if (config.hasOwnProperty(prop)) {\n        this._layers[id][prop] = config[prop];\n      }\n    }\n\n    if (typeof config.ipr !== \"undefined\") {\n      layer.attribution = config.ipr;\n    }\n\n    if (typeof config.opacity !== \"undefined\") {\n      layer.opacity = config.opacity;\n    }\n\n    if (typeof config.visibility !== \"undefined\") {\n      layer.visible = config.visibility;\n    } // set new title in layer div\n\n\n    if (config.title) {\n      var nameDiv = document.getElementById(this._addUID(\"GPname_ID_\" + id));\n\n      if (nameDiv) {\n        nameDiv.innerHTML = config.title; // FIXME a ajouter?\n        // nameDiv.title = config.description || config.title;\n      }\n    } // add layer info picto if necessary\n\n\n    var infodiv = document.getElementById(this._addUID(\"GPinfo_ID_\" + id));\n\n    if (!document.getElementById(this._addUID(\"GPinfo_ID_\" + id)) && config.description && (config.legends || config.metadata || config.quicklookUrl)) {\n      var advancedTools = document.getElementById(this._addUID(\"GPadvancedTools_ID_\" + id));\n\n      if (advancedTools) {\n        advancedTools.appendChild(this._createAdvancedToolInformationElement({\n          id: id\n        }));\n      }\n    } // close layer info element if open, to update information.\n\n\n    if (infodiv && infodiv.className === \"GPlayerInfoOpened\") {\n      document.getElementById(this._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n      infodiv.className = \"GPlayerInfo\";\n    }\n  }\n};\n/**\n * Removes a layer from control\n *\n * @param {Object} layerId - layer to remove to layer switcher\n */\n\n\nLayerSwitcher.prototype.removeLayer = function (layerId) {\n  var layerList = document.getElementById(this._addUID(\"GPlayersList\")); // close layer info element if open.\n\n  var infodiv = document.getElementById(this._addUID(\"GPinfo_ID_\" + layerId));\n\n  if (infodiv && infodiv.className === \"GPlayerInfoOpened\") {\n    document.getElementById(this._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n    infodiv.className = \"GPlayerInfo\";\n  } // remove layer div\n\n\n  var layerDiv = document.getElementById(this._addUID(\"GPlayerSwitcher_ID_\" + layerId)); // no layerDiv retrieved for VT-label layers\n\n  if (layerDiv) {\n    layerList.removeChild(layerDiv);\n  } // removes layer of the layer list\n\n\n  delete this._layers[layerId];\n};\n/**\n * Collapse or display control main container\n *\n * @param {Boolean} collapsed - True to collapse control, False to display it\n */\n\n\nLayerSwitcher.prototype.setCollapsed = function (collapsed) {\n  if (collapsed === undefined) {\n    logger.error(\"LayerSwitcher:setCollapsed - missing collapsed parameter\");\n    return;\n  }\n\n  var isCollapsed = this.getCollapsed();\n\n  if (collapsed && isCollapsed || !collapsed && !isCollapsed) {\n    return;\n  } // simulates the panel opening after a click\n\n\n  if (!isCollapsed) {\n    var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n    for (var i = 0; i < layers.length; i++) {\n      layers[i].className = \"GPlayerInfo\";\n    }\n\n    document.getElementById(this._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n  }\n\n  document.getElementById(this._addUID(\"GPshowLayersList\")).checked = !collapsed;\n};\n/**\n * Returns true if widget is collapsed (minimize), false otherwise\n * @return {Boolean} is collapsed\n */\n\n\nLayerSwitcher.prototype.getCollapsed = function () {\n  return !document.getElementById(this._addUID(\"GPshowLayersList\")).checked;\n}; // ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize LayerSwitcher control (called by constructor)\n *\n * @param {Object} options - Itowns.control.Control options\n * @param {Array} layers - list of layers to be configured. Each array element is an object, with following properties :\n * @private\n */\n\n\nLayerSwitcher.prototype._initialize = function (options, layers) {\n  // id of the control ; used to suffix the CSS id (handles cases with severel controls on the same page)\n  this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_3__[\"default\"].generate(); // {Object} control layers list. Each key is a layer id, and its value is an object of layers options (layer, id, opacity, visibility, title, description...)\n\n  this._layers = {}; // div which will contain the divs of the lists\n\n  this._layerListContainer = null; // callbacks\n\n  this._callbacks = {}; // options\n\n  this._options = options;\n  this._initLayers = layers;\n};\n/**\n * Returns the layer configuration defined at widget initialization\n *\n * @method _getLayerConf\n * @param {String} layerId - layer id\n * @return {Object} layerConfig - layer configuration\n * @private\n */\n\n\nLayerSwitcher.prototype._getLayerConf = function (layerId) {\n  for (var i = 0; i < this._initLayers.length; ++i) {\n    if (this._initLayers[i].id === layerId) {\n      return this._initLayers[i].config;\n    }\n  }\n\n  return null;\n};\n/**\n * Indicates if the layer must be displayed in the layerSwitcher\n *\n * @method _layerDisplayedInLayerSwitcher\n * @param {String} layerId - layer id\n * @return {Boolean} displayed\n * @private\n */\n\n\nLayerSwitcher.prototype._layerDisplayedInLayerSwitcher = function (layerId) {\n  for (var i = 0; i < this._initLayers.length; ++i) {\n    if (this._initLayers[i].id === layerId) {\n      return typeof this._initLayers[i].displayed === \"undefined\" || this._initLayers[i].displayed;\n    }\n  }\n\n  return true;\n};\n/**\n * Creates control main container\n *\n * @method _initContainer\n * @param {Object} options - control options\n * @returns {DOMElement} container - widget container\n * @private\n */\n\n\nLayerSwitcher.prototype._initContainer = function (options) {\n  // creation of the main container\n  var container = this._createMainContainerElement(); // adding in the main container\n\n\n  var input = this._createMainLayersShowElement();\n\n  container.appendChild(input); // handling of the \"collapsed\" mode\n\n  if (!options.collapsed) {\n    input.checked = \"checked\";\n  } // adds the layer list in the main container\n\n\n  var divL = this._layerListContainer = this._createMainLayersElement();\n\n  container.appendChild(divL); // creates the draggable mode\n\n  this._createDraggableElement(divL, this); // adds the control picto in the main container\n\n\n  var picto = this._createMainPictoElement();\n\n  container.appendChild(picto); // adds the info panel in the main container\n\n  var divI = this._createMainInfoElement();\n\n  container.appendChild(divI);\n  return container;\n};\n/**\n * Adds control layers to control main container\n *\n * @method _addGlobeLayers\n * @param {Object} globe - the Itowns.GlobeViewExtended object\n * @private\n */\n\n\nLayerSwitcher.prototype._addGlobeLayers = function (globe) {\n  // Retrieves the element which contains the different layers\n  var elementLayersList;\n  var childNodes = this.getElement().childNodes;\n\n  for (var i = 0; i < childNodes.length; i++) {\n    if (childNodes[i].id === this._addUID(\"GPlayersList\")) {\n      elementLayersList = childNodes[i];\n      break;\n    }\n  } // reorders layers according to the layer stack (globe.getLayers returns an reverse ordenered array)\n\n\n  var layers = globe.getColorLayers();\n  var orderedLayers = layers.sort(function (a, b) {\n    return b.sequence - a.sequence;\n  }); // loop over all the layers of the map in order to add them to the control layer list (if they are not already added)\n\n  orderedLayers.forEach(function (layer) {\n    // adds the map layers to the list\n    var id;\n    id = layer.id;\n\n    if (!this._layerDisplayedInLayerSwitcher(id)) {\n      return;\n    }\n\n    var layerConf = this._getLayerConf(id) || this._addedLayerConf[id] || {};\n    var layerInfos = this._getLayerInfo(layer) || {};\n\n    if (!this._layers[id]) {\n      // if the layer is not yet in the layer list (this._layers), we add it\n      var layerOptions = {\n        title: layerConf.title || layerInfos._title || id,\n        description: layerConf.description || layerInfos._description || null,\n        legends: layerConf.legends || layerInfos._legends || [],\n        metadata: layerConf.metadata || layerInfos._metadata || [],\n        quicklookUrl: layerConf.quicklookUrl || layerInfos._quicklookUrl || null\n      };\n      this._layers[id] = layerOptions;\n    } else {\n      var lsLayerConf = this._layers[id];\n\n      if (typeof lsLayerConf.ipr !== \"undefined\") {\n        layer.options.attribution = lsLayerConf.ipr;\n      }\n\n      if (typeof lsLayerConf.opacity !== \"undefined\") {\n        layer.opacity = lsLayerConf.opacity;\n      }\n\n      if (typeof lsLayerConf.visibility !== \"undefined\") {\n        layer.visible = lsLayerConf.visibility;\n      }\n    }\n\n    var layerDiv = this._createLayerDiv(id);\n\n    this._layers[id].div = layerDiv;\n    elementLayersList.appendChild(layerDiv);\n  }, this);\n};\n/**\n * creates layer div (to append to control DOM element).\n *\n * @method _createLayerDiv\n * @param {String} layerId - layer id\n * @returns {DOMElement} layer div\n * @private\n */\n\n\nLayerSwitcher.prototype._createLayerDiv = function (layerId) {\n  var layerOptions = this._layers[layerId];\n  var isLegends = layerOptions.legends && layerOptions.legends.length !== 0;\n  var isMetadata = layerOptions.metadata && layerOptions.metadata.length !== 0;\n  var isQuicklookUrl = layerOptions.quicklookUrl;\n\n  if (isLegends || isMetadata || isQuicklookUrl) {\n    layerOptions.displayInformationElement = true;\n  } // adds a specific div in the control for the layer\n\n\n  layerOptions.id = layerId;\n\n  var layerDiv = this._createContainerLayerElement(layerOptions);\n\n  if (!layerOptions.inRange) {\n    layerDiv.classList.add(\"outOfRange\");\n  }\n\n  return layerDiv;\n}; // ################################################################### //\n// ######################### DOM events ############################## //\n// ################################################################### //\n\n/**\n * Changes layer opacity on layer opacity picto click\n *\n * @method _onChangeLayerOpacity\n * @param {Object} e - HTML event\n * @private\n */\n\n\nLayerSwitcher.prototype._onChangeLayerOpacity = function (e) {\n  var globe = this.getGlobe();\n\n  var layerID = this._resolveLayerId(e.target.id);\n\n  var opacityValue = e.target.value;\n  var opacityId = document.getElementById(this._addUID(\"GPopacityValue_ID_\" + layerID));\n  opacityId.innerHTML = opacityValue + \"%\";\n  globe.setLayerOpacity(layerID, opacityValue / 100);\n};\n/**\n * Updates picto opacity value on layer opacity change\n *\n * @method _updateLayerOpacity\n * @param {String} layerId - layer id\n * @param {Number} opacity - opacity value\n * @private\n */\n\n\nLayerSwitcher.prototype._updateLayerOpacity = function (layerId, opacity) {\n  if (opacity > 1) {\n    opacity = 1;\n  }\n\n  if (opacity < 0) {\n    opacity = 0;\n  }\n\n  var layerOpacityInput = document.getElementById(this._addUID(\"GPopacityValueDiv_ID_\" + layerId));\n\n  if (layerOpacityInput) {\n    layerOpacityInput.value = Math.round(opacity * 100);\n  }\n\n  var layerOpacitySpan = document.getElementById(this._addUID(\"GPopacityValue_ID_\" + layerId));\n\n  if (layerOpacitySpan) {\n    layerOpacitySpan.innerHTML = Math.round(opacity * 100) + \"%\";\n  }\n};\n/**\n * Changes layer visibility on layer visibility picto click\n *\n * @method _onVisibilityLayerClick\n * @param {Object} e - HTML event\n * @private\n */\n\n\nLayerSwitcher.prototype._onVisibilityLayerClick = function (e) {\n  var globe = this.getGlobe();\n\n  var layerID = this._resolveLayerId(e.target.id);\n\n  globe.setLayerVisibility(layerID, e.target.checked); // update viewer\n};\n/**\n * Changes picto visibility on layer visibility change\n *\n * @method _updateLayerVisibility\n * @param {String} layerId - layer id\n * @param {Boolean} visibility - visible if true\n * @private\n */\n\n\nLayerSwitcher.prototype._updateLayerVisibility = function (layerId, visibility) {\n  var layerVisibilityInput = document.getElementById(this._addUID(\"GPvisibility_ID_\" + layerId));\n\n  if (layerVisibilityInput) {\n    layerVisibilityInput.checked = visibility;\n  }\n};\n/**\n * Opens layer information panel on picto click\n *\n * @method _onOpenLayerInfoClick\n * @param {Event} e - MouseEvent\n * @private\n */\n\n\nLayerSwitcher.prototype._onOpenLayerInfoClick = function (e) {\n  var layerID = this._resolveLayerId(e.target.id);\n\n  var layerOptions = this._layers[layerID];\n  var panel;\n  var info; // Close layer info panel\n\n  var divId = document.getElementById(e.target.id);\n\n  if (divId.className === \"GPlayerInfoOpened\") {\n    if (divId.classList !== undefined) {\n      divId.classList.remove(\"GPlayerInfoOpened\");\n      divId.classList.add(\"GPlayerInfo\");\n    }\n\n    panel = document.getElementById(this._addUID(\"GPlayerInfoPanel\"));\n\n    if (panel.classList !== undefined) {\n      panel.classList.remove(\"GPpanel\");\n      panel.classList.remove(\"GPlayerInfoPanelOpened\");\n      panel.classList.add(\"GPlayerInfoPanelClosed\");\n    }\n\n    info = document.getElementById(this._addUID(\"GPlayerInfoContent\"));\n    panel.removeChild(info);\n    return;\n  }\n\n  var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n  for (var i = 0; i < layers.length; i++) {\n    layers[i].className = \"GPlayerInfo\";\n  } // Open layer info panel\n\n\n  if (divId.classList !== undefined) {\n    divId.classList.remove(\"GPlayerInfo\");\n    divId.classList.add(\"GPlayerInfoOpened\");\n  }\n\n  panel = document.getElementById(this._addUID(\"GPlayerInfoPanel\"));\n\n  if (panel.classList !== undefined) {\n    panel.classList.add(\"GPpanel\");\n    panel.classList.remove(\"GPlayerInfoPanelClosed\");\n    panel.classList.add(\"GPlayerInfoPanelOpened\");\n  }\n\n  info = document.getElementById(this._addUID(\"GPlayerInfoContent\"));\n\n  if (info) {\n    panel.removeChild(info);\n  } // on récupère les infos associées au layer pour mettre dynamiquement le contenu du panel d'informations\n\n\n  var obj = {\n    title: layerOptions.title,\n    description: layerOptions.description,\n    quicklookUrl: layerOptions.quicklookUrl,\n    metadata: layerOptions.metadata,\n    legends: layerOptions.legends\n  };\n\n  var infoLayer = this._createContainerLayerInfoElement(obj);\n\n  panel.appendChild(infoLayer);\n};\n/**\n * removes layer from layer switcher and globe on picto click\n *\n * @method _onDropLayerClick\n * @param {Event} e - MouseEvent\n * @private\n */\n\n\nLayerSwitcher.prototype._onDropLayerClick = function (e) {\n  var globe = this.getGlobe();\n\n  var layerID = this._resolveLayerId(e.target.id); // removing the layer will trigger the event listener\n  // which will call this.removeLayer and delete the div\n\n\n  globe.removeLayer(layerID);\n\n  this._updateLayerListContainer();\n};\n/**\n * changes layers order on drag and drop\n *\n * @method _onDropLayerClick\n * @param {Event} e - HTML event\n * @private\n */\n\n\nLayerSwitcher.prototype._onDragAndDropLayerClick = function (e) {\n  var globe = this.getGlobe(); // Handling of the indexes : gives the little indexes (lowest layers) to the non-visible layers (displayed: false)\n  // when the index of a visible layer changes.\n  // Always moves the non-visible layers under the other layers (to not hide them)\n\n  if (e.newIndex - e.oldIndex === 0) {\n    return;\n  }\n\n  var targetIndex = null;\n\n  if (!e.newIndex || e.newIndex === 0) {\n    targetIndex = globe.getColorLayers().length - 1;\n  } else {\n    var layerTargetID = this._resolveLayerId(e.from.childNodes[e.newIndex + (e.newIndex - e.oldIndex < 0 ? 1 : -1)].id);\n\n    targetIndex = globe.getLayerById(layerTargetID).sequence;\n  }\n\n  var layerID = this._resolveLayerId(e.item.id);\n\n  globe.moveLayerToIndex(layerID, targetIndex);\n};\n/**\n * Checks layers range\n *\n * @method _inRangeUpdate\n * @param {Array} layersDisplayed - list of displayed layers id\n * @private\n */\n\n\nLayerSwitcher.prototype._inRangeUpdate = function (layersDisplayed) {\n  for (var layerKey in this._layers) {\n    var layer = this._layers[layerKey];\n\n    if (!layer) {\n      continue;\n    } // Check if layer is displayed.\n\n\n    var layerDiv;\n    var bInRange = layersDisplayed.indexOf(layer.id) >= 0;\n\n    if (bInRange && !layer.inRange) {\n      layer.inRange = true;\n      layerDiv = document.getElementById(this._addUID(\"GPlayerSwitcher_ID_\" + layer.id));\n      layerDiv.classList.remove(\"outOfRange\");\n    } else if (!bInRange && layer.inRange) {\n      layer.inRange = false;\n      layerDiv = document.getElementById(this._addUID(\"GPlayerSwitcher_ID_\" + layer.id));\n      layerDiv.classList.add(\"outOfRange\");\n    }\n  }\n};\n/**\n * Update the layer list container\n *\n * @method _updateLayerListContainer\n * @private\n */\n\n\nLayerSwitcher.prototype._updateLayerListContainer = function () {\n  if (this._layerListContainer) {\n    var globe = this.getGlobe(); // empty the previous container\n\n    while (this._layerListContainer.firstChild) {\n      this._layerListContainer.removeChild(this._layerListContainer.firstChild);\n    } // reorders layers according to the layer stack (globe.getLayers returns an reverse ordenered array)..\n\n\n    var layers = globe.getColorLayers();\n    var orderedLayers = layers.sort(function (a, b) {\n      return b.sequence - a.sequence;\n    }); // ... and adds the correct div to the different layers, in the zindex decreasing order\n\n    for (var j = 0; j < orderedLayers.length; j++) {\n      if (!this._layers[orderedLayers[j].id]) {\n        continue;\n      } // retrieves the div of the layer, stored in the _layers array\n\n\n      var layerDiv = this._layers[orderedLayers[j].id].div;\n\n      this._layerListContainer.appendChild(layerDiv);\n    }\n  } else {\n    logger.error(\"[Itowns.control.LayerSwitcher] _updateLayerListContainer : layer list container not found to update layers order ?!\");\n  }\n}; // ################################################################### //\n// ############################ Utils ################################ //\n// ################################################################### //\n\n/**\n * Gets layer informations : title, description, quicklookurl, legends, metadata\n *\n * @private\n * @memberof LayerSwitcher\n * @method _getLayerInfo\n * @param {Object} layer - the layer object\n * @returns {Object} layerInfo - layer informations\n */\n\n\nLayerSwitcher.prototype._getLayerInfo = function (layer) {\n  var layerInfo = {};\n\n  if (layer) {\n    layerInfo._title = layer.title || null;\n    layerInfo._description = layer.description || null;\n    layerInfo._quicklookUrl = layer.quicklookUrl || null;\n    layerInfo._metadata = layer.metadata || null;\n    layerInfo._legends = layer.legends || null;\n  }\n\n  return layerInfo;\n};\n/**\n * Gets layer id from div id\n *\n * @method _resolveLayerId\n * @param {String} divId - HTML div id\n * @returns {String} layer id\n * @private\n */\n\n\nLayerSwitcher.prototype._resolveLayerId = function (divId) {\n  var divName = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_3__[\"default\"].name(divId); // ex GPvisibilityPicto_ID_26\n\n  return divName.substring(divName.indexOf(\"_ID_\") + 4); // ex. 26\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerSwitcher);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/LayerSwitcher.js\n");

/***/ }),

/***/ "./src/Itowns/Controls/MiniGlobe.js":
/*!******************************************!*\
  !*** ./src/Itowns/Controls/MiniGlobe.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GlobeViewExtended */ \"./src/Itowns/GlobeViewExtended.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Controls_MiniGlobeDOM__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Controls/MiniGlobeDOM */ \"./src/Common/Controls/MiniGlobeDOM.js\");\n/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget */ \"./src/Itowns/Controls/Widget.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\n/**\n * @classdesc\n * Control to display the MiniGlobe with itowns\n *\n * @constructor\n * @extends {itowns.control.Widget}\n * @alias itowns.control.MiniGlobe\n * @param {Object} [options] - control options\n * @param {Object} [options.layer] - custom itowns layer to display on the mini globe\n * @example\n * var miniglobe = new itowns.control.MiniGlobe();\n *\n */\n\nfunction MiniGlobe(options) {\n  options = options || {};\n\n  if (!(this instanceof MiniGlobe)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  }\n\n  if (options && _typeof(options) !== \"object\") {\n    throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n  }\n\n  this._initialize();\n\n  var container = this._initContainer();\n\n  this._options = options;\n  _Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].call(this, {\n    name: \"Overview\",\n    element: container,\n    target: options.target,\n    position: options.position\n  });\n}\n/*\n * @lends module:MiniGlobe\n */\n\n\nMiniGlobe.prototype = Object.create(_Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prototype, {}); // retrieves methods of the common class MiniGlobeDOM\n\n_Common_Utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].assign(MiniGlobe.prototype, _Common_Controls_MiniGlobeDOM__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n/**\n * Constructor (alias)\n *\n * @private\n */\n\nMiniGlobe.prototype.constructor = MiniGlobe; // ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\n\nMiniGlobe.prototype.setGlobe = function (globe) {\n  // info : this function is called after a globe.addWidget() or a globe.removeWidget()\n  if (globe) {\n    // In the case of the adding of a control to the globe\n    var minDistance = 6650000;\n    var maxDistance = 30000000;\n    var positionOnGlobe = globe.getCenter();\n    var miniView = new _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this._element, positionOnGlobe, {\n      // `limit globe' subdivision level:\n      // we're don't need a precise globe model\n      // since the mini globe will always be seen from a far point of view (see minDistance above)\n      maxSubdivisionLevel: 6,\n      sseSubdivisionThreshold: 3,\n      // Don't instance default controls since miniview's camera will be synced\n      // on the main view's one (see globeView.onAfterRender)\n      noControls: true\n    });\n    miniView.setBackground();\n\n    var updateMiniGlobeHandler = function updateMiniGlobeHandler() {\n      // clamp distance camera from globe\n      var distanceCamera = globe.getGlobeView().camera.camera3D.position.length();\n      var distance = Math.min(Math.max(distanceCamera, minDistance), maxDistance);\n      var camera = miniView.getGlobeView().camera.camera3D;\n      var cameraTargetPosition = globe.getGlobeView().controls.getCameraTargetPosition(); // Update target miniview's camera\n\n      camera.position.copy(cameraTargetPosition).setLength(distance);\n      camera.lookAt(cameraTargetPosition);\n      miniView.notifyChange(camera);\n    };\n\n    globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.AFTER_RENDER, updateMiniGlobeHandler);\n\n    if (globe.isInitialized()) {\n      updateMiniGlobeHandler();\n    } else {\n      globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.GLOBE_INITIALIZED, updateMiniGlobeHandler);\n    }\n    /**\n     * Add one imagery layer to the miniview (by default, the ortho)\n     */\n\n\n    var miniGlobeLayer = this._options.layer;\n    miniView.addLayer(miniGlobeLayer); // save as property of the control the globe created for the overview\n\n    this._globeObj = miniView;\n  } else if (globe == null) {\n    // if globe == null we remove the overview control\n    // we delete the overview control DOM\n    while (this.getElement().hasChildNodes()) {\n      this.getElement().removeChild(this.getElement().lastChild);\n    }\n\n    this.getElement().parentNode.removeChild(this.getElement());\n  } // call original setGlobe method\n\n\n  _Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prototype.setGlobe.call(this, globe);\n}; // ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize MiniGlobe control (called by constructor)\n *\n * @private\n */\n\n\nMiniGlobe.prototype._initialize = function () {\n  // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n  this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_2__[\"default\"].generate(); // div which will contain the list divs.\n\n  this._MiniGlobeContainer = null; // callbacks\n\n  this._callbacks = {};\n};\n/**\n * Creates control main container\n *\n * @method _initContainer\n * @returns {DOMElement} container - widget container\n * @private\n */\n\n\nMiniGlobe.prototype._initContainer = function () {\n  var container = this._createMainContainerElement();\n\n  return container;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MiniGlobe);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/MiniGlobe.js\n");

/***/ }),

/***/ "./src/Itowns/Controls/MousePosition.js":
/*!**********************************************!*\
  !*** ./src/Itowns/Controls/MousePosition.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var proj4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proj4 */ \"./node_modules/proj4/dist/proj4-src.js-exposed\");\n/* harmony import */ var proj4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(proj4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var geoportal_access_lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! geoportal-access-lib */ \"./node_modules/geoportal-access-lib/src/Gp.js\");\n/* harmony import */ var _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../GlobeViewExtended */ \"./src/Itowns/GlobeViewExtended.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_CheckRightManagement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Utils/CheckRightManagement */ \"./src/Common/Utils/CheckRightManagement.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Controls_MousePositionDOM__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Common/Controls/MousePositionDOM */ \"./src/Common/Controls/MousePositionDOM.js\");\n/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Widget */ \"./src/Itowns/Controls/Widget.js\");\n/* harmony import */ var _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Utils/PositionFormater */ \"./src/Itowns/Controls/Utils/PositionFormater.js\");\n/* harmony import */ var _CRS_CRS__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../CRS/CRS */ \"./src/Itowns/CRS/CRS.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLogger(\"MousePosition\");\n/**\n * @classdesc\n *\n * MousePosition Control.\n *\n * @constructor\n * @alias itowns.control.MousePosition\n * @extends {itowns.control.Control}\n * @param {Object} options - options for function call.\n * @param {Boolean} [options.ssl = true] - use of ssl or not (default true, service requested using https protocol)\n * @param {Boolean} [options.collapsed = true] - Specify if MousePosition control should be collapsed at startup. Default is true.\n * @param {Array}   [options.systems] - list of projection systems, default are Geographical (\"EPSG:4326\"), Web Mercator (\"EPSG:3857\"), Lambert 93 (\"EPSG:2154\") and extended Lambert 2 (\"EPSG:27572\").\n *      Each array element (=system) is an object with following properties :\n * @param {String}  options.systems.crs - Proj4 crs alias (from proj4 defs). e.g. : \"EPSG:4326\". Required\n * @param {String}  [options.systems.label] - CRS label to be displayed in control. Default is crs code (e.g. \"EPSG:4326\")\n * @param {String}  options.systems.type - CRS units type for coordinates conversion : \"Geographical\" or \"Metric\". Default: \"Metric\"\n * @param {Object}  [options.systems.geoBBox] - Aera covered by the system (WGS84 coordinates).\n * @param {Number}  options.systems.geoBBox.right - Right bound.\n * @param {Number}  options.systems.geoBBox.left - Left bound.\n * @param {Number}  options.systems.geoBBox.top - Top bound.\n * @param {Number}  options.systems.geoBBox.bottom - Bottom bound.\n * @param {Array}   [options.units] - list of coordinates units, to be displayed in control units list.\n *      Values may be \"DEC\" (decimal degrees), \"DMS\" (sexagecimal), \"RAD\" (radians) and \"GON\" (grades) for geographical coordinates,\n *      and \"M\" or \"KM\" for metric coordinates\n * @param {Array}   [options.displayAltitude = true] - activate (true) or deactivate (false) the altitude panel. True by default\n * @param {Array}   [options.displayCoordinates = true] - activate (true) or deactivate (false) the coordinates panel. True by default\n * @param {Object}  [options.altitude] - elevation configuration\n * @param {Object}  [options.altitude.serviceOptions] - options of elevation service\n * @param {Number}  [options.altitude.responseDelay] - latency for altitude request, 500 ms by default\n * @param {Number}  [options.altitude.triggerDelay] - immobilisation time of movement on the globe to trigger the elevation calculation, 200 ms by default\n * @example\n *  var mousePosition = new itowns.control.MousePosition({\n *      collapsed : false,\n *      displayCoordinates : true,\n *      displayAltitude : true,\n *      altitude : {\n *           triggerDelay : 100,\n *           responseDelay : 500,\n *           serviceOptions : {}\n *      },\n *      systems : [\n *       {\n *          crs : \"EPSG:3857\",\n *          label : \"Mercator\",\n *          type : \"Metric\"\n *        },\n *       {\n *          crs : \"EPSG:32620\",\n *          label : \"UTM 20N (Guadeloupe, Martinique)\",\n *          type : \"Metric\",\n *          geoBBox : {\n *              left: -66.00,\n *              bottom : 0.00,\n *              right : -60.00,\n *              top : 84.00\n *          }\n *        }\n *      ],\n *      units : [\"DEC\", \"DMS\"]\n *  });\n */\n\nfunction MousePosition(options) {\n  options = options || {};\n\n  if (!(this instanceof MousePosition)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  }\n\n  if (options && _typeof(options) !== \"object\") {\n    throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n  }\n\n  this._initialize(options);\n\n  this._callbacks = {}; // init control DOM container\n\n  var container = this._initContainer(options);\n\n  _Widget__WEBPACK_IMPORTED_MODULE_8__[\"default\"].call(this, {\n    name: \"MousePosition\",\n    element: container,\n    target: options.target,\n    position: options.position\n  });\n}\n\n;\n/**\n * @lends module:MousePosition\n */\n\nMousePosition.prototype = Object.create(_Widget__WEBPACK_IMPORTED_MODULE_8__[\"default\"].prototype, {});\n_Common_Utils__WEBPACK_IMPORTED_MODULE_4__[\"default\"].assign(MousePosition.prototype, _Common_Controls_MousePositionDOM__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n/**\n * Constructor (alias)\n */\n\nMousePosition.prototype.constructor = MousePosition;\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\n\nMousePosition.prototype.setGlobe = function (globe) {\n  if (globe) {\n    // In the case of the adding of a control to the globe\n    this._centerElement = this._createMapCenter();\n    globe.getTargetElement().appendChild(this._centerElement); // defines the callback on the map to retrieve the coordinates\n\n    this._callbacks.mouseMove = this.onMouseMove.bind(this); // valid event for desktop mode\n\n    if (!this.collapsed) {\n      if (this._isDesktop) {\n        globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__[\"default\"].EVENTS.MOUSE_MOVE, this._callbacks.mouseMove);\n      } else {\n        globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__[\"default\"].EVENTS.CENTER_CHANGED, this.onGlobeMove);\n      }\n    }\n  } else if (globe == null) {\n    // if globe == null we remove the MP control\n    // deletes the listener associated to the mousePosition control\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__[\"default\"].EVENTS.MOUSE_MOVE, this._callbacks.mouseMove); // deletes the mousePosition control DOM\n\n\n    while (this.getElement().hasChildNodes()) {\n      this.getElement().removeChild(this.getElement().lastChild);\n    }\n\n    this.getElement().parentNode.removeChild(this.getElement());\n\n    this._globe.getTargetElement().removeChild(this._centerElement);\n  } // call original setGlobe method\n\n\n  _Widget__WEBPACK_IMPORTED_MODULE_8__[\"default\"].prototype.setGlobe.call(this, globe);\n}; // ################################################################### //\n// #################### user interface methods ####################### //\n// ################################################################### //\n\n/**\n * Sets additional projection system\n *\n * @param {Object} system - Projection system defined in the Itowns/CRS/CRS.js class\n * @param {String} system.crs - Proj4 crs alias (from proj4 defs) e.g. \"EPSG:4326\"\n * @param {String} [system.label] - CRS label to be displayed in control. Default is system.crs alias\n * @param {String} [system.type] - CRS units type for coordinates conversion (one of control options.units). Default is \"Metric\"\n */\n\n\nMousePosition.prototype.addSystem = function (system) {\n  if (_typeof(system) !== \"object\") {\n    logger.error(\"MousePosition:addSystem - system parameter should be an object\");\n    return;\n  }\n\n  if (!system.crs) {\n    logger.error(\"crs not defined !\");\n    return;\n  }\n\n  if (!system.label) {\n    logger.warn(\"crs label not defined, use crs code by default.\");\n    system.label = system.crs;\n  }\n\n  if (!system.type) {\n    logger.warn(\"type srs not defined, use 'Metric' by default.\");\n    system.type = \"Metric\";\n  } // 1. adds system to control systems\n\n\n  for (var j = 0; j < this._projectionSystems.length; j++) {\n    var obj = this._projectionSystems[j];\n\n    if (system.crs === obj.crs) {\n      // warn user\n      logger.warn(\"crs '{}' already configured\", obj.crs);\n    }\n  }\n\n  system.code = this._projectionSystems.length;\n\n  this._projectionSystems.push(system); // 2. adds system settings option to container (if it was already build)\n\n\n  var selectSystem = document.getElementById(this._addUID(\"GPmousePositionProjectionSystem\"));\n\n  if (selectSystem) {\n    var option = document.createElement(\"option\");\n    option.value = system.code;\n    option.text = system.label;\n    selectSystem.appendChild(option);\n  }\n};\n/**\n * Sets additional projection systems\n *\n * @param {Array} systems - Array of system object, with following properties :\n * @param {String} systems.crs - Proj4 CRS alias (from proj4 defs) e.g. \"EPSG:4326\"\n * @param {String} systems.label - CRS label (for coordinates conversion)\n * @param {String} systems.type - CRS units type to be displayed in control (one of control options.units). Default is \"Metric\"\n */\n\n\nMousePosition.prototype.addSystems = function (systems) {\n  if (!systems) {\n    return;\n  }\n\n  if (!Array.isArray(systems)) {\n    logger.error(\"MousePosition:addSystems - systems parameter should be an array\");\n    return;\n  }\n\n  for (var i = 0; i < systems.length; i++) {\n    this.addSystem(systems[i]);\n  }\n};\n/**\n * Removes projection system (in case there are several system with same code, only the first one will be removed)\n *\n * @param {String} systemCrs - CRS alias (from proj4 defs)\n */\n\n\nMousePosition.prototype.removeSystem = function (systemCrs) {\n  if (!systemCrs || typeof systemCrs !== \"string\") {\n    logger.error(\"MousePosition:removeSystem - systemCode parameter should be a string\");\n    return;\n  }\n\n  var systemCode = null; // finds system in control projection systems list\n\n  for (var i = 0; i < this._projectionSystems.length; i++) {\n    var proj = this._projectionSystems[i];\n\n    if (systemCrs === proj.crs) {\n      systemCode = proj.code; // removes system from control projection systems list\n\n      this._projectionSystems.splice(i, 1);\n\n      break;\n    }\n  }\n\n  if (systemCode == null) {\n    logger.warn(\"MousePosition:removeSystem - system not found\");\n    return;\n  } // re-initialization of codes\n\n\n  var oldNewCodeGlobe = [];\n\n  for (var ii = 0; ii < this._projectionSystems.length; ii++) {\n    oldNewCodeGlobe[Number(this._projectionSystems[ii].code)] = ii;\n    this._projectionSystems[ii].code = ii;\n  } // finds system in control container systems list\n\n\n  var indexChildToRemove = null;\n  var systemList = document.getElementById(this._addUID(\"GPmousePositionProjectionSystem\"));\n\n  for (var j = 0; j < systemList.childNodes.length; j++) {\n    if (systemCode === systemList.childNodes[j].value) {\n      indexChildToRemove = j;\n      continue;\n    }\n\n    systemList.childNodes[j].value = oldNewCodeGlobe[Number(systemList.childNodes[j].value)];\n  } // removes system from control container systems list\n\n\n  if (indexChildToRemove != null) {\n    systemList.removeChild(systemList.childNodes[indexChildToRemove]);\n  } // choose arbitrarily a new current system if needed\n\n\n  if (this._currentProjectionSystems.code === systemCode) {\n    systemList.childNodes[0].setAttribute(\"selected\", \"selected\");\n\n    this._setCurrentSystem(systemList.childNodes[0].value);\n  }\n};\n/**\n * Sets control units (to be displayed)\n *\n * @param {Array} units - list of all coordinates units, to be displayed in control units list.\n *      Values may be \"DEC\" (decimal degrees), \"DMS\" (sexagecimal), \"RAD\" (radians) and \"GON\" (grades) for geographical coordinates,\n *      and \"M\" or \"KM\" for metric coordinates\n */\n\n\nMousePosition.prototype.setUnits = function (units) {\n  if (!units || !Array.isArray(units)) {\n    return;\n  }\n\n  this.options.units = units;\n  this._projectionUnits = {};\n\n  this._initProjectionUnits();\n\n  if (this._currentProjectionType) {\n    this._setTypeUnitsPanel(this._currentProjectionType);\n  }\n};\n/**\n * Sets control altitude options (useless if displayAltitude == false)\n *\n * @param {Object} options - altitude options\n * @param {Object}  [options.serviceOptions] - options of elevation service\n * @param {Number}  [options.responseDelay] - latency for elevation request, 500 ms by default\n * @param {Number}  [options.triggerDelay] - immobilisation time of movement on the globe to trigger the elevation calculation, 200 ms by default\n */\n\n\nMousePosition.prototype.setAltitudeOptions = function (options) {\n  if (!options || _typeof(options) !== \"object\") {\n    return;\n  }\n\n  this.options.altitude.triggerDelay = options.triggerDelay;\n  this.options.altitude.responseDelay = options.responseDelay;\n\n  if (options.serviceOptions) {\n    for (var opt in options.serviceOptions) {\n      if (options.serviceOptions.hasOwnProperty(opt)) {\n        this.options.altitude.serviceOptions[opt] = options.serviceOptions[opt];\n      }\n    }\n  }\n};\n/**\n * Displays or hides elevation panel\n *\n * @param {Boolean} displayAltitude - true to display elevation panel, false to hide it\n */\n\n\nMousePosition.prototype.displayAltitude = function (displayAltitude) {\n  if (displayAltitude === undefined) {\n    return;\n  }\n\n  if (typeof this._noRightManagement === \"undefined\") {\n    this._checkRightsManagement();\n  }\n\n  this.options.displayAltitude = displayAltitude;\n\n  this._setElevationPanel(displayAltitude);\n};\n/**\n * Displays or hides coordinates panel\n *\n * @param {Boolean} displayCoordinates - true to display coordinates panel, false to hide it\n */\n\n\nMousePosition.prototype.displayCoordinates = function (displayCoordinates) {\n  if (displayCoordinates === undefined) {\n    return;\n  }\n\n  this.options.displayCoordinates = displayCoordinates;\n\n  this._setCoordinatesPanel(displayCoordinates);\n\n  this._setSettingsPanel(displayCoordinates);\n};\n/**\n * Collapses or displays control main container\n *\n * @param {Boolean} collapsed - True to collapse control, False to display it\n */\n\n\nMousePosition.prototype.setCollapsed = function (collapsed) {\n  if (collapsed === undefined) {\n    logger.error(\"MousePosition:setCollapsed - missing collapsed parameter\");\n    return;\n  }\n\n  if (collapsed && this.collapsed || !collapsed && !this.collapsed) {\n    return;\n  }\n\n  if (!this._isDesktop) {\n    document.getElementById(this._addUID(\"GPmapCenter\")).className = collapsed ? \"\" : \"GPmapCenterVisible\";\n  } // simulates the opening of the panel after a click\n\n\n  this.onShowMousePositionClick();\n  this._showMousePositionContainer.checked = !collapsed;\n}; // ################################################################### //\n// ######################## initialize control ####################### //\n// ################################################################### //\n\n/**\n * Initializes control (called by MousePosition constructor)\n *\n * @method _initialize\n * @param {Object} options - control options (set by user)\n * @private\n */\n\n\nMousePosition.prototype._initialize = function (options) {\n  // Set default options\n  // {Object} control options - set by user or by default\n  this.options = options || {};\n  this.options.collapsed = options.collapsed !== undefined ? options.collapsed : true;\n  /** {Boolean} specify if MousePosition control is collapsed (true) or not (false) */\n\n  this.collapsed = this.options.collapsed;\n  this.options.units = options.units || [];\n  this.options.displayAltitude = options.displayAltitude !== undefined ? options.displayAltitude : true;\n  this.options.displayCoordinates = options.displayCoordinates !== undefined ? options.displayCoordinates : true;\n  this.options.systems = options.systems || [];\n\n  if (options.altitude) {\n    var altitude = options.altitude;\n    this.options.altitude = {\n      triggerDelay: altitude.triggerDelay !== undefined ? altitude.triggerDelay : 200,\n      responseDelay: altitude.responseDelay !== undefined ? altitude.responseDelay : 500,\n      serviceOptions: altitude.serviceOptions || {},\n      noDataValue: altitude.noDataValue !== undefined ? altitude.noDataValue : -99999,\n      noDataValueTolerance: altitude.noDataValueTolerance !== undefined ? altitude.noDataValueTolerance : 90000\n    };\n  } else {\n    this.options.altitude = {\n      triggerDelay: 200,\n      responseDelay: 500,\n      serviceOptions: {}\n    };\n  } // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n\n\n  this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].generate(); // initialization of the projections systems\n\n  this._projectionSystems = [];\n\n  this._initProjectionSystems(); // initialization of the units systems\n\n\n  this._projectionUnits = {};\n\n  this._initProjectionUnits(); // support detect : desktop or tactile\n\n\n  this._isDesktop = _Common_Utils__WEBPACK_IMPORTED_MODULE_4__[\"default\"].detectSupport(); // implements a timer threshold\n\n  if (this.options.altitude.triggerDelay < 100) {\n    this.options.altitude.triggerDelay = 100;\n  } // {Number} timer on movestopped delay (altitude calculation)\n\n\n  this._timer = this.options.altitude.triggerDelay; // {Object} Selected projection system\n\n  this._currentProjectionSystems = this._projectionSystems[0]; // {String} Selected projection units typs : Geographical or metric\n\n  this._currentProjectionType = this._projectionSystems[0].type; // {String} Selected projection unit\n\n  this._currentProjectionUnits = this._projectionUnits[this._currentProjectionType][0].code; // {Object} Projection units container (DOM Element)\n\n  this._projectionUnitsContainer = null; // {Object} control panel container (DOM Element)\n\n  this._showMousePositionContainer = null; // management of the altitude panel display\n\n  if (!this.options.displayAltitude && !this.options.displayCoordinates) {\n    // reactivate the display of coordinates, to not display an empty panel\n    this.options.displayCoordinates = true;\n  } // rights management on resources and services\n  // if we want an altitude calculation, we check the alti resources rights...\n\n\n  if (this.options.displayAltitude) {\n    this._checkRightsManagement();\n  }\n};\n/**\n * this method is called by the constructor and initialize the projection\n * systems.\n * getting coordinates in the requested projection :\n * see this.onMousePositionProjectionSystemChange()\n *\n * @method _initProjectionSystems\n * @private\n */\n\n\nMousePosition.prototype._initProjectionSystems = function () {\n  // user has the possibility to modify the list of systems to display\n  // Ex. this.options.systems\n  // available projection systems vy default\n  var projectionSystemsByDefault = [{\n    label: \"Géographique\",\n    crs: \"EPSG:4326\",\n    type: \"Geographical\"\n  }, {\n    label: \"Mercator\",\n    crs: \"EPSG:3857\",\n    type: \"Metric\"\n  }, {\n    label: \"Lambert 93\",\n    crs: \"EPSG:2154\",\n    type: \"Metric\",\n    geoBBox: {\n      left: -9.86,\n      bottom: 41.15,\n      right: 10.38,\n      top: 51.56\n    }\n  }, {\n    label: \"Lambert II étendu\",\n    crs: \"EPSG:27572\",\n    type: \"Metric\",\n    geoBBox: {\n      left: -4.87,\n      bottom: 42.33,\n      right: 8.23,\n      top: 51.14\n    }\n  }];\n  var systems = this.options.systems;\n\n  for (var i = 0; i < systems.length; i++) {\n    // definition of a reference system\n    var sys = systems[i];\n    this.addSystem(sys);\n  }\n\n  if (this._projectionSystems.length === 0) {\n    // we add the default projection systems\n    for (var ii = 0; ii < projectionSystemsByDefault.length; ii++) {\n      this.addSystem(projectionSystemsByDefault[ii]);\n    }\n  }\n};\n/**\n * this method is called by the constructor and initialize the units.\n * getting coordinates in the requested units :\n * see this.onMousePositionProjectionUnitsChange()\n *\n * @method _initProjectionUnits\n * @private\n */\n\n\nMousePosition.prototype._initProjectionUnits = function () {\n  // user has the possibility to modify the list of units to display\n  // Ex.\n  // this.options.units : [\"DEC\", \"DMS\"]\n  // available units systems by default\n  var projectionUnitsByDefault = {\n    Geographical: [{\n      code: \"DEC\",\n      label: \"degrés décimaux\",\n      convert: this._displayDEC\n    }, {\n      code: \"DMS\",\n      label: \"degrés sexagésimaux\",\n      convert: this._displayDMS\n    }, {\n      code: \"RAD\",\n      label: \"radians\",\n      convert: this._displayRAD\n    }, {\n      code: \"GON\",\n      label: \"grades\",\n      convert: this._displayGON\n    }],\n    Metric: [{\n      code: \"M\",\n      label: \"mètres\",\n      convert: this._displayMeter\n    }, {\n      code: \"KM\",\n      label: \"kilomètres\",\n      convert: this._displayKMeter\n    }]\n  };\n  var units = this.options.units;\n\n  for (var type in projectionUnitsByDefault) {\n    if (projectionUnitsByDefault.hasOwnProperty(type)) {\n      var found = false;\n\n      for (var j = 0; j < projectionUnitsByDefault[type].length; j++) {\n        var obj = projectionUnitsByDefault[type][j];\n\n        for (var i = 0; i < units.length; i++) {\n          var unit = units[i];\n\n          if (obj.code === unit) {\n            found = true;\n\n            if (!this._projectionUnits[type]) {\n              this._projectionUnits[type] = [];\n            }\n\n            this._projectionUnits[type].push(obj);\n          }\n        }\n      }\n\n      if (!found) {\n        this._projectionUnits[type] = projectionUnitsByDefault[type];\n      }\n    }\n  } // in case of...\n\n\n  if (_typeof(this._projectionUnits) === \"object\" && Object.keys(this._projectionUnits).length === 0) {\n    this._projectionUnits = projectionUnitsByDefault;\n  }\n};\n/**\n * this method is called by constructor\n * and check the rights to resources\n *\n * @method _checkRightsManagement\n * @private\n */\n\n\nMousePosition.prototype._checkRightsManagement = function () {\n  var rightManagement = _Common_Utils_CheckRightManagement__WEBPACK_IMPORTED_MODULE_5__[\"default\"].check({\n    key: this.options.apiKey,\n    resources: [\"SERVICE_CALCUL_ALTIMETRIQUE_RSC\"],\n    services: [\"Elevation\"]\n  });\n  this._noRightManagement = !rightManagement; // retrieves the usefull infos\n  // on this control, we do not care about the ressource bescause it is unique\n  // Ex : the API key from the autoconfiguration if it has not been given\n\n  if (!this.options.apiKey) {\n    this.options.apiKey = rightManagement.key;\n  }\n}; // ################################################################### //\n// ######################## methods handle dom ####################### //\n// ################################################################### //\n\n/**\n * Create control main container (called by MousePosition constructor)\n *\n * @method _initContainer\n * @param {Object} options - options\n * @param {Boolean} options.collapsed - Specify if MousePosition control should be collapsed\n * @param {Array}   options.displayAltitude - activate (true) or deactivate (false) the altitude panel\n * @param {Array}   options.displayCoordinates - activate (true) or deactivate (false) the coordinates panel\n * @returns {DOMElement} container - widget container\n * @private\n */\n\n\nMousePosition.prototype._initContainer = function (options) {\n  // creates the main container\n  var container = this._createMainContainerElement();\n\n  var inputShow = this._showMousePositionContainer = this._createShowMousePositionElement();\n\n  if (!options.collapsed) {\n    inputShow.checked = \"checked\";\n  }\n\n  container.appendChild(inputShow);\n\n  var picto = this._createShowMousePositionPictoElement(this._isDesktop);\n\n  container.appendChild(picto);\n\n  var panel = this._createMousePositionPanelElement();\n\n  var header = this._createMousePositionPanelHeaderElement();\n\n  panel.appendChild(header);\n\n  var basic = this._createMousePositionPanelBasicElement(options.displayAltitude, options.displayCoordinates);\n\n  panel.appendChild(basic);\n\n  var arraySettings = this._createShowMousePositionSettingsElement(options.displayCoordinates);\n\n  for (var j = 0; j < arraySettings.length; j++) {\n    panel.appendChild(arraySettings[j]);\n  }\n\n  var settings = this._createMousePositionSettingsElement(options.displayCoordinates);\n\n  var systems = this._projectionSystemsContainer = this._createMousePositionSettingsSystemsElement(this._projectionSystems);\n\n  var units = this._projectionUnitsContainer = this._createMousePositionSettingsUnitsElement(this._projectionUnits[this._currentProjectionType]);\n\n  settings.appendChild(systems);\n  settings.appendChild(units);\n  panel.appendChild(settings);\n  container.appendChild(panel);\n  return container;\n};\n/**\n * this method is called by this.()\n * and it changes the elevation view panel into the dom.\n *\n * @method _setElevationPanel\n * @param {Boolean} active - true:active, false:disable\n * @private\n */\n\n\nMousePosition.prototype._setElevationPanel = function (active) {\n  var div = null;\n\n  if (!active) {\n    div = document.getElementById(\"GPmousePositionAltitude-\" + this._uid);\n    div.style.display = \"none\";\n  } else {\n    if (this._noRightManagement) {\n      div = document.getElementById(\"GPmousePositionAlt-\" + this._uid);\n      div.innerHTML = \"No rights!\";\n    } else {\n      div = document.getElementById(\"GPmousePositionAltitude-\" + this._uid);\n      div.style.display = \"\";\n    }\n  }\n};\n/**\n * this method is called by this.()\n * and it changes the coordinate view panel into the dom.\n *\n * @method _setCoordinatesPanel\n * @param {Boolean} active - true:active, false:disable\n * @private\n */\n\n\nMousePosition.prototype._setCoordinatesPanel = function (active) {\n  var div = document.getElementById(\"GPmousePositionCoordinate-\" + this._uid);\n\n  if (!active) {\n    div.style.display = \"none\";\n  } else {\n    div.style.display = \"\";\n  }\n};\n/**\n * this method is called by this.()\n * and it changes the settings view panel into the dom.\n *\n * @method _setSettingsPanel\n * @param {Boolean} active - true:active, false:disable\n * @private\n */\n\n\nMousePosition.prototype._setSettingsPanel = function (active) {\n  var divPicto = document.getElementById(\"GPshowMousePositionSettingsPicto-\" + this._uid);\n  var divPanel = document.getElementById(\"GPmousePositionSettings-\" + this._uid);\n\n  if (!active) {\n    divPicto.style.display = \"none\";\n    divPanel.style.display = \"none\";\n  } else {\n    divPicto.style.display = \"\";\n    divPanel.style.display = \"\";\n  }\n};\n/**\n * this method is called by this.onMousePositionProjectionSystemChange()\n * when changes to a metric or a geographical units.\n *\n * @method _setTypeUnitsPanel\n * @param {String} type - Geographical or Metric\n * @private\n */\n\n\nMousePosition.prototype._setTypeUnitsPanel = function (type) {\n  var container = this._projectionUnitsContainer; // deletes the childNodes\n\n  while (container.firstChild) {\n    container.removeChild(container.firstChild);\n  }\n\n  var units = this._projectionUnits[type];\n\n  for (var j = 0; j < units.length; j++) {\n    var obj = units[j];\n    var option = document.createElement(\"option\");\n    option.value = obj.code ? obj.code : j;\n    option.text = obj.label || j; // option.label = obj.label;\n\n    container.appendChild(option);\n  } // the new type of system\n\n\n  this._currentProjectionType = type; // as the system changed, the unit system has to change too !\n\n  this._currentProjectionUnits = this._projectionUnits[type][0].code;\n}; // ################################################################### //\n// ######################## method units convert ##################### //\n// ################################################################### //\n\n/**\n * degreedecimal\n *\n * @method _displayDEC\n * @param {Object} coords - coordinatesobject {lon, lat}\n * @return {Object} coordinate - coordinate object : {lat : 48, lng : 2} par exemple\n * @private\n */\n\n\nMousePosition.prototype._displayDEC = function (coords) {\n  var coordinate = {};\n  coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].roundToDecimal(coords.lat, 6);\n  coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].roundToDecimal(coords.lon, 6);\n  return coordinate;\n};\n/**\n * degreedecimal2sexagecimal\n *\n * @method _displayDMS\n * @param {Object} coords - coordinates object {lon, lat}\n * @return {Object} coordinate - coordinate object : {lng : \"2° 00′ 00″ E\", lat : \"48° 00′ 00″ N\"} par exemple\n * @private\n */\n\n\nMousePosition.prototype._displayDMS = function (coords) {\n  var coordinate = {};\n  coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].decimalLatToDMS(coords.lat);\n  coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].decimalLongToDMS(coords.lon);\n  return coordinate;\n};\n/**\n * degreedecimal2radian\n *\n * @method _displayRAD\n * @param {Object} coords - coordinates object {lon, lat}\n * @return {Object} coordinate - coordinate object : {lat : \"0.02837864\", lng : \"0.84300269\"} par exemple\n * @private\n */\n\n\nMousePosition.prototype._displayRAD = function (coords) {\n  var coordinate = {};\n  coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].decimalToRadian(coords.lat);\n  coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].decimalToRadian(coords.lon);\n  return coordinate;\n};\n/**\n * degreedecimal2grade\n *\n * @method _displayGON\n * @param {Object} coords - coordinates object {lon, lat}\n * @return {Object} coordinate - coordinate object : {lat : \"4.09545898\", lng : \"53.68751528\"} par exemple\n * @private\n */\n\n\nMousePosition.prototype._displayGON = function (coords) {\n  var coordinate = {};\n  coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].decimalToGrade(coords.lat);\n  coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_9__[\"default\"].decimalToGrade(coords.lon);\n  return coordinate;\n};\n/**\n * meter\n *\n * @method _displayMeter\n * @param {Object} coords - coords object {lon, lat}\n * @return {Object} coordinate - coordinate object : {x : \"148593.58\", y : \"6176560.95\"} par exemple\n * @private\n */\n\n\nMousePosition.prototype._displayMeter = function (coords) {\n  // on recoit toujours des coordonnées metriques\n  var coordinate = {};\n  coordinate.x = coords.lon.toFixed(2);\n  coordinate.y = coords.lat.toFixed(2);\n  coordinate.unit = \"m\";\n  return coordinate;\n};\n/**\n * kilometer\n *\n * @method _displayKMeter\n * @param {Object} coords - coords object {lon, lat}\n * @return {Object} coordinate - coordinate object : {x : \"214.96\", y : \"6250.09\"} par exemple\n * @private\n */\n\n\nMousePosition.prototype._displayKMeter = function (coords) {\n  var coordinate = {};\n  coordinate.x = (coords.lon / 1000).toFixed(2);\n  coordinate.y = (coords.lat / 1000).toFixed(2);\n  coordinate.unit = \"km\";\n  return coordinate;\n}; // ################################################################### //\n// ##################### handlers events to control ################## //\n// ################################################################### //\n\n/**\n * this sends the coordinates to the panel.\n * (cf. this.GPdisplayCoords() into the DOM functions)\n *\n * @method _setCoordinate\n * @param {Array} coords - coordinate object {lon, lat}\n * @private\n */\n\n\nMousePosition.prototype._setCoordinate = function (coords) {\n  // structure\n  // coords\n  //      {\n  //          lon: 5,\n  //          lat : 48\n  //      }\n  //\n  // structure for the coordinates depending on the system type :\n  // {x:, y:, unit:} or {lng:, lat:} or {lon:, lat:} or {e:, n:, unit:}...\n  var coord = [];\n  var coordinates = {}; // transforms the point in the wanted coords system\n\n  var oSrs = this._currentProjectionSystems;\n  var crsProp = oSrs.crs;\n\n  if (!oSrs || !crsProp) {\n    logger.error(\"system crs not found\");\n    return;\n  } // reproject coordinates from their CRS of origin (WGS84) to the wanted CRS (crsProp)\n\n\n  if (crsProp !== \"EPSG:4326\") {\n    coord = proj4__WEBPACK_IMPORTED_MODULE_0___default()(_CRS_CRS__WEBPACK_IMPORTED_MODULE_10__[\"default\"][crsProp], [coords.lon, coords.lat]); // projected values are affected to the coord var\n\n    coordinates.lon = coord[0];\n    coordinates.lat = coord[1];\n  } else {\n    coordinates = coords;\n  } // system type : Geographical or Metric\n\n\n  var type = this._currentProjectionSystems.type; // checks for a formatting function in the wanted unit\n\n  var convert = null;\n  var units = this._projectionUnits[type];\n\n  for (var i = 0; i < units.length; i++) {\n    if (units[i].code === this._currentProjectionUnits) {\n      convert = units[i].convert;\n      break;\n    }\n  }\n\n  if (!convert || typeof convert !== \"function\") {\n    logger.warn(\"coordinates format function not found\");\n    return;\n  } else {\n    coord = convert(coordinates);\n  }\n\n  if (!coord || Object.keys(coord).length === 0) {\n    return;\n  }\n\n  this.GPdisplayCoords(coord);\n};\n/**\n * this sends the coordinates to the panel.\n * (cf. this.GPdisplayElevation() into the DOM functions)\n *\n * @method _setElevation\n * @param {Object} coords - Coordinate position object {lon, lat}\n * @private\n */\n\n\nMousePosition.prototype._setElevation = function (coords) {\n  // management of the timer of the altitude service request\n  var delay = this.options.altitude.responseDelay;\n  this.GPdisplayElevation(coords, delay);\n};\n/**\n * this method is triggered when the mouse or the globe is stopped.\n * (cf. onMouseMove and onGlobeMove)\n *\n * @method onMoveStopped\n * @param {Object} coords - Coordinate position object {lon, lat}\n * @private\n */\n\n\nMousePosition.prototype.onMoveStopped = function (coords) {\n  this._setElevation(coords);\n};\n/**\n * this method is an handler event to control. The event is 'mousemove' on\n * the globe. The handler sends the coordinates to the panel.\n * (cf. this.GPdisplayCoords() into the DOM functions)\n *\n * @method onMouseMove\n * @param {Object} e - HTMLElement\n * @private\n */\n\n\nMousePosition.prototype.onMouseMove = function (e) {\n  var self = this;\n  var position = this.getGlobe().getCoordinateFromMouseEvent(e);\n\n  if (!position) {\n    this.GPdisplayCoords({\n      lon: \"---\",\n      lat: \"---\"\n    });\n    this.GPresetElevation();\n    return;\n  }\n\n  var coordinate = {\n    lon: position.x,\n    lat: position.y\n  };\n\n  this._setCoordinate(coordinate); // calculation of the altitude after a time limit from the moment where the mouse movement is stopped\n\n\n  if (this.options.displayAltitude) {\n    clearTimeout(this._timer);\n    this._timer = setTimeout(function () {\n      self.onMoveStopped(coordinate);\n    }, this.options.altitude.triggerDelay);\n  }\n};\n/**\n * this method is an handler event to control. The event is 'moveend' on\n * the globe. The handler sends the coordinates to the panel.\n * (cf. this.GPdisplayCoords() into the DOM functions)\n *\n * @method onGlobeMove\n * @private\n */\n\n\nMousePosition.prototype.onGlobeMove = function () {// var self = this;\n  // info: coordinate = [x, y]\n  // var coordinate = e.coordinate;\n  // if ( !e.map || !e.map.getView() ) {\n  //     return;\n  // }\n  // var crs = e.map.getView().getProjection();\n  //\n  // this._setCoordinate(coordinate, crs);\n  //\n  // // calcul de l'altitude après un certain délai après l'arrêt du mouvement de la carte\n  // clearTimeout(this._timer);\n  // this._timer = setTimeout( function () {\n  //     self.onMoveStopped(coordinate, crs);\n  // }, this.options.altitude.triggerDelay);\n}; // ################################################################### //\n// ####################### handlers events to dom #################### //\n// ################################################################### //\n\n/**\n * this method is called by this.GPdisplayElevation() in the dom, and\n * it executes a request to the elevation service.\n *\n * @method onRequestAltitude\n * @param {Object} coordinate - {lat:..., lng:...}\n * @param {Function} callback - function callback\n * @private\n */\n\n\nMousePosition.prototype.onRequestAltitude = function (coordinate, callback) {\n  // INFORMATION\n  // we launch the request to the altitude services\n  // we implement callbacks in order to retrieve results or errors\n  // from the service.\n  // The result is displayed in a DOM element.\n  // The error messages are display in the dev console (?)\n  if (!coordinate || Object.keys(coordinate).length === 0) {\n    return;\n  } // if we do not want any altitude calculation, we just stop !\n\n\n  if (!this.options.displayAltitude) {\n    return;\n  } // if we don not have the rights on the requested resource, we just stop !\n\n\n  if (this._noRightManagement) {\n    logger.warn(\"contract key configuration has no rights to load geoportal elevation \");\n    document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"No rights!\";\n    return;\n  } // we retrieve the service options...\n\n\n  var options = this.options.altitude.serviceOptions || {}; // ... and the coordinates...\n\n  options.zonly = true;\n  options.positions = [{\n    lon: coordinate.lon,\n    lat: coordinate.lat\n  }]; // ... and the callbacks\n\n  options.scope = this;\n\n  if (!options.rawResponse) {\n    // in the general case\n    options.onSuccess = function (results) {\n      if (results && Object.keys(results)) {\n        callback.call(this, results.elevations[0].z);\n      }\n    };\n  } else {\n    options.onSuccess = function (results) {\n      logger.info(\"alti service raw response : \", results);\n    };\n  }\n\n  options.onFailure = function (error) {\n    logger.error(\"[getAltitude] \" + error.message);\n  }; // in the case of the API key is not given as option of the service,\n  // we use the key of the autoconf, or the key given in the control options\n\n\n  options.apiKey = options.apiKey || this.options.apiKey; // si l'utilisateur a spécifié le paramètre ssl au niveau du control, on s'en sert\n  // true par défaut (https)\n\n  options.ssl = this.options.ssl;\n  geoportal_access_lib__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Services.getAltitude(options);\n};\n/**\n * this method is called by event 'click' on 'GPshowMousePositionPicto' tag label\n * (cf. this._createShowMousePositionPictoElement),\n * and toggles event 'mousemove' on globe.\n *\n * @method onShowMousePositionClick\n * @private\n */\n\n\nMousePosition.prototype.onShowMousePositionClick = function () {\n  // checked : true - panel close\n  // checked : false - panel open\n  var globe = this.getGlobe();\n  this.collapsed = this._showMousePositionContainer.checked; // event triggered when opening/closing the panel\n  // and depending on the mode : desktop or tactile!\n\n  if (this._showMousePositionContainer.checked) {\n    // FIXME handle or not mobile case\n    if (this._isDesktop) {\n      globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__[\"default\"].EVENTS.MOUSE_MOVE, this._callbacks.mouseMove);\n    } else {\n      globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__[\"default\"].EVENTS.CENTER_CHANGED, this.onGlobeMove);\n    }\n  } else {\n    // FIXME handle or not mobile case\n    if (this._isDesktop) {\n      globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__[\"default\"].EVENTS.MOUSE_MOVE, this._callbacks.mouseMove);\n    } else {\n      globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_3__[\"default\"].EVENTS.CENTER_CHANGED, this.onGlobeMove);\n    }\n  } // FIXME\n  // we handle here the panel display..., but this is not really the good\n  // place to do it...\n\n\n  this._setElevationPanel(this.options.displayAltitude);\n\n  this._setCoordinatesPanel(this.options.displayCoordinates);\n\n  if (!this.options.displayCoordinates) {\n    this._setSettingsPanel(false);\n  }\n};\n/**\n * this method is called by event 'change' on 'GPmousePositionProjectionSystem'\n * tag select (cf. this._createMousePositionSettingsElement),\n * and selects the system projection.\n *\n * @method onMousePositionProjectionSystemChange\n * @param {Object} e - HTMLElement\n * @private\n */\n\n\nMousePosition.prototype.onMousePositionProjectionSystemChange = function (e) {\n  var idx = e.target.selectedIndex; // index\n\n  var value = e.target.options[idx].value; // crs\n\n  this._setCurrentSystem(value);\n};\n/**\n * this method selects the current system projection.\n *\n * @method _setCurrentSystem\n * @param {String} systemCode - inner code (rank in array _projectionSystems)\n * @private\n */\n\n\nMousePosition.prototype._setCurrentSystem = function (systemCode) {\n  // if we change of system type, we must change the unit type too !\n  var type = null;\n\n  for (var i = 0; i < this._projectionSystems.length; ++i) {\n    if (this._projectionSystems[i].code === Number(systemCode)) {\n      type = this._projectionSystems[i].type;\n      break;\n    }\n  }\n\n  if (!type) {\n    logger.log(\"system not found in projection systems container\");\n    return;\n  }\n\n  if (type !== this._currentProjectionType) {\n    this._setTypeUnitsPanel(type);\n  } // registers the current system\n\n\n  this._currentProjectionSystems = this._projectionSystems[Number(systemCode)]; // simulates a movement in tactile mode to update the results\n\n  if (!this._isDesktop) {\n    this.onGlobeMove();\n  }\n};\n/**\n * this method is called by event 'mouseover' on 'GPmousePositionProjectionSystem'\n * tag select (cf. this._createMousePositionSettingsElement),\n * and selects the system projection whose geoBBox interstects the current view extent.\n *\n * @method onMousePositionProjectionSystemMouseOver\n * @private\n */\n\n\nMousePosition.prototype.onMousePositionProjectionSystemMouseOver = function () {\n  // globe infos\n  var globe = this.getGlobe();\n\n  if (!globe) {\n    return;\n  }\n\n  var globeExtent = globe.getExtent(); // clear select\n\n  var systemList = document.getElementById(this._addUID(\"GPmousePositionProjectionSystem\"));\n  systemList.innerHTML = \"\";\n  var option; // add systems whose extent intersects the globe extent\n\n  for (var j = 0; j < this._projectionSystems.length; j++) {\n    var proj = this._projectionSystems[j];\n\n    if (proj.geoBBox) {\n      // bboxes intersection test\n      if (globeExtent.west > proj.geoBBox.right || globeExtent.south > proj.geoBBox.top || globeExtent.east < proj.geoBBox.left || globeExtent.north < proj.geoBBox.bottom) {\n        if (proj === this._currentProjectionSystems) {\n          option = document.createElement(\"option\");\n          option.value = proj.code;\n          option.text = proj.label || j;\n          option.setAttribute(\"selected\", \"selected\");\n          option.setAttribute(\"disabled\", \"disabled\");\n          systemList.appendChild(option);\n        }\n\n        continue; // do not intersect\n      }\n    }\n\n    option = document.createElement(\"option\");\n    option.value = proj.code;\n    option.text = proj.label || j;\n\n    if (proj === this._currentProjectionSystems) {\n      option.setAttribute(\"selected\", \"selected\");\n    }\n\n    systemList.appendChild(option);\n  }\n};\n/**\n * this method is called by event 'change' on 'GPmousePositionProjectionUnits'\n * tag select (cf. this._createMousePositionSettingsElement),\n * and selects the units projection.\n *\n * @method onMousePositionProjectionUnitsChange\n * @param {Object} e - HTMLElement\n * @private\n */\n\n\nMousePosition.prototype.onMousePositionProjectionUnitsChange = function (e) {\n  var idx = e.target.selectedIndex;\n  var value = e.target.options[idx].value;\n  this._currentProjectionUnits = value; // simulates a movement in tactile mode to update the results\n\n  if (!this._isDesktop) {\n    this.onGlobeMove();\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MousePosition);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/MousePosition.js\n");

/***/ }),

/***/ "./src/Itowns/Controls/Scale.js":
/*!**************************************!*\
  !*** ./src/Itowns/Controls/Scale.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GlobeViewExtended */ \"./src/Itowns/GlobeViewExtended.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Controls_ScaleDOM__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Controls/ScaleDOM */ \"./src/Common/Controls/ScaleDOM.js\");\n/* harmony import */ var _Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget */ \"./src/Itowns/Controls/Widget.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\n/**\n * @classdesc\n * Control to display the scalebar with itowns\n *\n * @constructor\n * @alias itowns.control.Scale\n * @extends {itowns.control.Widget}\n * @alias itowns.control.Scale\n * @param {Object} options - widget options\n * @param {String}  options.target - HTML target element or HTML target element id\n * @param {String}  options.position - \"absolute\" or \"relative\"\n * @example\n * var scale = new itowns.control.Scale();\n *\n */\n\nfunction Scale(options) {\n  if (!(this instanceof Scale)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  }\n\n  if (_typeof(options) !== \"object\") {\n    throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n  }\n\n  this._initialize();\n\n  var container = this._initContainer();\n\n  _Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].call(this, {\n    name: \"GraphicScale\",\n    element: container,\n    target: options.target,\n    position: options.position\n  });\n}\n/*\n * @lends module:Scale\n */\n\n\nScale.prototype = Object.create(_Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prototype, {}); // retrieves methods of the common class ScaleDOM\n\n_Common_Utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].assign(Scale.prototype, _Common_Controls_ScaleDOM__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n/**\n * Constructor (alias)\n *\n * @private\n */\n\nScale.prototype.constructor = Scale; // ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\n\nScale.prototype.setGlobe = function (globe) {\n  // info : this function is called after a globe.addWidget() or a globe.removeWidget()\n  if (globe) {\n    // In the case of the adding of a control to the globe\n    var self = this;\n    /**\n     * Definition of the scaleControl callback :\n     * when the view is changing, we recalculate the graphic scale\n     */\n\n    this._callbacks.onChangedViewCallback = function () {\n      var value = globe.pixelsToMeters(200);\n      value = Math.floor(value);\n      var digit = Math.pow(10, value.toString().length - 1);\n      value = Math.round(value / digit) * digit;\n      var pix = globe.metersToPixels(value);\n      var unit = \"m\";\n\n      if (value >= 1000) {\n        value /= 1000;\n        unit = \"km\";\n      }\n\n      self.getElement().innerHTML = value + \" \" + unit;\n      self.getElement().style.width = pix + \"px\";\n    }; // Ajout des listeners\n    // initialization\n\n\n    if (globe.isInitialized()) {\n      this._callbacks.onChangedViewCallback();\n    } else {\n      globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.GLOBE_INITIALIZED, this._callbacks.onChangedViewCallback);\n    } // At every globe range movement, scale bar may be updated,\n\n\n    globe.listen(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.RANGE_CHANGED, this._callbacks.onChangedViewCallback);\n  } else if (globe == null) {\n    // we remove the listeners linked to the scalecontrol which has been deleted\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.GLOBE_INITIALIZED, this._callbacks.onChangedViewCallback);\n\n    this._globe.forget(_GlobeViewExtended__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EVENTS.RANGE_CHANGED, this._callbacks.onChangedViewCallback); // if globe == null we remove the scale control\n    // delete the scaleControl DOM\n\n\n    while (this.getElement().hasChildNodes()) {\n      this.getElement().removeChild(this.getElement().lastChild);\n    }\n\n    this.getElement().parentNode.removeChild(this.getElement());\n  } // call original setGlobe method\n\n\n  _Widget__WEBPACK_IMPORTED_MODULE_4__[\"default\"].prototype.setGlobe.call(this, globe);\n}; // ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize Scale control (called by constructor)\n *\n * @private\n */\n\n\nScale.prototype._initialize = function () {\n  // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n  this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_2__[\"default\"].generate(); // div which will contain the list divs.\n\n  this._ScaleContainer = null; // callbacks\n\n  this._callbacks = {};\n};\n/**\n * Create control main container\n *\n * @method _initContainer\n * @returns {DOMElement} container - widget container\n * @private\n */\n\n\nScale.prototype._initContainer = function () {\n  var container = this._createMainContainerElement();\n\n  return container;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Scale);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/Scale.js\n");

/***/ }),

/***/ "./src/Itowns/Controls/Utils/PositionFormater.js":
/*!*******************************************************!*\
  !*** ./src/Itowns/Controls/Utils/PositionFormater.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n* implementation :\n* cf. http://uihacker.blogspot.fr/2011/07/javascript-formatting-latitudelongitude.html?m=1\n* cf. http://andrew.hedges.name/experiments/convert_lat_long/\n* FIXME formater la sortie\n* cf. http://mottie.github.io/javascript-number-formatter/\n* cf. https://github.com/j-/number-formatter\n*\n*/\n\n/** ... */\nvar PositionFormater = {\n  /** ... */\n  NORTH: \"N\",\n\n  /** ... */\n  SOUTH: \"S\",\n\n  /** ... */\n  EAST: \"E\",\n\n  /** ... */\n  WEST: \"W\",\n\n  /** ... */\n  digitSecond: 2,\n\n  /** ... */\n  digitDecimal: 5,\n\n  /** ... */\n  digitRadian: 8,\n  roundToDecimal: function roundToDecimal(inputNum, numPoints) {\n    var multiplier = Math.pow(10, numPoints);\n    return Math.round(inputNum * multiplier) / multiplier;\n  },\n  decimalToRadian: function decimalToRadian(location) {\n    var d = 0.01745329251994329577;\n    return this.roundToDecimal(location * d, this.digitRadian);\n  },\n  decimalToGrade: function decimalToGrade(location) {\n    var d = 1.11111111111111111111;\n    return this.roundToDecimal(location * d, this.digitRadian);\n  },\n  decimalToDMS: function decimalToDMS(location, hemisphere) {\n    if (location < 0) {\n      location *= -1; // strip dash '-'\n    }\n\n    var degrees = Math.floor(location); // strip decimal remainer for degrees\n\n    var minutesFromRemainder = (location - degrees) * 60; // multiply the remainer by 60\n\n    var minutes = Math.floor(minutesFromRemainder); // get minutes from integer\n\n    var secondsFromRemainder = (minutesFromRemainder - minutes) * 60; // multiply the remainer by 60\n\n    var seconds = this.roundToDecimal(secondsFromRemainder, this.digitSecond); // get minutes by rounding to integer\n\n    var dms = degrees + \"° \" + minutes + \"' \" + seconds + \"\\\" \";\n\n    if (hemisphere) {\n      dms += hemisphere;\n    }\n\n    return dms;\n  },\n  decimalLatToDMS: function decimalLatToDMS(location) {\n    var hemisphere = location < 0 ? this.SOUTH : this.NORTH; // south if negative\n\n    return this.decimalToDMS(location, hemisphere);\n  },\n  decimalLongToDMS: function decimalLongToDMS(location) {\n    var hemisphere = location < 0 ? this.WEST : this.EAST; // west if negative\n\n    return this.decimalToDMS(location, hemisphere);\n  },\n  DMSToDecimal: function DMSToDecimal(degrees, minutes, seconds, hemisphere) {\n    var ddVal = degrees + minutes / 60 + seconds / 3600;\n    ddVal = hemisphere === this.SOUTH || hemisphere === this.WEST ? ddVal * -1 : ddVal;\n    var decimal = this.roundToDecimal(ddVal, this.digitDecimal);\n    return decimal;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (PositionFormater);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ29udHJvbHMvVXRpbHMvUG9zaXRpb25Gb3JtYXRlci5qcz84ZmJjIl0sIm5hbWVzIjpbIlBvc2l0aW9uRm9ybWF0ZXIiLCJOT1JUSCIsIlNPVVRIIiwiRUFTVCIsIldFU1QiLCJkaWdpdFNlY29uZCIsImRpZ2l0RGVjaW1hbCIsImRpZ2l0UmFkaWFuIiwicm91bmRUb0RlY2ltYWwiLCJpbnB1dE51bSIsIm51bVBvaW50cyIsIm11bHRpcGxpZXIiLCJNYXRoIiwicG93Iiwicm91bmQiLCJkZWNpbWFsVG9SYWRpYW4iLCJsb2NhdGlvbiIsImQiLCJkZWNpbWFsVG9HcmFkZSIsImRlY2ltYWxUb0RNUyIsImhlbWlzcGhlcmUiLCJkZWdyZWVzIiwiZmxvb3IiLCJtaW51dGVzRnJvbVJlbWFpbmRlciIsIm1pbnV0ZXMiLCJzZWNvbmRzRnJvbVJlbWFpbmRlciIsInNlY29uZHMiLCJkbXMiLCJkZWNpbWFsTGF0VG9ETVMiLCJkZWNpbWFsTG9uZ1RvRE1TIiwiRE1TVG9EZWNpbWFsIiwiZGRWYWwiLCJkZWNpbWFsIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBLElBQUlBLGdCQUFnQixHQUFHO0FBRW5CO0FBQ0FDLE9BQUssRUFBRyxHQUhXOztBQUtuQjtBQUNBQyxPQUFLLEVBQUcsR0FOVzs7QUFRbkI7QUFDQUMsTUFBSSxFQUFHLEdBVFk7O0FBV25CO0FBQ0FDLE1BQUksRUFBRyxHQVpZOztBQWNuQjtBQUNBQyxhQUFXLEVBQUcsQ0FmSzs7QUFpQm5CO0FBQ0FDLGNBQVksRUFBRyxDQWxCSTs7QUFvQm5CO0FBQ0FDLGFBQVcsRUFBRyxDQXJCSztBQXVCbkJDLGdCQUFjLEVBQUcsd0JBQVVDLFFBQVYsRUFBb0JDLFNBQXBCLEVBQStCO0FBQzVDLFFBQUlDLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsRUFBVCxFQUFhSCxTQUFiLENBQWpCO0FBQ0EsV0FBT0UsSUFBSSxDQUFDRSxLQUFMLENBQVdMLFFBQVEsR0FBR0UsVUFBdEIsSUFBb0NBLFVBQTNDO0FBQ0gsR0ExQmtCO0FBNEJuQkksaUJBQWUsRUFBRyx5QkFBVUMsUUFBVixFQUFvQjtBQUNsQyxRQUFJQyxDQUFDLEdBQUcsc0JBQVI7QUFDQSxXQUFPLEtBQUtULGNBQUwsQ0FBb0JRLFFBQVEsR0FBR0MsQ0FBL0IsRUFBa0MsS0FBS1YsV0FBdkMsQ0FBUDtBQUNILEdBL0JrQjtBQWlDbkJXLGdCQUFjLEVBQUcsd0JBQVVGLFFBQVYsRUFBb0I7QUFDakMsUUFBSUMsQ0FBQyxHQUFHLHNCQUFSO0FBQ0EsV0FBTyxLQUFLVCxjQUFMLENBQW9CUSxRQUFRLEdBQUdDLENBQS9CLEVBQWtDLEtBQUtWLFdBQXZDLENBQVA7QUFDSCxHQXBDa0I7QUFzQ25CWSxjQUFZLEVBQUcsc0JBQVVILFFBQVYsRUFBb0JJLFVBQXBCLEVBQWdDO0FBQzNDLFFBQUlKLFFBQVEsR0FBRyxDQUFmLEVBQWtCO0FBQ2RBLGNBQVEsSUFBSSxDQUFDLENBQWIsQ0FEYyxDQUNFO0FBQ25COztBQUVELFFBQUlLLE9BQU8sR0FBR1QsSUFBSSxDQUFDVSxLQUFMLENBQVdOLFFBQVgsQ0FBZCxDQUwyQyxDQUtQOztBQUNwQyxRQUFJTyxvQkFBb0IsR0FBRyxDQUFDUCxRQUFRLEdBQUdLLE9BQVosSUFBdUIsRUFBbEQsQ0FOMkMsQ0FNVzs7QUFDdEQsUUFBSUcsT0FBTyxHQUFHWixJQUFJLENBQUNVLEtBQUwsQ0FBV0Msb0JBQVgsQ0FBZCxDQVAyQyxDQU9LOztBQUNoRCxRQUFJRSxvQkFBb0IsR0FBRyxDQUFDRixvQkFBb0IsR0FBR0MsT0FBeEIsSUFBbUMsRUFBOUQsQ0FSMkMsQ0FRdUI7O0FBQ2xFLFFBQUlFLE9BQU8sR0FBRyxLQUFLbEIsY0FBTCxDQUFvQmlCLG9CQUFwQixFQUEwQyxLQUFLcEIsV0FBL0MsQ0FBZCxDQVQyQyxDQVNnQzs7QUFFM0UsUUFBSXNCLEdBQUcsR0FBR04sT0FBTyxHQUFHLElBQVYsR0FBaUJHLE9BQWpCLEdBQTJCLElBQTNCLEdBQWtDRSxPQUFsQyxHQUE0QyxLQUF0RDs7QUFDQSxRQUFJTixVQUFKLEVBQWdCO0FBQ1pPLFNBQUcsSUFBSVAsVUFBUDtBQUNIOztBQUVELFdBQU9PLEdBQVA7QUFDSCxHQXZEa0I7QUF5RG5CQyxpQkFBZSxFQUFHLHlCQUFVWixRQUFWLEVBQW9CO0FBQ2xDLFFBQUlJLFVBQVUsR0FBSUosUUFBUSxHQUFHLENBQVosR0FBaUIsS0FBS2QsS0FBdEIsR0FBOEIsS0FBS0QsS0FBcEQsQ0FEa0MsQ0FDeUI7O0FBQzNELFdBQU8sS0FBS2tCLFlBQUwsQ0FBa0JILFFBQWxCLEVBQTRCSSxVQUE1QixDQUFQO0FBQ0gsR0E1RGtCO0FBOERuQlMsa0JBQWdCLEVBQUcsMEJBQVViLFFBQVYsRUFBb0I7QUFDbkMsUUFBSUksVUFBVSxHQUFJSixRQUFRLEdBQUcsQ0FBWixHQUFpQixLQUFLWixJQUF0QixHQUE2QixLQUFLRCxJQUFuRCxDQURtQyxDQUNzQjs7QUFDekQsV0FBTyxLQUFLZ0IsWUFBTCxDQUFrQkgsUUFBbEIsRUFBNEJJLFVBQTVCLENBQVA7QUFDSCxHQWpFa0I7QUFtRW5CVSxjQUFZLEVBQUcsc0JBQVVULE9BQVYsRUFBbUJHLE9BQW5CLEVBQTRCRSxPQUE1QixFQUFxQ04sVUFBckMsRUFBaUQ7QUFDNUQsUUFBSVcsS0FBSyxHQUFHVixPQUFPLEdBQUdHLE9BQU8sR0FBRyxFQUFwQixHQUF5QkUsT0FBTyxHQUFHLElBQS9DO0FBQ0FLLFNBQUssR0FBSVgsVUFBVSxLQUFLLEtBQUtsQixLQUFwQixJQUE2QmtCLFVBQVUsS0FBSyxLQUFLaEIsSUFBbEQsR0FBMEQyQixLQUFLLEdBQUcsQ0FBQyxDQUFuRSxHQUF1RUEsS0FBL0U7QUFFQSxRQUFJQyxPQUFPLEdBQUcsS0FBS3hCLGNBQUwsQ0FBb0J1QixLQUFwQixFQUEyQixLQUFLekIsWUFBaEMsQ0FBZDtBQUNBLFdBQU8wQixPQUFQO0FBQ0g7QUF6RWtCLENBQXZCO0FBNkVlaEMsK0VBQWYiLCJmaWxlIjoiLi9zcmMvSXRvd25zL0NvbnRyb2xzL1V0aWxzL1Bvc2l0aW9uRm9ybWF0ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogaW1wbGVtZW50YXRpb24gOlxuKiBjZi4gaHR0cDovL3VpaGFja2VyLmJsb2dzcG90LmZyLzIwMTEvMDcvamF2YXNjcmlwdC1mb3JtYXR0aW5nLWxhdGl0dWRlbG9uZ2l0dWRlLmh0bWw/bT0xXG4qIGNmLiBodHRwOi8vYW5kcmV3LmhlZGdlcy5uYW1lL2V4cGVyaW1lbnRzL2NvbnZlcnRfbGF0X2xvbmcvXG4qIEZJWE1FIGZvcm1hdGVyIGxhIHNvcnRpZVxuKiBjZi4gaHR0cDovL21vdHRpZS5naXRodWIuaW8vamF2YXNjcmlwdC1udW1iZXItZm9ybWF0dGVyL1xuKiBjZi4gaHR0cHM6Ly9naXRodWIuY29tL2otL251bWJlci1mb3JtYXR0ZXJcbipcbiovXG4vKiogLi4uICovXG52YXIgUG9zaXRpb25Gb3JtYXRlciA9IHtcblxuICAgIC8qKiAuLi4gKi9cbiAgICBOT1JUSCA6IFwiTlwiLFxuXG4gICAgLyoqIC4uLiAqL1xuICAgIFNPVVRIIDogXCJTXCIsXG5cbiAgICAvKiogLi4uICovXG4gICAgRUFTVCA6IFwiRVwiLFxuXG4gICAgLyoqIC4uLiAqL1xuICAgIFdFU1QgOiBcIldcIixcblxuICAgIC8qKiAuLi4gKi9cbiAgICBkaWdpdFNlY29uZCA6IDIsXG5cbiAgICAvKiogLi4uICovXG4gICAgZGlnaXREZWNpbWFsIDogNSxcblxuICAgIC8qKiAuLi4gKi9cbiAgICBkaWdpdFJhZGlhbiA6IDgsXG5cbiAgICByb3VuZFRvRGVjaW1hbCA6IGZ1bmN0aW9uIChpbnB1dE51bSwgbnVtUG9pbnRzKSB7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIG51bVBvaW50cyk7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGlucHV0TnVtICogbXVsdGlwbGllcikgLyBtdWx0aXBsaWVyO1xuICAgIH0sXG5cbiAgICBkZWNpbWFsVG9SYWRpYW4gOiBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgdmFyIGQgPSAwLjAxNzQ1MzI5MjUxOTk0MzI5NTc3O1xuICAgICAgICByZXR1cm4gdGhpcy5yb3VuZFRvRGVjaW1hbChsb2NhdGlvbiAqIGQsIHRoaXMuZGlnaXRSYWRpYW4pO1xuICAgIH0sXG5cbiAgICBkZWNpbWFsVG9HcmFkZSA6IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICB2YXIgZCA9IDEuMTExMTExMTExMTExMTExMTExMTE7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdW5kVG9EZWNpbWFsKGxvY2F0aW9uICogZCwgdGhpcy5kaWdpdFJhZGlhbik7XG4gICAgfSxcblxuICAgIGRlY2ltYWxUb0RNUyA6IGZ1bmN0aW9uIChsb2NhdGlvbiwgaGVtaXNwaGVyZSkge1xuICAgICAgICBpZiAobG9jYXRpb24gPCAwKSB7XG4gICAgICAgICAgICBsb2NhdGlvbiAqPSAtMTsgLy8gc3RyaXAgZGFzaCAnLSdcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWdyZWVzID0gTWF0aC5mbG9vcihsb2NhdGlvbik7IC8vIHN0cmlwIGRlY2ltYWwgcmVtYWluZXIgZm9yIGRlZ3JlZXNcbiAgICAgICAgdmFyIG1pbnV0ZXNGcm9tUmVtYWluZGVyID0gKGxvY2F0aW9uIC0gZGVncmVlcykgKiA2MDsgLy8gbXVsdGlwbHkgdGhlIHJlbWFpbmVyIGJ5IDYwXG4gICAgICAgIHZhciBtaW51dGVzID0gTWF0aC5mbG9vcihtaW51dGVzRnJvbVJlbWFpbmRlcik7IC8vIGdldCBtaW51dGVzIGZyb20gaW50ZWdlclxuICAgICAgICB2YXIgc2Vjb25kc0Zyb21SZW1haW5kZXIgPSAobWludXRlc0Zyb21SZW1haW5kZXIgLSBtaW51dGVzKSAqIDYwOyAvLyBtdWx0aXBseSB0aGUgcmVtYWluZXIgYnkgNjBcbiAgICAgICAgdmFyIHNlY29uZHMgPSB0aGlzLnJvdW5kVG9EZWNpbWFsKHNlY29uZHNGcm9tUmVtYWluZGVyLCB0aGlzLmRpZ2l0U2Vjb25kKTsgLy8gZ2V0IG1pbnV0ZXMgYnkgcm91bmRpbmcgdG8gaW50ZWdlclxuXG4gICAgICAgIHZhciBkbXMgPSBkZWdyZWVzICsgXCLCsCBcIiArIG1pbnV0ZXMgKyBcIicgXCIgKyBzZWNvbmRzICsgXCJcXFwiIFwiO1xuICAgICAgICBpZiAoaGVtaXNwaGVyZSkge1xuICAgICAgICAgICAgZG1zICs9IGhlbWlzcGhlcmU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZG1zO1xuICAgIH0sXG5cbiAgICBkZWNpbWFsTGF0VG9ETVMgOiBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgdmFyIGhlbWlzcGhlcmUgPSAobG9jYXRpb24gPCAwKSA/IHRoaXMuU09VVEggOiB0aGlzLk5PUlRIOyAvLyBzb3V0aCBpZiBuZWdhdGl2ZVxuICAgICAgICByZXR1cm4gdGhpcy5kZWNpbWFsVG9ETVMobG9jYXRpb24sIGhlbWlzcGhlcmUpO1xuICAgIH0sXG5cbiAgICBkZWNpbWFsTG9uZ1RvRE1TIDogZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIHZhciBoZW1pc3BoZXJlID0gKGxvY2F0aW9uIDwgMCkgPyB0aGlzLldFU1QgOiB0aGlzLkVBU1Q7IC8vIHdlc3QgaWYgbmVnYXRpdmVcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjaW1hbFRvRE1TKGxvY2F0aW9uLCBoZW1pc3BoZXJlKTtcbiAgICB9LFxuXG4gICAgRE1TVG9EZWNpbWFsIDogZnVuY3Rpb24gKGRlZ3JlZXMsIG1pbnV0ZXMsIHNlY29uZHMsIGhlbWlzcGhlcmUpIHtcbiAgICAgICAgdmFyIGRkVmFsID0gZGVncmVlcyArIG1pbnV0ZXMgLyA2MCArIHNlY29uZHMgLyAzNjAwO1xuICAgICAgICBkZFZhbCA9IChoZW1pc3BoZXJlID09PSB0aGlzLlNPVVRIIHx8IGhlbWlzcGhlcmUgPT09IHRoaXMuV0VTVCkgPyBkZFZhbCAqIC0xIDogZGRWYWw7XG5cbiAgICAgICAgdmFyIGRlY2ltYWwgPSB0aGlzLnJvdW5kVG9EZWNpbWFsKGRkVmFsLCB0aGlzLmRpZ2l0RGVjaW1hbCk7XG4gICAgICAgIHJldHVybiBkZWNpbWFsO1xuICAgIH1cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9zaXRpb25Gb3JtYXRlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/Utils/PositionFormater.js\n");

/***/ }),

/***/ "./src/Itowns/Controls/Widget.js":
/*!***************************************!*\
  !*** ./src/Itowns/Controls/Widget.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! itowns */ \"itowns\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(itowns__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLogger(\"Widget\");\n/**\n* @classdesc\n* iTowns Widget class.\n* Every geoportal control inherits of this class.\n*\n* @constructor\n* @alias itowns.control.Widget\n* @param {Object} options - options for function call.\n* @param {String}  options.name - Name of the widget.\n* @param {Object}  options.element - HTML element of the widget\n* @param {Object|String}  options.target - HTML element or HTML element id where to put the widget\n* @param {String}  options.position - \"absolute\" or \"relative\"\n* @example\n* var myWidget = new itowns.control.Widget({\n*      name : \"myWidget\",\n*      element : myWidgetDiv,\n*      target : myWidgetTargetDiv,\n*      position: \"absolute\"\n* });\n*/\n\nfunction Widget(options) {\n  this._name = options.name !== undefined ? options.name : null;\n  this._element = options.element !== undefined ? options.element : null;\n  this._position = options.position !== undefined ? options.position : null;\n  this._target = null;\n  this._globe = null;\n\n  if (options.target) {\n    this.setTarget(options.target, this._position);\n  }\n}\n/*\n * @lends module:Attributions\n */\n\n\nWidget.prototype = Object.create(itowns__WEBPACK_IMPORTED_MODULE_0__[\"THREE\"].EventDispatcher.prototype, {});\n/**\n * Constructor (alias)\n */\n\nWidget.prototype.constructor = Widget;\n/**\n * Return the widget's container element.\n *\n * @method\n * @return {HTMLElement} widget's container element.\n */\n\nWidget.prototype.getElement = function getElement() {\n  return this._element;\n};\n/**\n * Associates the widget to a specified target div.\n *\n * @method\n * @param {HTMLElement|String} target - widget target div html element or target div id.\n * @param {String} position - html position attribute.\n */\n\n\nWidget.prototype.setTarget = function setTarget(target, position) {\n  this._target = typeof target === \"string\" ? document.getElementById(target) : target;\n\n  if (!this._element) {\n    logger.error(\"Widget:setTarget - widget element not created\");\n    return;\n  }\n\n  this._element.style.position = position || \"relative\";\n\n  this._target.appendChild(this._element);\n};\n/**\n * Return the widget's target div.\n *\n * @method\n * @return {HTMLElement} widget's target div.\n */\n\n\nWidget.prototype.getTarget = function getTarget() {\n  return this._target;\n};\n/**\n * Return the widget's element position.\n *\n * @method\n * @return {String} widget's element position.\n */\n\n\nWidget.prototype.getPosition = function getPosition() {\n  return this._position;\n};\n/**\n * Get the globe associated with the widget. Undefined if the widget is not added to a globe.\n *\n * @method\n * @return {Object} globe\n */\n\n\nWidget.prototype.getGlobe = function getGlobe() {\n  return this._globe;\n};\n/**\n * Associate a globe to the widget.\n *\n * @method\n * @param {Object} globe - Globe to associate to the widget.\n */\n\n\nWidget.prototype.setGlobe = function setGlobe(globe) {\n  this._globe = globe;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Widget);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvQ29udHJvbHMvV2lkZ2V0LmpzP2IwMGQiXSwibmFtZXMiOlsibG9nZ2VyIiwiTG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiV2lkZ2V0Iiwib3B0aW9ucyIsIl9uYW1lIiwibmFtZSIsInVuZGVmaW5lZCIsIl9lbGVtZW50IiwiZWxlbWVudCIsIl9wb3NpdGlvbiIsInBvc2l0aW9uIiwiX3RhcmdldCIsIl9nbG9iZSIsInRhcmdldCIsInNldFRhcmdldCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIlRIUkVFIiwiRXZlbnREaXNwYXRjaGVyIiwiY29uc3RydWN0b3IiLCJnZXRFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImVycm9yIiwic3R5bGUiLCJhcHBlbmRDaGlsZCIsImdldFRhcmdldCIsImdldFBvc2l0aW9uIiwiZ2V0R2xvYmUiLCJzZXRHbG9iZSIsImdsb2JlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQSxJQUFJQSxNQUFNLEdBQUdDLHFFQUFNLENBQUNDLFNBQVAsQ0FBaUIsUUFBakIsQ0FBYjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsTUFBVCxDQUFpQkMsT0FBakIsRUFBMEI7QUFDdEIsT0FBS0MsS0FBTCxHQUFjRCxPQUFPLENBQUNFLElBQVIsS0FBaUJDLFNBQWxCLEdBQStCSCxPQUFPLENBQUNFLElBQXZDLEdBQThDLElBQTNEO0FBQ0EsT0FBS0UsUUFBTCxHQUFpQkosT0FBTyxDQUFDSyxPQUFSLEtBQW9CRixTQUFyQixHQUFrQ0gsT0FBTyxDQUFDSyxPQUExQyxHQUFvRCxJQUFwRTtBQUNBLE9BQUtDLFNBQUwsR0FBa0JOLE9BQU8sQ0FBQ08sUUFBUixLQUFxQkosU0FBdEIsR0FBbUNILE9BQU8sQ0FBQ08sUUFBM0MsR0FBc0QsSUFBdkU7QUFDQSxPQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUNBLE9BQUtDLE1BQUwsR0FBYyxJQUFkOztBQUVBLE1BQUlULE9BQU8sQ0FBQ1UsTUFBWixFQUFvQjtBQUNoQixTQUFLQyxTQUFMLENBQWVYLE9BQU8sQ0FBQ1UsTUFBdkIsRUFBK0IsS0FBS0osU0FBcEM7QUFDSDtBQUNKO0FBRUQ7QUFDQTtBQUNBOzs7QUFDQVAsTUFBTSxDQUFDYSxTQUFQLEdBQW1CQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsNENBQUssQ0FBQ0MsZUFBTixDQUFzQkosU0FBcEMsRUFBK0MsRUFBL0MsQ0FBbkI7QUFFQTtBQUNBO0FBQ0E7O0FBQ0FiLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQkssV0FBakIsR0FBK0JsQixNQUEvQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDYSxTQUFQLENBQWlCTSxVQUFqQixHQUE4QixTQUFTQSxVQUFULEdBQXVCO0FBQ2pELFNBQU8sS0FBS2QsUUFBWjtBQUNILENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FMLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQkQsU0FBakIsR0FBNkIsU0FBU0EsU0FBVCxDQUFvQkQsTUFBcEIsRUFBNEJILFFBQTVCLEVBQXNDO0FBQy9ELE9BQUtDLE9BQUwsR0FBZSxPQUFPRSxNQUFQLEtBQWtCLFFBQWxCLEdBQTZCUyxRQUFRLENBQUNDLGNBQVQsQ0FBd0JWLE1BQXhCLENBQTdCLEdBQStEQSxNQUE5RTs7QUFFQSxNQUFJLENBQUMsS0FBS04sUUFBVixFQUFvQjtBQUNoQlIsVUFBTSxDQUFDeUIsS0FBUCxDQUFhLCtDQUFiO0FBQ0E7QUFDSDs7QUFFRCxPQUFLakIsUUFBTCxDQUFja0IsS0FBZCxDQUFvQmYsUUFBcEIsR0FBK0JBLFFBQVEsSUFBSSxVQUEzQzs7QUFFQSxPQUFLQyxPQUFMLENBQWFlLFdBQWIsQ0FBeUIsS0FBS25CLFFBQTlCO0FBQ0gsQ0FYRDtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FMLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQlksU0FBakIsR0FBNkIsU0FBU0EsU0FBVCxHQUFzQjtBQUMvQyxTQUFPLEtBQUtoQixPQUFaO0FBQ0gsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FULE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQmEsV0FBakIsR0FBK0IsU0FBU0EsV0FBVCxHQUF3QjtBQUNuRCxTQUFPLEtBQUtuQixTQUFaO0FBQ0gsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FQLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQmMsUUFBakIsR0FBNEIsU0FBU0EsUUFBVCxHQUFxQjtBQUM3QyxTQUFPLEtBQUtqQixNQUFaO0FBQ0gsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FWLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQmUsUUFBakIsR0FBNEIsU0FBU0EsUUFBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFDbEQsT0FBS25CLE1BQUwsR0FBY21CLEtBQWQ7QUFDSCxDQUZEOztBQUllN0IscUVBQWYiLCJmaWxlIjoiLi9zcmMvSXRvd25zL0NvbnRyb2xzL1dpZGdldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRIUkVFIH0gZnJvbSBcIml0b3duc1wiO1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuXG52YXIgbG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcihcIldpZGdldFwiKTtcblxuLyoqXG4qIEBjbGFzc2Rlc2NcbiogaVRvd25zIFdpZGdldCBjbGFzcy5cbiogRXZlcnkgZ2VvcG9ydGFsIGNvbnRyb2wgaW5oZXJpdHMgb2YgdGhpcyBjbGFzcy5cbipcbiogQGNvbnN0cnVjdG9yXG4qIEBhbGlhcyBpdG93bnMuY29udHJvbC5XaWRnZXRcbiogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGZvciBmdW5jdGlvbiBjYWxsLlxuKiBAcGFyYW0ge1N0cmluZ30gIG9wdGlvbnMubmFtZSAtIE5hbWUgb2YgdGhlIHdpZGdldC5cbiogQHBhcmFtIHtPYmplY3R9ICBvcHRpb25zLmVsZW1lbnQgLSBIVE1MIGVsZW1lbnQgb2YgdGhlIHdpZGdldFxuKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9ICBvcHRpb25zLnRhcmdldCAtIEhUTUwgZWxlbWVudCBvciBIVE1MIGVsZW1lbnQgaWQgd2hlcmUgdG8gcHV0IHRoZSB3aWRnZXRcbiogQHBhcmFtIHtTdHJpbmd9ICBvcHRpb25zLnBvc2l0aW9uIC0gXCJhYnNvbHV0ZVwiIG9yIFwicmVsYXRpdmVcIlxuKiBAZXhhbXBsZVxuKiB2YXIgbXlXaWRnZXQgPSBuZXcgaXRvd25zLmNvbnRyb2wuV2lkZ2V0KHtcbiogICAgICBuYW1lIDogXCJteVdpZGdldFwiLFxuKiAgICAgIGVsZW1lbnQgOiBteVdpZGdldERpdixcbiogICAgICB0YXJnZXQgOiBteVdpZGdldFRhcmdldERpdixcbiogICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiXG4qIH0pO1xuKi9cbmZ1bmN0aW9uIFdpZGdldCAob3B0aW9ucykge1xuICAgIHRoaXMuX25hbWUgPSAob3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQpID8gb3B0aW9ucy5uYW1lIDogbnVsbDtcbiAgICB0aGlzLl9lbGVtZW50ID0gKG9wdGlvbnMuZWxlbWVudCAhPT0gdW5kZWZpbmVkKSA/IG9wdGlvbnMuZWxlbWVudCA6IG51bGw7XG4gICAgdGhpcy5fcG9zaXRpb24gPSAob3B0aW9ucy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSA/IG9wdGlvbnMucG9zaXRpb24gOiBudWxsO1xuICAgIHRoaXMuX3RhcmdldCA9IG51bGw7XG4gICAgdGhpcy5fZ2xvYmUgPSBudWxsO1xuXG4gICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuc2V0VGFyZ2V0KG9wdGlvbnMudGFyZ2V0LCB0aGlzLl9wb3NpdGlvbik7XG4gICAgfVxufVxuXG4vKlxuICogQGxlbmRzIG1vZHVsZTpBdHRyaWJ1dGlvbnNcbiAqL1xuV2lkZ2V0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSwge30pO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIChhbGlhcylcbiAqL1xuV2lkZ2V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdpZGdldDtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHdpZGdldCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICpcbiAqIEBtZXRob2RcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSB3aWRnZXQncyBjb250YWluZXIgZWxlbWVudC5cbiAqL1xuV2lkZ2V0LnByb3RvdHlwZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24gZ2V0RWxlbWVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG59O1xuXG4vKipcbiAqIEFzc29jaWF0ZXMgdGhlIHdpZGdldCB0byBhIHNwZWNpZmllZCB0YXJnZXQgZGl2LlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8U3RyaW5nfSB0YXJnZXQgLSB3aWRnZXQgdGFyZ2V0IGRpdiBodG1sIGVsZW1lbnQgb3IgdGFyZ2V0IGRpdiBpZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGh0bWwgcG9zaXRpb24gYXR0cmlidXRlLlxuICovXG5XaWRnZXQucHJvdG90eXBlLnNldFRhcmdldCA9IGZ1bmN0aW9uIHNldFRhcmdldCAodGFyZ2V0LCBwb3NpdGlvbikge1xuICAgIHRoaXMuX3RhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQpIDogdGFyZ2V0O1xuXG4gICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcIldpZGdldDpzZXRUYXJnZXQgLSB3aWRnZXQgZWxlbWVudCBub3QgY3JlYXRlZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiB8fCBcInJlbGF0aXZlXCI7XG5cbiAgICB0aGlzLl90YXJnZXQuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgd2lkZ2V0J3MgdGFyZ2V0IGRpdi5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gd2lkZ2V0J3MgdGFyZ2V0IGRpdi5cbiAqL1xuV2lkZ2V0LnByb3RvdHlwZS5nZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQgKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgd2lkZ2V0J3MgZWxlbWVudCBwb3NpdGlvbi5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHdpZGdldCdzIGVsZW1lbnQgcG9zaXRpb24uXG4gKi9cbldpZGdldC5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiBnZXRQb3NpdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGdsb2JlIGFzc29jaWF0ZWQgd2l0aCB0aGUgd2lkZ2V0LiBVbmRlZmluZWQgaWYgdGhlIHdpZGdldCBpcyBub3QgYWRkZWQgdG8gYSBnbG9iZS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcmV0dXJuIHtPYmplY3R9IGdsb2JlXG4gKi9cbldpZGdldC5wcm90b3R5cGUuZ2V0R2xvYmUgPSBmdW5jdGlvbiBnZXRHbG9iZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsb2JlO1xufTtcblxuLyoqXG4gKiBBc3NvY2lhdGUgYSBnbG9iZSB0byB0aGUgd2lkZ2V0LlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0fSBnbG9iZSAtIEdsb2JlIHRvIGFzc29jaWF0ZSB0byB0aGUgd2lkZ2V0LlxuICovXG5XaWRnZXQucHJvdG90eXBlLnNldEdsb2JlID0gZnVuY3Rpb24gc2V0R2xvYmUgKGdsb2JlKSB7XG4gICAgdGhpcy5fZ2xvYmUgPSBnbG9iZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdpZGdldDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Itowns/Controls/Widget.js\n");

/***/ }),

/***/ "./src/Itowns/GlobeViewExtended.js":
/*!*****************************************!*\
  !*** ./src/Itowns/GlobeViewExtended.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! itowns */ \"itowns\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(itowns__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"GlobeViewExtended\");\n/**\n * @classdesc\n *\n * Extended itowns.GlobeView.\n *\n * @constructor\n * @extends {itowns.GlobeView}\n * @param {HTMLElement} viewerDiv - Where to instanciate the Three.js scene in the DOM\n * @param {Object} coordCarto - longitude, latitude, altitude\n * @param {Object} [options] - Optional properties which includes Itowns GlobeView optional properties (see Itowns documentation).\n * @param {Boolean} [options.renderer.isWebGL2=True] - is an Itowns GlobeView optional property to enable webgl 2.0 for THREE.js.\n * @param {String} [options.position=\"relative\"] - \"absolute\" or \"relative\"\n */\n\nfunction GlobeViewExtended(viewerDiv, coordCarto, options) {\n  if (!viewerDiv.style.position || options & options.position) {\n    viewerDiv.style.position = !options || !options.position ? \"relative\" : options.position;\n  } // stockage de l'élément html porteur du globe\n\n\n  var globeViewDiv = document.createElement(\"div\");\n  globeViewDiv.style.width = \"100%\";\n  globeViewDiv.style.height = \"100%\";\n  viewerDiv.appendChild(globeViewDiv);\n  this._viewerDiv = viewerDiv; // widget container\n\n  this._widgets = []; // mapping des evenements\n\n  this._initEventMap(); // pour savoir si le globe est initialise\n\n\n  this._isInitialized = false; // call constructor\n\n  this._globeView = new itowns__WEBPACK_IMPORTED_MODULE_1__[\"GlobeView\"](globeViewDiv, coordCarto, options);\n  var self = this;\n  this.listen(GlobeViewExtended.EVENTS.GLOBE_INITIALIZED, function () {\n    self._isInitialized = true;\n  });\n\n  this._globeView.addFrameRequester(itowns__WEBPACK_IMPORTED_MODULE_1__[\"MAIN_LOOP_EVENTS\"].BEFORE_RENDER, function () {\n    clearTimeout(this._preRenderTimer);\n    self._preRenderTimer = setTimeout(function () {\n      var visibleColorLayersIds = [];\n      var visibleElevationLayersIds = [];\n\n      for (var i = 0; i < self.getGlobeView().tileLayer.info.displayed.layers.length; ++i) {\n        if (self.getGlobeView().tileLayer.info.displayed.layers[i].isColorLayer) {\n          visibleColorLayersIds.push(self.getGlobeView().tileLayer.info.displayed.layers[i].id);\n        }\n\n        if (self.getGlobeView().tileLayer.info.displayed.layers[i].isElevationLayer) {\n          visibleElevationLayersIds.push(self.getGlobeView().tileLayer.info.displayed.layers[i].id);\n        }\n      }\n\n      var currentExtent = self.getGlobeView().tileLayer.info.displayed.extent;\n\n      self._globeView.dispatchEvent({\n        type: GlobeViewExtended.EVENTS.PRE_RENDER,\n        colorLayersId: visibleColorLayersIds,\n        elevationLayersId: visibleElevationLayersIds,\n        extent: currentExtent\n      });\n    }, 100);\n  }.bind(this));\n\n  if (this._globeView.controls) {\n    this.freezeControl();\n  }\n}\n/**\n * intializes the evenements map\n */\n\n\nGlobeViewExtended.prototype._initEventMap = function () {\n  if (!GlobeViewExtended.EVENTS) {\n    GlobeViewExtended.EVENTS = {\n      RANGE_CHANGED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"CONTROL_EVENTS\"].RANGE_CHANGED,\n      CENTER_CHANGED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"CONTROL_EVENTS\"].CAMERA_TARGET_CHANGED,\n      ORIENTATION_CHANGED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"CONTROL_EVENTS\"].ORIENTATION_CHANGED,\n      LAYER_ADDED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"GLOBE_VIEW_EVENTS\"].LAYER_ADDED,\n      LAYER_REMOVED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"GLOBE_VIEW_EVENTS\"].LAYER_REMOVED,\n      LAYERS_ORDER_CHANGED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"GLOBE_VIEW_EVENTS\"].COLOR_LAYERS_ORDER_CHANGED,\n      GLOBE_INITIALIZED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"GLOBE_VIEW_EVENTS\"].GLOBE_INITIALIZED,\n      LAYERS_INITIALIZED: itowns__WEBPACK_IMPORTED_MODULE_1__[\"VIEW_EVENTS\"].LAYERS_INITIALIZED,\n      VIEW_INITIALIZED: \"viewinitialized\",\n      PRE_RENDER: \"prerender\",\n      MOUSE_MOVE: \"mousemove\",\n      AFTER_RENDER: itowns__WEBPACK_IMPORTED_MODULE_1__[\"MAIN_LOOP_EVENTS\"].AFTER_RENDER,\n      OPACITY_PROPERTY_CHANGED: \"opacity-property-changed\",\n      VISIBLE_PROPERTY_CHANGED: \"visible-property-changed\",\n      SEQUENCE_PROPERTY_CHANGED: \"sequence-property-changed\"\n    };\n  }\n};\n/**\n * Constructor (alias)\n */\n\n\nGlobeViewExtended.prototype.constructor = GlobeViewExtended;\n/**\n * Get GlobeViex Object (parent)\n * @returns {Object} itowns GlobeView object\n */\n\nGlobeViewExtended.prototype.getGlobeView = function () {\n  return this._globeView;\n};\n/**\n * Indicates if the globe is initialized or not\n *\n * @return {Boolean} isInitialized\n *\n */\n\n\nGlobeViewExtended.prototype.isInitialized = function () {\n  return this._isInitialized;\n};\n/**\n * Detects when the camera movement stops, then launch the callback given as parameter\n *\n * @param {Function} cb - The function to execute when the event occures.\n *\n */\n\n\nGlobeViewExtended.prototype.onCameraMoveStop = function (cb) {\n  var self = this;\n\n  function afterRenderHandler() {\n    self._globeView.removeFrameRequester(itowns__WEBPACK_IMPORTED_MODULE_1__[\"MAIN_LOOP_EVENTS\"].AFTER_CAMERA_UPDATE, afterRenderHandler);\n\n    cb();\n  }\n\n  ;\n\n  this._globeView.addFrameRequester(itowns__WEBPACK_IMPORTED_MODULE_1__[\"MAIN_LOOP_EVENTS\"].AFTER_CAMERA_UPDATE, afterRenderHandler);\n};\n/**\n * Disables globe controls until the globe rendering is completed\n */\n\n\nGlobeViewExtended.prototype.freezeControl = function () {\n  // disable navigation\n  this._globeView.controls.enabled = false;\n  this.onCameraMoveStop(function () {\n    this._globeView.controls.enabled = true;\n  }.bind(this));\n};\n/**\n * Associates a function to trigger when an event is received.\n *\n * @param {String} type - the event type. Can be any of {@link EVENTS}\n * @param {Function} callback - The function to execute when the event occures.\n * @return {Object} key - The event key\n *\n */\n\n\nGlobeViewExtended.prototype.listen = function (type, callback) {\n  if (typeof callback !== \"function\") {\n    logger.warn(\"no callback provided for event : \" + type);\n    return null;\n  }\n\n  var target = this._getEventTarget(type);\n\n  if (!target) {\n    return null;\n  }\n\n  if (type === GlobeViewExtended.EVENTS.AFTER_RENDER) {\n    target.addFrameRequester(type, callback);\n  } else {\n    target.addEventListener(type, callback);\n  }\n\n  return {\n    target: target,\n    callback: callback,\n    type: type\n  };\n};\n/**\n * Associates a function to trigger when a layer event is received.\n *\n * @param {Object} layer - The itowns layer.\n * @param {String} type - the event type. Can be any of {@link EVENTS}.\n * @param {Function} callback - The function to execute when the event occures.\n * @return {Object} key - The event key\n *\n */\n\n\nGlobeViewExtended.prototype.addLayerListener = function (layer, type, callback) {\n  if (typeof callback !== \"function\") {\n    logger.warn(\"no callback provided for event : \" + type);\n    return null;\n  }\n\n  layer.addEventListener(type, callback);\n  return {\n    target: layer,\n    callback: callback,\n    type: type\n  };\n};\n/**\n * Returns the target of a given event type\n *\n * @param {String} type - the event type. Can be any of {@link EVENTS}\n * @return {Object} target - The event target.\n *\n */\n\n\nGlobeViewExtended.prototype._getEventTarget = function (type) {\n  switch (type) {\n    case GlobeViewExtended.EVENTS.RANGE_CHANGED:\n    case GlobeViewExtended.EVENTS.CENTER_CHANGED:\n    case GlobeViewExtended.EVENTS.ORIENTATION_CHANGED:\n      return this.getGlobeView().controls;\n\n    case GlobeViewExtended.EVENTS.LAYER_ADDED:\n    case GlobeViewExtended.EVENTS.LAYER_REMOVED:\n    case GlobeViewExtended.EVENTS.LAYERS_ORDER_CHANGED:\n    case GlobeViewExtended.EVENTS.LAYERS_INITIALIZED:\n    case GlobeViewExtended.EVENTS.GLOBE_INITIALIZED:\n    case GlobeViewExtended.EVENTS.PRE_RENDER:\n    case GlobeViewExtended.EVENTS.AFTER_RENDER:\n    case GlobeViewExtended.EVENTS.VIEW_INITIALIZED:\n      return this.getGlobeView();\n\n    case GlobeViewExtended.EVENTS.MOUSE_MOVE:\n      return this._viewerDiv;\n\n    default:\n      logger.warn(\"unhandled event : \" + type);\n      return null;\n  }\n};\n/**\n * Cancels an event listening\n *\n * @param {Object} key - The event key\n *\n */\n\n\nGlobeViewExtended.prototype.forgetByKey = function (key) {\n  if (key.type === GlobeViewExtended.EVENTS.AFTER_RENDER) {\n    key.target.removeFrameRequester(key.type, key.callback);\n  } else {\n    key.target.removeEventListener(key.type, key.callback);\n  }\n};\n/**\n * Cancels an layer event listening\n *\n * @param {Object} layer - The itowns layer\n * @param {String} type - the event type\n * @param {Function} callback - The function to execute when the event occures\n *\n */\n\n\nGlobeViewExtended.prototype.removeLayerListener = function (layer, type, callback) {\n  this.forgetByKey({\n    target: layer,\n    callback: callback,\n    type: type\n  });\n};\n/**\n * Cancels an event listening\n *\n * @param {Object} type - The event type\n * @param {Function} callback - The event handler\n */\n\n\nGlobeViewExtended.prototype.forget = function (type, callback) {\n  var target = this._getEventTarget(type);\n\n  if (!target) return;\n  this.forgetByKey({\n    target: target,\n    callback: callback,\n    type: type\n  });\n};\n/**\n * Overload itowns.GlobeView addLayer method\n *\n * @param {Object} layer - The itowns layer\n * @return {Promise} promise\n */\n\n\nGlobeViewExtended.prototype.addLayer = function (layer) {\n  // FIXME : to delete when itowns commit 2e9ed61eb4aa2a4bbe0e17c8e2650953844b099e\n  // is integrated into an iTowns release\n  try {\n    var promise = this.getGlobeView().addLayer(layer);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  return promise;\n};\n/**\n * Overload itowns.GlobeView removeLayer method\n *\n * @param {String} layerId - The layer id\n */\n\n\nGlobeViewExtended.prototype.removeLayer = function (layerId) {\n  this.getGlobeView().removeLayer(layerId);\n};\n/**\n * Set layer opacity\n *\n * @param {String} layerId - Layer id\n * @param {Number} opacityValue - opacity value in [0 1]\n */\n\n\nGlobeViewExtended.prototype.setLayerOpacity = function (layerId, opacityValue) {\n  var layer = this.getColorLayerById(layerId);\n  layer.opacity = opacityValue;\n  this.getGlobeView().notifyChange(layer);\n};\n/**\n * Set layer visibility\n *\n * @param {String} layerId - Layer id\n * @param {Boolean} visible - New visibility of the layer\n */\n\n\nGlobeViewExtended.prototype.setLayerVisibility = function (layerId, visible) {\n  var layer = this.getColorLayerById(layerId);\n  layer.visible = visible;\n  this.getGlobeView().notifyChange(layer);\n};\n/**\n * Move layer to the specified index\n *\n * @param {String} layerId - Layer id\n * @param {Boolean} index - new index of the layer\n */\n\n\nGlobeViewExtended.prototype.moveLayerToIndex = function (layerId, index) {\n  itowns__WEBPACK_IMPORTED_MODULE_1__[\"ColorLayersOrdering\"].moveLayerToIndex(this.getGlobeView(), layerId, index);\n};\n/**\n * Remove event listener from the globe\n *\n * @param {String} type - event type\n * @param {Function} callback - event handler\n */\n\n\nGlobeViewExtended.prototype.removeEventListener = function (type, callback) {\n  switch (type) {\n    case \"mousemove\":\n      this._viewerDiv.removeEventListener(type, callback);\n\n      break;\n\n    case \"centerchanged\":\n      this.getGlobeView().controls.removeEventListener(type, callback);\n      break;\n\n    default:\n      this.getGlobeView().removeEventListener(type, callback);\n      break;\n  }\n};\n/**\n * Defines if the current view extent have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if the view extent info should be fetched by the event PRE_RENDER\n */\n\n\nGlobeViewExtended.prototype.preRenderEventFetchViewExtent = function (b) {\n  if (typeof b === \"undefined\") {\n    b = true;\n  }\n\n  this._fetchExtent = b;\n};\n/**\n * Defines if the list of the color layers displayed have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if the displayed color layers info should be fetched by the event PRE_RENDER\n */\n\n\nGlobeViewExtended.prototype.preRenderEventFetchColorLayersDisplayed = function (b) {\n  if (typeof b === \"undefined\") {\n    b = true;\n  }\n\n  this._fetchVisibleColorLayers = b;\n};\n/**\n * Defines if the list of the elevation layers displayed have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if the displayed elevation layers info should be fetched by the event PRE_RENDER\n */\n\n\nGlobeViewExtended.prototype.preRenderEventFetchElevationLayersDisplayed = function (b) {\n  if (typeof b === \"undefined\") {\n    b = true;\n  }\n\n  this._fetchVisibleElevationLayers = b;\n};\n/**\n * Defines if the list of the layers of all types displayed have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if both displayed color layers and displayed elevation layers infos should be fetched by the event PRE_RENDER\n */\n\n\nGlobeViewExtended.prototype.preRenderEventFetchLayersDisplayed = function (b) {\n  if (typeof b === \"undefined\") {\n    b = true;\n  }\n\n  this._fetchVisibleColorLayers = b;\n  this._fetchVisibleElevationLayers = b;\n};\n/**\n * Get layer by its id\n *\n * @param {String} layerId - Layer id\n * @return {Object} layer Object\n */\n\n\nGlobeViewExtended.prototype.getLayerById = function (layerId) {\n  var layer = this.getGlobeView().getLayers(function (l) {\n    if (l.id === layerId) {\n      return l;\n    }\n  })[0];\n\n  if (!layer) {\n    logger.trace(\"[GlobeViewExtended]  : no Layer found for the id '\" + layerId + \"'\");\n    return;\n  }\n\n  return layer;\n};\n/**\n * Get color layer by its id\n *\n * @param {String} layerId - Color layer id\n * @return {Object} layer Object\n */\n\n\nGlobeViewExtended.prototype.getColorLayerById = function (layerId) {\n  var layer = this.getGlobeView().getLayers(function (l) {\n    if (l.id === layerId && l.isColorLayer) {\n      return l;\n    }\n  })[0];\n\n  if (!layer) {\n    logger.trace(\"[GlobeViewExtended]  : no colorLayer found for the id '\" + layerId + \"'\");\n    return;\n  }\n\n  return layer;\n};\n/**\n * Get imagery layers\n *\n * @return {Array} imagery layers\n */\n\n\nGlobeViewExtended.prototype.getColorLayers = function () {\n  return this.getGlobeView().getLayers(function (layer) {\n    if (layer.isColorLayer) {\n      return layer;\n    }\n  });\n};\n/**\n * Get vector layers\n *\n * @return {Array} vector layers\n */\n\n\nGlobeViewExtended.prototype.getVectorLayers = function () {\n  return this.getGlobeView().getLayers(function (layer) {\n    if (layer.source && layer.source.isFileSource) {\n      return layer;\n    }\n  });\n};\n/**\n * Get elevation layers\n *\n * @return {Array} elevation layers\n */\n\n\nGlobeViewExtended.prototype.getElevationLayers = function () {\n  return this.getGlobeView().getLayers(function (layer) {\n    if (layer.isElevationLayer) {\n      return layer;\n    }\n  });\n};\n/**\n * Get the current view extent\n *\n * @returns {Array} current view extent\n */\n\n\nGlobeViewExtended.prototype.getExtent = function () {\n  return this.getGlobeView().tileLayer.info.displayed.extent;\n};\n/**\n * Add a widget to the globe\n *\n * @param {Object} widget - The Widget object to add\n */\n\n\nGlobeViewExtended.prototype.addWidget = function (widget) {\n  if (!widget.getTarget()) {\n    // default position value is 'absolute' if the target div is the viewer div\n    widget.setTarget(this._viewerDiv, widget.getPosition() ? widget.getPosition() : \"absolute\");\n  }\n\n  widget.setGlobe(this);\n\n  this._widgets.push(widget);\n};\n/**\n * Returns all widgets.\n *\n * @return {Array} widgets - The array of widgets.\n */\n\n\nGlobeViewExtended.prototype.getWidgets = function () {\n  return this._widgets;\n};\n/**\n * Removes a widget.\n *\n * @param {Object} widget - The Widget object to remove\n */\n\n\nGlobeViewExtended.prototype.removeWidget = function (widget) {\n  widget.setGlobe();\n\n  for (var idx = 0; idx < this._widgets.length; idx++) {\n    if (this._widgets[idx] === widget) {\n      this._widgets.splice(idx, 1);\n    }\n  }\n};\n/**\n * Get html target element\n *\n * @return {HTMLElement} Globe container element\n */\n\n\nGlobeViewExtended.prototype.getTargetElement = function () {\n  return this._viewerDiv;\n};\n/**\n * Returns current view scale\n *\n * @return {Number} Scale\n */\n\n\nGlobeViewExtended.prototype.getScale = function () {\n  return this.getGlobeView().getScale();\n};\n/**\n * Sets tilt\n *\n * @param {Number} tilt - Tilt value\n * @return {Promise} - Promise when setTilt is done\n */\n\n\nGlobeViewExtended.prototype.setTilt = function (tilt) {\n  return this.getGlobeView().controls.setTilt(tilt, false);\n};\n/**\n * Returns tilt\n *\n * @return {Number} - Tilt\n */\n\n\nGlobeViewExtended.prototype.getTilt = function () {\n  return this.getGlobeView().controls.getTilt();\n};\n/**\n * Sets azimuth\n *\n * @param {Number} azimuth - Azimuth value\n * @return {Promise} - Promise when setAzimuth is done\n */\n\n\nGlobeViewExtended.prototype.setAzimuth = function (azimuth) {\n  return this.getGlobeView().controls.setHeading(azimuth, false);\n};\n/**\n * Returns azimuth\n *\n * @return {Number} azimuth\n */\n\n\nGlobeViewExtended.prototype.getAzimuth = function () {\n  return this.getGlobeView().controls.getHeading();\n};\n/**\n * Gets the coordinate in lat,lon for a given pixel.\n *\n * @param {Number} x - The pixel x-position inside the Globe element.\n * @param {Number} y - The pixel y-position inside the Globe element.\n * @return {Coordinates} position\n */\n\n\nGlobeViewExtended.prototype.getCoordinateFromPixel = function (x, y) {\n  return this.getGlobeView().controls.pickGeoPosition({\n    x: x,\n    y: y\n  });\n};\n/**\n * Gets the coordinate in lat,lon for a given mouse position.\n *\n * @param {MouseEvent} mouseEvent - A mouse event.\n * @return {Coordinates} position\n */\n\n\nGlobeViewExtended.prototype.getCoordinateFromMouseEvent = function (mouseEvent) {\n  var coords = this.getGlobeView().eventToViewCoords(mouseEvent);\n  return this.getGlobeView().controls.pickGeoPosition(coords);\n};\n/**\n * Get all visible features that intersect a pixel\n *\n * @param {MouseEvent} mouseEvent - A mouse event.\n * @return {Promise} promise\n */\n\n\nGlobeViewExtended.prototype.getFeaturesAtMousePosition = function (mouseEvent) {\n  var vectorLayers = this.getVectorLayers();\n\n  if (!vectorLayers) {\n    return Promise.resolve([]);\n  } // array of the visible features on the clicker coord\n\n\n  var geoCoord = this.getCoordinateFromMouseEvent(mouseEvent);\n\n  if (!geoCoord) {\n    return Promise.resolve([]);\n  } // buffer around the click inside we retrieve the features\n\n\n  var precisionInMeters = this.getGlobeView().getPixelsToMeters(5);\n  var precision = this.getGlobeView().getMetersToDegrees(precisionInMeters);\n  var promises = [];\n\n  for (var i = 0; i < vectorLayers.length; i++) {\n    if (!vectorLayers[i].visible) {\n      continue;\n    }\n\n    promises.push(vectorLayers[i].source.loadData({}, {\n      crs: \"EPSG:4326\"\n    }));\n  }\n\n  return Promise.all(promises).then(function (result) {\n    var visibleFeatures = [];\n\n    for (var _i = 0; _i < result.length; _i++) {\n      visibleFeatures = visibleFeatures.concat(itowns__WEBPACK_IMPORTED_MODULE_1__[\"FeaturesUtils\"].filterFeaturesUnderCoordinate(geoCoord, result[_i], precision));\n    }\n\n    return visibleFeatures;\n  });\n};\n/**\n * Changes the center of the scene on screen to the specified in lat, lon.\n *\n * @param {Object} center - Center object\n * @param {Number} center.longitude - Coordinate longitude WGS84 in degree\n * @param {Number} center.latitude - Coordinate latitude WGS84 in degree\n * @return {Promise} A promise that resolves when the next 'globe initilazed' event fires.\n */\n\n\nGlobeViewExtended.prototype.setCameraTargetGeoPosition = function (center) {\n  var itownsCoord = this._transformCoords(center);\n\n  return this.getGlobeView().controls.lookAtCoordinate(itownsCoord, false);\n};\n/**\n * Retuns the coordinates of the central point on screen in lat,lon and alt\n *\n * @return {Object} center\n */\n\n\nGlobeViewExtended.prototype.getCenter = function () {\n  var cameraCenter = this.getGlobeView().controls.getLookAtCoordinate();\n  return this._fromItownsCoords(cameraCenter);\n};\n/**\n * Returns the actual zoom.\n *\n * @return {Number} zoom\n */\n\n\nGlobeViewExtended.prototype.getZoom = function () {\n  return this.getGlobeView().controls.getZoom();\n};\n/**\n * Sets the current zoom.\n *\n * @param {Number} zoom - The zoom\n * @return {Promise} promise\n */\n\n\nGlobeViewExtended.prototype.setZoom = function (zoom) {\n  return this.getGlobeView().controls.setZoom(zoom, false);\n};\n/**\n * To convert the projection in meters on the globe of a number of pixels of screen\n * @param {Number} pixels - count pixels to project\n * @return {Number} projection in meters on globe\n */\n\n\nGlobeViewExtended.prototype.pixelsToMeters = function (pixels) {\n  return this.getGlobeView().getPixelsToMeters(pixels);\n};\n/**\n * Projection on screen in pixels of length in meter on globe\n * @param {Number} value - Length in meter on globe\n * @return {Number} projection in pixels on screen\n */\n\n\nGlobeViewExtended.prototype.metersToPixels = function (value) {\n  return this.getGlobeView().getMetersToPixels(value);\n};\n/**\n * Returns the \"range\": the distance in meters between the camera and the current central point on the screen.\n * @return {Number} number\n */\n\n\nGlobeViewExtended.prototype.getRange = function () {\n  return this.getGlobeView().controls.getRange();\n};\n/**\n * @return {THREE.Vector3} position\n */\n\n\nGlobeViewExtended.prototype.getCameraTargetPosition = function () {\n  return this.getGlobeView().controls.getCameraTargetPosition();\n};\n/**\n * To get the layer event infos\n *\n * @param {Object} evt - event\n * @returns {Object} object with event properties\n */\n\n\nGlobeViewExtended.prototype.getLayerEventInfos = function (evt) {\n  var propertyName = evt.type.replace(\"-property-changed\", \"\");\n  return {\n    propertyName: propertyName,\n    previousValue: evt.previous[propertyName],\n    newValue: evt[\"new\"][propertyName]\n  };\n};\n/**\n * Sets background (specific to miniglobe)\n */\n\n\nGlobeViewExtended.prototype.setBackground = function () {\n  // Set a 0 alpha clear value (instead of the default '1')\n  // because we want a transparent background for the miniglobe view to be able\n  // to see the main view \"behind\"\n  this.getGlobeView().mainLoop.gfxEngine.renderer.setClearColor(0x000000, 0);\n};\n/**\n * Sets camera position\n * @param {THREE.Vector3} target - Target position\n * @param {Number} distance - Distance from target\n */\n\n\nGlobeViewExtended.prototype.setCameraPosition = function (target, distance) {\n  this.getGlobeView().camera.camera3D.position.copy(target).setLength(distance);\n};\n/**\n * Sets camera orientation to look at specified target\n * @param {THREE.Vector3} target - Target position\n */\n\n\nGlobeViewExtended.prototype.lookAt = function (target) {\n  this.getGlobeView().camera.camera3D.lookAt(target);\n};\n/**\n * Notifies the scene it needs to be updated\n * @param {String} styleUrl - style url\n * @returns {Object} json object\n */\n\n\nGlobeViewExtended.prototype.parseMapboxStyle = function (styleUrl) {\n  return itowns__WEBPACK_IMPORTED_MODULE_1__[\"Fetcher\"].json(styleUrl);\n};\n/**\n * Notifies the scene it needs to be updated\n */\n\n\nGlobeViewExtended.prototype.notifyChange = function () {\n  this.getGlobeView().notifyChange(this.getGlobeView().camera.camera3D);\n};\n/**\n* Resizes itowns\n*\n* @param {Integer} width - canvas width in pixels\n* @param {Integer} height - canvas height in pixels\n*/\n\n\nGlobeViewExtended.prototype.resize = function (width, height) {\n  this.getGlobeView().mainLoop.gfxEngine.onWindowResize(width, height);\n  this.notifyChange();\n};\n/**\n* Transform to itowns coordinates\n*\n* @param {Object} coordCarto - longitude, latitude, altitude\n* @returns {Object} itowns coordinates\n*/\n\n\nGlobeViewExtended.prototype._transformCoords = function (coordCarto) {\n  if (coordCarto === undefined) return;\n  var itownsCoord = {};\n  if (coordCarto.zoom !== undefined) itownsCoord.zoom = coordCarto.zoom;\n  if (coordCarto.tilt !== undefined) itownsCoord.tilt = coordCarto.tilt;\n  if (coordCarto.heading !== undefined) itownsCoord.heading = coordCarto.heading;\n\n  if (coordCarto.longitude !== undefined && coordCarto.latitude !== undefined) {\n    var altitude = coordCarto.altitude || 0;\n    itownsCoord.coord = new itowns__WEBPACK_IMPORTED_MODULE_1__[\"Coordinates\"](\"EPSG:4326\", coordCarto.longitude, coordCarto.latitude, altitude);\n  }\n\n  return itownsCoord;\n};\n/**\n* Transform from itowns coordinates\n*\n* @param {Object} itownsCoord - itowns coordinates\n* @returns {Object} coordinates\n*/\n\n\nGlobeViewExtended.prototype._fromItownsCoords = function (itownsCoord) {\n  return {\n    lon: itownsCoord.x,\n    lat: itownsCoord.y,\n    alt: itownsCoord.z\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobeViewExtended);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/GlobeViewExtended.js\n");

/***/ }),

/***/ "./src/Itowns/Layer/LayerElevation.js":
/*!********************************************!*\
  !*** ./src/Itowns/Layer/LayerElevation.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! geoportal-access-lib */ \"./node_modules/geoportal-access-lib/src/Gp.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/Config */ \"./src/Common/Utils/Config.js\");\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../../package.json */ \"./package.json\", 1);\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! itowns */ \"itowns\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(itowns__WEBPACK_IMPORTED_MODULE_5__);\n/* globals self */\n\n\n\n\n\n\n/* import Extent from \"itowns/Core/Geographic/Extent\";\nimport WMTSSource from \"itowns/Source/WMTSSource\";\nimport ElevationLayer from \"itowns/Layer/ElevationLayer\"; */\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLogger(\"elevationLayer\");\n/**\n * @classdesc\n * Geoportal elevation source creation\n *\n * @constructor\n * @alias itowns.layer.GeoportalElevation\n * @param {Object} options            - options for function call.\n * @param {String} options.layer      - Elevation layer name (e.g. \"ELEVATION.ELEVATIONGRIDCOVERAGE\")\n * @param {Boolean} [options.ssl]     - if set true, enforce protocol https (only for nodejs)\n * @param {String} [options.apiKey]   - Access key to Geoportal platform\n * @param {Object} [options.itownsParams] - options to overload default geoportal layer options for itowns.GlobeView.addLayer function (see {@link http://www.itowns-project.org/itowns/API_Doc/GlobeView.html#addLayer GlobeView.addLayer})\n * @example\n * var geoportalElevation = new itowns.layer.GeoportalElevation({\n *      layer  : \"ELEVATION.ELEVATIONGRIDCOVERAGE\"\n * });\n */\n\nfunction LayerElevation(options) {\n  if (!(this instanceof LayerElevation)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  } // check layer params\n\n\n  if (!options.layer) {\n    throw new Error(\"ERROR PARAM_MISSING : layer\");\n  }\n\n  if (typeof options.layer !== \"string\") {\n    throw new Error(\"ERROR WRONG TYPE : layer\");\n  } // par defaut\n\n\n  if (typeof options.ssl === \"undefined\") {\n    options.ssl = false;\n  } // Check if configuration is loaded\n\n\n  if (!_Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isConfigLoaded()) {\n    throw new Error(\"ERROR : contract key configuration has to be loaded to load Geoportal layers. See http://ignf.github.io/evolution-apigeoportail/ol3/ol3-autoconf.html\");\n  }\n\n  var layerId = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayerId(options.layer, \"WMTS\");\n\n  if (layerId && _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].configuration.getLayerConf(layerId)) {\n    var config = {};\n    var wmtsParams = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayerParams(options.layer, \"WMTS\", options.apiKey);\n\n    if (wmtsParams.projection === \"EPSG:3857\" && wmtsParams.extent) {\n      wmtsParams.extent = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"Extent\"](\"EPSG:4326\", wmtsParams.extent.left, wmtsParams.extent.right, wmtsParams.extent.bottom, wmtsParams.extent.top).as(\"EPSG:3857\");\n    } else {\n      wmtsParams.projection = \"EPSG:4326\";\n      wmtsParams.extent = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"Extent\"](\"EPSG:4326\", wmtsParams.extent.left, wmtsParams.extent.right, wmtsParams.extent.bottom, wmtsParams.extent.top);\n    } // gestion de mixContent dans l'url du service...\n\n\n    var ctx = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : null;\n    var protocol = ctx ? ctx.location && ctx.location.protocol && ctx.location.protocol.indexOf(\"https:\") === 0 ? \"https://\" : \"http://\" : options.ssl ? \"https://\" : \"http://\";\n    config.id = layerId;\n    config.noDataValue = -99999;\n    config.updateStrategy = {\n      type: 0,\n      options: {\n        groups: [11, 14]\n      }\n    };\n    config.source = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"WMTSSource\"]({\n      protocol: \"wmts\",\n      url: wmtsParams.url.replace(/(http|https):\\/\\//, protocol),\n      networkOptions: {\n        crossOrigin: \"omit\"\n      },\n      attribution: wmtsParams.originators,\n      projection: wmtsParams.projection,\n      name: options.layer,\n      format: \"image/x-bil;bits=32\",\n      tileMatrixSet: wmtsParams.TMSLink,\n      tileMatrixSetLimits: wmtsParams.tileMatrixSetLimits,\n      extent: {\n        west: wmtsParams.extent.west,\n        east: wmtsParams.extent.east,\n        south: wmtsParams.extent.south,\n        north: wmtsParams.extent.north\n      }\n    }); // ajout du tag gp-itowns-ext dans les requêtes WMTS elevation\n\n    config.source.url = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Helper.normalyzeUrl(config.source.url, {\n      \"gp-itowns-ext\": _package_json__WEBPACK_IMPORTED_MODULE_4__.itownsExtVersion || _package_json__WEBPACK_IMPORTED_MODULE_4__.version\n    }, false); // récupération des autres paramètres passés par l'utilisateur\n\n    _Common_Utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mergeParams(config, options.itownsParams); // add legends and metadata (to be added to LayerSwitcher control)\n\n    config.legends = wmtsParams.legends;\n    config.metadata = wmtsParams.metadata;\n    config.description = wmtsParams.description;\n    config.title = wmtsParams.title;\n    config.quicklookUrl = wmtsParams.quicklookUrl;\n    return new itowns__WEBPACK_IMPORTED_MODULE_5__[\"ElevationLayer\"](config.id, config);\n  } else {\n    // If layer is not in Gp.Config\n    logger.log(\"[source WMTS] ERROR : \" + options.layer + \" cannot be found in Geoportal Configuration. Make sure that this resource is included in your contract key.\");\n  }\n}\n/*\n * Constructor (alias)\n */\n\n\nLayerElevation.prototype.constructor = LayerElevation;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerElevation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Layer/LayerElevation.js\n");

/***/ }),

/***/ "./src/Itowns/Layer/LayerWMS.js":
/*!**************************************!*\
  !*** ./src/Itowns/Layer/LayerWMS.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! geoportal-access-lib */ \"./node_modules/geoportal-access-lib/src/Gp.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/Config */ \"./src/Common/Utils/Config.js\");\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../../package.json */ \"./package.json\", 1);\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! itowns */ \"itowns\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(itowns__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n/* import Extent from \"itowns/Core/Geographic/Extent\";\nimport WMSSource from \"itowns/Source/WMSSource\";\nimport ColorLayer from \"itowns/Layer/ColorLayer\"; */\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLogger(\"wmsLayer\");\n/**\n * @classdesc\n * Geoportal WMTS source creation\n *\n * @constructor\n * @alias itowns.layer.GeoportalWMS\n * @param {Object} options            - options for function call.\n * @param {String} options.layer      - Layer name (e.g. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n * @param {Boolean} [options.ssl = true] - use of ssl or not (default true, service requested using https protocol)\n * @param {String} [options.apiKey]   - Access key to Geoportal platform\n * @param {Object} [options.itownsParams] - other options for itowns.GlobeView.addLayer function (see {@link http://www.itowns-project.org/itowns/API_Doc/GlobeView.html#addLayer GlobeView.addLayer})\n * @example\n * var geoportalWMS = new itowns.layer.GeoportalWMS({\n *      layer  : \"ORTHOIMAGERY.ORTHOPHOTOS\"\n * });\n */\n\nfunction LayerWMS(options) {\n  if (!(this instanceof LayerWMS)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  } // check layer params\n\n\n  if (!options.layer) {\n    throw new Error(\"ERROR PARAM_MISSING : layer\");\n  }\n\n  if (typeof options.layer !== \"string\") {\n    throw new Error(\"ERROR WRONG TYPE : layer\");\n  } // par defaut\n\n\n  if (typeof options.ssl === \"undefined\") {\n    options.ssl = true;\n  } // Check if configuration is loaded\n\n\n  if (!_Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isConfigLoaded()) {\n    throw new Error(\"ERROR : contract key configuration has to be loaded to load Geoportal layers. See http://ignf.github.io/evolution-apigeoportail/ol3/ol3-autoconf.html\");\n  }\n\n  var layerId = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayerId(options.layer, \"WMS\");\n\n  if (layerId && _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].configuration.getLayerConf(layerId)) {\n    var config = {};\n    var wmsParams = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayerParams(options.layer, \"WMS\", options.apiKey);\n\n    if (wmsParams.projection === \"EPSG:3857\" && wmsParams.extent) {\n      wmsParams.extent = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"Extent\"](\"EPSG:4326\", wmsParams.extent.left, wmsParams.extent.right, wmsParams.extent.bottom, wmsParams.extent.top).as(\"EPSG:3857\");\n    } else {\n      wmsParams.extent = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"Extent\"](\"EPSG:4326\", wmsParams.extent.left, wmsParams.extent.right, wmsParams.extent.bottom, wmsParams.extent.top);\n    } // si ssl = false on fait du http\n    // par défaut, ssl = true, on fait du https\n\n\n    var protocol = options.ssl === false ? \"http://\" : \"https://\";\n    config.id = layerId;\n    config.source = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"WMSSource\"]({\n      protocol: \"wms\",\n      version: wmsParams.version,\n      attribution: wmsParams.originators,\n      url: wmsParams.url.replace(/(http|https):\\/\\//, protocol),\n      name: options.layer,\n      projection: wmsParams.projection,\n      style: \"\",\n      heightMapWidth: 256,\n      waterMask: false,\n      networkOptions: {\n        crossOrigin: \"omit\"\n      },\n      updateStrategy: {\n        type: 0,\n        options: {}\n      },\n      format: wmsParams.format,\n      extent: {\n        west: wmsParams.extent.west,\n        east: wmsParams.extent.east,\n        south: wmsParams.extent.south,\n        north: wmsParams.extent.north\n      }\n    }); // ajout du tag gp-itowns-ext dans les requêtes WMS\n\n    config.source.url = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Helper.normalyzeUrl(config.source.url, {\n      \"gp-itowns-ext\": _package_json__WEBPACK_IMPORTED_MODULE_4__.itownsExtVersion || _package_json__WEBPACK_IMPORTED_MODULE_4__.version\n    }, false); // récupération des autres paramètres passés par l'utilisateur\n\n    _Common_Utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mergeParams(config, options.itownsParams); // add legends and metadata (to be added to LayerSwitcher control)\n\n    config.legends = wmsParams.legends;\n    config.metadata = wmsParams.metadata;\n    config.description = wmsParams.description;\n    config.title = wmsParams.title;\n    config.quicklookUrl = wmsParams.quicklookUrl;\n    return new itowns__WEBPACK_IMPORTED_MODULE_5__[\"ColorLayer\"](config.id, config);\n  } else {\n    // If layer is not in Gp.Config\n    logger.error(\"ERROR layer id (layer name: \" + options.layer + \" / service: WMS ) was not found !?\");\n  }\n}\n/*\n * Constructor (alias)\n */\n\n\nLayerWMS.prototype.constructor = LayerWMS;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerWMS);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Layer/LayerWMS.js\n");

/***/ }),

/***/ "./src/Itowns/Layer/LayerWMTS.js":
/*!***************************************!*\
  !*** ./src/Itowns/Layer/LayerWMTS.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! geoportal-access-lib */ \"./node_modules/geoportal-access-lib/src/Gp.js\");\n/* harmony import */ var _Common_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils */ \"./src/Common/Utils.js\");\n/* harmony import */ var _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/Config */ \"./src/Common/Utils/Config.js\");\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../../package.json */ \"./package.json\", 1);\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! itowns */ \"itowns\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(itowns__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n/* import Extent from \"itowns/Core/Geographic/Extent\";\nimport WMTSSource from \"itowns/Source/WMTSSource\";\nimport ColorLayer from \"itowns/Layer/ColorLayer\"; */\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLogger(\"wmtsLayer\");\n/**\n * @classdesc\n * Geoportal WMTS source creation\n *\n * @constructor\n * @alias itowns.layer.GeoportalWMTS\n * @param {Object} options            - options for function call.\n * @param {String} options.layer      - Layer name (e.g. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n * @param {Boolean} [options.ssl = true] - use of ssl or not (default true, service requested using https protocol)\n * @param {String} [options.apiKey]   - Access key to Geoportal platform\n * @param {Object} [options.itownsParams] - other options for itowns.GlobeView.addLayer function (see {@link http://www.itowns-project.org/itowns/API_Doc/GlobeView.html#addLayer GlobeView.addLayer})\n * @example\n * var geoportalWMTS = new itowns.layer.GeoportalWMTS({\n *      layer  : \"ORTHOIMAGERY.ORTHOPHOTOS\"\n * });\n */\n\nfunction LayerWMTS(options) {\n  if (!(this instanceof LayerWMTS)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  } // check layer params\n\n\n  if (!options.layer) {\n    throw new Error(\"ERROR PARAM_MISSING : layer\");\n  }\n\n  if (typeof options.layer !== \"string\") {\n    throw new Error(\"ERROR WRONG TYPE : layer\");\n  } // par defaut\n\n\n  if (typeof options.ssl === \"undefined\") {\n    options.ssl = true;\n  } // Check if configuration is loaded\n\n\n  if (!_Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isConfigLoaded()) {\n    throw new Error(\"ERROR : contract key configuration has to be loaded to load Geoportal layers. See http://ignf.github.io/evolution-apigeoportail/ol3/ol3-autoconf.html\");\n  }\n\n  var layerId = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayerId(options.layer, \"WMTS\");\n\n  if (layerId && _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].configuration.getLayerConf(layerId)) {\n    var config = {};\n    var wmtsParams = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayerParams(options.layer, \"WMTS\", options.apiKey);\n\n    if (wmtsParams.projection === \"EPSG:3857\" && wmtsParams.extent) {\n      wmtsParams.extent = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"Extent\"](\"EPSG:4326\", wmtsParams.extent.left, wmtsParams.extent.right, wmtsParams.extent.bottom, wmtsParams.extent.top).as(\"EPSG:3857\");\n    } else {\n      wmtsParams.projection = \"EPSG:4326\";\n      wmtsParams.extent = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"Extent\"](\"EPSG:4326\", wmtsParams.extent.left, wmtsParams.extent.right, wmtsParams.extent.bottom, wmtsParams.extent.top);\n    }\n\n    if (Object.entries(wmtsParams.tileMatrixSetLimits).length === 0 && wmtsParams.tileMatrixSetLimits.constructor === Object) {\n      wmtsParams.tileMatrixSetLimits = undefined;\n    } // si ssl = false on fait du http\n    // par défaut, ssl = true, on fait du https\n\n\n    var protocol = options.ssl === false ? \"http://\" : \"https://\";\n    config.id = layerId;\n    config.source = new itowns__WEBPACK_IMPORTED_MODULE_5__[\"WMTSSource\"]({\n      protocol: \"wmts\",\n      url: wmtsParams.url.replace(/(http|https):\\/\\//, protocol),\n      networkOptions: {\n        crossOrigin: \"omit\"\n      },\n      updateStrategy: {\n        type: 0,\n        options: {}\n      },\n      projection: wmtsParams.projection,\n      attribution: wmtsParams.originators,\n      name: options.layer,\n      format: wmtsParams.format,\n      tileMatrixSet: wmtsParams.TMSLink,\n      tileMatrixSetLimits: wmtsParams.tileMatrixSetLimits,\n      extent: {\n        west: wmtsParams.extent.west,\n        east: wmtsParams.extent.east,\n        south: wmtsParams.extent.south,\n        north: wmtsParams.extent.north\n      }\n    }); // ajout du tag gp-itowns-ext dans les requêtes WMTS\n\n    config.source.url = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Helper.normalyzeUrl(config.source.url, {\n      \"gp-itowns-ext\": _package_json__WEBPACK_IMPORTED_MODULE_4__.itownsExtVersion || _package_json__WEBPACK_IMPORTED_MODULE_4__.version\n    }, false); // récupération des autres paramètres passés par l'utilisateur\n\n    _Common_Utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mergeParams(config, options.itownsParams); // add legends and metadata (to be added to LayerSwitcher control)\n\n    config.legends = wmtsParams.legends;\n    config.metadata = wmtsParams.metadata;\n    config.description = wmtsParams.description;\n    config.title = wmtsParams.title;\n    config.quicklookUrl = wmtsParams.quicklookUrl;\n    return new itowns__WEBPACK_IMPORTED_MODULE_5__[\"ColorLayer\"](config.id, config);\n  } else {\n    // If layer is not in Gp.Config\n    logger.error(\"ERROR layer id (layer name: \" + options.layer + \" / service: WMTS ) was not found !?\");\n  }\n}\n/*\n * Constructor (alias)\n */\n\n\nLayerWMTS.prototype.constructor = LayerWMTS;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerWMTS);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/Layer/LayerWMTS.js\n");

/***/ }),

/***/ "./src/Itowns/Layer/VectorTileLayer.js":
/*!*********************************************!*\
  !*** ./src/Itowns/Layer/VectorTileLayer.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/Config */ \"./src/Common/Utils/Config.js\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! itowns */ \"itowns\");\n/* harmony import */ var itowns__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(itowns__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n/* import Extent from \"itowns/Core/Geographic/Extent\";\nimport WMSSource from \"itowns/Source/WMSSource\";\nimport ColorLayer from \"itowns/Layer/ColorLayer\"; */\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"vectorTileLayer\");\n/**\n * @classdesc\n * Geoportal WMTS source creation\n *\n * @constructor\n * @private\n * @alias itowns.layer.VectorTileLayer\n * @param {Object} options - options for function call.\n * @param {String} options.id - id to give to the layer\n * @param {String} options.layer - Layer name (e.g. \"PLAN.IGN\")\n * @param {String} [options.url] - Url to the vector Tile json style\n * @param {String} [options.urlService] - Url to the pbf file. Retrieved in the style file by default.\n * @param {Function} [options.filter] - Filter applied to the vector layer style. Fill/Line layer type by default.\n * @param {Object} [options.attributions] - Attributions of the layer.\n * @param {Object} [options.zoom] - Between which zoom levels the layer is displayed (zoom.min and zoom.max)\n * @example\n * var vectorTileLayer = new itowns.layer.VectorTileLayer({\n *      layer : \"PLAN.IGN\"\n * });\n */\n\nfunction VectorTileLayer(options) {\n  if (!(this instanceof VectorTileLayer)) {\n    throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n  } // check layer params\n\n\n  if (!options.layer) {\n    throw new Error(\"ERROR PARAM_MISSING : layer\");\n  }\n\n  if (typeof options.layer !== \"string\") {\n    throw new Error(\"ERROR WRONG TYPE : layer\");\n  } // Check if configuration is loaded\n\n\n  if (!_Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n    throw new Error(\"ERROR : contract key configuration has to be loaded to load Geoportal layers. See http://ignf.github.io/evolution-apigeoportail/ol3/ol3-autoconf.html\");\n  }\n\n  var layerId = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLayerId(options.layer, \"TMS\");\n\n  if (layerId && _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].configuration.getLayerConf(layerId)) {\n    var config = {};\n    var tmsParams = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLayerParams(options.layer, \"TMS\", options.apiKey); // si ssl = false on fait du http\n    // par défaut, ssl = true, on fait du https\n\n    var protocol = options.ssl === false ? \"http://\" : \"https://\";\n    config.id = layerId;\n    config.source = new itowns__WEBPACK_IMPORTED_MODULE_2__[\"VectorTilesSource\"]({\n      style: tmsParams.url.replace(/(http|https):\\/\\//, protocol),\n      url: options.urlService,\n      attribution: options.attributions,\n      filter: options.filter,\n      zoom: options.zoom\n    }); // FIXME wait for next itowns release to remove this\n\n    config.isValidData = function () {\n      return false;\n    };\n\n    return new itowns__WEBPACK_IMPORTED_MODULE_2__[\"ColorLayer\"](config.id, config);\n  } else {\n    // If layer is not in Gp.Config\n    logger.error(\"ERROR layer id (layer name: \" + options.layer + \" / service: TMS ) was not found !?\");\n  }\n}\n\n;\n/*\n * Constructor (alias)\n */\n\nVectorTileLayer.prototype.constructor = VectorTileLayer;\n/* harmony default export */ __webpack_exports__[\"default\"] = (VectorTileLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvTGF5ZXIvVmVjdG9yVGlsZUxheWVyLmpzPzNlZDgiXSwibmFtZXMiOlsibG9nZ2VyIiwiTG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiVmVjdG9yVGlsZUxheWVyIiwib3B0aW9ucyIsIlR5cGVFcnJvciIsImxheWVyIiwiRXJyb3IiLCJDb25maWciLCJpc0NvbmZpZ0xvYWRlZCIsImxheWVySWQiLCJnZXRMYXllcklkIiwiY29uZmlndXJhdGlvbiIsImdldExheWVyQ29uZiIsImNvbmZpZyIsInRtc1BhcmFtcyIsImdldExheWVyUGFyYW1zIiwiYXBpS2V5IiwicHJvdG9jb2wiLCJzc2wiLCJpZCIsInNvdXJjZSIsIkl0VmVjdG9yVGlsZXNTb3VyY2UiLCJzdHlsZSIsInVybCIsInJlcGxhY2UiLCJ1cmxTZXJ2aWNlIiwiYXR0cmlidXRpb24iLCJhdHRyaWJ1dGlvbnMiLCJmaWx0ZXIiLCJ6b29tIiwiaXNWYWxpZERhdGEiLCJJdENvbG9yTGF5ZXIiLCJlcnJvciIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBOztBQUVBLElBQUlBLE1BQU0sR0FBR0MscUVBQU0sQ0FBQ0MsU0FBUCxDQUFpQixpQkFBakIsQ0FBYjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsZUFBVCxDQUEwQkMsT0FBMUIsRUFBbUM7QUFDL0IsTUFBSSxFQUFFLGdCQUFnQkQsZUFBbEIsQ0FBSixFQUF3QztBQUNwQyxVQUFNLElBQUlFLFNBQUosQ0FBYyx5QkFBZCxDQUFOO0FBQ0gsR0FIOEIsQ0FLL0I7OztBQUNBLE1BQUksQ0FBQ0QsT0FBTyxDQUFDRSxLQUFiLEVBQW9CO0FBQ2hCLFVBQU0sSUFBSUMsS0FBSixDQUFVLDZCQUFWLENBQU47QUFDSDs7QUFDRCxNQUFJLE9BQU9ILE9BQU8sQ0FBQ0UsS0FBZixLQUF5QixRQUE3QixFQUF1QztBQUNuQyxVQUFNLElBQUlDLEtBQUosQ0FBVSwwQkFBVixDQUFOO0FBQ0gsR0FYOEIsQ0FhL0I7OztBQUNBLE1BQUksQ0FBQ0MsNERBQU0sQ0FBQ0MsY0FBUCxFQUFMLEVBQThCO0FBQzFCLFVBQU0sSUFBSUYsS0FBSixDQUFVLHVKQUFWLENBQU47QUFDSDs7QUFFRCxNQUFJRyxPQUFPLEdBQUdGLDREQUFNLENBQUNHLFVBQVAsQ0FBa0JQLE9BQU8sQ0FBQ0UsS0FBMUIsRUFBaUMsS0FBakMsQ0FBZDs7QUFFQSxNQUFJSSxPQUFPLElBQUlGLDREQUFNLENBQUNJLGFBQVAsQ0FBcUJDLFlBQXJCLENBQWtDSCxPQUFsQyxDQUFmLEVBQTJEO0FBQ3ZELFFBQUlJLE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBSUMsU0FBUyxHQUFHUCw0REFBTSxDQUFDUSxjQUFQLENBQXNCWixPQUFPLENBQUNFLEtBQTlCLEVBQXFDLEtBQXJDLEVBQTRDRixPQUFPLENBQUNhLE1BQXBELENBQWhCLENBRnVELENBSXZEO0FBQ0E7O0FBQ0EsUUFBSUMsUUFBUSxHQUFHZCxPQUFPLENBQUNlLEdBQVIsS0FBZ0IsS0FBaEIsR0FBd0IsU0FBeEIsR0FBb0MsVUFBbkQ7QUFFQUwsVUFBTSxDQUFDTSxFQUFQLEdBQVlWLE9BQVo7QUFFQUksVUFBTSxDQUFDTyxNQUFQLEdBQWdCLElBQUlDLHdEQUFKLENBQXdCO0FBQ3BDQyxXQUFLLEVBQUdSLFNBQVMsQ0FBQ1MsR0FBVixDQUFjQyxPQUFkLENBQXNCLG1CQUF0QixFQUEyQ1AsUUFBM0MsQ0FENEI7QUFFcENNLFNBQUcsRUFBR3BCLE9BQU8sQ0FBQ3NCLFVBRnNCO0FBR3BDQyxpQkFBVyxFQUFHdkIsT0FBTyxDQUFDd0IsWUFIYztBQUlwQ0MsWUFBTSxFQUFHekIsT0FBTyxDQUFDeUIsTUFKbUI7QUFLcENDLFVBQUksRUFBRzFCLE9BQU8sQ0FBQzBCO0FBTHFCLEtBQXhCLENBQWhCLENBVnVELENBa0J2RDs7QUFDQWhCLFVBQU0sQ0FBQ2lCLFdBQVAsR0FBcUIsWUFBWTtBQUM3QixhQUFPLEtBQVA7QUFDSCxLQUZEOztBQUlBLFdBQU8sSUFBSUMsaURBQUosQ0FBaUJsQixNQUFNLENBQUNNLEVBQXhCLEVBQTRCTixNQUE1QixDQUFQO0FBQ0gsR0F4QkQsTUF3Qk87QUFDSDtBQUNBZCxVQUFNLENBQUNpQyxLQUFQLENBQWEsaUNBQWlDN0IsT0FBTyxDQUFDRSxLQUF6QyxHQUFpRCxvQ0FBOUQ7QUFDSDtBQUNKOztBQUFBO0FBRUQ7QUFDQTtBQUNBOztBQUNBSCxlQUFlLENBQUMrQixTQUFoQixDQUEwQkMsV0FBMUIsR0FBd0NoQyxlQUF4QztBQUVlQSw4RUFBZiIsImZpbGUiOiIuL3NyYy9JdG93bnMvTGF5ZXIvVmVjdG9yVGlsZUxheWVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuaW1wb3J0IENvbmZpZyBmcm9tIFwiLi4vLi4vQ29tbW9uL1V0aWxzL0NvbmZpZ1wiO1xuXG5pbXBvcnQge1xuICAgIFZlY3RvclRpbGVzU291cmNlIGFzIEl0VmVjdG9yVGlsZXNTb3VyY2UsXG4gICAgQ29sb3JMYXllciBhcyBJdENvbG9yTGF5ZXJcbn0gZnJvbSBcIml0b3duc1wiO1xuLyogaW1wb3J0IEV4dGVudCBmcm9tIFwiaXRvd25zL0NvcmUvR2VvZ3JhcGhpYy9FeHRlbnRcIjtcbmltcG9ydCBXTVNTb3VyY2UgZnJvbSBcIml0b3ducy9Tb3VyY2UvV01TU291cmNlXCI7XG5pbXBvcnQgQ29sb3JMYXllciBmcm9tIFwiaXRvd25zL0xheWVyL0NvbG9yTGF5ZXJcIjsgKi9cblxudmFyIGxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoXCJ2ZWN0b3JUaWxlTGF5ZXJcIik7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogR2VvcG9ydGFsIFdNVFMgc291cmNlIGNyZWF0aW9uXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICogQGFsaWFzIGl0b3ducy5sYXllci5WZWN0b3JUaWxlTGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBmb3IgZnVuY3Rpb24gY2FsbC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmlkIC0gaWQgdG8gZ2l2ZSB0byB0aGUgbGF5ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmxheWVyIC0gTGF5ZXIgbmFtZSAoZS5nLiBcIlBMQU4uSUdOXCIpXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMudXJsXSAtIFVybCB0byB0aGUgdmVjdG9yIFRpbGUganNvbiBzdHlsZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnVybFNlcnZpY2VdIC0gVXJsIHRvIHRoZSBwYmYgZmlsZS4gUmV0cmlldmVkIGluIHRoZSBzdHlsZSBmaWxlIGJ5IGRlZmF1bHQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5maWx0ZXJdIC0gRmlsdGVyIGFwcGxpZWQgdG8gdGhlIHZlY3RvciBsYXllciBzdHlsZS4gRmlsbC9MaW5lIGxheWVyIHR5cGUgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5hdHRyaWJ1dGlvbnNdIC0gQXR0cmlidXRpb25zIG9mIHRoZSBsYXllci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy56b29tXSAtIEJldHdlZW4gd2hpY2ggem9vbSBsZXZlbHMgdGhlIGxheWVyIGlzIGRpc3BsYXllZCAoem9vbS5taW4gYW5kIHpvb20ubWF4KVxuICogQGV4YW1wbGVcbiAqIHZhciB2ZWN0b3JUaWxlTGF5ZXIgPSBuZXcgaXRvd25zLmxheWVyLlZlY3RvclRpbGVMYXllcih7XG4gKiAgICAgIGxheWVyIDogXCJQTEFOLklHTlwiXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gVmVjdG9yVGlsZUxheWVyIChvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFZlY3RvclRpbGVMYXllcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkVSUk9SIENMQVNTX0NPTlNUUlVDVE9SXCIpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGxheWVyIHBhcmFtc1xuICAgIGlmICghb3B0aW9ucy5sYXllcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFUlJPUiBQQVJBTV9NSVNTSU5HIDogbGF5ZXJcIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5sYXllciAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFUlJPUiBXUk9ORyBUWVBFIDogbGF5ZXJcIik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgY29uZmlndXJhdGlvbiBpcyBsb2FkZWRcbiAgICBpZiAoIUNvbmZpZy5pc0NvbmZpZ0xvYWRlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVSUk9SIDogY29udHJhY3Qga2V5IGNvbmZpZ3VyYXRpb24gaGFzIHRvIGJlIGxvYWRlZCB0byBsb2FkIEdlb3BvcnRhbCBsYXllcnMuIFNlZSBodHRwOi8vaWduZi5naXRodWIuaW8vZXZvbHV0aW9uLWFwaWdlb3BvcnRhaWwvb2wzL29sMy1hdXRvY29uZi5odG1sXCIpO1xuICAgIH1cblxuICAgIHZhciBsYXllcklkID0gQ29uZmlnLmdldExheWVySWQob3B0aW9ucy5sYXllciwgXCJUTVNcIik7XG5cbiAgICBpZiAobGF5ZXJJZCAmJiBDb25maWcuY29uZmlndXJhdGlvbi5nZXRMYXllckNvbmYobGF5ZXJJZCkpIHtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuICAgICAgICB2YXIgdG1zUGFyYW1zID0gQ29uZmlnLmdldExheWVyUGFyYW1zKG9wdGlvbnMubGF5ZXIsIFwiVE1TXCIsIG9wdGlvbnMuYXBpS2V5KTtcblxuICAgICAgICAvLyBzaSBzc2wgPSBmYWxzZSBvbiBmYWl0IGR1IGh0dHBcbiAgICAgICAgLy8gcGFyIGTDqWZhdXQsIHNzbCA9IHRydWUsIG9uIGZhaXQgZHUgaHR0cHNcbiAgICAgICAgdmFyIHByb3RvY29sID0gb3B0aW9ucy5zc2wgPT09IGZhbHNlID8gXCJodHRwOi8vXCIgOiBcImh0dHBzOi8vXCI7XG5cbiAgICAgICAgY29uZmlnLmlkID0gbGF5ZXJJZDtcblxuICAgICAgICBjb25maWcuc291cmNlID0gbmV3IEl0VmVjdG9yVGlsZXNTb3VyY2Uoe1xuICAgICAgICAgICAgc3R5bGUgOiB0bXNQYXJhbXMudXJsLnJlcGxhY2UoLyhodHRwfGh0dHBzKTpcXC9cXC8vLCBwcm90b2NvbCksXG4gICAgICAgICAgICB1cmwgOiBvcHRpb25zLnVybFNlcnZpY2UsXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbiA6IG9wdGlvbnMuYXR0cmlidXRpb25zLFxuICAgICAgICAgICAgZmlsdGVyIDogb3B0aW9ucy5maWx0ZXIsXG4gICAgICAgICAgICB6b29tIDogb3B0aW9ucy56b29tXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZJWE1FIHdhaXQgZm9yIG5leHQgaXRvd25zIHJlbGVhc2UgdG8gcmVtb3ZlIHRoaXNcbiAgICAgICAgY29uZmlnLmlzVmFsaWREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXcgSXRDb2xvckxheWVyKGNvbmZpZy5pZCwgY29uZmlnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBsYXllciBpcyBub3QgaW4gR3AuQ29uZmlnXG4gICAgICAgIGxvZ2dlci5lcnJvcihcIkVSUk9SIGxheWVyIGlkIChsYXllciBuYW1lOiBcIiArIG9wdGlvbnMubGF5ZXIgKyBcIiAvIHNlcnZpY2U6IFRNUyApIHdhcyBub3QgZm91bmQgIT9cIik7XG4gICAgfVxufTtcblxuLypcbiAqIENvbnN0cnVjdG9yIChhbGlhcylcbiAqL1xuVmVjdG9yVGlsZUxheWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZlY3RvclRpbGVMYXllcjtcblxuZXhwb3J0IGRlZmF1bHQgVmVjdG9yVGlsZUxheWVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Itowns/Layer/VectorTileLayer.js\n");

/***/ }),

/***/ "./src/Itowns/Styles.js":
/*!******************************!*\
  !*** ./src/Itowns/Styles.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CSS_GPgeneralWidgetItowns_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CSS/GPgeneralWidgetItowns.css */ \"./src/Itowns/CSS/GPgeneralWidgetItowns.css\");\n/* harmony import */ var _CSS_GPgeneralWidgetItowns_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPgeneralWidgetItowns_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CSS_Controls_Attribution_GPattributionItowns_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSS/Controls/Attribution/GPattributionItowns.css */ \"./src/Itowns/CSS/Controls/Attribution/GPattributionItowns.css\");\n/* harmony import */ var _CSS_Controls_Attribution_GPattributionItowns_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_Attribution_GPattributionItowns_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _CSS_Controls_BoostRelief_GPboostReliefItowns_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CSS/Controls/BoostRelief/GPboostReliefItowns.css */ \"./src/Itowns/CSS/Controls/BoostRelief/GPboostReliefItowns.css\");\n/* harmony import */ var _CSS_Controls_BoostRelief_GPboostReliefItowns_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_BoostRelief_GPboostReliefItowns_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _CSS_Controls_LayerSwitcher_GPlayerSwitcherItowns_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CSS/Controls/LayerSwitcher/GPlayerSwitcherItowns.css */ \"./src/Itowns/CSS/Controls/LayerSwitcher/GPlayerSwitcherItowns.css\");\n/* harmony import */ var _CSS_Controls_LayerSwitcher_GPlayerSwitcherItowns_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_LayerSwitcher_GPlayerSwitcherItowns_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _CSS_Controls_MiniGlobe_GPminiGlobeItowns_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CSS/Controls/MiniGlobe/GPminiGlobeItowns.css */ \"./src/Itowns/CSS/Controls/MiniGlobe/GPminiGlobeItowns.css\");\n/* harmony import */ var _CSS_Controls_MiniGlobe_GPminiGlobeItowns_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_MiniGlobe_GPminiGlobeItowns_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _CSS_Controls_MousePosition_GPmousePositionItowns_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CSS/Controls/MousePosition/GPmousePositionItowns.css */ \"./src/Itowns/CSS/Controls/MousePosition/GPmousePositionItowns.css\");\n/* harmony import */ var _CSS_Controls_MousePosition_GPmousePositionItowns_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_MousePosition_GPmousePositionItowns_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _CSS_Controls_Scale_GPscaleItowns_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CSS/Controls/Scale/GPscaleItowns.css */ \"./src/Itowns/CSS/Controls/Scale/GPscaleItowns.css\");\n/* harmony import */ var _CSS_Controls_Scale_GPscaleItowns_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_Scale_GPscaleItowns_css__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC8uL3NyYy9JdG93bnMvU3R5bGVzLmpzP2FjYWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL0l0b3ducy9TdHlsZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL0NTUy9HUGdlbmVyYWxXaWRnZXRJdG93bnMuY3NzXCI7XG5pbXBvcnQgXCIuL0NTUy9Db250cm9scy9BdHRyaWJ1dGlvbi9HUGF0dHJpYnV0aW9uSXRvd25zLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvQ29udHJvbHMvQm9vc3RSZWxpZWYvR1Bib29zdFJlbGllZkl0b3ducy5jc3NcIjtcbmltcG9ydCBcIi4vQ1NTL0NvbnRyb2xzL0xheWVyU3dpdGNoZXIvR1BsYXllclN3aXRjaGVySXRvd25zLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvQ29udHJvbHMvTWluaUdsb2JlL0dQbWluaUdsb2JlSXRvd25zLmNzc1wiO1xuaW1wb3J0IFwiLi9DU1MvQ29udHJvbHMvTW91c2VQb3NpdGlvbi9HUG1vdXNlUG9zaXRpb25JdG93bnMuY3NzXCI7XG5pbXBvcnQgXCIuL0NTUy9Db250cm9scy9TY2FsZS9HUHNjYWxlSXRvd25zLmNzc1wiO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Itowns/Styles.js\n");

/***/ }),

/***/ "./src/Itowns/index.js":
/*!*****************************!*\
  !*** ./src/Itowns/index.js ***!
  \*****************************/
/*! exports provided: Services, Error, Helper, Protocols, servicesDate, servicesVersion, LayerUtils, ProxyUtils, ColorUtils, MathUtils, itownsExtVersion, itownsExtDate, itownsExtended */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Services\", function() { return Services; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Error\", function() { return Error; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Helper\", function() { return Helper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Protocols\", function() { return Protocols; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"servicesDate\", function() { return servicesDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"servicesVersion\", function() { return servicesVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itownsExtVersion\", function() { return itownsExtVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itownsExtDate\", function() { return itownsExtDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itownsExtended\", function() { return Itowns; });\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../package.json */ \"./package.json\", 1);\n/* harmony import */ var _Common_Styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Common/Styles */ \"./src/Common/Styles.js\");\n/* harmony import */ var _Styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Styles */ \"./src/Itowns/Styles.js\");\n/* harmony import */ var _Controls_MousePosition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Controls/MousePosition */ \"./src/Itowns/Controls/MousePosition.js\");\n/* harmony import */ var _Controls_LayerSwitcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Controls/LayerSwitcher */ \"./src/Itowns/Controls/LayerSwitcher.js\");\n/* harmony import */ var _Controls_BoostRelief__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Controls/BoostRelief */ \"./src/Itowns/Controls/BoostRelief.js\");\n/* harmony import */ var _Controls_Attributions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Controls/Attributions */ \"./src/Itowns/Controls/Attributions.js\");\n/* harmony import */ var _Controls_Scale__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Controls/Scale */ \"./src/Itowns/Controls/Scale.js\");\n/* harmony import */ var _Controls_MiniGlobe__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Controls/MiniGlobe */ \"./src/Itowns/Controls/MiniGlobe.js\");\n/* harmony import */ var _Layer_LayerWMTS__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Layer/LayerWMTS */ \"./src/Itowns/Layer/LayerWMTS.js\");\n/* harmony import */ var _Layer_LayerWMS__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Layer/LayerWMS */ \"./src/Itowns/Layer/LayerWMS.js\");\n/* harmony import */ var _Layer_LayerElevation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Layer/LayerElevation */ \"./src/Itowns/Layer/LayerElevation.js\");\n/* harmony import */ var _Layer_VectorTileLayer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Layer/VectorTileLayer */ \"./src/Itowns/Layer/VectorTileLayer.js\");\n/* harmony import */ var _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./GlobeViewExtended */ \"./src/Itowns/GlobeViewExtended.js\");\n/* harmony import */ var _CRS_CRS__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CRS/CRS */ \"./src/Itowns/CRS/CRS.js\");\n/* harmony import */ var _Common_Utils_AutoLoadConfig__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../Common/Utils/AutoLoadConfig */ \"./src/Common/Utils/AutoLoadConfig.js\");\n/* harmony import */ var geoportal_access_lib__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! geoportal-access-lib */ \"./node_modules/geoportal-access-lib/src/Gp.js\");\n/* harmony import */ var _Common_Utils_LayerUtils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../Common/Utils/LayerUtils */ \"./src/Common/Utils/LayerUtils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LayerUtils\", function() { return _Common_Utils_LayerUtils__WEBPACK_IMPORTED_MODULE_17__[\"default\"]; });\n\n/* harmony import */ var _Common_Utils_ProxyUtils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../Common/Utils/ProxyUtils */ \"./src/Common/Utils/ProxyUtils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ProxyUtils\", function() { return _Common_Utils_ProxyUtils__WEBPACK_IMPORTED_MODULE_18__[\"default\"]; });\n\n/* harmony import */ var _Common_Utils_ColorUtils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../Common/Utils/ColorUtils */ \"./src/Common/Utils/ColorUtils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ColorUtils\", function() { return _Common_Utils_ColorUtils__WEBPACK_IMPORTED_MODULE_19__[\"default\"]; });\n\n/* harmony import */ var _Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../Common/Utils/MathUtils */ \"./src/Common/Utils/MathUtils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MathUtils\", function() { return _Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_20__[\"default\"]; });\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n* Global variable Gp.\n*\n* @module Gp\n* @alias Gp\n* @desc\n*\n* This is the global variable that is exposed in the browser environment.\n* Content is composed of constructor, functions and properties...\n*\n* > Config:  (...)\n*\n* > ColorUtils: (...)\n* > LayerUtils: (...)\n* > MathUtils: (...)\n* > ProxyUtils: (...)\n*\n* > itownsExtended: (...)\n*\n* > itownsExtVersion: \"YYYY-MM-DD\"\n* > itownsExtVersion: \"X.X.X\"\n*\n* > Error: (...)\n* > Helper: (...)\n* > Protocols: (...)\n* > Services: (...)\n* > servicesDate: \"YYYY-MM-DD\"\n* > servicesVersion: \"X.X.X\"\n*\n* The following variables are aslo global :\n*   - proj4,\n*   - itowns\n*/\n // CSS communes aux extensions !\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Autoload...\n\n // export des services\n\n // reconstruction des ns\n\nvar Services = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_16__[\"default\"].Services;\nvar Error = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_16__[\"default\"].Error;\nvar Helper = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_16__[\"default\"].Helper;\nvar Protocols = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_16__[\"default\"].Protocols;\nvar servicesDate = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_16__[\"default\"].servicesDate;\nvar servicesVersion = geoportal_access_lib__WEBPACK_IMPORTED_MODULE_16__[\"default\"].servicesVersion;\n // Adds the extensions properties in the namespace\n\n\n\n\n\n\nfunction deepCopy(source, target) {\n  // Implementing Tail Call Elimination\n  function tce(source, target) {\n    for (var prop in source) {\n      if (source.hasOwnProperty(prop)) {\n        if (!target.hasOwnProperty(prop)) {\n          target[prop] = source[prop];\n        } else if (_typeof(source[prop]) === \"object\") {\n          tce(source[prop], target[prop]);\n        }\n      }\n    }\n  }\n\n  return tce(source, target);\n} // Adds extensions properties in the namespace\n\n/** Version */\n\n\nvar itownsExtVersion = _package_json__WEBPACK_IMPORTED_MODULE_0__.itownsExtVersion;\n/** Publication date */\n\nvar itownsExtDate = _package_json__WEBPACK_IMPORTED_MODULE_0__.date; // creation of the namespace for the itowns extensions\n\nvar Itowns = {};\nItowns.control = {};\nItowns.control.MousePosition = _Controls_MousePosition__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\nItowns.control.LayerSwitcher = _Controls_LayerSwitcher__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\nItowns.control.BoostRelief = _Controls_BoostRelief__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\nItowns.control.Attributions = _Controls_Attributions__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\nItowns.control.Scale = _Controls_Scale__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\nItowns.control.MiniGlobe = _Controls_MiniGlobe__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\nItowns.layer = {};\nItowns.layer.GeoportalWMTS = _Layer_LayerWMTS__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\nItowns.layer.GeoportalWMS = _Layer_LayerWMS__WEBPACK_IMPORTED_MODULE_10__[\"default\"];\nItowns.layer.GeoportalElevation = _Layer_LayerElevation__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\nItowns.layer.VectorTileLayer = _Layer_VectorTileLayer__WEBPACK_IMPORTED_MODULE_12__[\"default\"];\nItowns.CRS = _CRS_CRS__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\nItowns.GlobeViewExtended = _GlobeViewExtended__WEBPACK_IMPORTED_MODULE_13__[\"default\"];\n // Expose extensions extended into itowns\n\nif (window.itowns) {\n  // on fusionne les fonctionnalités o\n  deepCopy(Itowns, window.itowns);\n  deepCopy(window.itowns, Itowns);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Itowns/index.js\n");

/***/ }),

/***/ "itowns":
/*!******************************************************************************************!*\
  !*** external {"commonjs2":"itowns","commonjs":"itowns","amd":"itowns","root":"itowns"} ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_itowns__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC9leHRlcm5hbCB7XCJjb21tb25qczJcIjpcIml0b3duc1wiLFwiY29tbW9uanNcIjpcIml0b3duc1wiLFwiYW1kXCI6XCJpdG93bnNcIixcInJvb3RcIjpcIml0b3duc1wifT9lMzU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Iml0b3ducy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9pdG93bnNfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///itowns\n");

/***/ }),

/***/ "request":
/*!*****************************************************************************!*\
  !*** external {"commonjs2":"request","commonjs":"request","amd":"require"} ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_request__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC9leHRlcm5hbCB7XCJjb21tb25qczJcIjpcInJlcXVlc3RcIixcImNvbW1vbmpzXCI6XCJyZXF1ZXN0XCIsXCJhbWRcIjpcInJlcXVpcmVcIn0/ZDhjMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJyZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlcXVlc3RfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///request\n");

/***/ }),

/***/ "xmldom":
/*!***************************************************************************!*\
  !*** external {"commonjs2":"xmldom","commonjs":"xmldom","amd":"require"} ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_xmldom__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HcC9leHRlcm5hbCB7XCJjb21tb25qczJcIjpcInhtbGRvbVwiLFwiY29tbW9uanNcIjpcInhtbGRvbVwiLFwiYW1kXCI6XCJyZXF1aXJlXCJ9P2E2YmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoieG1sZG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3htbGRvbV9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///xmldom\n");

/***/ })

/******/ });
});