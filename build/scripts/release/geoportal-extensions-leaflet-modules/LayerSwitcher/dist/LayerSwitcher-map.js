/*!
 * @brief French Geoportal Extension for Leaflet
 *
 * This software is released under the licence CeCILL-B (Free BSD compatible)
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-fr.txt
 * @see http://www.cecill.info/
 *
 * @copyright copyright (c) IGN 
 * @license CeCILL-B
 * @author IGN
 * @version 2.2.7
 * @date 18/11/2022
 *
 */

LayerSwitcher =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Leaflet/Controls/LayerSwitcher.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/loglevel/lib/loglevel.js\n");

/***/ }),

/***/ "./node_modules/sortablejs/modular/sortable.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/sortablejs/modular/sortable.esm.js ***!
  \*********************************************************/
/*! exports provided: default, MultiDrag, Sortable, Swap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MultiDrag\", function() { return MultiDragPlugin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sortable\", function() { return Sortable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Swap\", function() { return SwapPlugin; });\n/**!\n * Sortable 1.14.0\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar version = \"1.14.0\";\n\nfunction userAgent(pattern) {\n  if (typeof window !== 'undefined' && window.navigator) {\n    return !! /*@__PURE__*/navigator.userAgent.match(pattern);\n  }\n}\n\nvar IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\\.|msie|iemobile|Windows Phone)/i);\nvar Edge = userAgent(/Edge/i);\nvar FireFox = userAgent(/firefox/i);\nvar Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);\nvar IOS = userAgent(/iP(ad|od|hone)/i);\nvar ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);\n\nvar captureMode = {\n  capture: false,\n  passive: false\n};\n\nfunction on(el, event, fn) {\n  el.addEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction off(el, event, fn) {\n  el.removeEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction matches(\n/**HTMLElement*/\nel,\n/**String*/\nselector) {\n  if (!selector) return;\n  selector[0] === '>' && (selector = selector.substring(1));\n\n  if (el) {\n    try {\n      if (el.matches) {\n        return el.matches(selector);\n      } else if (el.msMatchesSelector) {\n        return el.msMatchesSelector(selector);\n      } else if (el.webkitMatchesSelector) {\n        return el.webkitMatchesSelector(selector);\n      }\n    } catch (_) {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nfunction getParentOrHost(el) {\n  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;\n}\n\nfunction closest(\n/**HTMLElement*/\nel,\n/**String*/\nselector,\n/**HTMLElement*/\nctx, includeCTX) {\n  if (el) {\n    ctx = ctx || document;\n\n    do {\n      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {\n        return el;\n      }\n\n      if (el === ctx) break;\n      /* jshint boss:true */\n    } while (el = getParentOrHost(el));\n  }\n\n  return null;\n}\n\nvar R_SPACE = /\\s+/g;\n\nfunction toggleClass(el, name, state) {\n  if (el && name) {\n    if (el.classList) {\n      el.classList[state ? 'add' : 'remove'](name);\n    } else {\n      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n    }\n  }\n}\n\nfunction css(el, prop, val) {\n  var style = el && el.style;\n\n  if (style) {\n    if (val === void 0) {\n      if (document.defaultView && document.defaultView.getComputedStyle) {\n        val = document.defaultView.getComputedStyle(el, '');\n      } else if (el.currentStyle) {\n        val = el.currentStyle;\n      }\n\n      return prop === void 0 ? val : val[prop];\n    } else {\n      if (!(prop in style) && prop.indexOf('webkit') === -1) {\n        prop = '-webkit-' + prop;\n      }\n\n      style[prop] = val + (typeof val === 'string' ? '' : 'px');\n    }\n  }\n}\n\nfunction matrix(el, selfOnly) {\n  var appliedTransforms = '';\n\n  if (typeof el === 'string') {\n    appliedTransforms = el;\n  } else {\n    do {\n      var transform = css(el, 'transform');\n\n      if (transform && transform !== 'none') {\n        appliedTransforms = transform + ' ' + appliedTransforms;\n      }\n      /* jshint boss:true */\n\n    } while (!selfOnly && (el = el.parentNode));\n  }\n\n  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;\n  /*jshint -W056 */\n\n  return matrixFn && new matrixFn(appliedTransforms);\n}\n\nfunction find(ctx, tagName, iterator) {\n  if (ctx) {\n    var list = ctx.getElementsByTagName(tagName),\n        i = 0,\n        n = list.length;\n\n    if (iterator) {\n      for (; i < n; i++) {\n        iterator(list[i], i);\n      }\n    }\n\n    return list;\n  }\n\n  return [];\n}\n\nfunction getWindowScrollingElement() {\n  var scrollingElement = document.scrollingElement;\n\n  if (scrollingElement) {\n    return scrollingElement;\n  } else {\n    return document.documentElement;\n  }\n}\n/**\n * Returns the \"bounding client rect\" of given element\n * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted\n * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container\n * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr\n * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone\n * @param  {[HTMLElement]} container              The parent the element will be placed in\n * @return {Object}                               The boundingClientRect of el, with specified adjustments\n */\n\n\nfunction getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {\n  if (!el.getBoundingClientRect && el !== window) return;\n  var elRect, top, left, bottom, right, height, width;\n\n  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {\n    elRect = el.getBoundingClientRect();\n    top = elRect.top;\n    left = elRect.left;\n    bottom = elRect.bottom;\n    right = elRect.right;\n    height = elRect.height;\n    width = elRect.width;\n  } else {\n    top = 0;\n    left = 0;\n    bottom = window.innerHeight;\n    right = window.innerWidth;\n    height = window.innerHeight;\n    width = window.innerWidth;\n  }\n\n  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {\n    // Adjust for translate()\n    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n    // Not needed on <= IE11\n\n    if (!IE11OrLess) {\n      do {\n        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {\n          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container\n\n          top -= containerRect.top + parseInt(css(container, 'border-top-width'));\n          left -= containerRect.left + parseInt(css(container, 'border-left-width'));\n          bottom = top + elRect.height;\n          right = left + elRect.width;\n          break;\n        }\n        /* jshint boss:true */\n\n      } while (container = container.parentNode);\n    }\n  }\n\n  if (undoScale && el !== window) {\n    // Adjust for scale()\n    var elMatrix = matrix(container || el),\n        scaleX = elMatrix && elMatrix.a,\n        scaleY = elMatrix && elMatrix.d;\n\n    if (elMatrix) {\n      top /= scaleY;\n      left /= scaleX;\n      width /= scaleX;\n      height /= scaleY;\n      bottom = top + height;\n      right = left + width;\n    }\n  }\n\n  return {\n    top: top,\n    left: left,\n    bottom: bottom,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n/**\n * Checks if a side of an element is scrolled past a side of its parents\n * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question\n * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')\n * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')\n * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element\n */\n\n\nfunction isScrolledPast(el, elSide, parentSide) {\n  var parent = getParentAutoScrollElement(el, true),\n      elSideVal = getRect(el)[elSide];\n  /* jshint boss:true */\n\n  while (parent) {\n    var parentSideVal = getRect(parent)[parentSide],\n        visible = void 0;\n\n    if (parentSide === 'top' || parentSide === 'left') {\n      visible = elSideVal >= parentSideVal;\n    } else {\n      visible = elSideVal <= parentSideVal;\n    }\n\n    if (!visible) return parent;\n    if (parent === getWindowScrollingElement()) break;\n    parent = getParentAutoScrollElement(parent, false);\n  }\n\n  return false;\n}\n/**\n * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n * and non-draggable elements\n * @param  {HTMLElement} el       The parent element\n * @param  {Number} childNum      The index of the child\n * @param  {Object} options       Parent Sortable's options\n * @return {HTMLElement}          The child at index childNum, or null if not found\n */\n\n\nfunction getChild(el, childNum, options, includeDragEl) {\n  var currentChild = 0,\n      i = 0,\n      children = el.children;\n\n  while (i < children.length) {\n    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {\n      if (currentChild === childNum) {\n        return children[i];\n      }\n\n      currentChild++;\n    }\n\n    i++;\n  }\n\n  return null;\n}\n/**\n * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n * @param  {HTMLElement} el       Parent element\n * @param  {selector} selector    Any other elements that should be ignored\n * @return {HTMLElement}          The last child, ignoring ghostEl\n */\n\n\nfunction lastChild(el, selector) {\n  var last = el.lastElementChild;\n\n  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {\n    last = last.previousElementSibling;\n  }\n\n  return last || null;\n}\n/**\n * Returns the index of an element within its parent for a selected set of\n * elements\n * @param  {HTMLElement} el\n * @param  {selector} selector\n * @return {number}\n */\n\n\nfunction index(el, selector) {\n  var index = 0;\n\n  if (!el || !el.parentNode) {\n    return -1;\n  }\n  /* jshint boss:true */\n\n\n  while (el = el.previousElementSibling) {\n    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {\n      index++;\n    }\n  }\n\n  return index;\n}\n/**\n * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n * The value is returned in real pixels.\n * @param  {HTMLElement} el\n * @return {Array}             Offsets in the format of [left, top]\n */\n\n\nfunction getRelativeScrollOffset(el) {\n  var offsetLeft = 0,\n      offsetTop = 0,\n      winScroller = getWindowScrollingElement();\n\n  if (el) {\n    do {\n      var elMatrix = matrix(el),\n          scaleX = elMatrix.a,\n          scaleY = elMatrix.d;\n      offsetLeft += el.scrollLeft * scaleX;\n      offsetTop += el.scrollTop * scaleY;\n    } while (el !== winScroller && (el = el.parentNode));\n  }\n\n  return [offsetLeft, offsetTop];\n}\n/**\n * Returns the index of the object within the given array\n * @param  {Array} arr   Array that may or may not hold the object\n * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find\n * @return {Number}      The index of the object in the array, or -1\n */\n\n\nfunction indexOfObject(arr, obj) {\n  for (var i in arr) {\n    if (!arr.hasOwnProperty(i)) continue;\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);\n    }\n  }\n\n  return -1;\n}\n\nfunction getParentAutoScrollElement(el, includeSelf) {\n  // skip to window\n  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();\n  var elem = el;\n  var gotSelf = false;\n\n  do {\n    // we don't need to get elem css if it isn't even overflowing in the first place (performance)\n    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n      var elemCSS = css(elem);\n\n      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {\n        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();\n        if (gotSelf || includeSelf) return elem;\n        gotSelf = true;\n      }\n    }\n    /* jshint boss:true */\n\n  } while (elem = elem.parentNode);\n\n  return getWindowScrollingElement();\n}\n\nfunction extend(dst, src) {\n  if (dst && src) {\n    for (var key in src) {\n      if (src.hasOwnProperty(key)) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst;\n}\n\nfunction isRectEqual(rect1, rect2) {\n  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);\n}\n\nvar _throttleTimeout;\n\nfunction throttle(callback, ms) {\n  return function () {\n    if (!_throttleTimeout) {\n      var args = arguments,\n          _this = this;\n\n      if (args.length === 1) {\n        callback.call(_this, args[0]);\n      } else {\n        callback.apply(_this, args);\n      }\n\n      _throttleTimeout = setTimeout(function () {\n        _throttleTimeout = void 0;\n      }, ms);\n    }\n  };\n}\n\nfunction cancelThrottle() {\n  clearTimeout(_throttleTimeout);\n  _throttleTimeout = void 0;\n}\n\nfunction scrollBy(el, x, y) {\n  el.scrollLeft += x;\n  el.scrollTop += y;\n}\n\nfunction clone(el) {\n  var Polymer = window.Polymer;\n  var $ = window.jQuery || window.Zepto;\n\n  if (Polymer && Polymer.dom) {\n    return Polymer.dom(el).cloneNode(true);\n  } else if ($) {\n    return $(el).clone(true)[0];\n  } else {\n    return el.cloneNode(true);\n  }\n}\n\nfunction setRect(el, rect) {\n  css(el, 'position', 'absolute');\n  css(el, 'top', rect.top);\n  css(el, 'left', rect.left);\n  css(el, 'width', rect.width);\n  css(el, 'height', rect.height);\n}\n\nfunction unsetRect(el) {\n  css(el, 'position', '');\n  css(el, 'top', '');\n  css(el, 'left', '');\n  css(el, 'width', '');\n  css(el, 'height', '');\n}\n\nvar expando = 'Sortable' + new Date().getTime();\n\nfunction AnimationStateManager() {\n  var animationStates = [],\n      animationCallbackId;\n  return {\n    captureAnimationState: function captureAnimationState() {\n      animationStates = [];\n      if (!this.options.animation) return;\n      var children = [].slice.call(this.el.children);\n      children.forEach(function (child) {\n        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;\n        animationStates.push({\n          target: child,\n          rect: getRect(child)\n        });\n\n        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation\n\n\n        if (child.thisAnimationDuration) {\n          var childMatrix = matrix(child, true);\n\n          if (childMatrix) {\n            fromRect.top -= childMatrix.f;\n            fromRect.left -= childMatrix.e;\n          }\n        }\n\n        child.fromRect = fromRect;\n      });\n    },\n    addAnimationState: function addAnimationState(state) {\n      animationStates.push(state);\n    },\n    removeAnimationState: function removeAnimationState(target) {\n      animationStates.splice(indexOfObject(animationStates, {\n        target: target\n      }), 1);\n    },\n    animateAll: function animateAll(callback) {\n      var _this = this;\n\n      if (!this.options.animation) {\n        clearTimeout(animationCallbackId);\n        if (typeof callback === 'function') callback();\n        return;\n      }\n\n      var animating = false,\n          animationTime = 0;\n      animationStates.forEach(function (state) {\n        var time = 0,\n            target = state.target,\n            fromRect = target.fromRect,\n            toRect = getRect(target),\n            prevFromRect = target.prevFromRect,\n            prevToRect = target.prevToRect,\n            animatingRect = state.rect,\n            targetMatrix = matrix(target, true);\n\n        if (targetMatrix) {\n          // Compensate for current animation\n          toRect.top -= targetMatrix.f;\n          toRect.left -= targetMatrix.e;\n        }\n\n        target.toRect = toRect;\n\n        if (target.thisAnimationDuration) {\n          // Could also check if animatingRect is between fromRect and toRect\n          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect\n          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {\n            // If returning to same place as started from animation and on same axis\n            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);\n          }\n        } // if fromRect != toRect: animate\n\n\n        if (!isRectEqual(toRect, fromRect)) {\n          target.prevFromRect = fromRect;\n          target.prevToRect = toRect;\n\n          if (!time) {\n            time = _this.options.animation;\n          }\n\n          _this.animate(target, animatingRect, toRect, time);\n        }\n\n        if (time) {\n          animating = true;\n          animationTime = Math.max(animationTime, time);\n          clearTimeout(target.animationResetTimer);\n          target.animationResetTimer = setTimeout(function () {\n            target.animationTime = 0;\n            target.prevFromRect = null;\n            target.fromRect = null;\n            target.prevToRect = null;\n            target.thisAnimationDuration = null;\n          }, time);\n          target.thisAnimationDuration = time;\n        }\n      });\n      clearTimeout(animationCallbackId);\n\n      if (!animating) {\n        if (typeof callback === 'function') callback();\n      } else {\n        animationCallbackId = setTimeout(function () {\n          if (typeof callback === 'function') callback();\n        }, animationTime);\n      }\n\n      animationStates = [];\n    },\n    animate: function animate(target, currentRect, toRect, duration) {\n      if (duration) {\n        css(target, 'transition', '');\n        css(target, 'transform', '');\n        var elMatrix = matrix(this.el),\n            scaleX = elMatrix && elMatrix.a,\n            scaleY = elMatrix && elMatrix.d,\n            translateX = (currentRect.left - toRect.left) / (scaleX || 1),\n            translateY = (currentRect.top - toRect.top) / (scaleY || 1);\n        target.animatingX = !!translateX;\n        target.animatingY = !!translateY;\n        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');\n        this.forRepaintDummy = repaint(target); // repaint\n\n        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n        css(target, 'transform', 'translate3d(0,0,0)');\n        typeof target.animated === 'number' && clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          css(target, 'transition', '');\n          css(target, 'transform', '');\n          target.animated = false;\n          target.animatingX = false;\n          target.animatingY = false;\n        }, duration);\n      }\n    }\n  };\n}\n\nfunction repaint(target) {\n  return target.offsetWidth;\n}\n\nfunction calculateRealTime(animatingRect, fromRect, toRect, options) {\n  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;\n}\n\nvar plugins = [];\nvar defaults = {\n  initializeByDefault: true\n};\nvar PluginManager = {\n  mount: function mount(plugin) {\n    // Set default static properties\n    for (var option in defaults) {\n      if (defaults.hasOwnProperty(option) && !(option in plugin)) {\n        plugin[option] = defaults[option];\n      }\n    }\n\n    plugins.forEach(function (p) {\n      if (p.pluginName === plugin.pluginName) {\n        throw \"Sortable: Cannot mount plugin \".concat(plugin.pluginName, \" more than once\");\n      }\n    });\n    plugins.push(plugin);\n  },\n  pluginEvent: function pluginEvent(eventName, sortable, evt) {\n    var _this = this;\n\n    this.eventCanceled = false;\n\n    evt.cancel = function () {\n      _this.eventCanceled = true;\n    };\n\n    var eventNameGlobal = eventName + 'Global';\n    plugins.forEach(function (plugin) {\n      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable\n\n      if (sortable[plugin.pluginName][eventNameGlobal]) {\n        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      } // Only fire plugin event if plugin is enabled in this sortable,\n      // and plugin has event defined\n\n\n      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {\n        sortable[plugin.pluginName][eventName](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      }\n    });\n  },\n  initializePlugins: function initializePlugins(sortable, el, defaults, options) {\n    plugins.forEach(function (plugin) {\n      var pluginName = plugin.pluginName;\n      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;\n      var initialized = new plugin(sortable, el, sortable.options);\n      initialized.sortable = sortable;\n      initialized.options = sortable.options;\n      sortable[pluginName] = initialized; // Add default options from plugin\n\n      _extends(defaults, initialized.defaults);\n    });\n\n    for (var option in sortable.options) {\n      if (!sortable.options.hasOwnProperty(option)) continue;\n      var modified = this.modifyOption(sortable, option, sortable.options[option]);\n\n      if (typeof modified !== 'undefined') {\n        sortable.options[option] = modified;\n      }\n    }\n  },\n  getEventProperties: function getEventProperties(name, sortable) {\n    var eventProperties = {};\n    plugins.forEach(function (plugin) {\n      if (typeof plugin.eventProperties !== 'function') return;\n\n      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));\n    });\n    return eventProperties;\n  },\n  modifyOption: function modifyOption(sortable, name, value) {\n    var modifiedValue;\n    plugins.forEach(function (plugin) {\n      // Plugin must exist on the Sortable\n      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin\n\n      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {\n        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);\n      }\n    });\n    return modifiedValue;\n  }\n};\n\nfunction dispatchEvent(_ref) {\n  var sortable = _ref.sortable,\n      rootEl = _ref.rootEl,\n      name = _ref.name,\n      targetEl = _ref.targetEl,\n      cloneEl = _ref.cloneEl,\n      toEl = _ref.toEl,\n      fromEl = _ref.fromEl,\n      oldIndex = _ref.oldIndex,\n      newIndex = _ref.newIndex,\n      oldDraggableIndex = _ref.oldDraggableIndex,\n      newDraggableIndex = _ref.newDraggableIndex,\n      originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      extraEventProperties = _ref.extraEventProperties;\n  sortable = sortable || rootEl && rootEl[expando];\n  if (!sortable) return;\n  var evt,\n      options = sortable.options,\n      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent(name, true, true);\n  }\n\n  evt.to = toEl || rootEl;\n  evt.from = fromEl || rootEl;\n  evt.item = targetEl || rootEl;\n  evt.clone = cloneEl;\n  evt.oldIndex = oldIndex;\n  evt.newIndex = newIndex;\n  evt.oldDraggableIndex = oldDraggableIndex;\n  evt.newDraggableIndex = newDraggableIndex;\n  evt.originalEvent = originalEvent;\n  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));\n\n  for (var option in allEventProperties) {\n    evt[option] = allEventProperties[option];\n  }\n\n  if (rootEl) {\n    rootEl.dispatchEvent(evt);\n  }\n\n  if (options[onName]) {\n    options[onName].call(sortable, evt);\n  }\n}\n\nvar _excluded = [\"evt\"];\n\nvar pluginEvent = function pluginEvent(eventName, sortable) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      originalEvent = _ref.evt,\n      data = _objectWithoutProperties(_ref, _excluded);\n\n  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({\n    dragEl: dragEl,\n    parentEl: parentEl,\n    ghostEl: ghostEl,\n    rootEl: rootEl,\n    nextEl: nextEl,\n    lastDownEl: lastDownEl,\n    cloneEl: cloneEl,\n    cloneHidden: cloneHidden,\n    dragStarted: moved,\n    putSortable: putSortable,\n    activeSortable: Sortable.active,\n    originalEvent: originalEvent,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex,\n    hideGhostForTarget: _hideGhostForTarget,\n    unhideGhostForTarget: _unhideGhostForTarget,\n    cloneNowHidden: function cloneNowHidden() {\n      cloneHidden = true;\n    },\n    cloneNowShown: function cloneNowShown() {\n      cloneHidden = false;\n    },\n    dispatchSortableEvent: function dispatchSortableEvent(name) {\n      _dispatchEvent({\n        sortable: sortable,\n        name: name,\n        originalEvent: originalEvent\n      });\n    }\n  }, data));\n};\n\nfunction _dispatchEvent(info) {\n  dispatchEvent(_objectSpread2({\n    putSortable: putSortable,\n    cloneEl: cloneEl,\n    targetEl: dragEl,\n    rootEl: rootEl,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex\n  }, info));\n}\n\nvar dragEl,\n    parentEl,\n    ghostEl,\n    rootEl,\n    nextEl,\n    lastDownEl,\n    cloneEl,\n    cloneHidden,\n    oldIndex,\n    newIndex,\n    oldDraggableIndex,\n    newDraggableIndex,\n    activeGroup,\n    putSortable,\n    awaitingDragStarted = false,\n    ignoreNextClick = false,\n    sortables = [],\n    tapEvt,\n    touchEvt,\n    lastDx,\n    lastDy,\n    tapDistanceLeft,\n    tapDistanceTop,\n    moved,\n    lastTarget,\n    lastDirection,\n    pastFirstInvertThresh = false,\n    isCircumstantialInvert = false,\n    targetMoveDistance,\n    // For positioning ghost absolutely\nghostRelativeParent,\n    ghostRelativeParentInitialScroll = [],\n    // (left, top)\n_silent = false,\n    savedInputChecked = [];\n/** @const */\n\nvar documentExists = typeof document !== 'undefined',\n    PositionGhostAbsolutely = IOS,\n    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n    // This will not pass for IE9, because IE9 DnD only works on anchors\nsupportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),\n    supportCssPointerEvents = function () {\n  if (!documentExists) return; // false when <= IE11\n\n  if (IE11OrLess) {\n    return false;\n  }\n\n  var el = document.createElement('x');\n  el.style.cssText = 'pointer-events:auto';\n  return el.style.pointerEvents === 'auto';\n}(),\n    _detectDirection = function _detectDirection(el, options) {\n  var elCSS = css(el),\n      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),\n      child1 = getChild(el, 0, options),\n      child2 = getChild(el, 1, options),\n      firstChildCSS = child1 && css(child1),\n      secondChildCSS = child2 && css(child2),\n      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,\n      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;\n\n  if (elCSS.display === 'flex') {\n    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';\n  }\n\n  if (elCSS.display === 'grid') {\n    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';\n  }\n\n  if (child1 && firstChildCSS[\"float\"] && firstChildCSS[\"float\"] !== 'none') {\n    var touchingSideChild2 = firstChildCSS[\"float\"] === 'left' ? 'left' : 'right';\n    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';\n  }\n\n  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';\n},\n    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {\n  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,\n      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,\n      dragElOppLength = vertical ? dragRect.width : dragRect.height,\n      targetS1Opp = vertical ? targetRect.left : targetRect.top,\n      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,\n      targetOppLength = vertical ? targetRect.width : targetRect.height;\n  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;\n},\n\n/**\n * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n * @param  {Number} x      X position\n * @param  {Number} y      Y position\n * @return {HTMLElement}   Element of the first found nearest Sortable\n */\n_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {\n  var ret;\n  sortables.some(function (sortable) {\n    var threshold = sortable[expando].options.emptyInsertThreshold;\n    if (!threshold || lastChild(sortable)) return;\n    var rect = getRect(sortable),\n        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,\n        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;\n\n    if (insideHorizontally && insideVertically) {\n      return ret = sortable;\n    }\n  });\n  return ret;\n},\n    _prepareGroup = function _prepareGroup(options) {\n  function toFn(value, pull) {\n    return function (to, from, dragEl, evt) {\n      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;\n\n      if (value == null && (pull || sameGroup)) {\n        // Default pull value\n        // Default pull and put value if same group\n        return true;\n      } else if (value == null || value === false) {\n        return false;\n      } else if (pull && value === 'clone') {\n        return value;\n      } else if (typeof value === 'function') {\n        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n      } else {\n        var otherGroup = (pull ? to : from).options.group.name;\n        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;\n      }\n    };\n  }\n\n  var group = {};\n  var originalGroup = options.group;\n\n  if (!originalGroup || _typeof(originalGroup) != 'object') {\n    originalGroup = {\n      name: originalGroup\n    };\n  }\n\n  group.name = originalGroup.name;\n  group.checkPull = toFn(originalGroup.pull, true);\n  group.checkPut = toFn(originalGroup.put);\n  group.revertClone = originalGroup.revertClone;\n  options.group = group;\n},\n    _hideGhostForTarget = function _hideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', 'none');\n  }\n},\n    _unhideGhostForTarget = function _unhideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', '');\n  }\n}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\n\nif (documentExists) {\n  document.addEventListener('click', function (evt) {\n    if (ignoreNextClick) {\n      evt.preventDefault();\n      evt.stopPropagation && evt.stopPropagation();\n      evt.stopImmediatePropagation && evt.stopImmediatePropagation();\n      ignoreNextClick = false;\n      return false;\n    }\n  }, true);\n}\n\nvar nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {\n  if (dragEl) {\n    evt = evt.touches ? evt.touches[0] : evt;\n\n    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n    if (nearest) {\n      // Create imitation event\n      var event = {};\n\n      for (var i in evt) {\n        if (evt.hasOwnProperty(i)) {\n          event[i] = evt[i];\n        }\n      }\n\n      event.target = event.rootEl = nearest;\n      event.preventDefault = void 0;\n      event.stopPropagation = void 0;\n\n      nearest[expando]._onDragOver(event);\n    }\n  }\n};\n\nvar _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {\n  if (dragEl) {\n    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n  }\n};\n/**\n * @class  Sortable\n * @param  {HTMLElement}  el\n * @param  {Object}       [options]\n */\n\n\nfunction Sortable(el, options) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    throw \"Sortable: `el` must be an HTMLElement, not \".concat({}.toString.call(el));\n  }\n\n  this.el = el; // root element\n\n  this.options = options = _extends({}, options); // Export instance\n\n  el[expando] = this;\n  var defaults = {\n    group: null,\n    sort: true,\n    disabled: false,\n    store: null,\n    handle: null,\n    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',\n    swapThreshold: 1,\n    // percentage; 0 <= x <= 1\n    invertSwap: false,\n    // invert always\n    invertedSwapThreshold: null,\n    // will be set to same as swapThreshold if default\n    removeCloneOnHide: true,\n    direction: function direction() {\n      return _detectDirection(el, this.options);\n    },\n    ghostClass: 'sortable-ghost',\n    chosenClass: 'sortable-chosen',\n    dragClass: 'sortable-drag',\n    ignore: 'a, img',\n    filter: null,\n    preventOnFilter: true,\n    animation: 0,\n    easing: null,\n    setData: function setData(dataTransfer, dragEl) {\n      dataTransfer.setData('Text', dragEl.textContent);\n    },\n    dropBubble: false,\n    dragoverBubble: false,\n    dataIdAttr: 'data-id',\n    delay: 0,\n    delayOnTouchOnly: false,\n    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,\n    forceFallback: false,\n    fallbackClass: 'sortable-fallback',\n    fallbackOnBody: false,\n    fallbackTolerance: 0,\n    fallbackOffset: {\n      x: 0,\n      y: 0\n    },\n    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,\n    emptyInsertThreshold: 5\n  };\n  PluginManager.initializePlugins(this, el, defaults); // Set default options\n\n  for (var name in defaults) {\n    !(name in options) && (options[name] = defaults[name]);\n  }\n\n  _prepareGroup(options); // Bind all private methods\n\n\n  for (var fn in this) {\n    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n      this[fn] = this[fn].bind(this);\n    }\n  } // Setup drag mode\n\n\n  this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n  if (this.nativeDraggable) {\n    // Touch start threshold cannot be greater than the native dragstart threshold\n    this.options.touchStartThreshold = 1;\n  } // Bind events\n\n\n  if (options.supportPointer) {\n    on(el, 'pointerdown', this._onTapStart);\n  } else {\n    on(el, 'mousedown', this._onTapStart);\n    on(el, 'touchstart', this._onTapStart);\n  }\n\n  if (this.nativeDraggable) {\n    on(el, 'dragover', this);\n    on(el, 'dragenter', this);\n  }\n\n  sortables.push(this.el); // Restore sorting\n\n  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager\n\n  _extends(this, AnimationStateManager());\n}\n\nSortable.prototype =\n/** @lends Sortable.prototype */\n{\n  constructor: Sortable,\n  _isOutsideThisEl: function _isOutsideThisEl(target) {\n    if (!this.el.contains(target) && target !== this.el) {\n      lastTarget = null;\n    }\n  },\n  _getDirection: function _getDirection(evt, target) {\n    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n  },\n  _onTapStart: function _onTapStart(\n  /** Event|TouchEvent */\n  evt) {\n    if (!evt.cancelable) return;\n\n    var _this = this,\n        el = this.el,\n        options = this.options,\n        preventOnFilter = options.preventOnFilter,\n        type = evt.type,\n        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,\n        target = (touch || evt).target,\n        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,\n        filter = options.filter;\n\n    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\n\n    if (dragEl) {\n      return;\n    }\n\n    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n      return; // only left button and enabled\n    } // cancel dnd if original target is content editable\n\n\n    if (originalTarget.isContentEditable) {\n      return;\n    } // Safari ignores further event handling after mousedown\n\n\n    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {\n      return;\n    }\n\n    target = closest(target, options.draggable, el, false);\n\n    if (target && target.animated) {\n      return;\n    }\n\n    if (lastDownEl === target) {\n      // Ignoring duplicate `down`\n      return;\n    } // Get the index of the dragged element within its parent\n\n\n    oldIndex = index(target);\n    oldDraggableIndex = index(target, options.draggable); // Check filter\n\n    if (typeof filter === 'function') {\n      if (filter.call(this, evt, target, this)) {\n        _dispatchEvent({\n          sortable: _this,\n          rootEl: originalTarget,\n          name: 'filter',\n          targetEl: target,\n          toEl: el,\n          fromEl: el\n        });\n\n        pluginEvent('filter', _this, {\n          evt: evt\n        });\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    } else if (filter) {\n      filter = filter.split(',').some(function (criteria) {\n        criteria = closest(originalTarget, criteria.trim(), el, false);\n\n        if (criteria) {\n          _dispatchEvent({\n            sortable: _this,\n            rootEl: criteria,\n            name: 'filter',\n            targetEl: target,\n            fromEl: el,\n            toEl: el\n          });\n\n          pluginEvent('filter', _this, {\n            evt: evt\n          });\n          return true;\n        }\n      });\n\n      if (filter) {\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    }\n\n    if (options.handle && !closest(originalTarget, options.handle, el, false)) {\n      return;\n    } // Prepare `dragstart`\n\n\n    this._prepareDragStart(evt, touch, target);\n  },\n  _prepareDragStart: function _prepareDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch,\n  /** HTMLElement */\n  target) {\n    var _this = this,\n        el = _this.el,\n        options = _this.options,\n        ownerDocument = el.ownerDocument,\n        dragStartFn;\n\n    if (target && !dragEl && target.parentNode === el) {\n      var dragRect = getRect(target);\n      rootEl = el;\n      dragEl = target;\n      parentEl = dragEl.parentNode;\n      nextEl = dragEl.nextSibling;\n      lastDownEl = target;\n      activeGroup = options.group;\n      Sortable.dragged = dragEl;\n      tapEvt = {\n        target: dragEl,\n        clientX: (touch || evt).clientX,\n        clientY: (touch || evt).clientY\n      };\n      tapDistanceLeft = tapEvt.clientX - dragRect.left;\n      tapDistanceTop = tapEvt.clientY - dragRect.top;\n      this._lastX = (touch || evt).clientX;\n      this._lastY = (touch || evt).clientY;\n      dragEl.style['will-change'] = 'all';\n\n      dragStartFn = function dragStartFn() {\n        pluginEvent('delayEnded', _this, {\n          evt: evt\n        });\n\n        if (Sortable.eventCanceled) {\n          _this._onDrop();\n\n          return;\n        } // Delayed drag has been triggered\n        // we can re-enable the events: touchmove/mousemove\n\n\n        _this._disableDelayedDragEvents();\n\n        if (!FireFox && _this.nativeDraggable) {\n          dragEl.draggable = true;\n        } // Bind the events: dragstart/dragend\n\n\n        _this._triggerDragStart(evt, touch); // Drag start event\n\n\n        _dispatchEvent({\n          sortable: _this,\n          name: 'choose',\n          originalEvent: evt\n        }); // Chosen item\n\n\n        toggleClass(dragEl, options.chosenClass, true);\n      }; // Disable \"draggable\"\n\n\n      options.ignore.split(',').forEach(function (criteria) {\n        find(dragEl, criteria.trim(), _disableDraggable);\n      });\n      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mouseup', _this._onDrop);\n      on(ownerDocument, 'touchend', _this._onDrop);\n      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)\n\n      if (FireFox && this.nativeDraggable) {\n        this.options.touchStartThreshold = 4;\n        dragEl.draggable = true;\n      }\n\n      pluginEvent('delayStart', this, {\n        evt: evt\n      }); // Delay is impossible for native DnD in Edge or IE\n\n      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\n        if (Sortable.eventCanceled) {\n          this._onDrop();\n\n          return;\n        } // If the user moves the pointer or let go the click or touch\n        // before the delay has been reached:\n        // disable the delayed drag\n\n\n        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n      } else {\n        dragStartFn();\n      }\n    }\n  },\n  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(\n  /** TouchEvent|PointerEvent **/\n  e) {\n    var touch = e.touches ? e.touches[0] : e;\n\n    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {\n      this._disableDelayedDrag();\n    }\n  },\n  _disableDelayedDrag: function _disableDelayedDrag() {\n    dragEl && _disableDraggable(dragEl);\n    clearTimeout(this._dragStartTimer);\n\n    this._disableDelayedDragEvents();\n  },\n  _disableDelayedDragEvents: function _disableDelayedDragEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n    off(ownerDocument, 'touchend', this._disableDelayedDrag);\n    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n  },\n  _triggerDragStart: function _triggerDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch) {\n    touch = touch || evt.pointerType == 'touch' && evt;\n\n    if (!this.nativeDraggable || touch) {\n      if (this.options.supportPointer) {\n        on(document, 'pointermove', this._onTouchMove);\n      } else if (touch) {\n        on(document, 'touchmove', this._onTouchMove);\n      } else {\n        on(document, 'mousemove', this._onTouchMove);\n      }\n    } else {\n      on(dragEl, 'dragend', this);\n      on(rootEl, 'dragstart', this._onDragStart);\n    }\n\n    try {\n      if (document.selection) {\n        // Timeout neccessary for IE9\n        _nextTick(function () {\n          document.selection.empty();\n        });\n      } else {\n        window.getSelection().removeAllRanges();\n      }\n    } catch (err) {}\n  },\n  _dragStarted: function _dragStarted(fallback, evt) {\n\n    awaitingDragStarted = false;\n\n    if (rootEl && dragEl) {\n      pluginEvent('dragStarted', this, {\n        evt: evt\n      });\n\n      if (this.nativeDraggable) {\n        on(document, 'dragover', _checkOutsideTargetEl);\n      }\n\n      var options = this.options; // Apply effect\n\n      !fallback && toggleClass(dragEl, options.dragClass, false);\n      toggleClass(dragEl, options.ghostClass, true);\n      Sortable.active = this;\n      fallback && this._appendGhost(); // Drag start event\n\n      _dispatchEvent({\n        sortable: this,\n        name: 'start',\n        originalEvent: evt\n      });\n    } else {\n      this._nulling();\n    }\n  },\n  _emulateDragOver: function _emulateDragOver() {\n    if (touchEvt) {\n      this._lastX = touchEvt.clientX;\n      this._lastY = touchEvt.clientY;\n\n      _hideGhostForTarget();\n\n      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n      var parent = target;\n\n      while (target && target.shadowRoot) {\n        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n        if (target === parent) break;\n        parent = target;\n      }\n\n      dragEl.parentNode[expando]._isOutsideThisEl(target);\n\n      if (parent) {\n        do {\n          if (parent[expando]) {\n            var inserted = void 0;\n            inserted = parent[expando]._onDragOver({\n              clientX: touchEvt.clientX,\n              clientY: touchEvt.clientY,\n              target: target,\n              rootEl: parent\n            });\n\n            if (inserted && !this.options.dragoverBubble) {\n              break;\n            }\n          }\n\n          target = parent; // store last element\n        }\n        /* jshint boss:true */\n        while (parent = parent.parentNode);\n      }\n\n      _unhideGhostForTarget();\n    }\n  },\n  _onTouchMove: function _onTouchMove(\n  /**TouchEvent*/\n  evt) {\n    if (tapEvt) {\n      var options = this.options,\n          fallbackTolerance = options.fallbackTolerance,\n          fallbackOffset = options.fallbackOffset,\n          touch = evt.touches ? evt.touches[0] : evt,\n          ghostMatrix = ghostEl && matrix(ghostEl, true),\n          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,\n          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,\n          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),\n          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),\n          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging\n\n      if (!Sortable.active && !awaitingDragStarted) {\n        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {\n          return;\n        }\n\n        this._onDragStart(evt, true);\n      }\n\n      if (ghostEl) {\n        if (ghostMatrix) {\n          ghostMatrix.e += dx - (lastDx || 0);\n          ghostMatrix.f += dy - (lastDy || 0);\n        } else {\n          ghostMatrix = {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            e: dx,\n            f: dy\n          };\n        }\n\n        var cssMatrix = \"matrix(\".concat(ghostMatrix.a, \",\").concat(ghostMatrix.b, \",\").concat(ghostMatrix.c, \",\").concat(ghostMatrix.d, \",\").concat(ghostMatrix.e, \",\").concat(ghostMatrix.f, \")\");\n        css(ghostEl, 'webkitTransform', cssMatrix);\n        css(ghostEl, 'mozTransform', cssMatrix);\n        css(ghostEl, 'msTransform', cssMatrix);\n        css(ghostEl, 'transform', cssMatrix);\n        lastDx = dx;\n        lastDy = dy;\n        touchEvt = touch;\n      }\n\n      evt.cancelable && evt.preventDefault();\n    }\n  },\n  _appendGhost: function _appendGhost() {\n    // Bug if using scale(): https://stackoverflow.com/questions/2637058\n    // Not being adjusted for\n    if (!ghostEl) {\n      var container = this.options.fallbackOnBody ? document.body : rootEl,\n          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),\n          options = this.options; // Position absolutely\n\n      if (PositionGhostAbsolutely) {\n        // Get relatively positioned parent\n        ghostRelativeParent = container;\n\n        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {\n          ghostRelativeParent = ghostRelativeParent.parentNode;\n        }\n\n        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();\n          rect.top += ghostRelativeParent.scrollTop;\n          rect.left += ghostRelativeParent.scrollLeft;\n        } else {\n          ghostRelativeParent = getWindowScrollingElement();\n        }\n\n        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);\n      }\n\n      ghostEl = dragEl.cloneNode(true);\n      toggleClass(ghostEl, options.ghostClass, false);\n      toggleClass(ghostEl, options.fallbackClass, true);\n      toggleClass(ghostEl, options.dragClass, true);\n      css(ghostEl, 'transition', '');\n      css(ghostEl, 'transform', '');\n      css(ghostEl, 'box-sizing', 'border-box');\n      css(ghostEl, 'margin', 0);\n      css(ghostEl, 'top', rect.top);\n      css(ghostEl, 'left', rect.left);\n      css(ghostEl, 'width', rect.width);\n      css(ghostEl, 'height', rect.height);\n      css(ghostEl, 'opacity', '0.8');\n      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');\n      css(ghostEl, 'zIndex', '100000');\n      css(ghostEl, 'pointerEvents', 'none');\n      Sortable.ghost = ghostEl;\n      container.appendChild(ghostEl); // Set transform-origin\n\n      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');\n    }\n  },\n  _onDragStart: function _onDragStart(\n  /**Event*/\n  evt,\n  /**boolean*/\n  fallback) {\n    var _this = this;\n\n    var dataTransfer = evt.dataTransfer;\n    var options = _this.options;\n    pluginEvent('dragStart', this, {\n      evt: evt\n    });\n\n    if (Sortable.eventCanceled) {\n      this._onDrop();\n\n      return;\n    }\n\n    pluginEvent('setupClone', this);\n\n    if (!Sortable.eventCanceled) {\n      cloneEl = clone(dragEl);\n      cloneEl.draggable = false;\n      cloneEl.style['will-change'] = '';\n\n      this._hideClone();\n\n      toggleClass(cloneEl, this.options.chosenClass, false);\n      Sortable.clone = cloneEl;\n    } // #1143: IFrame support workaround\n\n\n    _this.cloneId = _nextTick(function () {\n      pluginEvent('clone', _this);\n      if (Sortable.eventCanceled) return;\n\n      if (!_this.options.removeCloneOnHide) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      }\n\n      _this._hideClone();\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'clone'\n      });\n    });\n    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events\n\n    if (fallback) {\n      ignoreNextClick = true;\n      _this._loopId = setInterval(_this._emulateDragOver, 50);\n    } else {\n      // Undo what was set in _prepareDragStart before drag started\n      off(document, 'mouseup', _this._onDrop);\n      off(document, 'touchend', _this._onDrop);\n      off(document, 'touchcancel', _this._onDrop);\n\n      if (dataTransfer) {\n        dataTransfer.effectAllowed = 'move';\n        options.setData && options.setData.call(_this, dataTransfer, dragEl);\n      }\n\n      on(document, 'drop', _this); // #1276 fix:\n\n      css(dragEl, 'transform', 'translateZ(0)');\n    }\n\n    awaitingDragStarted = true;\n    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\n    on(document, 'selectstart', _this);\n    moved = true;\n\n    if (Safari) {\n      css(document.body, 'user-select', 'none');\n    }\n  },\n  // Returns true - if no further action is needed (either inserted or another condition)\n  _onDragOver: function _onDragOver(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        target = evt.target,\n        dragRect,\n        targetRect,\n        revert,\n        options = this.options,\n        group = options.group,\n        activeSortable = Sortable.active,\n        isOwner = activeGroup === group,\n        canSort = options.sort,\n        fromSortable = putSortable || activeSortable,\n        vertical,\n        _this = this,\n        completedFired = false;\n\n    if (_silent) return;\n\n    function dragOverEvent(name, extra) {\n      pluginEvent(name, _this, _objectSpread2({\n        evt: evt,\n        isOwner: isOwner,\n        axis: vertical ? 'vertical' : 'horizontal',\n        revert: revert,\n        dragRect: dragRect,\n        targetRect: targetRect,\n        canSort: canSort,\n        fromSortable: fromSortable,\n        target: target,\n        completed: completed,\n        onMove: function onMove(target, after) {\n          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);\n        },\n        changed: changed\n      }, extra));\n    } // Capture animation state\n\n\n    function capture() {\n      dragOverEvent('dragOverAnimationCapture');\n\n      _this.captureAnimationState();\n\n      if (_this !== fromSortable) {\n        fromSortable.captureAnimationState();\n      }\n    } // Return invocation when dragEl is inserted (or completed)\n\n\n    function completed(insertion) {\n      dragOverEvent('dragOverCompleted', {\n        insertion: insertion\n      });\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        } else {\n          activeSortable._showClone(_this);\n        }\n\n        if (_this !== fromSortable) {\n          // Set ghost class to new sortable's ghost class\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n          toggleClass(dragEl, options.ghostClass, true);\n        }\n\n        if (putSortable !== _this && _this !== Sortable.active) {\n          putSortable = _this;\n        } else if (_this === Sortable.active && putSortable) {\n          putSortable = null;\n        } // Animation\n\n\n        if (fromSortable === _this) {\n          _this._ignoreWhileAnimating = target;\n        }\n\n        _this.animateAll(function () {\n          dragOverEvent('dragOverAnimationComplete');\n          _this._ignoreWhileAnimating = null;\n        });\n\n        if (_this !== fromSortable) {\n          fromSortable.animateAll();\n          fromSortable._ignoreWhileAnimating = null;\n        }\n      } // Null lastTarget if it is not inside a previously swapped element\n\n\n      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {\n        lastTarget = null;\n      } // no bubbling and not fallback\n\n\n      if (!options.dragoverBubble && !evt.rootEl && target !== document) {\n        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted\n\n\n        !insertion && nearestEmptyInsertDetectEvent(evt);\n      }\n\n      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n      return completedFired = true;\n    } // Call when dragEl has been inserted\n\n\n    function changed() {\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'change',\n        toEl: el,\n        newIndex: newIndex,\n        newDraggableIndex: newDraggableIndex,\n        originalEvent: evt\n      });\n    }\n\n    if (evt.preventDefault !== void 0) {\n      evt.cancelable && evt.preventDefault();\n    }\n\n    target = closest(target, options.draggable, el, true);\n    dragOverEvent('dragOver');\n    if (Sortable.eventCanceled) return completedFired;\n\n    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {\n      return completed(false);\n    }\n\n    ignoreNextClick = false;\n\n    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list\n    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {\n      vertical = this._getDirection(evt, target) === 'vertical';\n      dragRect = getRect(dragEl);\n      dragOverEvent('dragOverValid');\n      if (Sortable.eventCanceled) return completedFired;\n\n      if (revert) {\n        parentEl = rootEl; // actualization\n\n        capture();\n\n        this._hideClone();\n\n        dragOverEvent('revert');\n\n        if (!Sortable.eventCanceled) {\n          if (nextEl) {\n            rootEl.insertBefore(dragEl, nextEl);\n          } else {\n            rootEl.appendChild(dragEl);\n          }\n        }\n\n        return completed(true);\n      }\n\n      var elLastChild = lastChild(el, options.draggable);\n\n      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {\n        // Insert to end of list\n        // If already at end of list: Do not insert\n        if (elLastChild === dragEl) {\n          return completed(false);\n        } // if there is a last element, it is the target\n\n\n        if (elLastChild && el === evt.target) {\n          target = elLastChild;\n        }\n\n        if (target) {\n          targetRect = getRect(target);\n        }\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n          capture();\n          el.appendChild(dragEl);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {\n        // Insert to start of list\n        var firstChild = getChild(el, 0, options, true);\n\n        if (firstChild === dragEl) {\n          return completed(false);\n        }\n\n        target = firstChild;\n        targetRect = getRect(target);\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {\n          capture();\n          el.insertBefore(dragEl, firstChild);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (target.parentNode === el) {\n        targetRect = getRect(target);\n        var direction = 0,\n            targetBeforeFirstSwap,\n            differentLevel = dragEl.parentNode !== el,\n            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),\n            side1 = vertical ? 'top' : 'left',\n            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),\n            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n        if (lastTarget !== target) {\n          targetBeforeFirstSwap = targetRect[side1];\n          pastFirstInvertThresh = false;\n          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;\n        }\n\n        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);\n        var sibling;\n\n        if (direction !== 0) {\n          // Check if target is beside dragEl in respective direction (ignoring hidden elements)\n          var dragIndex = index(dragEl);\n\n          do {\n            dragIndex -= direction;\n            sibling = parentEl.children[dragIndex];\n          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));\n        } // If dragEl is already beside target: Do not insert\n\n\n        if (direction === 0 || sibling === target) {\n          return completed(false);\n        }\n\n        lastTarget = target;\n        lastDirection = direction;\n        var nextSibling = target.nextElementSibling,\n            after = false;\n        after = direction === 1;\n\n        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n        if (moveVector !== false) {\n          if (moveVector === 1 || moveVector === -1) {\n            after = moveVector === 1;\n          }\n\n          _silent = true;\n          setTimeout(_unsilent, 30);\n          capture();\n\n          if (after && !nextSibling) {\n            el.appendChild(dragEl);\n          } else {\n            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n          } // Undo chrome's scroll adjustment (has no effect on other browsers)\n\n\n          if (scrolledPastTop) {\n            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\n          }\n\n          parentEl = dragEl.parentNode; // actualization\n          // must be done before animation\n\n          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);\n          }\n\n          changed();\n          return completed(true);\n        }\n      }\n\n      if (el.contains(dragEl)) {\n        return completed(false);\n      }\n    }\n\n    return false;\n  },\n  _ignoreWhileAnimating: null,\n  _offMoveEvents: function _offMoveEvents() {\n    off(document, 'mousemove', this._onTouchMove);\n    off(document, 'touchmove', this._onTouchMove);\n    off(document, 'pointermove', this._onTouchMove);\n    off(document, 'dragover', nearestEmptyInsertDetectEvent);\n    off(document, 'mousemove', nearestEmptyInsertDetectEvent);\n    off(document, 'touchmove', nearestEmptyInsertDetectEvent);\n  },\n  _offUpEvents: function _offUpEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._onDrop);\n    off(ownerDocument, 'touchend', this._onDrop);\n    off(ownerDocument, 'pointerup', this._onDrop);\n    off(ownerDocument, 'touchcancel', this._onDrop);\n    off(document, 'selectstart', this);\n  },\n  _onDrop: function _onDrop(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        options = this.options; // Get the index of the dragged element within its parent\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n    pluginEvent('drop', this, {\n      evt: evt\n    });\n    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    if (Sortable.eventCanceled) {\n      this._nulling();\n\n      return;\n    }\n\n    awaitingDragStarted = false;\n    isCircumstantialInvert = false;\n    pastFirstInvertThresh = false;\n    clearInterval(this._loopId);\n    clearTimeout(this._dragStartTimer);\n\n    _cancelNextTick(this.cloneId);\n\n    _cancelNextTick(this._dragStartId); // Unbind events\n\n\n    if (this.nativeDraggable) {\n      off(document, 'drop', this);\n      off(el, 'dragstart', this._onDragStart);\n    }\n\n    this._offMoveEvents();\n\n    this._offUpEvents();\n\n    if (Safari) {\n      css(document.body, 'user-select', '');\n    }\n\n    css(dragEl, 'transform', '');\n\n    if (evt) {\n      if (moved) {\n        evt.cancelable && evt.preventDefault();\n        !options.dropBubble && evt.stopPropagation();\n      }\n\n      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        // Remove clone(s)\n        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      if (dragEl) {\n        if (this.nativeDraggable) {\n          off(dragEl, 'dragend', this);\n        }\n\n        _disableDraggable(dragEl);\n\n        dragEl.style['will-change'] = ''; // Remove classes\n        // ghostClass is added in dragStarted\n\n        if (moved && !awaitingDragStarted) {\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n        }\n\n        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event\n\n        _dispatchEvent({\n          sortable: this,\n          name: 'unchoose',\n          toEl: parentEl,\n          newIndex: null,\n          newDraggableIndex: null,\n          originalEvent: evt\n        });\n\n        if (rootEl !== parentEl) {\n          if (newIndex >= 0) {\n            // Add event\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'add',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            }); // Remove event\n\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'remove',\n              toEl: parentEl,\n              originalEvent: evt\n            }); // drag from one list and drop into another\n\n\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'sort',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            });\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'sort',\n              toEl: parentEl,\n              originalEvent: evt\n            });\n          }\n\n          putSortable && putSortable.save();\n        } else {\n          if (newIndex !== oldIndex) {\n            if (newIndex >= 0) {\n              // drag & drop within the same list\n              _dispatchEvent({\n                sortable: this,\n                name: 'update',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n\n              _dispatchEvent({\n                sortable: this,\n                name: 'sort',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n            }\n          }\n        }\n\n        if (Sortable.active) {\n          /* jshint eqnull:true */\n          if (newIndex == null || newIndex === -1) {\n            newIndex = oldIndex;\n            newDraggableIndex = oldDraggableIndex;\n          }\n\n          _dispatchEvent({\n            sortable: this,\n            name: 'end',\n            toEl: parentEl,\n            originalEvent: evt\n          }); // Save sorting\n\n\n          this.save();\n        }\n      }\n    }\n\n    this._nulling();\n  },\n  _nulling: function _nulling() {\n    pluginEvent('nulling', this);\n    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;\n    savedInputChecked.forEach(function (el) {\n      el.checked = true;\n    });\n    savedInputChecked.length = lastDx = lastDy = 0;\n  },\n  handleEvent: function handleEvent(\n  /**Event*/\n  evt) {\n    switch (evt.type) {\n      case 'drop':\n      case 'dragend':\n        this._onDrop(evt);\n\n        break;\n\n      case 'dragenter':\n      case 'dragover':\n        if (dragEl) {\n          this._onDragOver(evt);\n\n          _globalDragOver(evt);\n        }\n\n        break;\n\n      case 'selectstart':\n        evt.preventDefault();\n        break;\n    }\n  },\n\n  /**\n   * Serializes the item into an array of string.\n   * @returns {String[]}\n   */\n  toArray: function toArray() {\n    var order = [],\n        el,\n        children = this.el.children,\n        i = 0,\n        n = children.length,\n        options = this.options;\n\n    for (; i < n; i++) {\n      el = children[i];\n\n      if (closest(el, options.draggable, this.el, false)) {\n        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n      }\n    }\n\n    return order;\n  },\n\n  /**\n   * Sorts the elements according to the array.\n   * @param  {String[]}  order  order of the items\n   */\n  sort: function sort(order, useAnimation) {\n    var items = {},\n        rootEl = this.el;\n    this.toArray().forEach(function (id, i) {\n      var el = rootEl.children[i];\n\n      if (closest(el, this.options.draggable, rootEl, false)) {\n        items[id] = el;\n      }\n    }, this);\n    useAnimation && this.captureAnimationState();\n    order.forEach(function (id) {\n      if (items[id]) {\n        rootEl.removeChild(items[id]);\n        rootEl.appendChild(items[id]);\n      }\n    });\n    useAnimation && this.animateAll();\n  },\n\n  /**\n   * Save the current sorting\n   */\n  save: function save() {\n    var store = this.options.store;\n    store && store.set && store.set(this);\n  },\n\n  /**\n   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n   * @param   {HTMLElement}  el\n   * @param   {String}       [selector]  default: `options.draggable`\n   * @returns {HTMLElement|null}\n   */\n  closest: function closest$1(el, selector) {\n    return closest(el, selector || this.options.draggable, this.el, false);\n  },\n\n  /**\n   * Set/get option\n   * @param   {string} name\n   * @param   {*}      [value]\n   * @returns {*}\n   */\n  option: function option(name, value) {\n    var options = this.options;\n\n    if (value === void 0) {\n      return options[name];\n    } else {\n      var modifiedValue = PluginManager.modifyOption(this, name, value);\n\n      if (typeof modifiedValue !== 'undefined') {\n        options[name] = modifiedValue;\n      } else {\n        options[name] = value;\n      }\n\n      if (name === 'group') {\n        _prepareGroup(options);\n      }\n    }\n  },\n\n  /**\n   * Destroy\n   */\n  destroy: function destroy() {\n    pluginEvent('destroy', this);\n    var el = this.el;\n    el[expando] = null;\n    off(el, 'mousedown', this._onTapStart);\n    off(el, 'touchstart', this._onTapStart);\n    off(el, 'pointerdown', this._onTapStart);\n\n    if (this.nativeDraggable) {\n      off(el, 'dragover', this);\n      off(el, 'dragenter', this);\n    } // Remove draggable attributes\n\n\n    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n      el.removeAttribute('draggable');\n    });\n\n    this._onDrop();\n\n    this._disableDelayedDragEvents();\n\n    sortables.splice(sortables.indexOf(this.el), 1);\n    this.el = el = null;\n  },\n  _hideClone: function _hideClone() {\n    if (!cloneHidden) {\n      pluginEvent('hideClone', this);\n      if (Sortable.eventCanceled) return;\n      css(cloneEl, 'display', 'none');\n\n      if (this.options.removeCloneOnHide && cloneEl.parentNode) {\n        cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      cloneHidden = true;\n    }\n  },\n  _showClone: function _showClone(putSortable) {\n    if (putSortable.lastPutMode !== 'clone') {\n      this._hideClone();\n\n      return;\n    }\n\n    if (cloneHidden) {\n      pluginEvent('showClone', this);\n      if (Sortable.eventCanceled) return; // show clone at dragEl or original position\n\n      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      } else if (nextEl) {\n        rootEl.insertBefore(cloneEl, nextEl);\n      } else {\n        rootEl.appendChild(cloneEl);\n      }\n\n      if (this.options.group.revertClone) {\n        this.animate(dragEl, cloneEl);\n      }\n\n      css(cloneEl, 'display', '');\n      cloneHidden = false;\n    }\n  }\n};\n\nfunction _globalDragOver(\n/**Event*/\nevt) {\n  if (evt.dataTransfer) {\n    evt.dataTransfer.dropEffect = 'move';\n  }\n\n  evt.cancelable && evt.preventDefault();\n}\n\nfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {\n  var evt,\n      sortable = fromEl[expando],\n      onMoveFn = sortable.options.onMove,\n      retVal; // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent('move', {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent('move', true, true);\n  }\n\n  evt.to = toEl;\n  evt.from = fromEl;\n  evt.dragged = dragEl;\n  evt.draggedRect = dragRect;\n  evt.related = targetEl || toEl;\n  evt.relatedRect = targetRect || getRect(toEl);\n  evt.willInsertAfter = willInsertAfter;\n  evt.originalEvent = originalEvent;\n  fromEl.dispatchEvent(evt);\n\n  if (onMoveFn) {\n    retVal = onMoveFn.call(sortable, evt, originalEvent);\n  }\n\n  return retVal;\n}\n\nfunction _disableDraggable(el) {\n  el.draggable = false;\n}\n\nfunction _unsilent() {\n  _silent = false;\n}\n\nfunction _ghostIsFirst(evt, vertical, sortable) {\n  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));\n  var spacer = 10;\n  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;\n}\n\nfunction _ghostIsLast(evt, vertical, sortable) {\n  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));\n  var spacer = 10;\n  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;\n}\n\nfunction _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,\n      targetLength = vertical ? targetRect.height : targetRect.width,\n      targetS1 = vertical ? targetRect.top : targetRect.left,\n      targetS2 = vertical ? targetRect.bottom : targetRect.right,\n      invert = false;\n\n  if (!invertSwap) {\n    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {\n      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n      // check if past first invert threshold on side opposite of lastDirection\n      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {\n        // past first invert threshold, do not restrict inverted threshold to dragEl shadow\n        pastFirstInvertThresh = true;\n      }\n\n      if (!pastFirstInvertThresh) {\n        // dragEl shadow (target move distance shadow)\n        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n        : mouseOnAxis > targetS2 - targetMoveDistance) {\n          return -lastDirection;\n        }\n      } else {\n        invert = true;\n      }\n    } else {\n      // Regular\n      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {\n        return _getInsertDirection(target);\n      }\n    }\n  }\n\n  invert = invert || invertSwap;\n\n  if (invert) {\n    // Invert of regular\n    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {\n      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;\n    }\n  }\n\n  return 0;\n}\n/**\n * Gets the direction dragEl must be swapped relative to target in order to make it\n * seem that dragEl has been \"inserted\" into that element's position\n * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n * @return {Number}                   Direction dragEl must be swapped\n */\n\n\nfunction _getInsertDirection(target) {\n  if (index(dragEl) < index(target)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n/**\n * Generate id\n * @param   {HTMLElement} el\n * @returns {String}\n * @private\n */\n\n\nfunction _generateId(el) {\n  var str = el.tagName + el.className + el.src + el.href + el.textContent,\n      i = str.length,\n      sum = 0;\n\n  while (i--) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum.toString(36);\n}\n\nfunction _saveInputCheckedState(root) {\n  savedInputChecked.length = 0;\n  var inputs = root.getElementsByTagName('input');\n  var idx = inputs.length;\n\n  while (idx--) {\n    var el = inputs[idx];\n    el.checked && savedInputChecked.push(el);\n  }\n}\n\nfunction _nextTick(fn) {\n  return setTimeout(fn, 0);\n}\n\nfunction _cancelNextTick(id) {\n  return clearTimeout(id);\n} // Fixed #973:\n\n\nif (documentExists) {\n  on(document, 'touchmove', function (evt) {\n    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n      evt.preventDefault();\n    }\n  });\n} // Export utils\n\n\nSortable.utils = {\n  on: on,\n  off: off,\n  css: css,\n  find: find,\n  is: function is(el, selector) {\n    return !!closest(el, selector, el, false);\n  },\n  extend: extend,\n  throttle: throttle,\n  closest: closest,\n  toggleClass: toggleClass,\n  clone: clone,\n  index: index,\n  nextTick: _nextTick,\n  cancelNextTick: _cancelNextTick,\n  detectDirection: _detectDirection,\n  getChild: getChild\n};\n/**\n * Get the Sortable instance of an element\n * @param  {HTMLElement} element The element\n * @return {Sortable|undefined}         The instance of Sortable\n */\n\nSortable.get = function (element) {\n  return element[expando];\n};\n/**\n * Mount a plugin to Sortable\n * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted\n */\n\n\nSortable.mount = function () {\n  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n    plugins[_key] = arguments[_key];\n  }\n\n  if (plugins[0].constructor === Array) plugins = plugins[0];\n  plugins.forEach(function (plugin) {\n    if (!plugin.prototype || !plugin.prototype.constructor) {\n      throw \"Sortable: Mounted plugin must be a constructor function, not \".concat({}.toString.call(plugin));\n    }\n\n    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);\n    PluginManager.mount(plugin);\n  });\n};\n/**\n * Create sortable instance\n * @param {HTMLElement}  el\n * @param {Object}      [options]\n */\n\n\nSortable.create = function (el, options) {\n  return new Sortable(el, options);\n}; // Export\n\n\nSortable.version = version;\n\nvar autoScrolls = [],\n    scrollEl,\n    scrollRootEl,\n    scrolling = false,\n    lastAutoScrollX,\n    lastAutoScrollY,\n    touchEvt$1,\n    pointerElemChangedInterval;\n\nfunction AutoScrollPlugin() {\n  function AutoScroll() {\n    this.defaults = {\n      scroll: true,\n      forceAutoScrollFallback: false,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      bubbleScroll: true\n    }; // Bind all private methods\n\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n  }\n\n  AutoScroll.prototype = {\n    dragStarted: function dragStarted(_ref) {\n      var originalEvent = _ref.originalEvent;\n\n      if (this.sortable.nativeDraggable) {\n        on(document, 'dragover', this._handleAutoScroll);\n      } else {\n        if (this.options.supportPointer) {\n          on(document, 'pointermove', this._handleFallbackAutoScroll);\n        } else if (originalEvent.touches) {\n          on(document, 'touchmove', this._handleFallbackAutoScroll);\n        } else {\n          on(document, 'mousemove', this._handleFallbackAutoScroll);\n        }\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref2) {\n      var originalEvent = _ref2.originalEvent;\n\n      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)\n      if (!this.options.dragOverBubble && !originalEvent.rootEl) {\n        this._handleAutoScroll(originalEvent);\n      }\n    },\n    drop: function drop() {\n      if (this.sortable.nativeDraggable) {\n        off(document, 'dragover', this._handleAutoScroll);\n      } else {\n        off(document, 'pointermove', this._handleFallbackAutoScroll);\n        off(document, 'touchmove', this._handleFallbackAutoScroll);\n        off(document, 'mousemove', this._handleFallbackAutoScroll);\n      }\n\n      clearPointerElemChangedInterval();\n      clearAutoScrolls();\n      cancelThrottle();\n    },\n    nulling: function nulling() {\n      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;\n      autoScrolls.length = 0;\n    },\n    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {\n      this._handleAutoScroll(evt, true);\n    },\n    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {\n      var _this = this;\n\n      var x = (evt.touches ? evt.touches[0] : evt).clientX,\n          y = (evt.touches ? evt.touches[0] : evt).clientY,\n          elem = document.elementFromPoint(x, y);\n      touchEvt$1 = evt; // IE does not seem to have native autoscroll,\n      // Edge's autoscroll seems too conditional,\n      // MACOS Safari does not have autoscroll,\n      // Firefox and Chrome are good\n\n      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {\n        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change\n\n        var ogElemScroller = getParentAutoScrollElement(elem, true);\n\n        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {\n          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour\n\n          pointerElemChangedInterval = setInterval(function () {\n            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\n            if (newElem !== ogElemScroller) {\n              ogElemScroller = newElem;\n              clearAutoScrolls();\n            }\n\n            autoScroll(evt, _this.options, newElem, fallback);\n          }, 10);\n          lastAutoScrollX = x;\n          lastAutoScrollY = y;\n        }\n      } else {\n        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {\n          clearAutoScrolls();\n          return;\n        }\n\n        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);\n      }\n    }\n  };\n  return _extends(AutoScroll, {\n    pluginName: 'scroll',\n    initializeByDefault: true\n  });\n}\n\nfunction clearAutoScrolls() {\n  autoScrolls.forEach(function (autoScroll) {\n    clearInterval(autoScroll.pid);\n  });\n  autoScrolls = [];\n}\n\nfunction clearPointerElemChangedInterval() {\n  clearInterval(pointerElemChangedInterval);\n}\n\nvar autoScroll = throttle(function (evt, options, rootEl, isFallback) {\n  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n  if (!options.scroll) return;\n  var x = (evt.touches ? evt.touches[0] : evt).clientX,\n      y = (evt.touches ? evt.touches[0] : evt).clientY,\n      sens = options.scrollSensitivity,\n      speed = options.scrollSpeed,\n      winScroller = getWindowScrollingElement();\n  var scrollThisInstance = false,\n      scrollCustomFn; // New scroll root, set scrollEl\n\n  if (scrollRootEl !== rootEl) {\n    scrollRootEl = rootEl;\n    clearAutoScrolls();\n    scrollEl = options.scroll;\n    scrollCustomFn = options.scrollFn;\n\n    if (scrollEl === true) {\n      scrollEl = getParentAutoScrollElement(rootEl, true);\n    }\n  }\n\n  var layersOut = 0;\n  var currentParent = scrollEl;\n\n  do {\n    var el = currentParent,\n        rect = getRect(el),\n        top = rect.top,\n        bottom = rect.bottom,\n        left = rect.left,\n        right = rect.right,\n        width = rect.width,\n        height = rect.height,\n        canScrollX = void 0,\n        canScrollY = void 0,\n        scrollWidth = el.scrollWidth,\n        scrollHeight = el.scrollHeight,\n        elCSS = css(el),\n        scrollPosX = el.scrollLeft,\n        scrollPosY = el.scrollTop;\n\n    if (el === winScroller) {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');\n    } else {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');\n    }\n\n    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);\n    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);\n\n    if (!autoScrolls[layersOut]) {\n      for (var i = 0; i <= layersOut; i++) {\n        if (!autoScrolls[i]) {\n          autoScrolls[i] = {};\n        }\n      }\n    }\n\n    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n      autoScrolls[layersOut].el = el;\n      autoScrolls[layersOut].vx = vx;\n      autoScrolls[layersOut].vy = vy;\n      clearInterval(autoScrolls[layersOut].pid);\n\n      if (vx != 0 || vy != 0) {\n        scrollThisInstance = true;\n        /* jshint loopfunc:true */\n\n        autoScrolls[layersOut].pid = setInterval(function () {\n          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n          if (isFallback && this.layer === 0) {\n            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely\n\n          }\n\n          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n          if (typeof scrollCustomFn === 'function') {\n            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {\n              return;\n            }\n          }\n\n          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n        }.bind({\n          layer: layersOut\n        }), 24);\n      }\n    }\n\n    layersOut++;\n  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));\n\n  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n}, 30);\n\nvar drop = function drop(_ref) {\n  var originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      dragEl = _ref.dragEl,\n      activeSortable = _ref.activeSortable,\n      dispatchSortableEvent = _ref.dispatchSortableEvent,\n      hideGhostForTarget = _ref.hideGhostForTarget,\n      unhideGhostForTarget = _ref.unhideGhostForTarget;\n  if (!originalEvent) return;\n  var toSortable = putSortable || activeSortable;\n  hideGhostForTarget();\n  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  unhideGhostForTarget();\n\n  if (toSortable && !toSortable.el.contains(target)) {\n    dispatchSortableEvent('spill');\n    this.onSpill({\n      dragEl: dragEl,\n      putSortable: putSortable\n    });\n  }\n};\n\nfunction Revert() {}\n\nRevert.prototype = {\n  startIndex: null,\n  dragStart: function dragStart(_ref2) {\n    var oldDraggableIndex = _ref2.oldDraggableIndex;\n    this.startIndex = oldDraggableIndex;\n  },\n  onSpill: function onSpill(_ref3) {\n    var dragEl = _ref3.dragEl,\n        putSortable = _ref3.putSortable;\n    this.sortable.captureAnimationState();\n\n    if (putSortable) {\n      putSortable.captureAnimationState();\n    }\n\n    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);\n\n    if (nextSibling) {\n      this.sortable.el.insertBefore(dragEl, nextSibling);\n    } else {\n      this.sortable.el.appendChild(dragEl);\n    }\n\n    this.sortable.animateAll();\n\n    if (putSortable) {\n      putSortable.animateAll();\n    }\n  },\n  drop: drop\n};\n\n_extends(Revert, {\n  pluginName: 'revertOnSpill'\n});\n\nfunction Remove() {}\n\nRemove.prototype = {\n  onSpill: function onSpill(_ref4) {\n    var dragEl = _ref4.dragEl,\n        putSortable = _ref4.putSortable;\n    var parentSortable = putSortable || this.sortable;\n    parentSortable.captureAnimationState();\n    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n    parentSortable.animateAll();\n  },\n  drop: drop\n};\n\n_extends(Remove, {\n  pluginName: 'removeOnSpill'\n});\n\nvar lastSwapEl;\n\nfunction SwapPlugin() {\n  function Swap() {\n    this.defaults = {\n      swapClass: 'sortable-swap-highlight'\n    };\n  }\n\n  Swap.prototype = {\n    dragStart: function dragStart(_ref) {\n      var dragEl = _ref.dragEl;\n      lastSwapEl = dragEl;\n    },\n    dragOverValid: function dragOverValid(_ref2) {\n      var completed = _ref2.completed,\n          target = _ref2.target,\n          onMove = _ref2.onMove,\n          activeSortable = _ref2.activeSortable,\n          changed = _ref2.changed,\n          cancel = _ref2.cancel;\n      if (!activeSortable.options.swap) return;\n      var el = this.sortable.el,\n          options = this.options;\n\n      if (target && target !== el) {\n        var prevSwapEl = lastSwapEl;\n\n        if (onMove(target) !== false) {\n          toggleClass(target, options.swapClass, true);\n          lastSwapEl = target;\n        } else {\n          lastSwapEl = null;\n        }\n\n        if (prevSwapEl && prevSwapEl !== lastSwapEl) {\n          toggleClass(prevSwapEl, options.swapClass, false);\n        }\n      }\n\n      changed();\n      completed(true);\n      cancel();\n    },\n    drop: function drop(_ref3) {\n      var activeSortable = _ref3.activeSortable,\n          putSortable = _ref3.putSortable,\n          dragEl = _ref3.dragEl;\n      var toSortable = putSortable || this.sortable;\n      var options = this.options;\n      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);\n\n      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {\n        if (dragEl !== lastSwapEl) {\n          toSortable.captureAnimationState();\n          if (toSortable !== activeSortable) activeSortable.captureAnimationState();\n          swapNodes(dragEl, lastSwapEl);\n          toSortable.animateAll();\n          if (toSortable !== activeSortable) activeSortable.animateAll();\n        }\n      }\n    },\n    nulling: function nulling() {\n      lastSwapEl = null;\n    }\n  };\n  return _extends(Swap, {\n    pluginName: 'swap',\n    eventProperties: function eventProperties() {\n      return {\n        swapItem: lastSwapEl\n      };\n    }\n  });\n}\n\nfunction swapNodes(n1, n2) {\n  var p1 = n1.parentNode,\n      p2 = n2.parentNode,\n      i1,\n      i2;\n  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;\n  i1 = index(n1);\n  i2 = index(n2);\n\n  if (p1.isEqualNode(p2) && i1 < i2) {\n    i2++;\n  }\n\n  p1.insertBefore(n2, p1.children[i1]);\n  p2.insertBefore(n1, p2.children[i2]);\n}\n\nvar multiDragElements = [],\n    multiDragClones = [],\n    lastMultiDragSelect,\n    // for selection with modifier key down (SHIFT)\nmultiDragSortable,\n    initialFolding = false,\n    // Initial multi-drag fold when drag started\nfolding = false,\n    // Folding any other time\ndragStarted = false,\n    dragEl$1,\n    clonesFromRect,\n    clonesHidden;\n\nfunction MultiDragPlugin() {\n  function MultiDrag(sortable) {\n    // Bind all private methods\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n\n    if (sortable.options.supportPointer) {\n      on(document, 'pointerup', this._deselectMultiDrag);\n    } else {\n      on(document, 'mouseup', this._deselectMultiDrag);\n      on(document, 'touchend', this._deselectMultiDrag);\n    }\n\n    on(document, 'keydown', this._checkKeyDown);\n    on(document, 'keyup', this._checkKeyUp);\n    this.defaults = {\n      selectedClass: 'sortable-selected',\n      multiDragKey: null,\n      setData: function setData(dataTransfer, dragEl) {\n        var data = '';\n\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          multiDragElements.forEach(function (multiDragElement, i) {\n            data += (!i ? '' : ', ') + multiDragElement.textContent;\n          });\n        } else {\n          data = dragEl.textContent;\n        }\n\n        dataTransfer.setData('Text', data);\n      }\n    };\n  }\n\n  MultiDrag.prototype = {\n    multiDragKeyDown: false,\n    isMultiDrag: false,\n    delayStartGlobal: function delayStartGlobal(_ref) {\n      var dragged = _ref.dragEl;\n      dragEl$1 = dragged;\n    },\n    delayEnded: function delayEnded() {\n      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);\n    },\n    setupClone: function setupClone(_ref2) {\n      var sortable = _ref2.sortable,\n          cancel = _ref2.cancel;\n      if (!this.isMultiDrag) return;\n\n      for (var i = 0; i < multiDragElements.length; i++) {\n        multiDragClones.push(clone(multiDragElements[i]));\n        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;\n        multiDragClones[i].draggable = false;\n        multiDragClones[i].style['will-change'] = '';\n        toggleClass(multiDragClones[i], this.options.selectedClass, false);\n        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);\n      }\n\n      sortable._hideClone();\n\n      cancel();\n    },\n    clone: function clone(_ref3) {\n      var sortable = _ref3.sortable,\n          rootEl = _ref3.rootEl,\n          dispatchSortableEvent = _ref3.dispatchSortableEvent,\n          cancel = _ref3.cancel;\n      if (!this.isMultiDrag) return;\n\n      if (!this.options.removeCloneOnHide) {\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          insertMultiDragClones(true, rootEl);\n          dispatchSortableEvent('clone');\n          cancel();\n        }\n      }\n    },\n    showClone: function showClone(_ref4) {\n      var cloneNowShown = _ref4.cloneNowShown,\n          rootEl = _ref4.rootEl,\n          cancel = _ref4.cancel;\n      if (!this.isMultiDrag) return;\n      insertMultiDragClones(false, rootEl);\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', '');\n      });\n      cloneNowShown();\n      clonesHidden = false;\n      cancel();\n    },\n    hideClone: function hideClone(_ref5) {\n      var _this = this;\n\n      var sortable = _ref5.sortable,\n          cloneNowHidden = _ref5.cloneNowHidden,\n          cancel = _ref5.cancel;\n      if (!this.isMultiDrag) return;\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', 'none');\n\n        if (_this.options.removeCloneOnHide && clone.parentNode) {\n          clone.parentNode.removeChild(clone);\n        }\n      });\n      cloneNowHidden();\n      clonesHidden = true;\n      cancel();\n    },\n    dragStartGlobal: function dragStartGlobal(_ref6) {\n      var sortable = _ref6.sortable;\n\n      if (!this.isMultiDrag && multiDragSortable) {\n        multiDragSortable.multiDrag._deselectMultiDrag();\n      }\n\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.sortableIndex = index(multiDragElement);\n      }); // Sort multi-drag elements\n\n      multiDragElements = multiDragElements.sort(function (a, b) {\n        return a.sortableIndex - b.sortableIndex;\n      });\n      dragStarted = true;\n    },\n    dragStarted: function dragStarted(_ref7) {\n      var _this2 = this;\n\n      var sortable = _ref7.sortable;\n      if (!this.isMultiDrag) return;\n\n      if (this.options.sort) {\n        // Capture rects,\n        // hide multi drag elements (by positioning them absolute),\n        // set multi drag elements rects to dragRect,\n        // show multi drag elements,\n        // animate to rects,\n        // unset rects & remove from DOM\n        sortable.captureAnimationState();\n\n        if (this.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            css(multiDragElement, 'position', 'absolute');\n          });\n          var dragRect = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRect);\n          });\n          folding = true;\n          initialFolding = true;\n        }\n      }\n\n      sortable.animateAll(function () {\n        folding = false;\n        initialFolding = false;\n\n        if (_this2.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n        } // Remove all auxiliary multidrag items from el, if sorting enabled\n\n\n        if (_this2.options.sort) {\n          removeMultiDragElements();\n        }\n      });\n    },\n    dragOver: function dragOver(_ref8) {\n      var target = _ref8.target,\n          completed = _ref8.completed,\n          cancel = _ref8.cancel;\n\n      if (folding && ~multiDragElements.indexOf(target)) {\n        completed(false);\n        cancel();\n      }\n    },\n    revert: function revert(_ref9) {\n      var fromSortable = _ref9.fromSortable,\n          rootEl = _ref9.rootEl,\n          sortable = _ref9.sortable,\n          dragRect = _ref9.dragRect;\n\n      if (multiDragElements.length > 1) {\n        // Setup unfold animation\n        multiDragElements.forEach(function (multiDragElement) {\n          sortable.addAnimationState({\n            target: multiDragElement,\n            rect: folding ? getRect(multiDragElement) : dragRect\n          });\n          unsetRect(multiDragElement);\n          multiDragElement.fromRect = dragRect;\n          fromSortable.removeAnimationState(multiDragElement);\n        });\n        folding = false;\n        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref10) {\n      var sortable = _ref10.sortable,\n          isOwner = _ref10.isOwner,\n          insertion = _ref10.insertion,\n          activeSortable = _ref10.activeSortable,\n          parentEl = _ref10.parentEl,\n          putSortable = _ref10.putSortable;\n      var options = this.options;\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        }\n\n        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location\n\n        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {\n          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible\n          var dragRectAbsolute = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted\n            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable\n\n            parentEl.appendChild(multiDragElement);\n          });\n          folding = true;\n        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out\n\n\n        if (!isOwner) {\n          // Only remove if not folding (folding will remove them anyways)\n          if (!folding) {\n            removeMultiDragElements();\n          }\n\n          if (multiDragElements.length > 1) {\n            var clonesHiddenBefore = clonesHidden;\n\n            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden\n\n\n            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {\n              multiDragClones.forEach(function (clone) {\n                activeSortable.addAnimationState({\n                  target: clone,\n                  rect: clonesFromRect\n                });\n                clone.fromRect = clonesFromRect;\n                clone.thisAnimationDuration = null;\n              });\n            }\n          } else {\n            activeSortable._showClone(sortable);\n          }\n        }\n      }\n    },\n    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {\n      var dragRect = _ref11.dragRect,\n          isOwner = _ref11.isOwner,\n          activeSortable = _ref11.activeSortable;\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.thisAnimationDuration = null;\n      });\n\n      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {\n        clonesFromRect = _extends({}, dragRect);\n        var dragMatrix = matrix(dragEl$1, true);\n        clonesFromRect.top -= dragMatrix.f;\n        clonesFromRect.left -= dragMatrix.e;\n      }\n    },\n    dragOverAnimationComplete: function dragOverAnimationComplete() {\n      if (folding) {\n        folding = false;\n        removeMultiDragElements();\n      }\n    },\n    drop: function drop(_ref12) {\n      var evt = _ref12.originalEvent,\n          rootEl = _ref12.rootEl,\n          parentEl = _ref12.parentEl,\n          sortable = _ref12.sortable,\n          dispatchSortableEvent = _ref12.dispatchSortableEvent,\n          oldIndex = _ref12.oldIndex,\n          putSortable = _ref12.putSortable;\n      var toSortable = putSortable || this.sortable;\n      if (!evt) return;\n      var options = this.options,\n          children = parentEl.children; // Multi-drag selection\n\n      if (!dragStarted) {\n        if (options.multiDragKey && !this.multiDragKeyDown) {\n          this._deselectMultiDrag();\n        }\n\n        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));\n\n        if (!~multiDragElements.indexOf(dragEl$1)) {\n          multiDragElements.push(dragEl$1);\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'select',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          }); // Modifier activated, select from last to dragEl\n\n          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {\n            var lastIndex = index(lastMultiDragSelect),\n                currentIndex = index(dragEl$1);\n\n            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {\n              // Must include lastMultiDragSelect (select it), in case modified selection from no selection\n              // (but previous selection existed)\n              var n, i;\n\n              if (currentIndex > lastIndex) {\n                i = lastIndex;\n                n = currentIndex;\n              } else {\n                i = currentIndex;\n                n = lastIndex + 1;\n              }\n\n              for (; i < n; i++) {\n                if (~multiDragElements.indexOf(children[i])) continue;\n                toggleClass(children[i], options.selectedClass, true);\n                multiDragElements.push(children[i]);\n                dispatchEvent({\n                  sortable: sortable,\n                  rootEl: rootEl,\n                  name: 'select',\n                  targetEl: children[i],\n                  originalEvt: evt\n                });\n              }\n            }\n          } else {\n            lastMultiDragSelect = dragEl$1;\n          }\n\n          multiDragSortable = toSortable;\n        } else {\n          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);\n          lastMultiDragSelect = null;\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'deselect',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          });\n        }\n      } // Multi-drag drop\n\n\n      if (dragStarted && this.isMultiDrag) {\n        folding = false; // Do not \"unfold\" after around dragEl if reverted\n\n        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {\n          var dragRect = getRect(dragEl$1),\n              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');\n          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;\n          toSortable.captureAnimationState();\n\n          if (!initialFolding) {\n            if (options.animation) {\n              dragEl$1.fromRect = dragRect;\n              multiDragElements.forEach(function (multiDragElement) {\n                multiDragElement.thisAnimationDuration = null;\n\n                if (multiDragElement !== dragEl$1) {\n                  var rect = folding ? getRect(multiDragElement) : dragRect;\n                  multiDragElement.fromRect = rect; // Prepare unfold animation\n\n                  toSortable.addAnimationState({\n                    target: multiDragElement,\n                    rect: rect\n                  });\n                }\n              });\n            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert\n            // properly they must all be removed\n\n\n            removeMultiDragElements();\n            multiDragElements.forEach(function (multiDragElement) {\n              if (children[multiDragIndex]) {\n                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);\n              } else {\n                parentEl.appendChild(multiDragElement);\n              }\n\n              multiDragIndex++;\n            }); // If initial folding is done, the elements may have changed position because they are now\n            // unfolding around dragEl, even though dragEl may not have his index changed, so update event\n            // must be fired here as Sortable will not.\n\n            if (oldIndex === index(dragEl$1)) {\n              var update = false;\n              multiDragElements.forEach(function (multiDragElement) {\n                if (multiDragElement.sortableIndex !== index(multiDragElement)) {\n                  update = true;\n                  return;\n                }\n              });\n\n              if (update) {\n                dispatchSortableEvent('update');\n              }\n            }\n          } // Must be done after capturing individual rects (scroll bar)\n\n\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n          toSortable.animateAll();\n        }\n\n        multiDragSortable = toSortable;\n      } // Remove clones if necessary\n\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        multiDragClones.forEach(function (clone) {\n          clone.parentNode && clone.parentNode.removeChild(clone);\n        });\n      }\n    },\n    nullingGlobal: function nullingGlobal() {\n      this.isMultiDrag = dragStarted = false;\n      multiDragClones.length = 0;\n    },\n    destroyGlobal: function destroyGlobal() {\n      this._deselectMultiDrag();\n\n      off(document, 'pointerup', this._deselectMultiDrag);\n      off(document, 'mouseup', this._deselectMultiDrag);\n      off(document, 'touchend', this._deselectMultiDrag);\n      off(document, 'keydown', this._checkKeyDown);\n      off(document, 'keyup', this._checkKeyUp);\n    },\n    _deselectMultiDrag: function _deselectMultiDrag(evt) {\n      if (typeof dragStarted !== \"undefined\" && dragStarted) return; // Only deselect if selection is in this sortable\n\n      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable\n\n      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click\n\n      if (evt && evt.button !== 0) return;\n\n      while (multiDragElements.length) {\n        var el = multiDragElements[0];\n        toggleClass(el, this.options.selectedClass, false);\n        multiDragElements.shift();\n        dispatchEvent({\n          sortable: this.sortable,\n          rootEl: this.sortable.el,\n          name: 'deselect',\n          targetEl: el,\n          originalEvt: evt\n        });\n      }\n    },\n    _checkKeyDown: function _checkKeyDown(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = true;\n      }\n    },\n    _checkKeyUp: function _checkKeyUp(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = false;\n      }\n    }\n  };\n  return _extends(MultiDrag, {\n    // Static methods & properties\n    pluginName: 'multiDrag',\n    utils: {\n      /**\n       * Selects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be selected\n       */\n      select: function select(el) {\n        var sortable = el.parentNode[expando];\n        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;\n\n        if (multiDragSortable && multiDragSortable !== sortable) {\n          multiDragSortable.multiDrag._deselectMultiDrag();\n\n          multiDragSortable = sortable;\n        }\n\n        toggleClass(el, sortable.options.selectedClass, true);\n        multiDragElements.push(el);\n      },\n\n      /**\n       * Deselects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be deselected\n       */\n      deselect: function deselect(el) {\n        var sortable = el.parentNode[expando],\n            index = multiDragElements.indexOf(el);\n        if (!sortable || !sortable.options.multiDrag || !~index) return;\n        toggleClass(el, sortable.options.selectedClass, false);\n        multiDragElements.splice(index, 1);\n      }\n    },\n    eventProperties: function eventProperties() {\n      var _this3 = this;\n\n      var oldIndicies = [],\n          newIndicies = [];\n      multiDragElements.forEach(function (multiDragElement) {\n        oldIndicies.push({\n          multiDragElement: multiDragElement,\n          index: multiDragElement.sortableIndex\n        }); // multiDragElements will already be sorted if folding\n\n        var newIndex;\n\n        if (folding && multiDragElement !== dragEl$1) {\n          newIndex = -1;\n        } else if (folding) {\n          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');\n        } else {\n          newIndex = index(multiDragElement);\n        }\n\n        newIndicies.push({\n          multiDragElement: multiDragElement,\n          index: newIndex\n        });\n      });\n      return {\n        items: _toConsumableArray(multiDragElements),\n        clones: [].concat(multiDragClones),\n        oldIndicies: oldIndicies,\n        newIndicies: newIndicies\n      };\n    },\n    optionListeners: {\n      multiDragKey: function multiDragKey(key) {\n        key = key.toLowerCase();\n\n        if (key === 'ctrl') {\n          key = 'Control';\n        } else if (key.length > 1) {\n          key = key.charAt(0).toUpperCase() + key.substr(1);\n        }\n\n        return key;\n      }\n    }\n  });\n}\n\nfunction insertMultiDragElements(clonesInserted, rootEl) {\n  multiDragElements.forEach(function (multiDragElement, i) {\n    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(multiDragElement, target);\n    } else {\n      rootEl.appendChild(multiDragElement);\n    }\n  });\n}\n/**\n * Insert multi-drag clones\n * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted\n * @param  {HTMLElement} rootEl\n */\n\n\nfunction insertMultiDragClones(elementsInserted, rootEl) {\n  multiDragClones.forEach(function (clone, i) {\n    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(clone, target);\n    } else {\n      rootEl.appendChild(clone);\n    }\n  });\n}\n\nfunction removeMultiDragElements() {\n  multiDragElements.forEach(function (multiDragElement) {\n    if (multiDragElement === dragEl$1) return;\n    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);\n  });\n}\n\nSortable.mount(new AutoScrollPlugin());\nSortable.mount(Remove, Revert);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sortable);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sortablejs/modular/sortable.esm.js\n");

/***/ }),

/***/ "./src/Common/CSS/GPgeneralWidget.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPgeneralWidget.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL0NTUy9HUGdlbmVyYWxXaWRnZXQuY3NzP2YyZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUGdlbmVyYWxXaWRnZXQuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPgeneralWidget.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPlayerSwitcher.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPlayerSwitcher.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL0NTUy9HUGxheWVyU3dpdGNoZXIuY3NzPzMxZWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUGxheWVyU3dpdGNoZXIuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPlayerSwitcher.css\n");

/***/ }),

/***/ "./src/Common/Controls/LayerSwitcherDOM.js":
/*!*************************************************!*\
  !*** ./src/Common/Controls/LayerSwitcherDOM.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sortablejs */ \"./node_modules/sortablejs/modular/sortable.esm.js\");\n\nvar LayerSwitcherDOM = {\n  /**\n   * Creation du drag and drop\n   *\n   * @param {Object} elementDraggable - Element HTML (DOM) Container\n   * @param {Object} context - this\n   */\n  _createDraggableElement: function _createDraggableElement(elementDraggable, context) {\n    // FIXME retirer cette détection user-agent pour solution propre\n    // option forcefallback pour réparer sortable sous Chrome 97\n    // option forcefallback casse le layerswitcher du portail sous firefox\n    if (navigator.userAgent.match(/chrome|chromium|crios/i)) {\n      sortablejs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create(elementDraggable, {\n        handle: \".GPlayerName\",\n        draggable: \".draggable-layer\",\n        ghostClass: \"GPghostLayer\",\n        animation: 200,\n        forceFallback: true,\n        // Call event function on drag and drop\n        onEnd: function onEnd(e) {\n          // FIXME pas terrrible, mais il faut bien passer ce contexte...\n          context._onDragAndDropLayerClick(e);\n        }\n      });\n    } else {\n      sortablejs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create(elementDraggable, {\n        handle: \".GPlayerName\",\n        draggable: \".draggable-layer\",\n        ghostClass: \"GPghostLayer\",\n        animation: 200,\n        // Call event function on drag and drop\n        onEnd: function onEnd(e) {\n          // FIXME pas terrrible, mais il faut bien passer ce contexte...\n          context._onDragAndDropLayerClick(e);\n        }\n      });\n    }\n  },\n  // ################################################################### //\n  // ######################### Main container ########################## //\n  // ################################################################### //\n\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Creation du container principal (DOM)\n   *\n   * @returns {DOMElement} container - layer switcher DOM element\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPlayerSwitcher\");\n    container.className = \"GPwidget\";\n    return container;\n  },\n\n  /**\n   * Creation du container principal d\"affichage des layers (DOM)\n   *\n   * @returns {DOMElement} input - element for minimizing/maximizing the layer switcher\n   */\n  _createMainLayersShowElement: function _createMainLayersShowElement() {\n    // <!-- Hidden checkbox for minimizing/maximizing -->\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPshowLayersList\");\n    input.type = \"checkbox\";\n    return input;\n  },\n\n  /**\n   * Creation du container principal des layers (DOM)\n   *\n   * @returns {DOMElement} container - layers list container\n   */\n  _createMainLayersElement: function _createMainLayersElement() {\n    // ajout de la liste des layers dans le container principal\n    // <div id=\"GPlayersList\" class=\"GPpanel\">\n    //   (...)\n    // </div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPlayersList\");\n    div.className = \"GPpanel\";\n    return div;\n  },\n\n  /**\n   * Creation du container du picto du controle (DOM)\n   *\n   * @returns {DOMElement} label\n   */\n  _createMainPictoElement: function _createMainPictoElement() {\n    var self = this; // exemple :\n    // <!-- Label for minimizing/maximizing -->\n    // <label id=\"GPshowLayersListPicto\" class=\"GPshowAdvancedToolPicto\" for=\"GPshowLayersList\" title=\"Afficher/masquer le gestionnaire de couches\">\n    //    <span id=\"GPshowLayersListOpen\" class=\"GPshowAdvancedToolOpen\"></span><span id=\"GPshowLayersListClose\"></span>\n    // </label>\n\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowLayersListPicto\");\n    label.className = \"GPshowAdvancedToolPicto\";\n    label.htmlFor = this._addUID(\"GPshowLayersList\");\n    label.title = \"Afficher/masquer le gestionnaire de couches\";\n    var spanOpen = document.createElement(\"span\");\n    spanOpen.id = this._addUID(\"GPshowLayersListOpen\");\n    spanOpen.className = \"GPshowAdvancedToolOpen\";\n    spanOpen.addEventListener(\"click\", function () {\n      if (document.getElementById(self._addUID(\"GPshowLayersList\")).checked) {\n        var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n        for (var i = 0; i < layers.length; i++) {\n          layers[i].className = \"GPlayerInfo\";\n        }\n\n        document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n      }\n    });\n    label.appendChild(spanOpen);\n    var spanClose = document.createElement(\"span\");\n    spanClose.addEventListener(\"click\", function () {\n      if (document.getElementById(self._addUID(\"GPshowLayersList\")).checked) {\n        var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n        for (var i = 0; i < layers.length; i++) {\n          layers[i].className = \"GPlayerInfo\";\n        }\n\n        document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n      }\n    });\n    spanClose.id = self._addUID(\"GPshowLayersListClose\");\n    label.appendChild(spanClose);\n    return label;\n  },\n\n  /**\n   * Creation du container du panneau d\"information (DOM)\n   *\n   * @returns {DOMElement} container\n   */\n  _createMainInfoElement: function _createMainInfoElement() {\n    // gestion du panneau d\"information dans le container principal\n    // <div id=\"GPlayerInfoPanel\" class=\"GPlayerInfoPanelClosed\">...</div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPlayerInfoPanel\");\n    div.className = \"GPpanel GPlayerInfoPanelClosed\";\n    return div;\n  },\n  // ################################################################### //\n  // ######################### Layer container ######################### //\n  // ################################################################### //\n\n  /**\n   * Creation du container du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   * @param {Object} obj.layer - couche (ol ou leaflet)\n   * @param {String} obj.id - identifiant de la couche (pour ol ou leaflet)\n   * @param {String} obj.title - nom de la couche à afficher dans le controle\n   * @param {String} obj.description - description de la couche à afficher\n   * @param {Boolean} obj.visibility - visibilité de la couche dans la carte (true or false)\n   * @param {Float} obj.opacity - opacité de la couche\n   *\n   * @returns {DOMElement} container\n   */\n  _createContainerLayerElement: function _createContainerLayerElement(obj) {\n    // exemple :\n    // <div id=\"GPlayerSwitcher_ID_Layer1\" class=\"GPlayerSwitcher_layer outOfRange\">\n    //     <!-- Basic toolbar : visibility / layer name\n    //     _createBasicToolElement\n    //           _createBasicToolVisibilityElement\n    //           _createBasicToolNameElement\n    //     -->\n    //     <!-- Hidden checkbox + label for showing advanced toolbar\n    //     _createAdvancedToolShowElement\n    //     -->\n    //     <!-- Advanced toolbar : layer info / opacity slider / opacity value / removal\n    //     _createAdvancedToolElement\n    //           _createAdvancedToolDeleteElement\n    //           _createAdvancedToolInformationElement\n    //           _createAdvancedToolOpacityElement\n    //     -->\n    // </div>\n    // <!-- Layer entry in layer list -->\n    // <!-- Every item is marked with layerID, which is defined at layer import -->\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPlayerSwitcher_ID_\" + obj.id);\n    container.className = \"GPlayerSwitcher_layer draggable-layer\"; // ajout des outils basiques (visibility / layer name)\n\n    container.appendChild(this._createBasicToolElement(obj)); // liste des outils avancés (layer info / opacity slider / opacity value / removal)\n\n    var array = this._createAdvancedToolShowElement(obj);\n\n    for (var i = 0; i < array.length; i++) {\n      container.appendChild(array[i]);\n    } // ajout des outils avancés\n\n\n    container.appendChild(this._createAdvancedToolElement(obj));\n    return container;\n  },\n  // ################################################################### //\n  // ############################ Layer tool ########################### //\n  // ################################################################### //\n\n  /**\n   * Creation du container des outils basiques du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createBasicToolElement: function _createBasicToolElement(obj) {\n    // exemple :\n    // <div id=\"GPbasicTools_ID_1\" class=\"GPlayerBasicTools\">\n    //      <!-- _createBasicToolVisibilityElement -->\n    //      <!-- _createBasicToolNameElement -->\n    // </div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPbasicTools_ID_\" + obj.id);\n    div.className = \"GPlayerBasicTools\";\n    div.appendChild(this._createBasicToolNameElement(obj));\n\n    var array = this._createBasicToolVisibilityElement(obj);\n\n    for (var i = 0; i < array.length; i++) {\n      div.appendChild(array[i]);\n    }\n\n    return div;\n  },\n\n  /**\n   * Creation du nom du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createBasicToolNameElement: function _createBasicToolNameElement(obj) {\n    // exemple :\n    // <span id=\"GPname_ID_Layer1\" class=\"GPlayerName\" title=\"Quartiers prioritaires de la ville\">Quartiers prioritaires de la ville</span>\n    var span = document.createElement(\"span\");\n    span.id = this._addUID(\"GPname_ID_\" + obj.id);\n    span.className = \"GPlayerName\";\n    span.title = obj.description || obj.title;\n    span.innerHTML = obj.title;\n    return span;\n  },\n\n  /**\n   * Creation de l'icone de visibilité du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n    * @returns {DOMElement[]} array containing input and label elements\n   */\n  _createBasicToolVisibilityElement: function _createBasicToolVisibilityElement(obj) {\n    // exemple :\n    // <input type=\"checkbox\" id=\"GPvisibility_ID_Layer1\" checked=\"\">\n    // <label for=\"GPvisibility_ID_Layer1\" id=\"GPvisibilityPicto_ID_Layer1\" class=\"GPlayerVisibility\" title=\"Afficher/masquer la couche\"></label>\n    var list = [];\n    var checked = typeof obj.visibility !== \"undefined\" ? obj.visibility : true;\n\n    var id = this._addUID(\"GPvisibility_ID_\" + obj.id);\n\n    var input = document.createElement(\"input\");\n    input.id = id;\n    input.type = \"checkbox\";\n    input.checked = checked;\n    var label = document.createElement(\"label\");\n    label.htmlFor = id;\n    label.id = this._addUID(\"GPvisibilityPicto_ID_\" + obj.id);\n    label.className = \"GPlayerVisibility\";\n    label.title = \"Afficher/masquer la couche\"; // add event for visibility change\n\n    var context = this;\n\n    if (input.addEventListener) {\n      input.addEventListener(\"click\", function (e) {\n        context._onVisibilityLayerClick(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"onclick\", function (e) {\n        context._onVisibilityLayerClick(e);\n      });\n    }\n\n    list.push(input);\n    list.push(label);\n    return list;\n  },\n\n  /**\n   * Creation de l'affichage du menu des outils avancés du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement[]} array containing input and label elements\n   */\n  _createAdvancedToolShowElement: function _createAdvancedToolShowElement(obj) {\n    // <input type=\"checkbox\" id=\"GPshowAdvancedTools_ID_Layer1\">\n    // <label for=\"GPshowAdvancedTools_ID_Layer1\" id=\"GPshowAdvancedToolsPicto_ID_Layer1\" class=\"GPshowMoreOptions GPshowLayerAdvancedTools\" title=\"Plus d'outils\"></label>\n    var list = [];\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowAdvancedToolsPicto_ID_\" + obj.id);\n    label.htmlFor = this._addUID(\"GPshowAdvancedTools_ID_\" + obj.id);\n    label.title = \"Plus d'outils\";\n    label.className = \"GPshowMoreOptions GPshowLayerAdvancedTools\";\n    var input = document.createElement(\"input\");\n    input.type = \"checkbox\";\n    input.id = this._addUID(\"GPshowAdvancedTools_ID_\" + obj.id);\n    list.push(input);\n    list.push(label);\n    return list;\n  },\n\n  /**\n   * Creation du container des outils avancés du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createAdvancedToolElement: function _createAdvancedToolElement(obj) {\n    // exemple :\n    // <div id=\"GPadvancedTools_ID_Layer1\" class=\"GPlayerAdvancedTools\">\n    //     <!-- _createAdvancedToolDeleteElement -->\n    //     <!-- _createAdvancedToolInformationElement -->\n    //     <!-- _createAdvancedToolOpacityElement -->\n    // </div>\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPadvancedTools_ID_\" + obj.id);\n    container.className = \"GPlayerAdvancedTools\";\n    container.appendChild(this._createAdvancedToolDeleteElement(obj)); // si on n'a de l'informations à afficher, on met en place ce composant\n\n    if (obj.title && obj.description) {\n      container.appendChild(this._createAdvancedToolInformationElement(obj));\n    }\n\n    if (obj.type !== \"feature\") {\n      var array = this._createAdvancedToolOpacityElement(obj);\n\n      for (var i = 0; i < array.length; i++) {\n        container.appendChild(array[i]);\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Creation de l'icone de suppression du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createAdvancedToolDeleteElement: function _createAdvancedToolDeleteElement(obj) {\n    // exemple :\n    // <div id=\"GPremove_ID_Layer1\" class=\"GPlayerRemove\" title=\"Supprimer la couche\" onclick=\"GPdropLayer(this);\"></div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPremove_ID_\" + obj.id);\n    div.className = \"GPlayerRemove\";\n    div.title = \"Supprimer la couche\";\n    div.layerId = obj.id;\n    var context = this;\n\n    if (div.addEventListener) {\n      div.addEventListener(\"click\", function (e) {\n        context._onDropLayerClick(e);\n      });\n    } else if (div.attachEvent) {\n      // internet explorer\n      div.attachEvent(\"onclick\", function (e) {\n        context._onDropLayerClick(e);\n      });\n    }\n\n    return div;\n  },\n\n  /**\n   * Creation de l'icone d'information du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createAdvancedToolInformationElement: function _createAdvancedToolInformationElement(obj) {\n    // exemple :\n    // <div id=\"GPinfo_ID_Layer1\" class=\"GPlayerInfo\" title=\"Informations/légende\" onclick=\"GPopenLayerInfo(this);\"></div>\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPinfo_ID_\" + obj.id);\n    div.className = \"GPlayerInfo\";\n    div.title = \"Informations/légende\";\n    div.layerId = obj.id; // add event on click\n\n    var context = this;\n\n    if (div.addEventListener) {\n      div.addEventListener(\"click\", function (e) {\n        context._onOpenLayerInfoClick(e);\n      });\n    } else if (div.attachEvent) {\n      // internet explorer\n      div.attachEvent(\"onclick\", function (e) {\n        context._onOpenLayerInfoClick(e);\n      });\n    }\n\n    return div;\n  },\n\n  /**\n   * Creation de l'icone de gestion de l'opacité du layer (DOM)\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement[]} array of two containers\n   */\n  _createAdvancedToolOpacityElement: function _createAdvancedToolOpacityElement(obj) {\n    // exemple :\n    // <div id=\"GPopacity_ID_Layer1\" class=\"GPlayerOpacity\" title=\"Opacité\">\n    //   <input id=\"GPopacityRange_ID_Layer1\" type=\"range\" value=\"100\" oninput=\"GPchangeLayerOpacity(this);\" onchange=\"GPchangeLayerOpacity(this);\">\n    // </div>\n    // <div class=\"GPlayerOpacityValue\" id=\"GPopacityValueDiv_ID_Layer1\">\n    //   <span id=\"GPopacityValue_ID_Layer1\">100</span>\n    //   %\n    // </div>\n    var list = []; // curseur pour changer l'opacité\n\n    var divO = document.createElement(\"div\");\n    divO.id = this._addUID(\"GPopacity_ID_\" + obj.id);\n    divO.className = \"GPlayerOpacity\";\n    divO.title = \"Opacité\";\n    var opacity = typeof obj.opacity !== \"undefined\" ? obj.opacity : 1;\n    opacity = Math.round(opacity * 100);\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPopacityValueDiv_ID_\" + obj.id);\n    input.type = \"range\";\n    input.value = opacity; // add event for opacity change\n\n    var context = this;\n\n    if (input.addEventListener) {\n      input.addEventListener(\"change\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"onchange\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    }\n\n    if (input.addEventListener) {\n      input.addEventListener(\"input\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    } else if (input.attachEvent) {\n      // internet explorer\n      input.attachEvent(\"oninput\", function (e) {\n        context._onChangeLayerOpacity(e);\n      });\n    }\n\n    divO.appendChild(input); // Valeur d'opacité\n\n    var divC = document.createElement(\"div\");\n    divC.id = this._addUID(\"GPopacityValueDiv_ID_\" + obj.id);\n    divC.className = \"GPlayerOpacityValue\";\n    var span = document.createElement(\"span\");\n    span.id = this._addUID(\"GPopacityValue_ID_\" + obj.id);\n    span.innerHTML = opacity + \"%\";\n    divC.appendChild(span);\n    list.push(divO);\n    list.push(divC);\n    return list;\n  },\n  // ################################################################### //\n  // ############################ Layer info ########################### //\n  // ################################################################### //\n\n  /**\n   * Creation du container du layer info (DOM)\n   *\n   * TODO GPlayerInfoPopup : ???\n   * TODO GPlayerInfoLink  : mettre en forme les échelles !\n   *\n   * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n   *\n   * @returns {DOMElement} container\n   */\n  _createContainerLayerInfoElement: function _createContainerLayerInfoElement(obj) {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPlayerInfoContent\");\n    var title = document.createElement(\"div\");\n    title.id = this._addUID(\"GPlayerInfoTitle\");\n    title.innerHTML = obj.title;\n    container.appendChild(title);\n\n    if (obj.quicklookUrl) {\n      var quick = document.createElement(\"div\");\n      quick.id = this._addUID(\"GPlayerInfoQuicklook\");\n      quick.title = \"Afficher un aperçu de la couche\";\n      var refquick = document.createElement(\"a\");\n      refquick.href = obj.quicklookUrl;\n      refquick.appendChild(quick);\n      container.appendChild(refquick);\n    }\n\n    var close = document.createElement(\"div\");\n    close.id = this._addUID(\"GPlayerInfoClose\");\n    close.title = \"Fermer la fenêtre\";\n    var self = this;\n    /** Call event function on close click */\n\n    var onCloseClick = function onCloseClick() {\n      document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n      var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n      for (var i = 0; i < layers.length; i++) {\n        layers[i].className = \"GPlayerInfo\";\n      }\n    };\n\n    if (close.addEventListener) {\n      close.addEventListener(\"click\", onCloseClick);\n    } else if (close.attachEvent) {\n      // internet explorer\n      close.attachEvent(\"onclick\", onCloseClick);\n    }\n\n    container.appendChild(close);\n    var desc = document.createElement(\"div\");\n    desc.id = this._addUID(\"GPlayerInfoDescription\");\n    desc.innerHTML = obj.description;\n    container.appendChild(desc);\n\n    if (obj.metadata) {\n      var mtd = document.createElement(\"div\");\n      mtd.id = this._addUID(\"GPlayerInfoMetadata\");\n      var mtdtitle = document.createElement(\"div\");\n      mtdtitle.className = \"GPlayerInfoSubtitle\";\n      mtdtitle.innerHTML = \"Métadonnées\";\n      mtd.appendChild(mtdtitle);\n\n      for (var i = 0; i < obj.metadata.length; i++) {\n        var urlmtd = obj.metadata[i].url;\n        var mtdlink = document.createElement(\"div\");\n        mtdlink.className = \"GPlayerInfoLink\";\n        var refmtd = document.createElement(\"a\");\n        refmtd.href = urlmtd;\n        refmtd.innerHTML = urlmtd;\n        mtdlink.appendChild(refmtd);\n        mtd.appendChild(mtdlink);\n      }\n\n      if (obj.metadata.length !== 0) {\n        container.appendChild(mtd);\n      }\n    }\n\n    if (obj.legends) {\n      var lgd = document.createElement(\"div\");\n      lgd.id = this._addUID(\"GPlayerInfoLegend\");\n      var lgdtitle = document.createElement(\"div\");\n      lgdtitle.className = \"GPlayerInfoSubtitle\";\n      lgdtitle.innerHTML = \"Légende\";\n      lgd.appendChild(lgdtitle);\n      var legends = {};\n      var maxScale = obj.maxScaleDenominator || 560000000; // on crée un tableau temporaire pour ordonner les légendes selon le dénominateur d'échelle\n\n      for (var k = 0; k < obj.legends.length; k++) {\n        var minScale = obj.legends[k].minScaleDenominator;\n\n        if (minScale) {\n          var s = minScale.toString();\n          minScale = Math.round(parseInt(s.substring(0, 3), 10) / 10) * Math.pow(10, s.length - 2);\n        } else {\n          minScale = 270;\n        }\n\n        legends[minScale] = obj.legends[k];\n      }\n\n      for (var scale in legends) {\n        if (legends.hasOwnProperty(scale)) {\n          var urllgd = legends[scale].url; // on n'affiche pas les légendes pointant vers \"nolegend.jpg\"\n\n          if (typeof urllgd === \"string\" && urllgd.toLowerCase().indexOf(\"nolegend.jpg\") === -1) {\n            // TODO GPlayerInfoPopup\n            var lgdlink = document.createElement(\"div\");\n            lgdlink.className = \"GPlayerInfoLink\";\n            maxScale = legends[scale].maxScaleDenominator || maxScale;\n            var reflgd = document.createElement(\"a\");\n            reflgd.href = urllgd;\n            reflgd.innerHTML = \"Du 1/\" + scale + \" au 1/\" + maxScale;\n            lgdlink.appendChild(reflgd);\n            lgd.appendChild(lgdlink);\n          } else {\n            delete legends[scale];\n          }\n        }\n      }\n\n      if (Object.keys(legends).length !== 0) {\n        container.appendChild(lgd);\n      }\n    }\n\n    return container;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerSwitcherDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Controls/LayerSwitcherDOM.js\n");

/***/ }),

/***/ "./src/Common/Utils/LoggerByDefault.js":
/*!*********************************************!*\
  !*** ./src/Common/Utils/LoggerByDefault.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * @module LoggerByDefault\n * @alias [private] LoggerByDefault\n * @description\n * ...\n *\n * @example\n * getLogger();\n * disableAll();\n * enableAll();\n */\n\nvar LoggerByDefault = {\n  /**\n   * creation d'un logger statique\n   *\n   * @function getLogger\n   * @param {String} [name=\"default\"] - the logger name\n   * @returns {Object} logger\n   */\n  getLogger: function getLogger(name) {\n    // INFO :\n    // à la compilation en mode production, on substitue false\n    // avec \"true\", ceci desactive les loggers !\n    //\n    // à la compilation en mode developpement, on substitue false\n    // avec \"false\", ceci permet d'avoir les loggers actifs !\n    //\n    // lors d'une utilisation en module es6, il n'y a pas de substitution de false,\n    // les loggers sont donc actifs par defaut !\n    //\n    // > Substitute global constants configured at compile time\n    // cf. webpack.config.js\n    // on masque cette constante afin d'eviter \"referenceerror not defined\"\n    \"false\".match(/true/) ? loglevel__WEBPACK_IMPORTED_MODULE_0__[\"disableAll\"]() : loglevel__WEBPACK_IMPORTED_MODULE_0__[\"enableAll\"]();\n    var logname = name || \"default\";\n    return loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"](logname);\n  },\n\n  /**\n   * desactive tous les loggers\n   * @function disableAll\n   */\n  disableAll: function disableAll() {\n    var loggers = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLoggers\"]();\n\n    for (var key in loggers) {\n      if (Object.hasOwnProperty.call(loggers, key)) {\n        var logger = loggers[key];\n        logger.disableAll();\n      }\n    }\n  },\n\n  /**\n   * active tous les loggers\n   * @function enableAll\n   */\n  enableAll: function enableAll() {\n    var loggers = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLoggers\"]();\n\n    for (var key in loggers) {\n      if (Object.hasOwnProperty.call(loggers, key)) {\n        var logger = loggers[key];\n        logger.enableAll();\n      }\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LoggerByDefault);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcz81YzkwIl0sIm5hbWVzIjpbIkxvZ2dlckJ5RGVmYXVsdCIsImdldExvZ2dlciIsIm5hbWUiLCJtYXRjaCIsIkxvZyIsImxvZ25hbWUiLCJkaXNhYmxlQWxsIiwibG9nZ2VycyIsImtleSIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImxvZ2dlciIsImVuYWJsZUFsbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUlBLGVBQWUsR0FBRztBQUNsQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxXQUFTLEVBQUcsbUJBQVVDLElBQVYsRUFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxxQkFBaUJDLEtBQWpCLENBQXVCLE1BQXZCLENBQUQsR0FBbUNDLG1EQUFBLEVBQW5DLEdBQXNEQSxrREFBQSxFQUF0RDtBQUNBLFFBQUlDLE9BQU8sR0FBR0gsSUFBSSxJQUFJLFNBQXRCO0FBQ0EsV0FBT0Usa0RBQUEsQ0FBY0MsT0FBZCxDQUFQO0FBQ0gsR0F6QmlCOztBQTBCbEI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsWUFBVSxFQUFHLHNCQUFZO0FBQ3JCLFFBQUlDLE9BQU8sR0FBR0gsbURBQUEsRUFBZDs7QUFDQSxTQUFLLElBQU1JLEdBQVgsSUFBa0JELE9BQWxCLEVBQTJCO0FBQ3ZCLFVBQUlFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsSUFBdEIsQ0FBMkJKLE9BQTNCLEVBQW9DQyxHQUFwQyxDQUFKLEVBQThDO0FBQzFDLFlBQU1JLE1BQU0sR0FBR0wsT0FBTyxDQUFDQyxHQUFELENBQXRCO0FBQ0FJLGNBQU0sQ0FBQ04sVUFBUDtBQUNIO0FBQ0o7QUFDSixHQXRDaUI7O0FBdUNsQjtBQUNKO0FBQ0E7QUFDQTtBQUNJTyxXQUFTLEVBQUcscUJBQVk7QUFDcEIsUUFBSU4sT0FBTyxHQUFHSCxtREFBQSxFQUFkOztBQUNBLFNBQUssSUFBTUksR0FBWCxJQUFrQkQsT0FBbEIsRUFBMkI7QUFDdkIsVUFBSUUsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxJQUF0QixDQUEyQkosT0FBM0IsRUFBb0NDLEdBQXBDLENBQUosRUFBOEM7QUFDMUMsWUFBTUksTUFBTSxHQUFHTCxPQUFPLENBQUNDLEdBQUQsQ0FBdEI7QUFDQUksY0FBTSxDQUFDQyxTQUFQO0FBQ0g7QUFDSjtBQUNKO0FBbkRpQixDQUF0QjtBQXNEZWIsOEVBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIExvZyBmcm9tIFwibG9nbGV2ZWxcIjtcblxuLyoqXG4gKiBAbW9kdWxlIExvZ2dlckJ5RGVmYXVsdFxuICogQGFsaWFzIFtwcml2YXRlXSBMb2dnZXJCeURlZmF1bHRcbiAqIEBkZXNjcmlwdGlvblxuICogLi4uXG4gKlxuICogQGV4YW1wbGVcbiAqIGdldExvZ2dlcigpO1xuICogZGlzYWJsZUFsbCgpO1xuICogZW5hYmxlQWxsKCk7XG4gKi9cbnZhciBMb2dnZXJCeURlZmF1bHQgPSB7XG4gICAgLyoqXG4gICAgICogY3JlYXRpb24gZCd1biBsb2dnZXIgc3RhdGlxdWVcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvbiBnZXRMb2dnZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWU9XCJkZWZhdWx0XCJdIC0gdGhlIGxvZ2dlciBuYW1lXG4gICAgICogQHJldHVybnMge09iamVjdH0gbG9nZ2VyXG4gICAgICovXG4gICAgZ2V0TG9nZ2VyIDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgLy8gSU5GTyA6XG4gICAgICAgIC8vIMOgIGxhIGNvbXBpbGF0aW9uIGVuIG1vZGUgcHJvZHVjdGlvbiwgb24gc3Vic3RpdHVlIF9fUFJPRFVDVElPTl9fXG4gICAgICAgIC8vIGF2ZWMgXCJ0cnVlXCIsIGNlY2kgZGVzYWN0aXZlIGxlcyBsb2dnZXJzICFcbiAgICAgICAgLy9cbiAgICAgICAgLy8gw6AgbGEgY29tcGlsYXRpb24gZW4gbW9kZSBkZXZlbG9wcGVtZW50LCBvbiBzdWJzdGl0dWUgX19QUk9EVUNUSU9OX19cbiAgICAgICAgLy8gYXZlYyBcImZhbHNlXCIsIGNlY2kgcGVybWV0IGQnYXZvaXIgbGVzIGxvZ2dlcnMgYWN0aWZzICFcbiAgICAgICAgLy9cbiAgICAgICAgLy8gbG9ycyBkJ3VuZSB1dGlsaXNhdGlvbiBlbiBtb2R1bGUgZXM2LCBpbCBuJ3kgYSBwYXMgZGUgc3Vic3RpdHV0aW9uIGRlIF9fUFJPRFVDVElPTl9fLFxuICAgICAgICAvLyBsZXMgbG9nZ2VycyBzb250IGRvbmMgYWN0aWZzIHBhciBkZWZhdXQgIVxuICAgICAgICAvL1xuICAgICAgICAvLyA+IFN1YnN0aXR1dGUgZ2xvYmFsIGNvbnN0YW50cyBjb25maWd1cmVkIGF0IGNvbXBpbGUgdGltZVxuICAgICAgICAvLyBjZi4gd2VicGFjay5jb25maWcuanNcbiAgICAgICAgLy8gb24gbWFzcXVlIGNldHRlIGNvbnN0YW50ZSBhZmluIGQnZXZpdGVyIFwicmVmZXJlbmNlZXJyb3Igbm90IGRlZmluZWRcIlxuICAgICAgICAoXCJfX1BST0RVQ1RJT05fX1wiLm1hdGNoKC90cnVlLykpID8gTG9nLmRpc2FibGVBbGwoKSA6IExvZy5lbmFibGVBbGwoKTtcbiAgICAgICAgdmFyIGxvZ25hbWUgPSBuYW1lIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgICByZXR1cm4gTG9nLmdldExvZ2dlcihsb2duYW1lKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGRlc2FjdGl2ZSB0b3VzIGxlcyBsb2dnZXJzXG4gICAgICogQGZ1bmN0aW9uIGRpc2FibGVBbGxcbiAgICAgKi9cbiAgICBkaXNhYmxlQWxsIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbG9nZ2VycyA9IExvZy5nZXRMb2dnZXJzKCk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGxvZ2dlcnMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChsb2dnZXJzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9nZ2VyID0gbG9nZ2Vyc1trZXldO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kaXNhYmxlQWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGFjdGl2ZSB0b3VzIGxlcyBsb2dnZXJzXG4gICAgICogQGZ1bmN0aW9uIGVuYWJsZUFsbFxuICAgICAqL1xuICAgIGVuYWJsZUFsbCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxvZ2dlcnMgPSBMb2cuZ2V0TG9nZ2VycygpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsb2dnZXJzKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobG9nZ2Vycywga2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZ2dlciA9IGxvZ2dlcnNba2V5XTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZW5hYmxlQWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXJCeURlZmF1bHQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Utils/LoggerByDefault.js\n");

/***/ }),

/***/ "./src/Common/Utils/SelectorID.js":
/*!****************************************!*\
  !*** ./src/Common/Utils/SelectorID.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * @module SelectorID\n * @alias [private] SelectorID\n * @description\n * formalisme d'un tag ID :\n * -> NAME(_ORDER)-1460636385836\n *\n * @example\n * Ex.\n *   GProutePoints-1460636385836\n *   GProutePoint_10-1460636385836\n */\nvar SelectorID = {\n  /**\n   * Construction d'un identifiant statique basé sur le timestamp,\n   * et qui s'incremente de +1 à chaque appel\n   * @function generate\n   */\n  generate: function () {\n    var timestamp = Math.floor(Date.now());\n    return function () {\n      return timestamp++;\n    };\n  }(),\n\n  /**\n   * nom du tag\n   * @function name\n   * @param {String} id - the id\n   * @returns {String} index\n   */\n  name: function name(id) {\n    var name = null;\n    var i = id.lastIndexOf(\"-\");\n\n    if (i === -1) {\n      name = id;\n    } else {\n      name = id.substring(0, i);\n    }\n\n    return name;\n  },\n\n  /**\n   * numero d'identifiant du tag\n   *\n   * @function index\n   * @param {String} id - the id\n   * @returns {String} index\n   */\n  index: function index(id) {\n    var index = null;\n    var name = this.name(id); // if (name !== id) {\n\n    var i = name.lastIndexOf(\"_\");\n\n    if (i !== -1) {\n      index = name.substring(i + 1);\n    } // }\n\n\n    return index;\n  },\n\n  /**\n   * uuid du tag\n   *\n   * @function uuid\n   * @param {String} id - the id\n   * @returns {String} uuid\n   */\n  uuid: function uuid(id) {\n    var uuid = null;\n    var i = id.lastIndexOf(\"-\");\n\n    if (i !== -1) {\n      uuid = parseInt(id.substring(i + 1), 10);\n    }\n\n    return uuid;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (SelectorID);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL1V0aWxzL1NlbGVjdG9ySUQuanM/ZTZjNSJdLCJuYW1lcyI6WyJTZWxlY3RvcklEIiwiZ2VuZXJhdGUiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwibmFtZSIsImlkIiwiaSIsImxhc3RJbmRleE9mIiwic3Vic3RyaW5nIiwiaW5kZXgiLCJ1dWlkIiwicGFyc2VJbnQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsVUFBVSxHQUFHO0FBRWI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxVQUFRLEVBQUksWUFBWTtBQUNwQixRQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxJQUFJLENBQUNDLEdBQUwsRUFBWCxDQUFoQjtBQUNBLFdBQU8sWUFBWTtBQUNmLGFBQU9KLFNBQVMsRUFBaEI7QUFDSCxLQUZEO0FBR0gsR0FMVSxFQVBFOztBQWNiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJSyxNQUFJLEVBQUcsY0FBVUMsRUFBVixFQUFjO0FBQ2pCLFFBQUlELElBQUksR0FBRyxJQUFYO0FBRUEsUUFBSUUsQ0FBQyxHQUFHRCxFQUFFLENBQUNFLFdBQUgsQ0FBZSxHQUFmLENBQVI7O0FBQ0EsUUFBSUQsQ0FBQyxLQUFLLENBQUMsQ0FBWCxFQUFjO0FBQ1ZGLFVBQUksR0FBR0MsRUFBUDtBQUNILEtBRkQsTUFFTztBQUNIRCxVQUFJLEdBQUdDLEVBQUUsQ0FBQ0csU0FBSCxDQUFhLENBQWIsRUFBZ0JGLENBQWhCLENBQVA7QUFDSDs7QUFFRCxXQUFPRixJQUFQO0FBQ0gsR0EvQlk7O0FBaUNiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lLLE9BQUssRUFBRyxlQUFVSixFQUFWLEVBQWM7QUFDbEIsUUFBSUksS0FBSyxHQUFHLElBQVo7QUFFQSxRQUFJTCxJQUFJLEdBQUcsS0FBS0EsSUFBTCxDQUFVQyxFQUFWLENBQVgsQ0FIa0IsQ0FJbEI7O0FBQ0EsUUFBSUMsQ0FBQyxHQUFHRixJQUFJLENBQUNHLFdBQUwsQ0FBaUIsR0FBakIsQ0FBUjs7QUFDQSxRQUFJRCxDQUFDLEtBQUssQ0FBQyxDQUFYLEVBQWM7QUFDVkcsV0FBSyxHQUFHTCxJQUFJLENBQUNJLFNBQUwsQ0FBZUYsQ0FBQyxHQUFHLENBQW5CLENBQVI7QUFDSCxLQVJpQixDQVNsQjs7O0FBRUEsV0FBT0csS0FBUDtBQUNILEdBcERZOztBQXNEYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxNQUFJLEVBQUcsY0FBVUwsRUFBVixFQUFjO0FBQ2pCLFFBQUlLLElBQUksR0FBRyxJQUFYO0FBRUEsUUFBSUosQ0FBQyxHQUFHRCxFQUFFLENBQUNFLFdBQUgsQ0FBZSxHQUFmLENBQVI7O0FBQ0EsUUFBSUQsQ0FBQyxLQUFLLENBQUMsQ0FBWCxFQUFjO0FBQ1ZJLFVBQUksR0FBR0MsUUFBUSxDQUFDTixFQUFFLENBQUNHLFNBQUgsQ0FBYUYsQ0FBQyxHQUFHLENBQWpCLENBQUQsRUFBc0IsRUFBdEIsQ0FBZjtBQUNIOztBQUVELFdBQU9JLElBQVA7QUFDSDtBQXRFWSxDQUFqQjtBQTBFZWIseUVBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL1NlbGVjdG9ySUQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgU2VsZWN0b3JJRFxuICogQGFsaWFzIFtwcml2YXRlXSBTZWxlY3RvcklEXG4gKiBAZGVzY3JpcHRpb25cbiAqIGZvcm1hbGlzbWUgZCd1biB0YWcgSUQgOlxuICogLT4gTkFNRShfT1JERVIpLTE0NjA2MzYzODU4MzZcbiAqXG4gKiBAZXhhbXBsZVxuICogRXguXG4gKiAgIEdQcm91dGVQb2ludHMtMTQ2MDYzNjM4NTgzNlxuICogICBHUHJvdXRlUG9pbnRfMTAtMTQ2MDYzNjM4NTgzNlxuICovXG52YXIgU2VsZWN0b3JJRCA9IHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGlvbiBkJ3VuIGlkZW50aWZpYW50IHN0YXRpcXVlIGJhc8OpIHN1ciBsZSB0aW1lc3RhbXAsXG4gICAgICogZXQgcXVpIHMnaW5jcmVtZW50ZSBkZSArMSDDoCBjaGFxdWUgYXBwZWxcbiAgICAgKiBAZnVuY3Rpb24gZ2VuZXJhdGVcbiAgICAgKi9cbiAgICBnZW5lcmF0ZSA6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcCsrO1xuICAgICAgICB9O1xuICAgIH0pKCksXG5cbiAgICAvKipcbiAgICAgKiBub20gZHUgdGFnXG4gICAgICogQGZ1bmN0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBpbmRleFxuICAgICAqL1xuICAgIG5hbWUgOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xuXG4gICAgICAgIHZhciBpID0gaWQubGFzdEluZGV4T2YoXCItXCIpO1xuICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5hbWUgPSBpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hbWUgPSBpZC5zdWJzdHJpbmcoMCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbnVtZXJvIGQnaWRlbnRpZmlhbnQgZHUgdGFnXG4gICAgICpcbiAgICAgKiBAZnVuY3Rpb24gaW5kZXhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBpbmRleFxuICAgICAqL1xuICAgIGluZGV4IDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG51bGw7XG5cbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUoaWQpO1xuICAgICAgICAvLyBpZiAobmFtZSAhPT0gaWQpIHtcbiAgICAgICAgdmFyIGkgPSBuYW1lLmxhc3RJbmRleE9mKFwiX1wiKTtcbiAgICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hbWUuc3Vic3RyaW5nKGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1dWlkIGR1IHRhZ1xuICAgICAqXG4gICAgICogQGZ1bmN0aW9uIHV1aWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB1dWlkXG4gICAgICovXG4gICAgdXVpZCA6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdXVpZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIGkgPSBpZC5sYXN0SW5kZXhPZihcIi1cIik7XG4gICAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICAgICAgdXVpZCA9IHBhcnNlSW50KGlkLnN1YnN0cmluZyhpICsgMSksIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1dWlkO1xuICAgIH1cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0b3JJRDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/Utils/SelectorID.js\n");

/***/ }),

/***/ "./src/Leaflet/CSS/Controls/LayerSwitcher/GPlayerSwitcherLeaflet.css":
/*!***************************************************************************!*\
  !*** ./src/Leaflet/CSS/Controls/LayerSwitcher/GPlayerSwitcherLeaflet.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DU1MvQ29udHJvbHMvTGF5ZXJTd2l0Y2hlci9HUGxheWVyU3dpdGNoZXJMZWFmbGV0LmNzcz80ZjQ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL0xlYWZsZXQvQ1NTL0NvbnRyb2xzL0xheWVyU3dpdGNoZXIvR1BsYXllclN3aXRjaGVyTGVhZmxldC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Leaflet/CSS/Controls/LayerSwitcher/GPlayerSwitcherLeaflet.css\n");

/***/ }),

/***/ "./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css":
/*!****************************************************!*\
  !*** ./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DU1MvR1BnZW5lcmFsV2lkZ2V0TGVhZmxldC5jc3M/NjAxMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9MZWFmbGV0L0NTUy9HUGdlbmVyYWxXaWRnZXRMZWFmbGV0LmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css\n");

/***/ }),

/***/ "./src/Leaflet/Controls/LayerSwitcher.js":
/*!***********************************************!*\
  !*** ./src/Leaflet/Controls/LayerSwitcher.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Common_CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/CSS/GPgeneralWidget.css */ \"./src/Common/CSS/GPgeneralWidget.css\");\n/* harmony import */ var _Common_CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Common_CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Common_CSS_GPlayerSwitcher_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/CSS/GPlayerSwitcher.css */ \"./src/Common/CSS/GPlayerSwitcher.css\");\n/* harmony import */ var _Common_CSS_GPlayerSwitcher_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Common_CSS_GPlayerSwitcher_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _CSS_GPgeneralWidgetLeaflet_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CSS/GPgeneralWidgetLeaflet.css */ \"./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css\");\n/* harmony import */ var _CSS_GPgeneralWidgetLeaflet_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPgeneralWidgetLeaflet_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _CSS_Controls_LayerSwitcher_GPlayerSwitcherLeaflet_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../CSS/Controls/LayerSwitcher/GPlayerSwitcherLeaflet.css */ \"./src/Leaflet/CSS/Controls/LayerSwitcher/GPlayerSwitcherLeaflet.css\");\n/* harmony import */ var _CSS_Controls_LayerSwitcher_GPlayerSwitcherLeaflet_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_LayerSwitcher_GPlayerSwitcherLeaflet_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Controls_LayerSwitcherDOM__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Common/Controls/LayerSwitcherDOM */ \"./src/Common/Controls/LayerSwitcherDOM.js\");\n\n\n\n\n\n\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getLogger(\"layerswitcher\");\n/**\n * @classdesc\n *\n * Leaflet Control Class to manage map layers : their order, visibility and opacity, and display their informations (title, description, legends, metadata...)\n *\n * Use {@link module:Controls.LayerSwitcher L.geoportalControl.LayerSwitcher()} factory to create instances of that class.\n *\n * **Extends** Leaflet <a href=\"http://leafletjs.com/reference.html#control-layers\" target=\"_blank\">L.Control.Layers</a> native class.\n *\n * @namespace\n * @alias L.geoportalControl.LayerSwitcher\n */\n\nvar LayerSwitcher = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Control.Layers.extend(\n/** @lends L.geoportalControl.LayerSwitcher.prototype */\n{\n  includes: _Common_Controls_LayerSwitcherDOM__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n\n  /**\n   * options by default\n   * (extend to L.Control.Layers)\n   *\n   * @private\n   */\n  options: {\n    collapsed: true,\n    position: \"topright\",\n    autoZIndex: true,\n    layers: []\n  },\n  // ################################################################### //\n  // ##################### Methodes surchargées ######################## //\n  // ################################################################### //\n\n  /**\n   * @constructor LayerSwitcher\n   *\n   * @private\n   * @alias LayerSwitcher\n   * @extends {L.Control}\n   * @param {Object} options - options of component\n   * @param {String}  [options.position] - position of component into the map, 'topleft' by default\n   * @param {Boolean} [options.collapsed = true] - collapse mode, false by default\n   * @param {Array} [options.layers] - list of layers to be configured. Each array element is an object, with following properties :\n   * @param {Object} [options.layers.layer] - layer object\n   * @param {Boolean} [options.layers.display] - display layer in widget layer list\n   * @param {String} [options.layers.config.visibility] - layer visibility on map\n   * @param {String} [options.layers.config.title] - layer alias, to be displayed in widget layer list. E.g. : \"Cartes IGN\"\n   * @param {String} [options.layers.config.description] - layer description, to be displayed on title hover, or in layer information panel.\n   * @param {String} [options.layers.config.quicklookUrl] - link to a quick look image for this layer.\n   * @param {Array} [options.layers.config.legends] - array of layer legends. Each array element is an object, with following properties :\n   *      - url (String, mandatory) : link to a legend\n   *      - minScaleDenominator (Number, optional) : min scale denominator for legend validity.\n   * @param {Array} [options.layers.config.metadata] - array of layer metadata. Each array element is an object, with property url (String, mandatory) : link to a metadata\n   *\n   * @example\n   *  layers = [\n   *      {\n   *          layer : wms1,\n   *          display : false,\n   *          config : {\n   *              title : \"test layer name 1\",\n   *              description : \"test layer desc 1\",\n   *          }\n   *      }\n   *  ]\n   *  options = {\n   *      position : \"topright\",\n   *      collapsed : true,\n   *      layers : layers\n   *  }\n   *\n   *  var layerSwitcher = L.geoportalControl.LayerSwitcher(options);\n   */\n  initialize: function initialize(options) {\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Util.setOptions(this, options); // uuid\n\n    this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].generate(); // il faut recuperer tous les layers de la carte (cf. onAdd).\n    // si une configuration de layers est renseignée, on exploite cette\n    // information pour les layers renseignés.\n    // Par contre, pour ceux qui n'ont pas de configuration, on exploite\n    // les informations issues de l'autoconf pour les layers IGN,\n    // et, pour les layers non IGN, on gére avec l'ID pours les valeurs\n    // de titre ou description  ...\n    // a ton une configuration des layers ?\n\n    this._hasLayersConfig = !(!this.options.layers || Object.keys(this.options.layers).length === 0); // configuration des layers\n\n    this._layersConfig = this._hasLayersConfig ? this.options.layers : []; // liste des layers (c'est l'interface avec le dom !)\n\n    this._layers = {}; // indice : ordre des layers sur la carte\n    // plus c'est haut, plus c'est au dessus de la pile\n\n    this._lastZIndex = 0; // si on a une configuration de layers, on l'exploite tout de suite...\n\n    if (this._hasLayersConfig) {\n      for (var i = 0; i < this._layersConfig.length; i++) {\n        var obj = this._layersConfig[i]; // signature de la fonction pour une compatibilité avec leaflet...\n\n        this._addLayer(obj.layer, null, true);\n      }\n    }\n  },\n\n  /**\n   * Method 'onAdd'\n   * (extend to L.Control.Layers)\n   * Method to add the control on the map.\n   *\n   * @param {Object} map - L.Map\n   * @returns {HTMLElement} container\n   *\n   * @private\n   */\n  onAdd: function onAdd(map) {\n    // on charge tous les layers dans le controle avec une\n    // configuration automatique des layers pour ceux qui ne sont pas\n    // renseignés.\n    var layersMap = map._layers; // on est dans le cas où nous avons des layers ajoutés à la carte\n\n    if (Object.keys(layersMap).length !== 0) {\n      // pour gerer l'ordre d'affichage des layers sur la map\n      // ainsi que dans le controle, on veut le fonctionnement suivant :\n      // layers ID   : [21  , 23  , 25  , 27]\n      // layers Map  : [21:1, 23:2, 25:3, 27:4]\n      // mais l'ordre dans le controle doit être inversé\n      // layers Ctrl : [27, 25, 23, 21], et ceci sera realisé lors de\n      // la creation du DOM pour chaque layer (cf. _update())\n      var layersKeys = Object.keys(layersMap); // trie\n\n      this._lastZIndex = 0;\n\n      for (var i = 0; i < layersKeys.length; i++) {\n        var layerId = layersKeys[i]; // gestion des ordres d'affichage des layers\n\n        if (this.options.autoZIndex && layersMap[layerId].setZIndex) {\n          this._lastZIndex++;\n          layersMap[layerId].setZIndex(this._lastZIndex);\n        } // y'a t il une configuration des layers ?\n        // si oui, le layer renseigné a déjà été pris en compte dans\n        // le constructeur..., on passe à la suite...\n\n\n        if (this._hasLayersConfig) {\n          if (this._layers[layerId]) {\n            continue;\n          }\n        } // sans configuration, on gére en mode auto le layer.\n        // on utilise cette methode\n        // this.addOverlay() -> this._addLayer()...\n\n\n        this.addOverlay(layersMap[layerId]);\n      }\n    } // FIXME au cas où les layers n'ont pas été renseignés sur la carte\n    // (via addTo ou options.layers), on decide de prendre ceux qui\n    // sont renseignés dans la configuration ?\n\n\n    if (Object.keys(layersMap).length === 0) {\n      var config = this._layersConfig;\n      this._lastZIndex = 0;\n\n      for (var j = 0; j < config.length; j++) {\n        var layer = config[j].layer;\n\n        if (!map.hasLayer(layer)) {\n          // on ajoute le layer à la carte\n          map.addLayer(layer); // on met en place la structure\n\n          this.addOverlay(layer, null); // on gère l'ordres d'affichage des layers\n\n          if (this.options.autoZIndex && layer.setZIndex) {\n            this._lastZIndex++;\n            layer.setZIndex(this._lastZIndex);\n          }\n        }\n      }\n    } // mise à jour des visibilités (au niveau du DOM, oeil coché ou non...)\n\n\n    for (var k in this._layers) {\n      if (this._layers.hasOwnProperty(k)) {\n        var obj = this._layers[k];\n        var _layer = obj.layer;\n        var _visibility = obj.visibility; // par defaut, la visibilité de la couche est active, donc avec un oeil non coché !\n\n        if (!_visibility) {\n          // on met à jour la liste des layers à afficher !\n          this._updateVisibilityLayer(_layer);\n        }\n      }\n    } // le constructeur retourne this._container !\n    // on appelle la methode hérité car elle va realisée le boulot :\n    // - _initLayout\n    // - _update\n    // - evenements sur la carte : layeradd + layerremove\n    // this._container = L.Control.Layers.prototype.onAdd.call(this, map);\n\n\n    this._initLayout();\n\n    this._update();\n\n    map.on(\"layeradd\", this._onLayerChange, this);\n    map.on(\"layerremove\", this._onLayerChange, this); // expiremental !\n\n    map.eachLayer(function (layer) {\n      // ecouteur sur la visibilité des attributions d'un layer IGN\n      layer.on(\"visibilitychange\", function () {\n        logger.trace(\"visibilitychange\", layer);\n      }, this); // ecouteur sur la liste des attributions d'un layer IGN\n\n      layer.on(\"attributionchange\", function () {\n        logger.trace(\"attributionchange\", layer);\n      }, this);\n    });\n    return this._container;\n  },\n\n  /**\n   * this method is called when the control is removed from the map\n   * and removes events on map.\n   * @param {Object} map - the map\n   *\n   * @private\n   */\n  onRemove: function onRemove(map) {\n    map.off(\"layeradd\", this._onLayerChange, this);\n    map.off(\"layerremove\", this._onLayerChange, this);\n  },\n\n  /**\n   * Method '_addLayer'\n   * (overwritten : L.Control.Layers)\n   * Methode creation of a useful structure for the interface with the DOM\n   * Method private call by this.initialize() or this.addOverlay()\n   *\n   * @example\n   * {\n   *    layer : objectlayer,\n   *    id : id,\n   *    title : title,\n   *    description : description\n   *    (...)\n   * };\n   * @param {Object} layer - object type 'L.TileLayer'\n   * @param {String} name - layer name or title\n   * @param {Boolean} overlay - overlay or not\n   *\n   * @private\n   */\n  _addLayer: function _addLayer(layer, name, overlay) {\n    // id du layer (IGN ou non)\n    var id = layer._geoportal_id ? layer._geoportal_id : layer._leaflet_id; // pas d'ID !?\n    // le layer n'est pas chargé dans la carte...\n\n    if (typeof id === \"undefined\") {\n      return;\n    } // recherche de la config pour un layer donné\n\n\n    var layerConfig = {};\n\n    for (var i in this._layersConfig) {\n      if (this._layersConfig.hasOwnProperty(i)) {\n        if (id === leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(this._layersConfig[i].layer)) {\n          layerConfig = this._layersConfig[i].config; // display\n          // ce layer n'est pas pris en compte dans le controle\n          // mais il peut être affiché dans la map\n          // si au préalable, le client l'a ajouté...\n\n          var display = typeof this._layersConfig[i].display !== \"undefined\" ? this._layersConfig[i].display : true;\n\n          if (!display) {\n            return;\n          }\n\n          break;\n        }\n      }\n    } // construit un objet simplifié pour le dom,\n    // par defaut, on prend en compte les layers de type IGN\n    // (info de l'autoconf).\n\n\n    this._layers[id] = {\n      layer: layer,\n      id: id,\n      overlay: overlay,\n      // not use !\n      title: layer._geoportal_id && layer._title ? layer._title : name || id,\n      description: layer._geoportal_id && layer._description ? layer._description : name || id,\n      visibility: true,\n      // par defaut, sauf si surcharge via la config...\n      legends: layer._geoportal_id ? layer._legends : null,\n      metadata: layer._geoportal_id ? layer._metadata : null,\n      quicklookUrl: layer._geoportal_id ? layer._quicklookUrl : null\n    }; // surcharge la config ci dessus avec les options de configuration saisies\n\n    if (layerConfig && Object.keys(layerConfig).length) {\n      leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Util.extend(this._layers[id], layerConfig);\n    } // mise à jour de la visibilité\n\n\n    var _visibility = this._layers[id].visibility;\n\n    if (layer._geoportal_id) {\n      // mise à jour de la visibilité des attributions pour un layer IGN\n      layer.setVisible(_visibility);\n    }\n\n    if (!_visibility) {\n      // on met à jour la liste des layers à afficher !\n      this._updateVisibilityLayer(layer);\n    }\n  },\n\n  /**\n   * Method 'addTo'\n   * (overwritten : L.Control.Layers because of exception with _expandIfNotCollapsed())\n   *\n   * @param {Object} map - the map\n   *\n   * @returns {Object} this\n   */\n  addTo: function addTo(map) {\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Control.prototype.addTo.call(this, map);\n    return this;\n  },\n\n  /**\n   * Creation of layers of container\n   * (extend to L.Control.Layers)\n   *\n   * Method private call by this.onAdd()\n   *\n   * @private\n   */\n  _initLayout: function _initLayout() {\n    // fonctionnement lors de l'initialisation :\n    // onAdd -> this._update     -> this._addItem (on boucle sur layers)\n    // onAdd -> this._initLayout\n    // creation du container principal\n    var container = this._container = this._createMainContainerElement(); // ajout dans le container principal d'affichage des layers\n\n\n    var input = this._createMainLayersShowElement();\n\n    container.appendChild(input); // gestion du mode \"collapsed\"\n\n    if (!this.options.collapsed) {\n      input.checked = true;\n    } // ajout dans le container principal de la liste des layers\n\n\n    var divL = this._overlaysList = this._createMainLayersElement();\n\n    container.appendChild(divL); // ajout dans le container principal du picto du controle\n\n    var picto = this._createMainPictoElement();\n\n    container.appendChild(picto); // ajout dans le container principal du panneau d'information\n\n    var divI = this._createMainInfoElement();\n\n    container.appendChild(divI); // creation du mode draggable\n\n    this._createDraggableElement(this._overlaysList, this); // desactivation des evenements qui peuvent interférer avec la carte\n\n\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomEvent.disableClickPropagation(container).disableScrollPropagation(container); // gestion des evenements en interaction avec la carte\n\n    this._map.on(\"moveend\", this._onOutOfRangeLayerZoom, this); // gestion des CSS en fonction du placement du controle\n\n\n    switch (this.getPosition()) {\n      case \"topright\":\n        container.style.position = \"relative\";\n        container.style.top = \"0\";\n        container.style.right = \"0\";\n        break;\n\n      case \"topleft\":\n        container.style.position = \"relative\";\n        container.style.top = \"0\";\n        container.style.right = \"initial\";\n        picto.style[\"float\"] = \"left\";\n        divL.style.borderBottomRightRadius = \"5px\";\n        divL.style.borderBottomLeftRadius = \"0\";\n        divI.style.right = \"initial\";\n        divI.style.left = \"190px\";\n        break;\n\n      case \"bottomleft\":\n        container.style.position = \"relative\";\n        container.style.top = \"0\";\n        container.style.right = \"initial\";\n        picto.style[\"float\"] = \"left\";\n        divL.style.borderBottomRightRadius = \"5px\";\n        divL.style.borderBottomLeftRadius = \"0\";\n        divI.style.right = \"initial\";\n        divI.style.left = \"190px\"; // divI.style.top = \"initial\";\n        // divI.style.bottom = \"190px\";\n\n        break;\n\n      case \"bottomright\":\n        container.style.position = \"relative\";\n        container.style.top = \"0\";\n        container.style.right = \"0\"; // divI.style.top = \"initial\";\n        // divI.style.bottom = \"190px\";\n\n        break;\n\n      default:\n        container.style.position = \"relative\";\n        container.style.top = \"0\";\n        container.style.right = \"0\";\n    }\n  },\n\n  /**\n   * Update the construction of DOM for each layer\n   * (extend to L.Control.Layers)\n   *\n   * Method private call by this.onAdd()\n   *\n   * @private\n   */\n  _update: function _update() {\n    if (!this._container) {\n      return;\n    }\n\n    this._overlaysList.innerHTML = \"\";\n    var layersId = [];\n\n    for (var i in this._layers) {\n      if (this._layers.hasOwnProperty(i)) {\n        layersId.push(i);\n      }\n    } // inversion du sens des layers dans le controle\n    // car on veut le même ordre que sur la map, et comme je suis un peu\n    // parano, je re-trie la liste...\n\n\n    var layers = layersId.sort(function (a, b) {\n      var ia = parseInt(a, 10);\n      var ib = parseInt(b, 10);\n      return ia - ib;\n    }).reverse();\n\n    for (var j = 0; j < layers.length; j++) {\n      var id = layers[j];\n      var obj = this._layers[id];\n\n      this._addItem(obj);\n    }\n  },\n\n  /**\n   * Construction of the DOM for each layer\n   * (extend to L.Control.Layers)\n   *\n   * Method private call by this._update()\n   *\n   * @private\n   * @param {Object} obj - layer\n   * @returns {HTMLElement} container\n   */\n  _addItem: function _addItem(obj) {\n    logger.log(\"_addItem\", obj);\n    obj.opacity = obj.layer.options.opacity; // ajout de cette option !\n\n    var container = this._createContainerLayerElement(obj); // gestion outOfRange\n\n\n    obj.layer.options.minZoom > this._map.getZoom() || obj.layer.options.maxZoom < this._map.getZoom() ? leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.addClass(container, \"outOfRange\") : leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.removeClass(container, \"outOfRange\"); // ajout du container dans la liste des layers (de type overlay uniquement !)\n\n    this._overlaysList.appendChild(container);\n\n    return container;\n  },\n\n  /**\n   * Event onLayer change\n   * (extend to L.Control.Layers because of version 1.0.0)\n   *\n   * @private\n   * @param {Event} e - event\n   */\n  _onLayerChange: function _onLayerChange(e) {\n    var obj = this._layers[leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(e.layer)];\n\n    if (!obj) {\n      return;\n    }\n\n    if (!this._handlingClick) {\n      this._update();\n    }\n\n    this._map.fire(e.type === \"layeradd\" ? \"overlayadd\" : \"overlayremove\", obj);\n  },\n\n  /**\n   * Event onLayer remove\n   * (extend to L.Control.Layers because of version 1.0.0)\n   *\n   * @private\n   * @param {Object} layer - event\n   * @returns {Object} layer\n   */\n  removeLayer: function removeLayer(layer) {\n    // clean DOM !\n    var id = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(layer);\n    delete this._layers[id];\n\n    this._update(); // clean Layers\n\n\n    var map = this._map;\n\n    if (map) {\n      if (map.hasLayer(layer)) {\n        map.removeLayer(layer);\n      }\n    }\n\n    return this;\n  },\n  // ################################################################### //\n  // ################ Methodes de l'instance (privées) ################# //\n  // ################################################################### //\n\n  /**\n   * Set visibility of attribution layer\n   * (call by this._onVisibilityLayerClick())\n   *\n   * @private\n   * @param {Object} layer - layer\n   */\n  _updateVisibilityLayer: function _updateVisibilityLayer(layer) {\n    if (!this._map) {\n      return;\n    }\n\n    this._handlingClick = true;\n\n    var visibility = this._layers[leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(layer)].visibility;\n\n    if (visibility && !this._map.hasLayer(layer)) {\n      // input non checked dans le DOM, on ouvre l'oeil\n      // et on ajoute la couche !\n      this._map.addLayer(layer);\n    } else if (!visibility && this._map.hasLayer(layer)) {\n      // input checked dans le DOM, on ferme l'oeil\n      // et on supprime la couche !\n      this._map.removeLayer(layer);\n    } else {\n      logger.log(\"Status unknown layer !?\");\n    }\n\n    this._handlingClick = false;\n\n    this._refocusOnMap();\n  },\n\n  /**\n   * Set visibility of layer (DOM)\n   * (call by this.setVisibility())\n   *\n   * @private\n   * @param {Object} layer - layer\n   */\n  _updateVisibilityDOMLayer: function _updateVisibilityDOMLayer(layer) {\n    var layerIdx = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(layer);\n    var visibilityElement = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPvisibility_ID_\" + layerIdx)); // FIXME ID !\n\n    var visibilityValue = this._layers[layerIdx].visibility;\n    visibilityElement.checked = visibilityValue;\n  },\n\n  /**\n   * Set opacity of layer (DOM)\n   * (call by this.setOpacity())\n   *\n   * @private\n   * @param {Object} layer - layer\n   */\n  _updateOpacityDOMLayer: function _updateOpacityDOMLayer(layer) {\n    var layerIdx = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(layer);\n    var opacityValue = layer.options.opacity;\n    var opacityElement = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPopacityValue_ID_\" + layerIdx)); // FIXME ID !\n\n    opacityElement.innerHTML = parseInt(opacityValue * 100, 10) + \"%\";\n    opacityElement.value = parseInt(opacityValue * 100, 10);\n  },\n  // ################################################################### //\n  // ################## GESTIONNAIRES d'evenements ##################### //\n  // ################################################################### //\n\n  /**\n   * Event 'zoom' on layers visibility\n   *\n   * FIXME contrainte sur l'emprise du layer ?\n   *\n   * @private\n   */\n  _onOutOfRangeLayerZoom: function _onOutOfRangeLayerZoom() {\n    var map = this._map;\n    var layers = this._layers;\n\n    for (var i in layers) {\n      if (layers.hasOwnProperty(i)) {\n        var layer = layers[i].layer;\n        var id = layers[i].id;\n        var div = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPlayerSwitcher_ID_\" + id)); // FIXME ID !\n\n        if (layer.options.minZoom > map.getZoom() || layer.options.maxZoom < map.getZoom()) {\n          leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.addClass(div, \"outOfRange\");\n        } else {\n          leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.removeClass(div, \"outOfRange\");\n        }\n      }\n    }\n  },\n\n  /**\n   * Event 'click' on layer visibility\n   *\n   * @private\n   * @param {Event} e - MouseEvent\n   */\n  _onVisibilityLayerClick: function _onVisibilityLayerClick(e) {\n    var visibilityElement = e.target.id; // ex GPvisibilityPicto_ID_26\n\n    var visibilityOrder = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].index(visibilityElement); // ex. 26\n    // on met à jour cette interface...\n\n    this._layers[visibilityOrder].visibility = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(visibilityElement).checked;\n    var layer = this._layers[visibilityOrder].layer;\n\n    this._updateVisibilityLayer(layer);\n  },\n\n  /**\n   * Event 'click' on layer deleted\n   *\n   * @private\n   * @param {Event} e - MouseEvent\n   */\n  _onDropLayerClick: function _onDropLayerClick(e) {\n    var layerElement = e.target.id; // ex GPvisibilityPicto_ID_26\n\n    var layerOrder = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].index(layerElement); // ex. 26\n\n    var layer = this._layers[layerOrder].layer;\n    this.removeLayer(layer);\n  },\n\n  /**\n   * Event 'onchange' on layer opacity\n   *\n   * FIXME appel en dur d'un identifiant CSS !\n   *\n   * @private\n   * @param {Event} e - ChangeEvent\n   */\n  _onChangeLayerOpacity: function _onChangeLayerOpacity(e) {\n    var layerElement = e.target.id; // ex GPvisibilityPicto_ID_26\n\n    var layerOrder = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].index(layerElement); // ex. 26\n\n    var layer = this._layers[layerOrder].layer;\n    var opacityValue = e.target.value;\n    var opacityId = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPopacityValue_ID_\" + layerOrder)); // FIXME ID !\n\n    opacityId.innerHTML = opacityValue + \"%\";\n\n    if (this._map.hasLayer(layer)) {\n      if (typeof layer.setOpacity !== \"undefined\") {\n        layer.setOpacity(opacityValue / 100);\n      } else {\n        // Particularité du format GeoJSON\n        layer.setStyle({\n          fillOpacity: opacityValue / 100,\n          opacity: opacityValue / 100\n        });\n      }\n    }\n  },\n\n  /**\n   * Event 'click' on opening the information window\n   *\n   * FIXME appel en dur d'un identifiant CSS !\n   *\n   * @private\n   * @param {Event} e - MouseEvent\n   */\n  _onOpenLayerInfoClick: function _onOpenLayerInfoClick(e) {\n    var layerElement = e.target.id; // ex GPvisibilityPicto_ID_26\n\n    var layerOrder = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].index(layerElement); // ex. 26\n\n    var layer = this._layers[layerOrder]; // Close layer info panel\n\n    var divId = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(e.target.id);\n    var panel = null;\n    var info = null;\n\n    if (divId.className === \"GPlayerInfoOpened\") {\n      leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.removeClass(divId, \"GPlayerInfoOpened\");\n      leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.addClass(divId, \"GPlayerInfo\");\n      panel = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPlayerInfoPanel\"));\n      leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.removeClass(panel, \"GPpanel\");\n      leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.removeClass(panel, \"GPlayerInfoPanelOpened\");\n      leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.addClass(panel, \"GPlayerInfoPanelClosed\");\n      info = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPlayerInfoContent\"));\n      panel.removeChild(info);\n      return;\n    }\n\n    var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n\n    for (var i = 0; i < layers.length; i++) {\n      layers[i].className = \"GPlayerInfo\";\n    } // Open layer info panel\n\n\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.removeClass(divId, \"GPlayerInfo\");\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.addClass(divId, \"GPlayerInfoOpened\");\n    panel = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPlayerInfoPanel\"));\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.addClass(panel, \"GPpanel\");\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.removeClass(panel, \"GPlayerInfoPanelClosed\");\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.addClass(panel, \"GPlayerInfoPanelOpened\");\n    info = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.DomUtil.get(this._addUID(\"GPlayerInfoContent\"));\n\n    if (info) {\n      panel.removeChild(info);\n    } // on récupére les infos associées au layer pour mettre à jour\n    // dynamiquement le contenu du panel d\"infos\n\n\n    var infoLayer = this._createContainerLayerInfoElement(layer);\n\n    panel.appendChild(infoLayer);\n  },\n\n  /**\n   * Event \"drag & drop\" on move layer\n   *\n   * FIXME appel en dur d'un identifiant CSS !\n   *\n   * @private\n   * @param {Event} e - MouseEvent\n   */\n  _onDragAndDropLayerClick: function _onDragAndDropLayerClick(e) {\n    var layerElement = e.target.id; // ex GPvisibilityPicto_ID_26\n\n    var layerOrder = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].index(layerElement); // ex. 26\n\n    var layer = this._layers[layerOrder];\n    logger.log(layer);\n    var matchesLayers = document.querySelectorAll(\"div.GPlayerSwitcher_layer\");\n    this._lastZIndex = matchesLayers.length;\n\n    for (var i = 0; i < matchesLayers.length; i++) {\n      var tag = matchesLayers[i].id;\n      var order = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_6__[\"default\"].index(tag);\n      var _layer = this._layers[order].layer;\n\n      if (this.options.autoZIndex && _layer.setZIndex) {\n        this._lastZIndex--;\n\n        _layer.setZIndex(this._lastZIndex);\n      }\n    }\n  },\n  // ################################################################### //\n  // ###### METHODES PUBLIQUES (INTERFACE AVEC LE CONTROLE) ############ //\n  // ################################################################### //\n\n  /**\n   * Adding layer configuration to be displayed by the control\n   *\n   * @param {Object} layer - layer to add to layer switcher\n   * @param {Object} config - See {@link module:Controls.LayerSwitcher L.geoportalControl.LayerSwitcher()} for layer display config object definition.\n   */\n  addLayer: function addLayer(layer, config) {\n    var map = this._map;\n    var cfg = this._layersConfig;\n\n    if (!layer) {\n      logger.log(\"[ERROR] LayerSwitcher:addLayer - missing layer parameter !\");\n      return;\n    }\n\n    if (!map.hasLayer(layer)) {\n      logger.log(\"[WARN] LayerSwitcher:addLayer - layer has not been added on map !\");\n      map.addLayer(layer);\n    }\n\n    var id = leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(layer);\n\n    for (var i in cfg) {\n      if (cfg.hasOwnProperty(i)) {\n        // layer already added !\n        if (id === leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(cfg[i].layer)) {\n          delete cfg[i];\n          break;\n        }\n      }\n    }\n\n    var _config = config || {};\n\n    leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Util.extend(_config, {\n      layer: layer\n    });\n    cfg.push(_config); // layer déjà configuré, il reprend sa place !\n\n    if (!this._layers[id]) {\n      layer.setZIndex(this._lastZIndex++);\n    }\n\n    this.addOverlay(layer);\n\n    this._update();\n  },\n\n  /**\n   * Set the opacity of a layer, and opacity must be a number from 0 to 1.\n   *\n   * @param {Object} layer - layer into layerswitcher\n   * @param {Number} opacity - 0-1.\n   */\n  setOpacity: function setOpacity(layer, opacity) {\n    logger.trace(layer, opacity);\n\n    if (opacity > 1 || opacity < 0) {\n      return;\n    }\n\n    if (this._map.hasLayer(layer)) {\n      if (typeof layer.setOpacity !== \"undefined\") {\n        layer.setOpacity(opacity);\n      } else {\n        // Particularité du format GeoJSON pour l'opacité\n        layer.options.opacity = opacity;\n        layer.setStyle({\n          fillOpacity: opacity,\n          opacity: opacity\n        });\n      }\n\n      this._updateOpacityDOMLayer(layer);\n    }\n  },\n\n  /**\n   * Set the visibility of a layer.\n   *\n   * @param {Object} layer - layer into layerswitcher\n   * @param {Object} visibility - true/false.\n   */\n  setVisibility: function setVisibility(layer, visibility) {\n    logger.trace(layer, visibility);\n    this._layers[leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.stamp(layer)].visibility = visibility;\n\n    this._updateVisibilityDOMLayer(layer);\n\n    this._updateVisibilityLayer(layer);\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerSwitcher); // Expose LayerSwitcher as L.geoportalControl.LayerSwitcher (for a build bundle)\n\nif (window.L) {\n  if (!window.L.geoportalControl) {\n    window.L.geoportalControl = {};\n  }\n\n  window.L.geoportalControl.LayerSwitcher = LayerSwitcher;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Leaflet/Controls/LayerSwitcher.js\n");

/***/ }),

/***/ "leaflet":
/*!********************!*\
  !*** external "L" ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = L;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJMXCI/ZmEyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJsZWFmbGV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBMOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///leaflet\n");

/***/ })

/******/ })["default"];