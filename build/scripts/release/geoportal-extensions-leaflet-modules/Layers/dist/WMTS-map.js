/*!
 * @brief French Geoportal Extension for Leaflet
 *
 * This software is released under the licence CeCILL-B (Free BSD compatible)
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-fr.txt
 * @see http://www.cecill.info/
 *
 * @copyright copyright (c) IGN 
 * @license CeCILL-B
 * @author IGN
 * @version 2.2.7
 * @date 18/11/2022
 *
 */

WMTS =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Leaflet/Layers/WMTS.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/geoportal-access-lib/src/Utils/Helper.js":
/*!***************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Utils/Helper.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Classe utilitaire\n *\n * @module Helper\n * @alias Gp.Helper\n */\nvar Helper = {\n\n    /**\n     * concatenation des parametres key/value dans les urls\n     *\n     * @method normalyzeParameters\n     * @static\n     * @param {Object} params - tableau de clef/valeur\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeParameters ({\n     *         key1:value1,\n     *         key2:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne les paramètres concaténés\n     */\n    normalyzeParameters : function (params) {\n        var myParams = null;\n\n        if (params) {\n            var tabParams = [];\n            for (var key in params) {\n                if (params.hasOwnProperty(key)) {\n                    var value = params[key];\n                    if (!value) {\n                        value = \"\";\n                    }\n                    tabParams.push(key + \"=\" + value);\n                }\n            }\n\n            myParams = tabParams.join(\"&\");\n        }\n\n        return myParams;\n    },\n\n    /**\n     * Concaténation et encodage des urls.\n     *\n     * @method normalyzeUrl\n     * @static\n     * @param {String} url - url\n     * @param {Object|String} params - tableau de clef/valeur ou string\n     * @param {Boolean} encode - true|false, false par defaut\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeUrl (url, {\n     *         key1:value1,\n     *         key2=:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"url?key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne une url normalisée\n     */\n    normalyzeUrl : function (url, params, encode) {\n        var myUrl = url;\n\n        if (url) {\n            var k = url.indexOf(\"?\");\n            if (k === -1) { // pas de ? et KVP\n                myUrl += \"?\";\n            }\n\n            if (k !== -1 && k !== url.length - 1) { // KVP\n                myUrl += \"&\";\n            }\n        }\n\n        if (params) {\n            if (typeof params === \"string\") {\n                myUrl += params;\n            } else {\n                myUrl += this.normalyzeParameters(params);\n            }\n        }\n\n        if (encode) {\n            // FIXME bonne idée ?\n            myUrl = encodeURIComponent(myUrl);\n        }\n\n        return myUrl;\n    },\n\n    /**\n     * Indentation d'une chaine\n     *\n     * @method indent\n     * @static\n     * @param {Number} n - nombre de tabulation\n     * @param {String} msg - chaine\n     *\n     * @example\n     * Gp.Utils.Helper.indent (2, \"message à indenter\")\n     * // out\n     * // ........message à indenter\n     *\n     * @returns {String} retourne une chaine indentée\n     */\n    indent : function (n, msg) {\n        var num = n || 0;\n        return new Array(num + 1).join(\"\\t\") + msg;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Helper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1V0aWxzL0hlbHBlci5qcz8wYmQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxjQUFjO0FBQzdCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUEsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWUscUVBQU0sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvVXRpbHMvSGVscGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzc2UgdXRpbGl0YWlyZVxuICpcbiAqIEBtb2R1bGUgSGVscGVyXG4gKiBAYWxpYXMgR3AuSGVscGVyXG4gKi9cbnZhciBIZWxwZXIgPSB7XG5cbiAgICAvKipcbiAgICAgKiBjb25jYXRlbmF0aW9uIGRlcyBwYXJhbWV0cmVzIGtleS92YWx1ZSBkYW5zIGxlcyB1cmxzXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIG5vcm1hbHl6ZVBhcmFtZXRlcnNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIHRhYmxlYXUgZGUgY2xlZi92YWxldXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogIEdwLlV0aWxzLkhlbHBlci5ub3JtYWx5emVQYXJhbWV0ZXJzICh7XG4gICAgICogICAgICAgICBrZXkxOnZhbHVlMSxcbiAgICAgKiAgICAgICAgIGtleTI6dmFsdWUyLFxuICAgICAqICAgICAgICAga2V5Mzp2YWx1ZTNcbiAgICAgKiAgfSk7XG4gICAgICogIC8vIG91dCA6IFwia2V5MT12YWx1ZTEma2V5Mj12YWx1ZTIma2V5Mz12YWx1ZTNcIlxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmV0b3VybmUgbGVzIHBhcmFtw6h0cmVzIGNvbmNhdMOpbsOpc1xuICAgICAqL1xuICAgIG5vcm1hbHl6ZVBhcmFtZXRlcnMgOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBteVBhcmFtcyA9IG51bGw7XG5cbiAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgdmFyIHRhYlBhcmFtcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhYlBhcmFtcy5wdXNoKGtleSArIFwiPVwiICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbXlQYXJhbXMgPSB0YWJQYXJhbXMuam9pbihcIiZcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbXlQYXJhbXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbmNhdMOpbmF0aW9uIGV0IGVuY29kYWdlIGRlcyB1cmxzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBub3JtYWx5emVVcmxcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIHVybFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gcGFyYW1zIC0gdGFibGVhdSBkZSBjbGVmL3ZhbGV1ciBvdSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuY29kZSAtIHRydWV8ZmFsc2UsIGZhbHNlIHBhciBkZWZhdXRcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogIEdwLlV0aWxzLkhlbHBlci5ub3JtYWx5emVVcmwgKHVybCwge1xuICAgICAqICAgICAgICAga2V5MTp2YWx1ZTEsXG4gICAgICogICAgICAgICBrZXkyPTp2YWx1ZTIsXG4gICAgICogICAgICAgICBrZXkzOnZhbHVlM1xuICAgICAqICB9KTtcbiAgICAgKiAgLy8gb3V0IDogXCJ1cmw/a2V5MT12YWx1ZTEma2V5Mj12YWx1ZTIma2V5Mz12YWx1ZTNcIlxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmV0b3VybmUgdW5lIHVybCBub3JtYWxpc8OpZVxuICAgICAqL1xuICAgIG5vcm1hbHl6ZVVybCA6IGZ1bmN0aW9uICh1cmwsIHBhcmFtcywgZW5jb2RlKSB7XG4gICAgICAgIHZhciBteVVybCA9IHVybDtcblxuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICB2YXIgayA9IHVybC5pbmRleE9mKFwiP1wiKTtcbiAgICAgICAgICAgIGlmIChrID09PSAtMSkgeyAvLyBwYXMgZGUgPyBldCBLVlBcbiAgICAgICAgICAgICAgICBteVVybCArPSBcIj9cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGsgIT09IC0xICYmIGsgIT09IHVybC5sZW5ndGggLSAxKSB7IC8vIEtWUFxuICAgICAgICAgICAgICAgIG15VXJsICs9IFwiJlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBteVVybCArPSBwYXJhbXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG15VXJsICs9IHRoaXMubm9ybWFseXplUGFyYW1ldGVycyhwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuY29kZSkge1xuICAgICAgICAgICAgLy8gRklYTUUgYm9ubmUgaWTDqWUgP1xuICAgICAgICAgICAgbXlVcmwgPSBlbmNvZGVVUklDb21wb25lbnQobXlVcmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG15VXJsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbmRlbnRhdGlvbiBkJ3VuZSBjaGFpbmVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgaW5kZW50XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuIC0gbm9tYnJlIGRlIHRhYnVsYXRpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gY2hhaW5lXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIEdwLlV0aWxzLkhlbHBlci5pbmRlbnQgKDIsIFwibWVzc2FnZSDDoCBpbmRlbnRlclwiKVxuICAgICAqIC8vIG91dFxuICAgICAqIC8vIC4uLi4uLi4ubWVzc2FnZSDDoCBpbmRlbnRlclxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmV0b3VybmUgdW5lIGNoYWluZSBpbmRlbnTDqWVcbiAgICAgKi9cbiAgICBpbmRlbnQgOiBmdW5jdGlvbiAobiwgbXNnKSB7XG4gICAgICAgIHZhciBudW0gPSBuIHx8IDA7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkobnVtICsgMSkuam9pbihcIlxcdFwiKSArIG1zZztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIZWxwZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Utils/Helper.js\n");

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/loglevel/lib/loglevel.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, description, version, date, leafletExtName, leafletExtVersion, olExtName, olExtVersion, itownsExtName, itownsExtVersion, main, types, module, directories, scripts, repository, author, keywords, license, bugs, homepage, dependencies, devDependencies, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"geoportal-extensions\\\",\\\"description\\\":\\\"French Geoportal Extensions for OpenLayers, Leaflet and iTowns libraries\\\",\\\"version\\\":\\\"2.7.2\\\",\\\"date\\\":\\\"18/11/2022\\\",\\\"leafletExtName\\\":\\\"French Geoportal Extension for Leaflet\\\",\\\"leafletExtVersion\\\":\\\"2.2.7\\\",\\\"olExtName\\\":\\\"French Geoportal Extension for OpenLayers\\\",\\\"olExtVersion\\\":\\\"3.2.18\\\",\\\"itownsExtName\\\":\\\"French Geoportal Extension for Itowns\\\",\\\"itownsExtVersion\\\":\\\"2.3.9\\\",\\\"main\\\":\\\"dist/leaflet/GpPluginLeaflet.js, dist/openlayers/GpPluginOpenLayers.js, dist/itowns/GpPluginItowns.js\\\",\\\"types\\\":\\\"dist/leaflet/index.d.ts, dist/openlayers/index.d.ts, dist/itowns/index.d.ts\\\",\\\"module\\\":\\\"src/Leaflet/index.js, src/OpenLayers/index.js, src/Itowns/index.js\\\",\\\"directories\\\":{},\\\"scripts\\\":{\\\"setup\\\":\\\"npm install\\\",\\\"clean\\\":\\\"echo \\\\\\\"Warning: target not yet implemented!\\\\\\\" && exit 0\\\",\\\"eslint\\\":\\\"eslint src/\\\",\\\"test\\\":\\\"npm run test:serve\\\",\\\"test:serve\\\":\\\"cd test && webpack-dev-server --hot --config webpack.test.serve.js\\\",\\\"sample\\\":\\\"npm run sample:serve\\\",\\\"sample:serve\\\":\\\"npm run sample:ol:serve\\\",\\\"sample:itowns:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.itowns --mode=development --https --open-page samples/index-itowns-map.html --content-base . --output-public-path '/dist/itowns/' --port 9001 --open\\\",\\\"sample:leaflet:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.leaflet --mode=development --https --open-page samples/index-leaflet-map.html --content-base . --output-public-path '/dist/leaflet/' --port 9001 --open\\\",\\\"sample:ol:serve\\\":\\\"webpack-dev-server --config build/webpack/webpack.config.openlayers --mode=development --https --open-page samples/index-openlayers-map.html --content-base . --output-public-path '/dist/openlayers/' --port 9001 --open\\\",\\\"generate-types:ol\\\":\\\"npx tsc -p build/types/tsconfig-openlayers.json\\\",\\\"generate-types:leaflet\\\":\\\"npx tsc -p build/types/tsconfig-leaflet.json\\\",\\\"generate-types:itowns\\\":\\\"npx tsc -p build/types/tsconfig-itowns.json\\\",\\\"generate-jsdoc:ol\\\":\\\"jsdoc -c build/jsdoc/jsdoc-openlayers.json\\\",\\\"generate-jsdoc:leaflet\\\":\\\"jsdoc -c build/jsdoc/jsdoc-leaflet.json\\\",\\\"generate-jsdoc:itowns\\\":\\\"jsdoc -c build/jsdoc/jsdoc-itowns.json\\\",\\\"doc\\\":\\\"npm run doc:serve\\\",\\\"doc:serve\\\":\\\"npm run doc:ol:serve\\\",\\\"doc:itowns:serve\\\":\\\"webpack-dev-server --hot  --config build/webpack/webpack.config.itowns --content-base jsdoc/itowns --port 9001 --open\\\",\\\"doc:leaflet:serve\\\":\\\"webpack-dev-server --hot  --config build/webpack/webpack.config.leaflet --content-base jsdoc/leaflet --port 9001 --open\\\",\\\"doc:ol:serve\\\":\\\"webpack-dev-server --hot  --config build/webpack/webpack.config.openlayers --content-base jsdoc/openlayers --port 9001 --open\\\",\\\"build:dev\\\":\\\"npm-run-all --print-label --print-name build:*:dev\\\",\\\"build:prod\\\":\\\"npm-run-all --print-label --print-name build:*:prod\\\",\\\"build:src\\\":\\\"npm-run-all --print-label --print-name build:*:src\\\",\\\"build\\\":\\\"npm-run-all --print-label --print-name build:*:*\\\",\\\"build:itowns\\\":\\\"npm-run-all --print-label --print-name build:itowns:*\\\",\\\"build:itowns:dev\\\":\\\"webpack --config build/webpack/webpack.config.itowns --mode=development\\\",\\\"build:itowns:prod\\\":\\\"webpack --config build/webpack/webpack.config.itowns --mode=production\\\",\\\"build:itowns:src\\\":\\\"webpack --config build/webpack/webpack.config.itowns --mode=none\\\",\\\"build:ol\\\":\\\"npm-run-all --print-label --print-name build:ol:*\\\",\\\"build:ol:dev\\\":\\\"webpack --config build/webpack/webpack.config.openlayers --mode=development\\\",\\\"build:ol:prod\\\":\\\"webpack --config build/webpack/webpack.config.openlayers --mode=production\\\",\\\"build:ol:src\\\":\\\"webpack --config build/webpack/webpack.config.openlayers --mode=none\\\",\\\"build:ol-modules\\\":\\\"npm-run-all --print-label --print-name build:ol-modules:*\\\",\\\"build:ol-modules:dev\\\":\\\"webpack --config build/webpack/webpack.config.openlayers.modules --mode=development\\\",\\\"build:ol-modules:prod\\\":\\\"webpack --config build/webpack/webpack.config.openlayers.modules --mode=production\\\",\\\"build:ol-modules:src\\\":\\\"webpack --config build/webpack/webpack.config.openlayers.modules --mode=none\\\",\\\"build:leaflet\\\":\\\"npm-run-all --print-label --print-name build:leaflet:*\\\",\\\"build:leaflet:dev\\\":\\\"webpack --config build/webpack/webpack.config.leaflet --mode=development\\\",\\\"build:leaflet:prod\\\":\\\"webpack --config build/webpack/webpack.config.leaflet --mode=production\\\",\\\"build:leaflet:src\\\":\\\"webpack --config build/webpack/webpack.config.leaflet --mode=none\\\",\\\"build:leaflet-modules\\\":\\\"npm-run-all --print-label --print-name build:leaflet-modules:*\\\",\\\"build:leaflet-modules:dev\\\":\\\"webpack --config build/webpack/webpack.config.leaflet.modules --mode=development\\\",\\\"build:leaflet-modules:prod\\\":\\\"webpack --config build/webpack/webpack.config.leaflet.modules --mode=production\\\",\\\"build:leaflet-modules:src\\\":\\\"webpack --config build/webpack/webpack.config.leaflet.modules --mode=none\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"https://github.com/IGNF/geoportal-extensions.git\\\"},\\\"author\\\":\\\"IGNF\\\",\\\"keywords\\\":[\\\"geoportail\\\",\\\"javascript\\\",\\\"OpenLayers\\\",\\\"Leaflet\\\",\\\"Itowns\\\",\\\"3D\\\"],\\\"license\\\":\\\"CECILL-B\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/IGNF/geoportal-extensions/issues\\\"},\\\"homepage\\\":\\\"https://github.com/IGNF/geoportal-extensions#readme\\\",\\\"dependencies\\\":{\\\"@mapbox/mapbox-gl-style-spec\\\":\\\"13.20.1\\\",\\\"eventbusjs\\\":\\\"0.2.0\\\",\\\"geoportal-access-lib\\\":\\\"3.2.0\\\",\\\"itowns\\\":\\\"2.38.2\\\",\\\"leaflet\\\":\\\"1.7.1\\\",\\\"leaflet-draw\\\":\\\"1.0.4\\\",\\\"loglevel\\\":\\\"^1.6.7\\\",\\\"markdown-toc\\\":\\\"^1.2.0\\\",\\\"ol\\\":\\\"6.9.0\\\",\\\"ol-mapbox-style\\\":\\\"6.7.0\\\",\\\"proj4\\\":\\\"2.7.5\\\",\\\"proj4leaflet\\\":\\\"1.0.2\\\",\\\"sortablejs\\\":\\\"1.14.0\\\",\\\"three\\\":\\\"0.137.5\\\",\\\"typescript\\\":\\\"^4.5.5\\\",\\\"whatwg-fetch\\\":\\\"3.0.0\\\"},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.4.4\\\",\\\"@babel/plugin-transform-template-literals\\\":\\\"^7.7.4\\\",\\\"@babel/preset-env\\\":\\\"^7.4.4\\\",\\\"babel-loader\\\":\\\"^8.0.5\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"chalk\\\":\\\"^4.0.0\\\",\\\"clean-webpack-plugin\\\":\\\"^3.0.0\\\",\\\"copy-webpack-plugin\\\":\\\"^5.0.3\\\",\\\"core-js\\\":\\\"^3.6.4\\\",\\\"css-loader\\\":\\\"^3.4.2\\\",\\\"eslint\\\":\\\"^6.8.0\\\",\\\"eslint-config-standard\\\":\\\"^14.1.1\\\",\\\"eslint-loader\\\":\\\"^4.0.0\\\",\\\"eslint-plugin-import\\\":\\\"^2.17.2\\\",\\\"eslint-plugin-node\\\":\\\"^11.1.0\\\",\\\"eslint-plugin-promise\\\":\\\"^4.1.1\\\",\\\"eslint-plugin-standard\\\":\\\"^4.0.0\\\",\\\"exports-loader\\\":\\\"^0.7.0\\\",\\\"expose-loader\\\":\\\"^0.7.5\\\",\\\"fs-extra\\\":\\\"^9.0.0\\\",\\\"handlebars\\\":\\\"^4.7.5\\\",\\\"handlebars-layouts\\\":\\\"^3.1.4\\\",\\\"html-webpack-plugin\\\":\\\"^4.0.4\\\",\\\"jsdoc-webpack-plugin\\\":\\\"^0.3.0\\\",\\\"mini-css-extract-plugin\\\":\\\"^0.9.0\\\",\\\"mocha\\\":\\\"^7.1.1\\\",\\\"mocha-loader\\\":\\\"^5.0.0\\\",\\\"npm-run-all\\\":\\\"^4.1.5\\\",\\\"optimize-css-assets-webpack-plugin\\\":\\\"^5.0.1\\\",\\\"path\\\":\\\"^0.12.7\\\",\\\"replace-bundle-webpack-plugin\\\":\\\"^1.0.0\\\",\\\"requirejs\\\":\\\"^2.3.6\\\",\\\"responsive-loader\\\":\\\"^1.2.0\\\",\\\"speed-measure-webpack-plugin\\\":\\\"^1.3.0\\\",\\\"string-template\\\":\\\"^1.0.0\\\",\\\"style-loader\\\":\\\"^1.1.3\\\",\\\"terser-webpack-plugin\\\":\\\"^2.0.0\\\",\\\"url-loader\\\":\\\"^4.0.0\\\",\\\"webpack\\\":\\\"^4.30.0\\\",\\\"webpack-cli\\\":\\\"^3.3.1\\\",\\\"webpack-dev-server\\\":\\\"^3.3.1\\\",\\\"webpack-node-externals\\\":\\\"^1.7.2\\\"}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL3BhY2thZ2UuanNvbi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/Common/Utils/LayerUtils.js":
/*!****************************************!*\
  !*** ./src/Common/Utils/LayerUtils.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n* @module LayerUtils\n* @alias Gp.LayerUtils\n* @description\n* ...\n*\n* @example\n* getZoomLevelFromScaleDenominator();\n* getAttributions();\n* intersects();\n*/\nvar LayerUtils = {\n  /**\n   * Obtenir le ZoomLevel à partir du ScaleDenominator\n   * @function getZoomLevelFromScaleDenominator\n   * @param {Number} scaleDenominator - the scale denominator\n   * @param {String} crs - the crs\n   *\n   * @returns {Integer} zoom level\n   */\n  getZoomLevelFromScaleDenominator: function getZoomLevelFromScaleDenominator(scaleDenominator, crs) {\n    // ------------------------------------------------- //\n    // Code issu de l'API Geoportal/Catalogue/Config.js  //\n    // ------------------------------------------------- //\n    //     var configuration = Gp.Config;\n    //     var general = configuration.generalOptions;\n    //     var layers  = configuration.layersContext;\n    //\n    //     for (var tms in general.tileMatrixSets) {\n    //         var tileMatrixSet = general.tileMatrixSets[tms];\n    //         // IGN's WMTS bug : epsg:nnnn instead of EPSG:nnnn\n    //         var crs = tileMatrixSet.supportedCRS = tileMatrixSet.supportedCRS.replace(/epsg/,\"EPSG\");\n    //\n    //         if (!Geoportal.Catalogue.CRSRESOLUTIONS.hasOwnProperty(crs)) {\n    //             var p= new OpenLayers.Projection(crs);\n    //             Geoportal.Catalogue.CRSRESOLUTIONS[crs]= [];\n    //             var matrixIds= tileMatrixSet.matrixIds;\n    //             for (var i= 0, li= matrixIds.length; i<li; ++i) {\n    //                 var mid= matrixIds[i];\n    //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].push(\n    //                     0.00028*mid.scaleDenominator\n    //                     /(OpenLayers.METERS_PER_INCH*OpenLayers.INCHES_PER_UNIT[p.getUnits()]));\n    //                     mid.supportedCRS= mid.supportedCRS.replace(/epsg/,\"EPSG\");\n    //                 }\n    //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].sort(function (a,b){ return b-a; });\n    //             }\n    //         }\n    //         var llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84'];\n    //         if (!llR) {\n    //             llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84']= general.resolutions.slice();\n    //         }\n    //         var wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857'];\n    //         if (!wmR) {//FIXME : should never happened !!\n    //             // reproject resolutions from CRS84 to WebMercator (transform resolutions from degree/px to meter/px)\n    //             wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857']= new Array(llR.length);\n    //             for (var i= 0, len= llR.length; i<len; i++) {\n    //                 var pt= new OpenLayers.LonLat(llR[i], 0);\n    //                 pt.transform(OpenLayers.Projection.CRS84, OpenLayers.Projection.WebMercator);\n    //                 wmR[i]= pt.lon;\n    //             }\n    //         }\n    //         Geoportal.Catalogue.RESOLUTIONS= wmR;\n    //\n    //         var getResolutionsFromCRS= function(crs) {\n    //             if (OpenLayers.Projection.WebMercator.isAliasOf(crs)) {\n    //                 return wmR;\n    //             }\n    //             if (OpenLayers.Projection.CRS84.isAliasOf(crs)) {\n    //                 return llR;\n    //             }\n    //             return Geoportal.Catalogue.CRSRESOLUTIONS[crs]?Geoportal.Catalogue.CRSRESOLUTIONS[crs]:null ;\n    //         };\n    //\n    //         var retrieveZoomFromResolution= function(resolutions, resolution) {\n    //             for (var i= 0, li= resolutions.length; i<li; i++) {\n    //                 if (resolutions[i]-resolution <= resolutions[li-1]) {\n    //                     return i;\n    //                 }\n    //             }\n    //             return -1;\n    //         };\n    //\n    //         var getZoomLevelFromScaleDenominator= function(scaleDenominator,crs) {\n    //             var resolution= scaleDenominator * 0.00028;\n    //             var R= getResolutionsFromCRS(crs);\n    //             if (R) {\n    //                 return retrieveZoomFromResolution(R,resolution);\n    //             }\n    //             resolution= resolution/(OpenLayers.METERS_PER_INCH * OpenLayers.INCHES_PER_UNIT[\"degrees\"]);\n    //             return retrieveZoomFromResolution(llR,resolution);\n    //         };\n    //\n    //         var getZoomLevelFromResolution= function(resolution,crs){\n    //             var R= getResolutionsFromCRS(crs);\n    //             if (R) {\n    //                 return retrieveZoomFromResolution(R,resolution);\n    //             }\n    //             var pt0= new OpenLayers.LonLat(0, 0);\n    //             var pt1= new OpenLayers.LonLat(1, 0);\n    //             pt0.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n    //             pt1.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n    //             resolution= resolution*(Math.abs(pt1.lon-pt0.lon));\n    //             return retrieveZoomFromResolution(llR,resolution);\n    //         };\n    // par defaut, on utilise la projection WebMercator (EPSG:3857 = PM)\n    // soit la liste des resolutions natives\n    var resolutionsNatives = {};\n\n    switch (crs) {\n      case \"EPSG:2154\":\n        resolutionsNatives = {\n          0: 104579.224549894,\n          1: 52277.5323537905,\n          2: 26135.4870785954,\n          3: 13066.8913818,\n          4: 6533.2286041135,\n          5: 3266.5595244627,\n          6: 1633.2660045974,\n          7: 816.629554986,\n          8: 408.3139146768,\n          9: 204.1567415109,\n          10: 102.0783167832,\n          11: 51.0391448966,\n          12: 25.5195690743,\n          13: 12.7597836936,\n          14: 6.379891636,\n          15: 3.1899457653,\n          16: 1.5949728695,\n          17: 0.7974864315,\n          18: 0.3987432149,\n          19: 0.1993716073,\n          20: 0.0996858037,\n          21: 0.0498429018\n        };\n        break;\n\n      default:\n        resolutionsNatives = {\n          0: 156543.033928041,\n          1: 78271.51696402048,\n          2: 39135.758482010235,\n          3: 19567.87924100512,\n          4: 9783.93962050256,\n          5: 4891.96981025128,\n          6: 2445.98490512564,\n          7: 1222.99245256282,\n          8: 611.49622628141,\n          9: 305.7481131407048,\n          10: 152.8740565703525,\n          11: 76.43702828517624,\n          12: 38.21851414258813,\n          13: 19.10925707129406,\n          14: 9.554628535647032,\n          15: 4.777314267823516,\n          16: 2.388657133911758,\n          17: 1.194328566955879,\n          18: 0.5971642834779395,\n          19: 0.2985821417389697,\n          20: 0.1492910708694849,\n          21: 0.0746455354347424\n        };\n        break;\n    } // gestion des autres SRS\n    // TODO\n    // if (crs) {\n    // }\n\n\n    var resolution = scaleDenominator * 0.00028;\n\n    for (var index in resolutionsNatives) {\n      if (resolutionsNatives.hasOwnProperty(index)) {\n        if (resolutionsNatives[index] <= resolution) {\n          index = parseInt(index, 10);\n          return index;\n        }\n      }\n    }\n\n    return 0; // -1 ?\n  },\n\n  /**\n   * Get attributions list for a layer, based on current zoom and extent\n   *\n   * @function getAttributions\n   * @param {Object} params - function params\n   * @param {Array.<Float>} params.extent - map current geographical extent (EPSG:4326) : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n   * @param {Number} params.zoom - map current zoom\n   * @param {String} params.crs - map current projection code (ex \"EPSG:2154\")\n   * @param {Boolean} params.visibility - layer visibility\n   * @param {Gp.Services.Config.Originator} params.originators - resource originators (from Gp.Config.layers[].originators)\n   * @returns {Object} attributions - associative array, mapping originators url (keys) with their properties : html attributions elements\n   */\n  getAttributions: function getAttributions(params) {\n    var zoom = params.zoom;\n    var attributions = [];\n\n    if (params.originators != null && params.visibility) {\n      // drawLogo = boolean, true if attribution should be displayed (zoom, extent), false otherwise\n      var drawLogo;\n\n      for (var j = 0, jl = params.originators.length; j < jl; j++) {\n        drawLogo = true;\n        var originator = params.originators[j];\n        var constraints = params.originators[j].constraints || [];\n\n        for (var k = 0, kl = constraints.length; k < kl; k++) {\n          var constraint = constraints[k];\n          drawLogo = true;\n          var minZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.maxScaleDenominator, params.crs);\n          var maxZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.minScaleDenominator, params.crs) || 21; // min zoom constraints\n\n          if (minZoomLevel && minZoomLevel > zoom) {\n            drawLogo = false;\n          } // max zoom constraints\n\n\n          if (drawLogo && maxZoomLevel && maxZoomLevel < zoom) {\n            drawLogo = false;\n          } // bbox constraints\n\n\n          var bbox = constraint.bbox;\n\n          if (drawLogo && bbox) {\n            drawLogo = false;\n            var viewExtent = params.extent;\n\n            if (viewExtent) {\n              var bounds = [bbox.top, bbox.left, bbox.bottom, bbox.right];\n\n              if (this.intersects(viewExtent, bounds)) {\n                // at least one constraint matches the map ones\n                drawLogo = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (drawLogo) {\n          // on a un originator qui correspond au zoom et à l'étendue.\n          var logo = originator.logo;\n          var url = originator.url;\n          var name = originator.name ? originator.name : \"\";\n          var text = originator.attribution;\n          var container = document.createElement(\"div\");\n          container.className = \"gp-control-attribution\"; // on crée un lien dans tous les cas (même s'il ne pointe pas vers une référence), pour avoir accès à la class CSS (pour surcharge)\n\n          var link = null;\n          link = document.createElement(\"a\");\n          link.className = \"gp-control-attribution-link\";\n          link.target = \"_blank\";\n          container.appendChild(link);\n\n          if (url) {\n            link.href = url;\n          }\n\n          var bImage = !!logo;\n          var image = null; // si on a un logo, on l'affiche à l'interieur du lien\n\n          if (bImage) {\n            image = document.createElement(\"img\");\n\n            if (link) {\n              image.className = \"gp-control-attribution-image\";\n              link.appendChild(image);\n            } else {\n              image.className = \"\";\n              container.appendChild(image);\n            }\n\n            image.src = logo; // FIXME : mixContent !\n\n            image.title = text || name;\n            image.style.height = \"30px\";\n            image.style.width = \"30px\";\n          } else {\n            // sinon, on affiche le nom de l'originator, ou sa description ou l'url.\n            if (name) {\n              link.textContent = name;\n            } else if (text) {\n              link.textContent = text;\n            } else if (url) {\n              link.textContent = url;\n            } else {\n              link.textContent = \"\";\n            }\n          }\n\n          attributions.push(container.innerHTML + \" \");\n        }\n      }\n    }\n\n    return attributions;\n  },\n\n  /**\n   * Determines if one extent (extent1) intersects another (extent2)\n   *\n   * @function intersects\n   * @param {Array.<Float>} extent1 - First extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n   * @param {Array.<Float>} extent2 - Second extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n   * @return {Boolean} intersects - True if the two extents intersect, false otherwise.\n   */\n  intersects: function intersects(extent1, extent2) {\n    var intersectsX = extent1[1] <= extent2[3] && extent2[1] <= extent1[3];\n    var intersectsY = extent1[2] <= extent2[0] && extent2[2] <= extent1[0];\n    return intersectsX && intersectsY;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Utils/LayerUtils.js\n");

/***/ }),

/***/ "./src/Common/Utils/LoggerByDefault.js":
/*!*********************************************!*\
  !*** ./src/Common/Utils/LoggerByDefault.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * @module LoggerByDefault\n * @alias [private] LoggerByDefault\n * @description\n * ...\n *\n * @example\n * getLogger();\n * disableAll();\n * enableAll();\n */\n\nvar LoggerByDefault = {\n  /**\n   * creation d'un logger statique\n   *\n   * @function getLogger\n   * @param {String} [name=\"default\"] - the logger name\n   * @returns {Object} logger\n   */\n  getLogger: function getLogger(name) {\n    // INFO :\n    // à la compilation en mode production, on substitue false\n    // avec \"true\", ceci desactive les loggers !\n    //\n    // à la compilation en mode developpement, on substitue false\n    // avec \"false\", ceci permet d'avoir les loggers actifs !\n    //\n    // lors d'une utilisation en module es6, il n'y a pas de substitution de false,\n    // les loggers sont donc actifs par defaut !\n    //\n    // > Substitute global constants configured at compile time\n    // cf. webpack.config.js\n    // on masque cette constante afin d'eviter \"referenceerror not defined\"\n    \"false\".match(/true/) ? loglevel__WEBPACK_IMPORTED_MODULE_0__[\"disableAll\"]() : loglevel__WEBPACK_IMPORTED_MODULE_0__[\"enableAll\"]();\n    var logname = name || \"default\";\n    return loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"](logname);\n  },\n\n  /**\n   * desactive tous les loggers\n   * @function disableAll\n   */\n  disableAll: function disableAll() {\n    var loggers = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLoggers\"]();\n\n    for (var key in loggers) {\n      if (Object.hasOwnProperty.call(loggers, key)) {\n        var logger = loggers[key];\n        logger.disableAll();\n      }\n    }\n  },\n\n  /**\n   * active tous les loggers\n   * @function enableAll\n   */\n  enableAll: function enableAll() {\n    var loggers = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLoggers\"]();\n\n    for (var key in loggers) {\n      if (Object.hasOwnProperty.call(loggers, key)) {\n        var logger = loggers[key];\n        logger.enableAll();\n      }\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LoggerByDefault);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcz81YzkwIl0sIm5hbWVzIjpbIkxvZ2dlckJ5RGVmYXVsdCIsImdldExvZ2dlciIsIm5hbWUiLCJtYXRjaCIsIkxvZyIsImxvZ25hbWUiLCJkaXNhYmxlQWxsIiwibG9nZ2VycyIsImtleSIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImxvZ2dlciIsImVuYWJsZUFsbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUlBLGVBQWUsR0FBRztBQUNsQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxXQUFTLEVBQUcsbUJBQVVDLElBQVYsRUFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxxQkFBaUJDLEtBQWpCLENBQXVCLE1BQXZCLENBQUQsR0FBbUNDLG1EQUFBLEVBQW5DLEdBQXNEQSxrREFBQSxFQUF0RDtBQUNBLFFBQUlDLE9BQU8sR0FBR0gsSUFBSSxJQUFJLFNBQXRCO0FBQ0EsV0FBT0Usa0RBQUEsQ0FBY0MsT0FBZCxDQUFQO0FBQ0gsR0F6QmlCOztBQTBCbEI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsWUFBVSxFQUFHLHNCQUFZO0FBQ3JCLFFBQUlDLE9BQU8sR0FBR0gsbURBQUEsRUFBZDs7QUFDQSxTQUFLLElBQU1JLEdBQVgsSUFBa0JELE9BQWxCLEVBQTJCO0FBQ3ZCLFVBQUlFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsSUFBdEIsQ0FBMkJKLE9BQTNCLEVBQW9DQyxHQUFwQyxDQUFKLEVBQThDO0FBQzFDLFlBQU1JLE1BQU0sR0FBR0wsT0FBTyxDQUFDQyxHQUFELENBQXRCO0FBQ0FJLGNBQU0sQ0FBQ04sVUFBUDtBQUNIO0FBQ0o7QUFDSixHQXRDaUI7O0FBdUNsQjtBQUNKO0FBQ0E7QUFDQTtBQUNJTyxXQUFTLEVBQUcscUJBQVk7QUFDcEIsUUFBSU4sT0FBTyxHQUFHSCxtREFBQSxFQUFkOztBQUNBLFNBQUssSUFBTUksR0FBWCxJQUFrQkQsT0FBbEIsRUFBMkI7QUFDdkIsVUFBSUUsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxJQUF0QixDQUEyQkosT0FBM0IsRUFBb0NDLEdBQXBDLENBQUosRUFBOEM7QUFDMUMsWUFBTUksTUFBTSxHQUFHTCxPQUFPLENBQUNDLEdBQUQsQ0FBdEI7QUFDQUksY0FBTSxDQUFDQyxTQUFQO0FBQ0g7QUFDSjtBQUNKO0FBbkRpQixDQUF0QjtBQXNEZWIsOEVBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIExvZyBmcm9tIFwibG9nbGV2ZWxcIjtcblxuLyoqXG4gKiBAbW9kdWxlIExvZ2dlckJ5RGVmYXVsdFxuICogQGFsaWFzIFtwcml2YXRlXSBMb2dnZXJCeURlZmF1bHRcbiAqIEBkZXNjcmlwdGlvblxuICogLi4uXG4gKlxuICogQGV4YW1wbGVcbiAqIGdldExvZ2dlcigpO1xuICogZGlzYWJsZUFsbCgpO1xuICogZW5hYmxlQWxsKCk7XG4gKi9cbnZhciBMb2dnZXJCeURlZmF1bHQgPSB7XG4gICAgLyoqXG4gICAgICogY3JlYXRpb24gZCd1biBsb2dnZXIgc3RhdGlxdWVcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvbiBnZXRMb2dnZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWU9XCJkZWZhdWx0XCJdIC0gdGhlIGxvZ2dlciBuYW1lXG4gICAgICogQHJldHVybnMge09iamVjdH0gbG9nZ2VyXG4gICAgICovXG4gICAgZ2V0TG9nZ2VyIDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgLy8gSU5GTyA6XG4gICAgICAgIC8vIMOgIGxhIGNvbXBpbGF0aW9uIGVuIG1vZGUgcHJvZHVjdGlvbiwgb24gc3Vic3RpdHVlIF9fUFJPRFVDVElPTl9fXG4gICAgICAgIC8vIGF2ZWMgXCJ0cnVlXCIsIGNlY2kgZGVzYWN0aXZlIGxlcyBsb2dnZXJzICFcbiAgICAgICAgLy9cbiAgICAgICAgLy8gw6AgbGEgY29tcGlsYXRpb24gZW4gbW9kZSBkZXZlbG9wcGVtZW50LCBvbiBzdWJzdGl0dWUgX19QUk9EVUNUSU9OX19cbiAgICAgICAgLy8gYXZlYyBcImZhbHNlXCIsIGNlY2kgcGVybWV0IGQnYXZvaXIgbGVzIGxvZ2dlcnMgYWN0aWZzICFcbiAgICAgICAgLy9cbiAgICAgICAgLy8gbG9ycyBkJ3VuZSB1dGlsaXNhdGlvbiBlbiBtb2R1bGUgZXM2LCBpbCBuJ3kgYSBwYXMgZGUgc3Vic3RpdHV0aW9uIGRlIF9fUFJPRFVDVElPTl9fLFxuICAgICAgICAvLyBsZXMgbG9nZ2VycyBzb250IGRvbmMgYWN0aWZzIHBhciBkZWZhdXQgIVxuICAgICAgICAvL1xuICAgICAgICAvLyA+IFN1YnN0aXR1dGUgZ2xvYmFsIGNvbnN0YW50cyBjb25maWd1cmVkIGF0IGNvbXBpbGUgdGltZVxuICAgICAgICAvLyBjZi4gd2VicGFjay5jb25maWcuanNcbiAgICAgICAgLy8gb24gbWFzcXVlIGNldHRlIGNvbnN0YW50ZSBhZmluIGQnZXZpdGVyIFwicmVmZXJlbmNlZXJyb3Igbm90IGRlZmluZWRcIlxuICAgICAgICAoXCJfX1BST0RVQ1RJT05fX1wiLm1hdGNoKC90cnVlLykpID8gTG9nLmRpc2FibGVBbGwoKSA6IExvZy5lbmFibGVBbGwoKTtcbiAgICAgICAgdmFyIGxvZ25hbWUgPSBuYW1lIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgICByZXR1cm4gTG9nLmdldExvZ2dlcihsb2duYW1lKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGRlc2FjdGl2ZSB0b3VzIGxlcyBsb2dnZXJzXG4gICAgICogQGZ1bmN0aW9uIGRpc2FibGVBbGxcbiAgICAgKi9cbiAgICBkaXNhYmxlQWxsIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbG9nZ2VycyA9IExvZy5nZXRMb2dnZXJzKCk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGxvZ2dlcnMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChsb2dnZXJzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9nZ2VyID0gbG9nZ2Vyc1trZXldO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kaXNhYmxlQWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGFjdGl2ZSB0b3VzIGxlcyBsb2dnZXJzXG4gICAgICogQGZ1bmN0aW9uIGVuYWJsZUFsbFxuICAgICAqL1xuICAgIGVuYWJsZUFsbCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxvZ2dlcnMgPSBMb2cuZ2V0TG9nZ2VycygpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsb2dnZXJzKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobG9nZ2Vycywga2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZ2dlciA9IGxvZ2dlcnNba2V5XTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZW5hYmxlQWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXJCeURlZmF1bHQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Utils/LoggerByDefault.js\n");

/***/ }),

/***/ "./src/Leaflet/Layers/LayerEvent.js":
/*!******************************************!*\
  !*** ./src/Leaflet/Layers/LayerEvent.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Common_Utils_LayerUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/LayerUtils */ \"./src/Common/Utils/LayerUtils.js\");\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"layer-event\");\n/**\n * @classdesc\n *\n * Evenement sur les couches Geoportail\n * @private\n */\n\n/** @type {LayerEvent} */\n\nvar LayerEvent = {\n  _id: null,\n  _attributions: [],\n  _visibility: true,\n  _originators: [],\n\n  /**\n   * activation du controle attribution\n   *\n   * @param {Object} map - the map\n   *\n   * @return {Boolean} attribution controle is enable\n   */\n  isEnable: function isEnable(map) {\n    if (!map.attributionControl) {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * visibilité de la couche\n   *\n   * @param {Boolean} visibility - true|false\n   */\n  setVisible: function setVisible(visibility) {\n    logger.log(\"visibility\", visibility);\n    this._visibility = visibility;\n    this.fire(\"visibilitychange\");\n  },\n\n  /**\n   * visibilité de la couche\n   *\n   * @returns {Boolean} visibility\n   */\n  getVisible: function getVisible() {\n    return this._visibility;\n  },\n\n  /**\n   * fonction de suppresion d'un layer du controle des layers\n   *\n   * @param {Object} e - event\n   */\n  _onRemoveLayer: function _onRemoveLayer(e) {\n    logger.trace(\"onRemove event\", e);\n\n    if (e.layer._geoportal_id !== this._geoportal_id) {\n      return;\n    } // attributions non visibles\n\n\n    this.setVisible(false);\n  },\n\n  /**\n   * fonction d'ajout d'un layer du controle des layers\n   *\n   * @param {Object} e - event\n   */\n  _onAddLayer: function _onAddLayer(e) {\n    logger.trace(\"onAdd event\", e);\n\n    if (e.layer._geoportal_id !== this._geoportal_id) {\n      return;\n    } // attributions visibles\n\n\n    this.setVisible(true);\n  },\n\n  /**\n   * fonction de deplacement d'un layer\n   *\n   * @param {Object} e - event\n   */\n  _onMoveEndLayer: function _onMoveEndLayer(e) {\n    logger.trace(\"moveend event\", e); // mise à jour des attributions\n\n    this.updateAttributions(this._map, this);\n  },\n\n  /**\n   * updateAttributions\n   *\n   * @param {Object} map - the map\n   */\n  updateAttributions: function updateAttributions(map) {\n    // FIXME on peut realiser une mise à jour plus intelligente que cette manière brutale...\n    // Ex. mise en place de la notion 'hidden' de l'originators à desactiver\n    if (!this.isEnable(map)) {\n      return;\n    }\n\n    this.removeAttributions(map);\n    this.addAttributions(map);\n    this.fire(\"attributionchange\");\n  },\n\n  /**\n   * removeAttributions\n   *\n   * @param {Object} map - the map\n   */\n  removeAttributions: function removeAttributions(map) {\n    logger.trace(\"removeAttributions...\", this._geoportal_id); // suppression des attributions\n    // L.Map utilise la methode getAttribution() du layer.\n    // La construction concerne le layer courant.\n    // Cet evenement declenche la construction des attributions\n\n    if (!this.isEnable(map)) {\n      return;\n    }\n\n    for (var i = 0; i < this._attributions.length; i++) {\n      map.attributionControl.removeAttribution(this._attributions[i]);\n    } // suppression des attributions de liste\n\n\n    this._attributions = [];\n  },\n\n  /**\n   * addAttributions\n   *\n   * @param {Object} map - the map\n   */\n  addAttributions: function addAttributions(map) {\n    logger.trace(\"addAttributions...\", this._geoportal_id); // on interroge les originators en options pour obtenir les infos\n    // suivantes :\n    // - echelles\n    // - contraintes d'emprise\n    // - information sur le(s) proprietaire(s) du layer\n    // - ...\n    // mais on a besoin de qq informations sur la carte tels que :\n    // - zoom\n    // - bounds\n    // - ...\n\n    if (!this.isEnable(map)) {\n      return;\n    } // ajout des attributions\n\n\n    var topLeft = map.getBounds().getNorthWest();\n    var bottomRight = map.getBounds().getSouthEast();\n    var arrayBounds = [topLeft.lat, topLeft.lng, bottomRight.lat, bottomRight.lng];\n    var params = {\n      extent: arrayBounds,\n      // map.getBounds(),\n      zoom: map.getZoom(),\n      originators: this._originators,\n      visibility: this._visibility\n    };\n    logger.log(params);\n    var attributionsOriginators = _Common_Utils_LayerUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getAttributions(params);\n    logger.log(attributionsOriginators);\n\n    if (attributionsOriginators && attributionsOriginators.length !== 0) {\n      // on les ajoute dans la liste\n      // et on ajoute les attributions dans le controle Leaflet \"L.Control.Attribution\"\n      for (var i = 0; i < attributionsOriginators.length; i++) {\n        this._attributions.push(attributionsOriginators[i]);\n\n        map.attributionControl.addAttribution(attributionsOriginators[i]);\n      }\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LayerEvent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Leaflet/Layers/LayerEvent.js\n");

/***/ }),

/***/ "./src/Leaflet/Layers/WMTS.js":
/*!************************************!*\
  !*** ./src/Leaflet/Layers/WMTS.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var geoportal_access_lib_src_Utils_Helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! geoportal-access-lib/src/Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _LayerEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LayerEvent */ \"./src/Leaflet/Layers/LayerEvent.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../../package.json */ \"./package.json\", 1);\n/**\n* desativation JSHINT\n* W106 - Identifier '_geoportal_id' is not in camel case\n*/\n\n\n\n // package.json (extract version)\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLogger(\"wmts\");\n/**\n * @namespace\n * @alias L.geoportalLayers.WMTS\n * @classdesc\n *\n * Leaflet Layer Class for Geoportal WMTS Layers.\n *\n * Use {@link module:Layers.WMTS L.geoportalLayer.WMTS()} factory to create instances of that class.\n *\n * **Extends** Leaflet <a href=\"http://leafletjs.com/reference.html#tilelayer\" target=\"_blank\">L.TileLayer</a> native class.\n *\n */\n\nvar WMTS = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.TileLayer.extend(\n/** @lends WMTS.prototype */\n{\n  includes: _LayerEvent__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n  defaultWmtsParams: {\n    service: \"WMTS\",\n    request: \"GetTile\",\n    version: \"1.0.0\",\n    layer: \"\",\n    style: \"\",\n    tilematrixset: \"PM\",\n    format: \"image/jpeg\"\n  },\n\n  /**\n   *\n   * @constructor\n   * @param {String} url - url service\n   * @param {Object} options - options for function call.\n   * @param {Array} [options.originators] - originators\n   * @param {Array} [options.legends] - legends\n   * @param {Array} [options.metadata] - metadata\n   * @param {String} [options.title] - title\n   * @param {String} [options.description] - description\n   * @param {String} [options.quicklookUrl] - quicklookUrl\n   * @param {Object} options.paramsWmts - WMTS options\n   * @param {String} options.paramsWmts.service - \"WMTS\",\n   * @param {String} options.paramsWmts.request - \"GetTile\",\n   * @param {String} options.paramsWmts.version - \"1.0.0\",\n   * @param {String} options.paramsWmts.layer - \"\",\n   * @param {String} options.paramsWmts.style - \"\",\n   * @param {String} options.paramsWmts.tilematrixset - \"PM\",\n   * @param {String} options.paramsWmts.format - \"image/jpeg\"\n   * @param {Object} [options.paramsNative] - other options for L.TileLayer function (see {@link http://leafletjs.com/reference.html#tilelayer-options})\n   * @example\n   * var wmts = new WMTS(\"http://wxs.ign.fr/jhyvi0fgmnuxvfv0zjzorvdn/geoportail/wmts\", {\n   *     paramsNative : {\n   *         minZoom : 1,\n   *         maxZoom : 21\n   *     },\n   *     paramsWmts   : {\n   *         layer   : \"ORTHOIMAGERY.ORTHOPHOTOS\",\n   *         style   : \"normal\",\n   *         format  : \"image/jpeg\",\n   *         version : \"1.0.0\",\n   *         tilematrixset : \"PM\"\n   *     },\n   *     originators  : [],\n   *     legends      : [],\n   *     metadata     : [],\n   *     title        : \"\",\n   *     description  : \"\",\n   *     quicklookUrl : \"\"\n   * });\n   *\n   * @ignore\n   */\n  initialize: function initialize(url, options) {\n    logger.log(\"initialize\"); // parametres WMTS\n\n    this._wmtsParams = {};\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.extend(this._wmtsParams, this.defaultWmtsParams, options.paramsWmts); // appel du constructeur de la classe étendue\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.TileLayer.prototype.initialize.call(this, // tracker extension leaflet\n    // FIXME : gp-ext version en mode AMD\n    geoportal_access_lib_src_Utils_Helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].normalyzeUrl(url, {\n      \"gp-leaflet-ext\": _package_json__WEBPACK_IMPORTED_MODULE_4__.leafletExtVersion || _package_json__WEBPACK_IMPORTED_MODULE_4__.version\n    }, false), options.paramsNative); // sauvegarde des originators\n\n    this._originators = options.originators;\n    this._legends = options.legends;\n    this._metadata = options.metadata;\n    this._title = options.title;\n    this._description = options.description;\n    this._quicklookUrl = options.quicklookUrl; // id du Layer\n\n    this._geoportal_id = 0; // FIXME L.stamp(this);\n  },\n\n  /**\n   * event 'onAdd'\n   * (overwritten)\n   *\n   * @param {Object} map - map leaflet object\n   * @private\n   */\n  onAdd: function onAdd(map) {\n    logger.trace(\"onAdd layer\", this._geoportal_id); // recuperation de la map\n\n    this._map = map; // enregistrement de l'id Geoportal\n\n    this._geoportal_id = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.stamp(this); // appel de la methode de la classe étendue\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.TileLayer.prototype.onAdd.call(this, map);\n    this.setVisible(true); // y a t il des attributions/originators pour ce layer ?\n\n    this.updateAttributions(map);\n    /**\n     * Evenement sur l'ajout du layer sur la carte avec gestion des deplacements (zoom)\n     * Les deplacemnts sur la carte permettent de mettre à jour la liste des attributions.\n     */\n\n    map.on({\n      /**\n       * Permet de desactiver la visibilité des attributions sur le retrait\n       * d'un layer de type overlay.\n       * Les attributions ne doivent plus apparaitre si le layer est invisible !\n       */\n      overlayremove: this._onRemoveLayer,\n\n      /**\n       * Permet d'activer la visibilité des attributions sur l'ajout\n       * d'un layer de type overlay.\n       * Les attributions doivent apparaitre si le layer est visible !\n       */\n      overlayadd: this._onAddLayer,\n\n      /**\n       * Permet de desactiver la visibilité des attributions sur le retrait\n       * d'un layer de type layer.\n       * Les attributions ne doivent plus apparaitre si le layer est invisible !\n       */\n      layerremove: this._onRemoveLayer,\n\n      /**\n       * Permet d'activer la visibilité des attributions sur l'ajout\n       * d'un layer de type layer.\n       * Les attributions doivent apparaitre si le layer est visible !\n       */\n      layeradd: this._onAddLayer,\n\n      /**\n       * Permet d'ajouter des fonctionnalités lors de la creation du layer\n       * sur les evenements de fin de mouvemenent (move ou zoom)\n       */\n      moveend: this._onMoveEndLayer\n    }, this); // if (map.attributionControl) {\n    //     // ceci permet de mofifier le prefixe leaflet !\n    //     // ce dernier etant obligatoire...\n    //     // Ex. map.attributionControl.setPrefix(\"Plugin © IGN with Leaflet - 2016\");\n    //     // map.attributionControl.setPrefix(\"Leaflet + Géoportail\");\n    //     map.attributionControl.setPrefix(\"Plugin © \" +\n    //         \"<a href=\\\"http://www.ign.fr\\\" \" +\n    //         \"title=\\\"Institut national de l'information géographique et forestière\\\">IGN</a>\" +\n    //         \" with \" +\n    //         \"<a href=\\\"http://leafletjs.com/\\\" \" +\n    //         \"title=\\\"an open-source JavaScript library for mobile-friendly interactive maps\\\">Leaflet</a>\" +\n    //         \" - 2016\");\n    // }\n  },\n\n  /**\n   * event 'onRemove'\n   * (overwritten)\n   *\n   * @param {Object} map - map leaflet object\n   * @private\n   */\n  onRemove: function onRemove(map) {\n    logger.trace(\"onRemove layer\", this._geoportal_id); // recuperation de la map\n\n    this._map = map; // appel de la methode de la classe étendue\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.TileLayer.prototype.onRemove.call(this, map);\n    this.setVisible(false); // suppression des attributions\n\n    this.removeAttributions(map); // supprimer les evenements\n\n    map.off({\n      overlayremove: this._onRemoveLayer,\n      overlayadd: this._onAddLayer,\n      layerremove: this._onRemoveLayer,\n      layeradd: this._onAddLayer,\n      moveend: this._onMoveEndLayer\n    }, this);\n  },\n\n  /**\n   * event 'getTileUrl'\n   * (overwritten)\n   *\n   * @param {Object} tilePoint - Point leaflet object\n   *\n   * @returns {String} url\n   * @private\n   */\n  getTileUrl: function getTileUrl(tilePoint) {\n    // (Point, Number) -> String\n    // ex http://wxs.ign.fr/j5tcdln4ya4xggpdu4j0f0cn/geoportail/wmts?\n    // SERVICE=WMTS&\n    // REQUEST=GetTile&\n    // VERSION=1.0.0&\n    // LAYER=ORTHOIMAGERY.ORTHOPHOTOS&\n    // STYLE=normal&\n    // TILEMATRIXSET=PM&\n    // TILEMATRIX=2&\n    // TILEROW=2&\n    // TILECOL=1&\n    // FORMAT=image%2Fjpeg\n    var zoom = this._getZoomForUrl();\n\n    var url = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.template(this._url, {\n      s: this._getSubdomain(tilePoint)\n    });\n    return url + leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.getParamString(this._wmtsParams, url) + \"&tilematrix=\" + zoom + \"&tilerow=\" + tilePoint.y + \"&tilecol=\" + tilePoint.x;\n  },\n\n  /**\n   * event 'setParams'\n   * (overwritten)\n   *\n   * @param {Object} params - parameters\n   * @param {Object} noRedraw - no redraw\n   *\n   * @returns {Object} this\n   * @private\n   */\n  setParams: function setParams(params, noRedraw) {\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.extend(this._wmtsParams, params);\n\n    if (!noRedraw) {\n      this.redraw();\n    }\n\n    return this;\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (WMTS);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Leaflet/Layers/WMTS.js\n");

/***/ }),

/***/ "leaflet":
/*!********************!*\
  !*** external "L" ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = L;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJMXCI/ZmEyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJsZWFmbGV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBMOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///leaflet\n");

/***/ })

/******/ })["default"];