/*!
 * @brief French Geoportal Extension for Leaflet
 *
 * This software is released under the licence CeCILL-B (Free BSD compatible)
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-fr.txt
 * @see http://www.cecill.info/
 *
 * @copyright copyright (c) IGN 
 * @license CeCILL-B
 * @author IGN
 * @version 2.2.7
 * @date 18/11/2022
 *
 */

MousePosition =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Leaflet/Controls/MousePosition.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    var then$$1 = void 0;\n    try {\n      then$$1 = value.then;\n    } catch (error) {\n      reject(promise, error);\n      return;\n    }\n    handleMaybeThenable(promise, value, then$$1);\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = true;\n\n  if (hasCallback) {\n    try {\n      value = callback(detail);\n    } catch (e) {\n      succeeded = false;\n      error = e;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (succeeded === false) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = void 0;\n      var error = void 0;\n      var didError = false;\n      try {\n        _then = entry.then;\n      } catch (e) {\n        didError = true;\n        error = e;\n      }\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        if (didError) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, _then);\n        }\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcz8xMzY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyxLQUE0RDtBQUM3RCxDQUFDLFNBQytCO0FBQ2hDLENBQUMscUJBQXFCOztBQUV0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGOztBQUVoRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixzQkFBc0I7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUMseUNBQXlDLFVBQWM7QUFDeEQ7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxJQUFJO0FBQ2Q7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsd0JBQXdCO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsNkNBQTZDO0FBQ2hFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFVBQVUsTUFBTTtBQUNoQixVQUFVLE9BQU87QUFDakI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxNQUFNO0FBQ2hCO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0EscUJBQXFCLFlBQVk7QUFDakM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxVQUFVLElBQUk7QUFDZDtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxVQUFVLFNBQVM7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLFVBQVUsU0FBUztBQUNuQixVQUFVLFNBQVM7QUFDbkI7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsVUFBVSxTQUFTO0FBQ25CO0FBQ0EsV0FBVztBQUNYOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxZQUFZLFNBQVM7QUFDckIsYUFBYTtBQUNiOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOzs7O0FBSUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgdjQuMi44KzFlNjhkY2U2XG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB4O1xuICByZXR1cm4geCAhPT0gbnVsbCAmJiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cblxuXG52YXIgX2lzQXJyYXkgPSB2b2lkIDA7XG5pZiAoQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG59IGVsc2Uge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdm9pZCAwO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdm9pZCAwO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuLy8gdGVzdCBmb3Igd2ViIHdvcmtlciBidXQgbm90IGluIElFMTBcbnZhciBpc1dvcmtlciA9IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGltcG9ydFNjcmlwdHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIG5vZGVcbmZ1bmN0aW9uIHVzZU5leHRUaWNrKCkge1xuICAvLyBub2RlIHZlcnNpb24gMC4xMC54IGRpc3BsYXlzIGEgZGVwcmVjYXRpb24gd2FybmluZyB3aGVuIG5leHRUaWNrIGlzIHVzZWQgcmVjdXJzaXZlbHlcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvd2hlbi9pc3N1ZXMvNDEwIGZvciBkZXRhaWxzXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICB9O1xufVxuXG4vLyB2ZXJ0eFxuZnVuY3Rpb24gdXNlVmVydHhUaW1lcigpIHtcbiAgaWYgKHR5cGVvZiB2ZXJ0eE5leHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgbm9kZS5kYXRhID0gaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDI7XG4gIH07XG59XG5cbi8vIHdlYiB3b3JrZXJcbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbiAgLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG4gIHZhciBnbG9iYWxTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IG5ldyBBcnJheSgxMDAwKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICBxdWV1ZVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHZlcnR4ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKS5yZXF1aXJlKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2ggPSB2b2lkIDA7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTmV4dFRpY2soKTtcbn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzO1xuXG4gIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICB9XG5cbiAgdmFyIF9zdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cblxuICBpZiAoX3N0YXRlKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzW19zdGF0ZSAtIDFdO1xuICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZDtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZXNvbHZlKDEpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUkMShvYmplY3QpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIHJlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbmZ1bmN0aW9uIHNlbGZGdWxmaWxsbWVudCgpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpO1xufVxuXG5mdW5jdGlvbiBjYW5ub3RSZXR1cm5Pd24oKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiQkMSwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4kJDEuY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbiQkMSkge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiQkMSwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkMSA9PT0gdGhlbiAmJiBtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yLnJlc29sdmUgPT09IHJlc29sdmUkMSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoZW4kJDEpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciB0aGVuJCQxID0gdm9pZCAwO1xuICAgIHRyeSB7XG4gICAgICB0aGVuJCQxID0gdmFsdWUudGhlbjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgdGhlbiQkMSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHZvaWQgMCxcbiAgICAgIGNhbGxiYWNrID0gdm9pZCAwLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlID0gdm9pZCAwLFxuICAgICAgZXJyb3IgPSB2b2lkIDAsXG4gICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICBlcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgfVxuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIC8vIG5vb3BcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChzdWNjZWVkZWQgPT09IGZhbHNlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIGUpO1xuICB9XG59XG5cbnZhciBpZCA9IDA7XG5mdW5jdGlvbiBuZXh0SWQoKSB7XG4gIHJldHVybiBpZCsrO1xufVxuXG5mdW5jdGlvbiBtYWtlUHJvbWlzZShwcm9taXNlKSB7XG4gIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufVxuXG52YXIgRW51bWVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgICB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuXG4gICAgaWYgKCF0aGlzLnByb21pc2VbUFJPTUlTRV9JRF0pIHtcbiAgICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICAgICAgICB0aGlzLl9lbnVtZXJhdGUoaW5wdXQpO1xuICAgICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KHRoaXMucHJvbWlzZSwgdmFsaWRhdGlvbkVycm9yKCkpO1xuICAgIH1cbiAgfVxuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiBfZW51bWVyYXRlKGlucHV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fZWFjaEVudHJ5KGlucHV0W2ldLCBpKTtcbiAgICB9XG4gIH07XG5cbiAgRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uIF9lYWNoRW50cnkoZW50cnksIGkpIHtcbiAgICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7XG4gICAgdmFyIHJlc29sdmUkJDEgPSBjLnJlc29sdmU7XG5cblxuICAgIGlmIChyZXNvbHZlJCQxID09PSByZXNvbHZlJDEpIHtcbiAgICAgIHZhciBfdGhlbiA9IHZvaWQgMDtcbiAgICAgIHZhciBlcnJvciA9IHZvaWQgMDtcbiAgICAgIHZhciBkaWRFcnJvciA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgX3RoZW4gPSBlbnRyeS50aGVuO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkaWRFcnJvciA9IHRydWU7XG4gICAgICAgIGVycm9yID0gZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSQxKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICAgIGlmIChkaWRFcnJvcikge1xuICAgICAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBlbnRyeSwgX3RoZW4pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkMSkge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlJCQxKGVudHJ5KTtcbiAgICAgICAgfSksIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkMShlbnRyeSksIGkpO1xuICAgIH1cbiAgfTtcblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gX3NldHRsZWRBdChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuXG4gICAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgICAgaWYgKHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH1cbiAgfTtcblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKSB7XG4gICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gICAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEVudW1lcmF0b3I7XG59KCk7XG5cbi8qKlxuICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSByZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIGxldCBwcm9taXNlMyA9IHJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xufVxuXG4vKipcbiAgYFByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDInKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBQcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBQcm9taXNlLnJhY2UoW2FqYXgoJ2Zvby5qc29uJyksIHRpbWVvdXQoNTAwMCldKVxuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0JDEocmVhc29uKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUmVzb2x2ZXIoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG59XG5cbi8qKlxuICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICBUZXJtaW5vbG9neVxuICAtLS0tLS0tLS0tLVxuXG4gIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gIEJhc2ljIFVzYWdlOlxuICAtLS0tLS0tLS0tLS1cblxuICBgYGBqc1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgIC8vIG9uIGZhaWx1cmVcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBBZHZhbmNlZCBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICBgYGBqc1xuICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgYGBganNcbiAgUHJvbWlzZS5hbGwoW1xuICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSk7XG4gIGBgYFxuXG4gIEBjbGFzcyBQcm9taXNlXG4gIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmVyXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQGNvbnN0cnVjdG9yXG4qL1xuXG52YXIgUHJvbWlzZSQxID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gICAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpO1xuICAgIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgICBpZiAobm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZVxuICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICB9KTtcbiAgYGBgXG4gICBDaGFpbmluZ1xuICAtLS0tLS0tLVxuICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudFxuICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiB1c2VyLm5hbWU7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICB9KTtcbiAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gIH0pO1xuICBgYGBcbiAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgcmVhY2hlZFxuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gIH0pO1xuICBgYGBcbiAgIEFzc2ltaWxhdGlvblxuICAtLS0tLS0tLS0tLS1cbiAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICB9KTtcbiAgYGBgXG4gICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gIH0pO1xuICBgYGBcbiAgIFNpbXBsZSBFeGFtcGxlXG4gIC0tLS0tLS0tLS0tLS0tXG4gICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gICBgYGBqYXZhc2NyaXB0XG4gIGxldCByZXN1bHQ7XG4gICB0cnkge1xuICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAvLyBzdWNjZXNzXG4gIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgLy8gZmFpbHVyZVxuICB9XG4gIGBgYFxuICAgRXJyYmFjayBFeGFtcGxlXG4gICBgYGBqc1xuICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICBpZiAoZXJyKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9XG4gIH0pO1xuICBgYGBcbiAgIFByb21pc2UgRXhhbXBsZTtcbiAgIGBgYGphdmFzY3JpcHRcbiAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBzdWNjZXNzXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gZmFpbHVyZVxuICB9KTtcbiAgYGBgXG4gICBBZHZhbmNlZCBFeGFtcGxlXG4gIC0tLS0tLS0tLS0tLS0tXG4gICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gICBgYGBqYXZhc2NyaXB0XG4gIGxldCBhdXRob3IsIGJvb2tzO1xuICAgdHJ5IHtcbiAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAvLyBzdWNjZXNzXG4gIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgLy8gZmFpbHVyZVxuICB9XG4gIGBgYFxuICAgRXJyYmFjayBFeGFtcGxlXG4gICBgYGBqc1xuICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuICAgfVxuICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgIH1cbiAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgfVxuICAgICAgLy8gc3VjY2Vzc1xuICAgIH1cbiAgfSk7XG4gIGBgYFxuICAgUHJvbWlzZSBFeGFtcGxlO1xuICAgYGBgamF2YXNjcmlwdFxuICBmaW5kQXV0aG9yKCkuXG4gICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAvLyBmb3VuZCBib29rc1xuICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gIH0pO1xuICBgYGBcbiAgIEBtZXRob2QgdGhlblxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cblxuICAvKipcbiAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBgYGBqc1xuICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICB9XG4gIC8vIHN5bmNocm9ub3VzXG4gIHRyeSB7XG4gIGZpbmRBdXRob3IoKTtcbiAgfSBjYXRjaChyZWFzb24pIHtcbiAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgfVxuICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICB9KTtcbiAgYGBgXG4gIEBtZXRob2QgY2F0Y2hcbiAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuXG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgfTtcblxuICAvKipcbiAgICBgZmluYWxseWAgd2lsbCBiZSBpbnZva2VkIHJlZ2FyZGxlc3Mgb2YgdGhlIHByb21pc2UncyBmYXRlIGp1c3QgYXMgbmF0aXZlXG4gICAgdHJ5L2NhdGNoL2ZpbmFsbHkgYmVoYXZlc1xuICBcbiAgICBTeW5jaHJvbm91cyBleGFtcGxlOlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRBdXRob3IoKSB7XG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQXV0aG9yKCk7XG4gICAgfVxuICBcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZpbmRBdXRob3IoKTsgLy8gc3VjY2VlZCBvciBmYWlsXG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgcmV0dXJuIGZpbmRPdGhlckF1dGhlcigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBhbHdheXMgcnVuc1xuICAgICAgLy8gZG9lc24ndCBhZmZlY3QgdGhlIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgQXN5bmNocm9ub3VzIGV4YW1wbGU6XG4gIFxuICAgIGBgYGpzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICByZXR1cm4gZmluZE90aGVyQXV0aGVyKCk7XG4gICAgfSkuZmluYWxseShmdW5jdGlvbigpe1xuICAgICAgLy8gYXV0aG9yIHdhcyBlaXRoZXIgZm91bmQsIG9yIG5vdFxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGZpbmFsbHlcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG5cblxuICBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5ID0gZnVuY3Rpb24gX2ZpbmFsbHkoY2FsbGJhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvcjtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oY2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gUHJvbWlzZTtcbn0oKTtcblxuUHJvbWlzZSQxLnByb3RvdHlwZS50aGVuID0gdGhlbjtcblByb21pc2UkMS5hbGwgPSBhbGw7XG5Qcm9taXNlJDEucmFjZSA9IHJhY2U7XG5Qcm9taXNlJDEucmVzb2x2ZSA9IHJlc29sdmUkMTtcblByb21pc2UkMS5yZWplY3QgPSByZWplY3QkMTtcblByb21pc2UkMS5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZSQxLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UkMS5fYXNhcCA9IGFzYXA7XG5cbi8qZ2xvYmFsIHNlbGYqL1xuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIHZhciBsb2NhbCA9IHZvaWQgMDtcblxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IHNlbGY7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICBpZiAoUCkge1xuICAgIHZhciBwcm9taXNlVG9TdHJpbmcgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBwcm9taXNlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZVRvU3RyaW5nID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGxvY2FsLlByb21pc2UgPSBQcm9taXNlJDE7XG59XG5cbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UkMS5wb2x5ZmlsbCA9IHBvbHlmaWxsO1xuUHJvbWlzZSQxLlByb21pc2UgPSBQcm9taXNlJDE7XG5cbnJldHVybiBQcm9taXNlJDE7XG5cbn0pKSk7XG5cblxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lczYtcHJvbWlzZS5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/es6-promise/dist/es6-promise.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/package.json":
/*!********************************************************!*\
  !*** ./node_modules/geoportal-access-lib/package.json ***!
  \********************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, date, dependencies, deprecated, description, devDependencies, homepage, keywords, license, main, module, name, nyc, optionalDependencies, peerDependencies, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"_from\\\":\\\"geoportal-access-lib@3.2.0\\\",\\\"_id\\\":\\\"geoportal-access-lib@3.2.0\\\",\\\"_inBundle\\\":false,\\\"_integrity\\\":\\\"sha512-914Yk0C3mnYI+X56Y40t4OJwBiZ1nEbW8D9Dse4WcS54Au8ZpkZ9Ep1efNYMxC5618zqn7r4VvzF58Xa+BqzEQ==\\\",\\\"_location\\\":\\\"/geoportal-access-lib\\\",\\\"_phantomChildren\\\":{},\\\"_requested\\\":{\\\"type\\\":\\\"version\\\",\\\"registry\\\":true,\\\"raw\\\":\\\"geoportal-access-lib@3.2.0\\\",\\\"name\\\":\\\"geoportal-access-lib\\\",\\\"escapedName\\\":\\\"geoportal-access-lib\\\",\\\"rawSpec\\\":\\\"3.2.0\\\",\\\"saveSpec\\\":null,\\\"fetchSpec\\\":\\\"3.2.0\\\"},\\\"_requiredBy\\\":[\\\"/\\\"],\\\"_resolved\\\":\\\"https://registry.npmjs.org/geoportal-access-lib/-/geoportal-access-lib-3.2.0.tgz\\\",\\\"_shasum\\\":\\\"7a707b75743f01b5465cc72d1316f13f8b87df7a\\\",\\\"_spec\\\":\\\"geoportal-access-lib@3.2.0\\\",\\\"_where\\\":\\\"/home/JPBazonnais/Projets/API/geoportal-extensions\\\",\\\"author\\\":{\\\"name\\\":\\\"IGNF\\\"},\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/IGNF/geoportal-access-lib/issues\\\"},\\\"bundleDependencies\\\":false,\\\"date\\\":\\\"04/10/2022\\\",\\\"dependencies\\\":{\\\"es6-promise\\\":\\\"^4.2.4\\\",\\\"node-fetch\\\":\\\"^2.6.1\\\",\\\"xmldom\\\":\\\"^0.1.27\\\"},\\\"deprecated\\\":false,\\\"description\\\":\\\"French Geoportal resources access library\\\",\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.12.10\\\",\\\"@babel/plugin-transform-template-literals\\\":\\\"^7.12.1\\\",\\\"@babel/preset-env\\\":\\\"^7.12.11\\\",\\\"babel-loader\\\":\\\"^8.2.2\\\",\\\"chai\\\":\\\"^4.1.2\\\",\\\"clean-webpack-plugin\\\":\\\"^3.0.0\\\",\\\"copy-webpack-plugin\\\":\\\"^5.1.2\\\",\\\"eslint\\\":\\\"^7.18.0\\\",\\\"eslint-config-standard\\\":\\\"^16.0.2\\\",\\\"eslint-loader\\\":\\\"^4.0.2\\\",\\\"eslint-plugin-import\\\":\\\"^2.22.1\\\",\\\"eslint-plugin-node\\\":\\\"^11.1.0\\\",\\\"eslint-plugin-promise\\\":\\\"^4.2.1\\\",\\\"eslint-plugin-standard\\\":\\\"^5.0.0\\\",\\\"glob\\\":\\\"^7.1.2\\\",\\\"handlebars-layouts\\\":\\\"^3.1.4\\\",\\\"handlebars-webpack-plugin\\\":\\\"^1.4.1\\\",\\\"html-webpack-plugin\\\":\\\"^4.5.1\\\",\\\"istanbul-instrumenter-loader\\\":\\\"^3.0.1\\\",\\\"jsdoc-webpack-plugin\\\":\\\"^0.3.0\\\",\\\"loglevel\\\":\\\"^1.6.1\\\",\\\"mocha\\\":\\\"^7.2.0\\\",\\\"mocha-loader\\\":\\\"^5.1.5\\\",\\\"mocha-webpack\\\":\\\"^2.0.0-beta.0\\\",\\\"mochawesome\\\":\\\"^6.2.1\\\",\\\"nyc\\\":\\\"^15.1.0\\\",\\\"path\\\":\\\"^0.12.7\\\",\\\"replace-bundle-webpack-plugin\\\":\\\"^1.0.0\\\",\\\"sinon\\\":\\\"^9.2.4\\\",\\\"sinon-es6\\\":\\\"0.0.3\\\",\\\"speed-measure-webpack-plugin\\\":\\\"^1.4.2\\\",\\\"string-template\\\":\\\"^1.0.0\\\",\\\"terser-webpack-plugin\\\":\\\"^2.3.8\\\",\\\"webpack\\\":\\\"^4.46.0\\\",\\\"webpack-cli\\\":\\\"^3.3.12\\\",\\\"webpack-dev-server\\\":\\\"^3.11.2\\\",\\\"webpack-node-externals\\\":\\\"^2.5.2\\\",\\\"webpack-shell-plugin\\\":\\\"^0.5.0\\\"},\\\"homepage\\\":\\\"https://github.com/IGNF/geoportal-access-lib#readme\\\",\\\"keywords\\\":[\\\"geoportail\\\",\\\"webservice\\\",\\\"javascript\\\",\\\"es6\\\"],\\\"license\\\":\\\"CECILL-B\\\",\\\"main\\\":\\\"dist/GpServices-src.js\\\",\\\"module\\\":\\\"src/Gp.js\\\",\\\"name\\\":\\\"geoportal-access-lib\\\",\\\"nyc\\\":{\\\"include\\\":[\\\"src/**/*.js\\\"],\\\"instrument\\\":false,\\\"sourceMap\\\":false},\\\"optionalDependencies\\\":{},\\\"peerDependencies\\\":{},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/IGNF/geoportal-access-lib.git\\\"},\\\"scripts\\\":{\\\"build\\\":\\\"webpack --mode=none\\\",\\\"build:dev\\\":\\\"webpack --mode=development\\\",\\\"build:prod\\\":\\\"webpack --mode=production\\\",\\\"clean\\\":\\\"echo \\\\\\\"Warning: no yet implemented!\\\\\\\" && exit 0\\\",\\\"cover\\\":\\\"nyc --reporter=lcov --reporter=text npm run test\\\",\\\"doc\\\":\\\"npm run doc:serve\\\",\\\"doc:serve\\\":\\\"webpack-dev-server --content-base jsdoc --port 9001 --open\\\",\\\"eslint\\\":\\\"eslint src/\\\",\\\"sample\\\":\\\"npm run sample:serve\\\",\\\"sample:serve\\\":\\\"webpack-dev-server --mode=none --open-page samples/index-src.html --https --content-base . --output-public-path '/dist/' --port 9001 --open\\\",\\\"sample:serve:dev\\\":\\\"webpack-dev-server --mode=development --open-page samples/index-map.html --content-base . --output-public-path '/dist/' --port 9001 --open\\\",\\\"sample:serve:prod\\\":\\\"webpack-dev-server --mode=production --open-page samples/index-prod.html --content-base . --output-public-path '/dist/' --port 9001 --open\\\",\\\"setup\\\":\\\"npm install\\\",\\\"test\\\":\\\"mocha-webpack --reporter mochawesome --reporter-options reportDir=test-report,reportFilename=index --webpack-config ./test/webpack/webpack.test.js --glob \\\\\\\"test_*.js\\\\\\\" test/spec/\\\",\\\"test:end-to-end:serve\\\":\\\"webpack-dev-server --hot --config ./test/webpack/webpack.end-to-end.serve.js\\\",\\\"test:end-to-end:serve:docker\\\":\\\"webpack-dev-server --hot --config ./test/webpack/webpack.end-to-end.serve.docker.js\\\",\\\"test:serve\\\":\\\"webpack-dev-server --hot --config ./test/webpack/webpack.test.serve.js\\\",\\\"test:serve:docker\\\":\\\"webpack-dev-server --hot --config ./test/webpack/webpack.test.serve.docker.js\\\"},\\\"version\\\":\\\"3.2.0\\\"}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/package.json\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js":
/*!**************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Errors raised by API for one among three reasons : wrong API usage, underlying service error or unknown reason.\n *\n * @property {String} message - Error message\n * @property {Number} status - Error status : when {@link Gp.Error.TYPE_SRVERR}, gives the [HTTP status of the underlying web service response]{@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes} ; -1 otherwise.\n * @property {String} type - Error type ({@link Gp.Error.TYPE_SRVERR}, {@link Gp.Error.TYPE_USEERR} or {@link Gp.Error.TYPE_UNKERR}).\n *\n * @namespace\n * @alias Gp.Error\n * @param {Object|String} error - Options for creating error object. Can be a String (message) or an Object.\n * @param {String} error.message - Error message to return to user.\n * @param {enum} [error.type=TYPE_UNKERR] - Error type\n * @param {status} [error.status=-1] - Error status : when {@link Gp.Error.TYPE_SRVERR}, gives the [HTTP status of the underlying web service response]{@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}.\n *\n */\nfunction ErrorService (error) {\n    if (!(this instanceof ErrorService)) {\n        throw new TypeError(\"ErrorService constructor cannot be called as a function.\");\n    }\n\n    var e = error;\n    if (typeof error === \"string\" || error instanceof String) {\n        this.message = error;\n        this.status = -1;\n        this.type = ErrorService.TYPE_UNKERR;\n    } else {\n        this.message = e.message || \"undefined!?\";\n        this.type = e.type;\n        this.status = e.status || -1;\n    }\n\n    this.name = \"ErrorService\";\n    this.stack = (new Error()).stack;\n}\n\n/**\n * Error raised when underlying geoportal service answers on error.\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_SRVERR = \"SERVICE_ERROR\";\n/**\n * Error raised when funcion use is inappropriate\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_USEERR = \"USAGE_ERROR\";\n/**\n * Error raised when API can't perform the job for a reason other than the two other ones.\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_UNKERR = \"UNKNOWN_ERROR\";\n\n/**\n * @lends module:ErrorService\n */\nErrorService.prototype = Object.create(Error.prototype, {\n    constructor : {\n        value : ErrorService,\n        writable : true,\n        configurable : true\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ErrorService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL0V4Y2VwdGlvbnMvRXJyb3JTZXJ2aWNlLmpzPzg0YmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPLCtCQUErQiwyQkFBMkIsaUVBQWlFLDhEQUE4RCxFQUFFO0FBQ2hOLGNBQWMsT0FBTyxxQkFBcUIsMkJBQTJCLEdBQUcsMkJBQTJCLEtBQUssMkJBQTJCO0FBQ25JO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLE9BQU87QUFDbEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTywwQ0FBMEMsMkJBQTJCLGlFQUFpRSw4REFBOEQ7QUFDdE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVjLDJFQUFZLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL0V4Y2VwdGlvbnMvRXJyb3JTZXJ2aWNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFcnJvcnMgcmFpc2VkIGJ5IEFQSSBmb3Igb25lIGFtb25nIHRocmVlIHJlYXNvbnMgOiB3cm9uZyBBUEkgdXNhZ2UsIHVuZGVybHlpbmcgc2VydmljZSBlcnJvciBvciB1bmtub3duIHJlYXNvbi5cbiAqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2VcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzdGF0dXMgLSBFcnJvciBzdGF0dXMgOiB3aGVuIHtAbGluayBHcC5FcnJvci5UWVBFX1NSVkVSUn0sIGdpdmVzIHRoZSBbSFRUUCBzdGF0dXMgb2YgdGhlIHVuZGVybHlpbmcgd2ViIHNlcnZpY2UgcmVzcG9uc2Vde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfSFRUUF9zdGF0dXNfY29kZXN9IDsgLTEgb3RoZXJ3aXNlLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHR5cGUgLSBFcnJvciB0eXBlICh7QGxpbmsgR3AuRXJyb3IuVFlQRV9TUlZFUlJ9LCB7QGxpbmsgR3AuRXJyb3IuVFlQRV9VU0VFUlJ9IG9yIHtAbGluayBHcC5FcnJvci5UWVBFX1VOS0VSUn0pLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBhbGlhcyBHcC5FcnJvclxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBlcnJvciAtIE9wdGlvbnMgZm9yIGNyZWF0aW5nIGVycm9yIG9iamVjdC4gQ2FuIGJlIGEgU3RyaW5nIChtZXNzYWdlKSBvciBhbiBPYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gZXJyb3IubWVzc2FnZSAtIEVycm9yIG1lc3NhZ2UgdG8gcmV0dXJuIHRvIHVzZXIuXG4gKiBAcGFyYW0ge2VudW19IFtlcnJvci50eXBlPVRZUEVfVU5LRVJSXSAtIEVycm9yIHR5cGVcbiAqIEBwYXJhbSB7c3RhdHVzfSBbZXJyb3Iuc3RhdHVzPS0xXSAtIEVycm9yIHN0YXR1cyA6IHdoZW4ge0BsaW5rIEdwLkVycm9yLlRZUEVfU1JWRVJSfSwgZ2l2ZXMgdGhlIFtIVFRQIHN0YXR1cyBvZiB0aGUgdW5kZXJseWluZyB3ZWIgc2VydmljZSByZXNwb25zZV17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9IVFRQX3N0YXR1c19jb2Rlc30uXG4gKlxuICovXG5mdW5jdGlvbiBFcnJvclNlcnZpY2UgKGVycm9yKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVycm9yU2VydmljZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkVycm9yU2VydmljZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBlID0gZXJyb3I7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIiB8fCBlcnJvciBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSAtMTtcbiAgICAgICAgdGhpcy50eXBlID0gRXJyb3JTZXJ2aWNlLlRZUEVfVU5LRVJSO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGUubWVzc2FnZSB8fCBcInVuZGVmaW5lZCE/XCI7XG4gICAgICAgIHRoaXMudHlwZSA9IGUudHlwZTtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBlLnN0YXR1cyB8fCAtMTtcbiAgICB9XG5cbiAgICB0aGlzLm5hbWUgPSBcIkVycm9yU2VydmljZVwiO1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xufVxuXG4vKipcbiAqIEVycm9yIHJhaXNlZCB3aGVuIHVuZGVybHlpbmcgZ2VvcG9ydGFsIHNlcnZpY2UgYW5zd2VycyBvbiBlcnJvci5cbiAqXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQGNvbnN0YW50XG4gKiBAc3RhdGljXG4gKi9cbkVycm9yU2VydmljZS5UWVBFX1NSVkVSUiA9IFwiU0VSVklDRV9FUlJPUlwiO1xuLyoqXG4gKiBFcnJvciByYWlzZWQgd2hlbiBmdW5jaW9uIHVzZSBpcyBpbmFwcHJvcHJpYXRlXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBjb25zdGFudFxuICogQHN0YXRpY1xuICovXG5FcnJvclNlcnZpY2UuVFlQRV9VU0VFUlIgPSBcIlVTQUdFX0VSUk9SXCI7XG4vKipcbiAqIEVycm9yIHJhaXNlZCB3aGVuIEFQSSBjYW4ndCBwZXJmb3JtIHRoZSBqb2IgZm9yIGEgcmVhc29uIG90aGVyIHRoYW4gdGhlIHR3byBvdGhlciBvbmVzLlxuICpcbiAqIEB0eXBlIHtTdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqIEBzdGF0aWNcbiAqL1xuRXJyb3JTZXJ2aWNlLlRZUEVfVU5LRVJSID0gXCJVTktOT1dOX0VSUk9SXCI7XG5cbi8qKlxuICogQGxlbmRzIG1vZHVsZTpFcnJvclNlcnZpY2VcbiAqL1xuRXJyb3JTZXJ2aWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3IgOiB7XG4gICAgICAgIHZhbHVlIDogRXJyb3JTZXJ2aWNlLFxuICAgICAgICB3cml0YWJsZSA6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZSA6IHRydWVcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRXJyb3JTZXJ2aWNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/WPS.js":
/*!**************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/WPS.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n/**\n * @classdesc\n * Standard WPS\n *\n * @constructor\n * @alias Gp.Formats.WPS\n * @param {Object} options - options\n * @param {Object}   options.data - objet\n * @param {String}   options.method - POST|GET\n * @param {String}   options.param.service - \"WPS\"\n * @param {String}   options.param.version - \"1.0.0\"\n * @param {String}   options.param.identifier - \"gs:WPSElevation|gs:WPSLineElevation\"\n * @param {String}   options.param.rawdataoutput - \"result\"\n * @param {String}   options.param.request - \"Execute\"\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n * @private\n */\nfunction WPS (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur WPS()]\");\n\n    if (!(this instanceof WPS)) {\n        throw new TypeError(\"WPS constructor cannot be called as a function.\");\n    }\n\n    this.options = options || {};\n\n    /**\n     * Objet DATA\n     */\n    this.DataObject = this.options.data;\n\n    if (!this.DataObject) {\n        throw new TypeError(\"This data object is not defined !\");\n    }\n\n    /**\n     * param service.\n     * Par defaut, \"WPS\".\n     */\n    this.paramservice = this.options.param.service || \"WPS\";\n\n    /**\n     * param version.\n     * Par defaut, \"1.0.0\".\n     */\n    this.paramversion = this.options.param.version || \"1.0.0\";\n\n    /**\n     * param identifier\n     * Par defaut, \"gs:WPS\"\n     */\n    this.paramidentifier = this.options.param.identifier || \"gs:WPS\";\n\n    /**\n     * param rawdataoutput\n     * Par defaut, \"result\".\n     */\n    this.paramrawdataoutput = this.options.param.rawdataoutput || \"result\";\n\n    /**\n     * param request\n     * Par defaut, \"Execute\".\n     */\n    this.paramrequest = this.options.param.request || \"Execute\";\n\n    /**\n     * methode.\n     * Par defaut, \"GET\".\n     */\n    this.method = this.options.method || \"GET\";\n}\n\nWPS.prototype = {\n\n    /**\n     * @lends module:WPS#\n     */\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : WPS,\n\n    /**\n     * Template de la requête.\n     */\n    template : {\n        get : {\n            value : \"service=__SERVICE__\" +\n                \"&version=__VERSION__\" +\n                \"&rawdataoutput=__RAWDATAOUTPUT__\" +\n                \"&identifier=__IDENTIFIER__\" +\n                \"&request=__REQUEST__\" +\n                \"&datainputs=<!-- __DATAINPUTS__ -->\",\n\n            input : \"__KEY__=__DATA__\"\n\n        },\n        post : {\n\n            value : \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +\n                \"<wps:__REQUEST__ version=\\\"__VERSION__\\\" service=\\\"__SERVICE__\\\" \" +\n                \"__NAMESPACE__ __SCHEMALOCATION__>\" +\n                \"<ows:Identifier>__IDENTIFIER__</ows:Identifier>\" +\n                \"<wps:DataInputs>\" +\n                \"<!-- __DATAINPUTS__ -->\" +\n                \"</wps:DataInputs>\" +\n                \"<wps:ResponseForm>\" +\n                \"<wps:RawDataOutput>\" +\n                \"<ows:Identifier>__RAWDATAOUTPUT__</ows:Identifier>\" +\n                \"</wps:RawDataOutput>\" +\n                \"</wps:ResponseForm>\" +\n                \"</wps:__REQUEST__>\",\n\n            input : \"<wps:Input>\" +\n                \"<ows:Identifier>__KEY__</ows:Identifier>\" +\n                \"<wps:Data>\" +\n                \"<wps:LiteralData>__DATA__</wps:LiteralData>\" +\n                \"</wps:Data>\" +\n                \"</wps:Input>\"\n        }\n    },\n\n    /**\n     * Namespace par defaut de la requete POST.\n     *\n     * @returns {String} namespace\n     */\n    namespaceByDefault : function () {\n        var ns = [\n            \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n            \"xmlns=\\\"http://www.opengis.net/wps/1.0.0\\\"\",\n            \"xmlns:wfs=\\\"http://www.opengis.net/wfs\\\"\",\n            \"xmlns:wps=\\\"http://www.opengis.net/wps/1.0.0\\\"\",\n            \"xmlns:ows=\\\"http://www.opengis.net/ows/1.1\\\"\",\n            \"xmlns:gml=\\\"http://www.opengis.net/gml\\\"\",\n            \"xmlns:ogc=\\\"http://www.opengis.net/ogc\\\"\",\n            \"xmlns:wcs=\\\"http://www.opengis.net/wcs/1.1.1\\\"\",\n            \"xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\"\n        ];\n\n        return ns.join(\" \");\n    },\n\n    /**\n     * Schemalocation par defaut.\n     *\n     * @returns {String} schemaLocation\n     */\n    schemaLocationByDefault : function () {\n        return \"xsi:schemaLocation=\\\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\\\"\";\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out :\n     * //  service=__SERVICE__\n     * //  &version=__VERSION__\n     * //  &rawdataoutput=__RAWDATAOUTPUT__\n     * //  &identifier=__IDENTIFIER__\n     * //  &request=__REQUEST__\n     * //  &datainputs=\"__DATAINPUTS__\"\n     * //  avec __DATAINPUTS__ = __KEY__=__DATA__;...\n     *\n     * // POST out :\n     * //      <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n     * //      <wps:__REQUEST__ version=\\\"__VERSION__\\\" service=\\\"__SERVICE__\\\"\n     * //         __NAMESPACE__ __SCHEMALOCATION__>\n     * //          <ows:Identifier>__IDENTIFIER__</ows:Identifier>\n     * //          <wps:DataInputs>\n     * //              <!-- __DATAINPUTS__ -->\n     * //          </wps:DataInputs>\n     * //          <wps:ResponseForm>\n     * //              <wps:RawDataOutput>\n     * //              <ows:Identifier>__RAWDATAOUTPUT__</ows:Identifier>\n     * //              </wps:RawDataOutput>\n     * //          </wps:ResponseForm>\n     * //      </wps:__REQUEST__>\",\n     * //      avec __DATAINPUTS__\n     * //             <wps:Input>\n     * //                  <ows:Identifier>__KEY__</ows:Identifier>\n     * //                  <wps:Data>\n     * //                    <wps:LiteralData>__DATA__</wps:LiteralData>\n     * //                  </wps:Data>\n     * //              </wps:Input>\n     *\n     * @returns {Boolean} validation de la construction de la requete\n     */\n    processRequestString : function () {\n        this.logger.trace(\"WPS::processRequestString ()\");\n\n        var template = \"\";\n        if (this.method === \"POST\") {\n            template = this.template.post.value;\n        } else if (this.method === \"GET\") {\n            template = this.template.get.value;\n        } else {\n            this.logger.error(\"No other method supported by the service !\");\n            return false;\n        }\n\n        template = template.replace(/__SERVICE__/g, this.paramservice);\n        template = template.replace(/__VERSION__/g, this.paramversion);\n        template = template.replace(/__RAWDATAOUTPUT__/g, this.paramrawdataoutput);\n        template = template.replace(/__IDENTIFIER__/g, this.paramidentifier);\n        template = template.replace(/__REQUEST__/g, this.paramrequest);\n\n        // ajout +\n        if (this.method === \"POST\") {\n            template = template.replace(/__NAMESPACE__/g, this.namespaceByDefault);\n            template = template.replace(/__SCHEMALOCATION__/g, this.schemaLocationByDefault);\n        }\n\n        // ajout des datainputs\n        template = template.replace(/<!-- __DATAINPUTS__ -->/g, this.__addDataInputs());\n\n        if (!template) {\n            this.logger.warn(\"traduction tmpl : empty request !?\");\n            return false;\n        }\n\n        this.requestString = template;\n        this.logger.trace(\"traduction tmpl\", template);\n\n        return true;\n    },\n\n    /**\n     * Ajout des données\n     *\n     * @returns {String} Données concaténées dans une chaine\n     */\n    __addDataInputs : function () {\n        this.logger.trace(\"WPS::__addDataInputs ()\");\n\n        // c'est un peu grossier...\n        var tmpl = this.method === \"GET\" ? this.template.get.input : this.template.post.input;\n        var sep = this.method === \"GET\" ? \";\" : \"\";\n\n        var result = \"\";\n        var that = this;\n        var map = this.DataObject.getData();\n        for (var i = 0; i < map.length; i++) {\n            // FIXME closure ?\n            (function (j) {\n                if (sep) {\n                    sep = (j === map.length - 1) ? \"\" : \";\";\n                }\n                result = result.concat(that.__addDataInput(tmpl, map[j].k, map[j].v), sep);\n            })(i);\n        }\n\n        return result;\n    },\n\n    /**\n     * Ajout d'une donnée.\n     *\n     * @param {String} tmpl - template\n     * @param {String} key - clef\n     * @param {String} data - valeur\n     * @returns {String} chaine avec les substitutions clef/valeur\n     */\n    __addDataInput : function (tmpl, key, data) {\n        var tmp = tmpl;\n        tmp = tmp.replace(/__KEY__/g, key);\n        tmp = tmp.replace(/__DATA__/g, data);\n        return tmp;\n    },\n\n    /**\n     * Definir le mode de requête\n     *\n     * @param {String} method - GET|POST\n     */\n    setMethod : function (method) {\n        if (method === \"GET\" || method === \"POST\") {\n            this.method = method;\n        } else {\n            this.logger.warn(\"support only GET and POST method !\");\n        }\n    },\n\n    /**\n     * Retourne le mode de requete (GET|POST).\n     *\n     * @returns {AltiRequest.options.mode|String} methode (GET|POST)\n     */\n    getMethod : function () {\n        return this.method;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (WPS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/WPS.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Formats/XML.js":
/*!**************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Formats/XML.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* global require */\n\n\n// import __xmldom from \"xmldom\";\n\n/**\n * @classdesc\n *\n * Classe permettant d'écrire ou de lire du XML, sous forme de document DOM,\n * éventuellement selon des clés de lecture (readers) ou d'écriture (writers) spécifiques.\n *\n * @constructor\n * @alias Gp.Formats.XML\n *\n * @param {Object} [options] - options du format XML\n *\n * @param {Object} [options.reader] - Instance d'un Reader de service (AltiResponseReader, GeocodeRequestReader, etc.)\n *      utile pour interpréter le XML lorsque sa structure est connue.\n *      Ce reader doit comporter au moins une fonction statique read (root) permettant d'initialiser la lecture.\n *\n * @param {Object} [options.writers] - writers\n *\n * @param {String} [options.xmlString] - chaîne de caractère contenant du XML à interpréter.\n *\n * @private\n */\nfunction XML (options) {\n    if (!(this instanceof XML)) {\n        throw new TypeError(\"XML constructor cannot be called as a function.\");\n    }\n\n    // FIXME : notion de singleton\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur XML ()]\");\n\n    /**\n     * Chaîne de caractères contenant le texte XML\n     * @type {String}\n     */\n    this.xmlString = null;\n\n    /**\n     * DOM Element correspondant à la structure du XML.\n     * @type {DOMElement}\n     */\n    this.xmlDoc = null;\n\n    /**\n     * Objet contenant des fonctions de lecture des différentes balises XML.\n     * @type {Object}\n     */\n    this.reader = null;\n\n    // traitement des paramètres d'options s'il y en a\n    if (options) {\n        if (options.xmlString && typeof options.xmlString === \"string\") {\n            this.xmlString = options.xmlString;\n            // Si une chaine de caractère a été passée en entrée : on la transforme aussi en XML document\n            this.xmlDoc = __getXMLDOC(options.xmlString);\n        }\n        if (options.reader) {\n            this.setReader(options.reader);\n        }\n    }\n}\n\nXML.prototype = {\n\n    /**\n     * @lends module:XML\n     */\n\n    /*\n     * Constructeur (alias)\n     */\n    constructor : XML,\n\n    /**\n     * Méthode permettant de récupérer la chaîne de caractères associée au format XML\n     *\n     * @returns {String} xmlString - la chaîne de caractères correspondant au format XML\n     */\n    getXMLString : function () {\n        return this.xmlString;\n    },\n\n    /**\n     * Méthode permettant d'attribuer une chaîne de caractères au format XML (attribut xmlString).\n     * La méthode va aussi transformer cette chaîne de caractères en document XML,\n     * afin de remplir l'attribut xmlDoc.\n     *\n     * @param {String} xmlString - la chaîne de caractères correspondant au format XML\n     */\n    setXMLString : function (xmlString) {\n        if (xmlString && typeof xmlString === \"string\") {\n            this.xmlString = xmlString;\n            this.xmlDoc = __getXMLDOC(xmlString);\n        }\n    },\n\n    /**\n     * Méthode permettant de récupérer les readers associés au format XML, s'ils ont été définis\n     *\n     * @return {Object} readers - les readers associés au format XML, s'ils existent,\n     *      sous forme d'une collection de fonctions\n     */\n    getReader : function () {\n        return this.reader;\n    },\n\n    /**\n     * Méthode permettant d'attribuer des readers, sous la forme d'un objet de fonctions (node, data),\n     *      lorsqu'ils n'ont pas été définis lors de l'instanciation par exemple (new XML (options)).\n     *\n     * @param {Object} reader - Instance d'un Reader de service (AltiResponseReader, GeocodeRequestReader, etc.)\n     *      utile pour interpréter le XML lorsque sa structure est connue.\n     *      Ce reader doit comporter au moins une fonction statique read (root) permettant d'initialiser la lecture.\n     */\n    setReader : function (reader) {\n        if (reader && reader.read && typeof reader.read === \"function\") {\n            this.reader = reader;\n        }\n    },\n\n    /**\n     * Méthode permettant de récupérer le document XML associé au format, s'il existe.\n     *\n     * @return {DOMElement} xmlDoc - le document XML (DOM document node) s'il existe\n     */\n    getXMLDoc : function () {\n        return this.xmlDoc;\n    },\n\n    /**\n     * Setter\n     */\n    setXMLDoc : function (doc) {\n        this.xmlDoc = doc;\n    },\n    /**\n     * Méthode initialisant la lecture du XML, à partir d'un XML Document :\n     *      création d'un objet JavaScript contenant les informations du XML,\n     *      sauf dans le cas où il n'existe pas de XML Document à interpréter (retourne un objet vide).\n     *\n     * @return {Object} [parserOutput] - un objet JavaScript contenant les informations du XML :\n     * - soit toutes les informations si aucun reader n'a été spécifié à la création du format\n     * - soit les informations spécifiées dans le reader.\n     */\n    parse : function () {\n        // build xml document from xmlString\n        if (!this.xmlDoc && this.xmlString) {\n            this.xmlDoc = __getXMLDOC(this.xmlString);\n        }\n        if (this.xmlDoc) {\n            var root = __getRootNode(this.xmlDoc);\n            if (root) {\n                var parserOutput;\n                // call reader if exists\n                if (this.reader && this.reader.read) {\n                    parserOutput = this.reader.read(root);\n                } else {\n                    parserOutput = {};\n                    parserOutput[root.nodeName] = __readDefault(root);\n                }\n                return parserOutput;\n            } else {\n                return {};\n            }\n        }\n    }\n\n};\n\n/**\n * Méthode de la classe (privée) permettant de créer un XML Document à partir d'une chaîne de caractères XML,\n *      en utilisant DOMParser () lorsque c'est possible.\n *      For more information, see: https://dvcs.w3.org/hg/innerhtml/raw-file/tip/index.html#the-domparser-interface\n *\n * @private\n * @memberof XML\n * @method __getXMLDOC\n * @param {String} xmlString - xml string to be converted into DOM element\n * @return {DOMElement} - the corresponding XML Document\n */\nfunction __getXMLDOC (xmlString) {\n    if (typeof window === \"undefined\") {\n        // env. nodejs\n        var DOMParser = __webpack_require__(/*! xmldom */ \"xmldom\").DOMParser; // __xmldom.DOMParser;\n        return new DOMParser().parseFromString(xmlString, \"text/xml\");\n    } else {\n        // env. browser\n\n        var parser;\n        var xmlDoc;\n        var errorMsg = \"Erreur lors du parsing de la réponse du service : XML non conforme\";\n\n        if (window.ActiveXObject) {\n            // Internet Explorer < 9\n            xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.async = false;\n            xmlDoc.loadXML(xmlString);\n            var parseError = xmlDoc.parseError;\n            if (parseError.errorCode) {\n                if (parseError.line && parseError.linepos) {\n                    errorMsg += \"( ligne \" + parseError.line + \", colonne \" + parseError.linepos;\n                }\n                if (parseError.reason) {\n                    errorMsg += \":  \" + parseError.reason + \")\";\n                }\n                throw new Error(errorMsg);\n            }\n            return xmlDoc;\n        } else if (window.DOMParser) {\n            // les autres (Chrome, Mozilla, IE >= 9)\n            parser = new window.DOMParser();\n            try {\n                xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n            } catch (e) {\n                // Internet Explorer browser raises exception if xmlString is not valid XML\n                if (e.message === \"SyntaxError\") {\n                    throw new Error(errorMsg);\n                } else {\n                    throw new Error(\"Erreur lors du parsing de la réponse du service : \" + e.message);\n                }\n            }\n            // look for parsing error in case no exception was raised\n            if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\n                var parsererror = xmlDoc.getElementsByTagName(\"parsererror\");\n                for (var i = 0; i < parsererror.length; i++) {\n                    var content = parsererror[i].innerHTML;\n                    // except in case parsererror is just because of huge xml, but parsing is done.\n                    if (content.indexOf(\"Huge input lookup\") === -1) {\n                        errorMsg += \"(\" + content + \")\";\n                        throw new Error(errorMsg);\n                    }\n                }\n            } else if (!xmlDoc.documentElement) { // may happen in chrome browser\n                throw new Error(errorMsg);\n            }\n            return xmlDoc;\n        } else {\n            // FIXME\n            throw new Error(\"Incompatible DOM Parser pour ce navigateur !\");\n        }\n    }\n}\n\n/**\n * Méthode de la classe (privée) permettant de récupérer le noeud racine du document,\n *      à partir d'un document node (nodeType=9), puis lecture de ce noeud (readNode)\n *\n * @private\n * @memberof XML\n * @method __getRootNode\n * @param {DOMElement} [xmlDoc] - a Document Node\n * @return {DOMElement} root - the document root node\n */\nfunction __getRootNode (xmlDoc) {\n    var root;\n    if (xmlDoc.nodeType === 9) {\n        // INFO : nodeType 9 represents the entire document (the root-node of the DOM tree)\n        root = xmlDoc.documentElement;\n    } else if (xmlDoc.nodeType === 1) {\n        root = xmlDoc;\n    }\n    return root;\n}\n\n/**\n * Méthode de la classe (privée) permettant de lire automatiquement un noeud XML,\n *      lorsqu'aucun reader spécifique n'a été spécifié (parser brut)\n *\n * @private\n * @memberof XML\n * @method readDefault\n * @param {DOMElement} node - a DOM element node\n * @example final data object looks like :\n *          data = {\n *              attributeName: attributeValue,\n *              childName: {\n *                  attributeName: attributeValue,\n *                  attributeName: attributeValue,\n *                  childName: {\n *                      \"textContent\": textContent\n *                  },\n *                  childName: {\n *                      childName: {\n *                          attributeName:attributeValue\n *                      }\n *                  }\n *              }\n *          }\n */\nfunction __readDefault (node) {\n    var data = {};\n\n    // if element node has attributes, set their values to data\n    if (node.attributes.length > 0) {\n        var dataAttributes = __getAttributes(node);\n        data[\"attributes\"] = dataAttributes;\n    }\n\n    // if element node has childNodes, read them and set them to data\n    if (node.hasChildNodes()) {\n        var childData = {};\n        var child;\n        var children = node.childNodes;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 3) { // TEXT_NODE\n                data[\"textContent\"] = child.nodeValue;\n            } else if (child.nodeType === 1) {\n                childData = __readDefault(child);\n\n                if (!data[child.nodeName]) {\n                    // store childData in an object\n                    data[child.nodeName] = childData;\n                } else {\n                    // in case several childNodes has the same name : store them in an array.\n                    // if data[nodeName] already exists but is not an array\n                    if (!Array.isArray(data[child.nodeName])) {\n                        var old = data[child.nodeName];\n                        data[child.nodeName] = [];\n                        data[child.nodeName].push(old);\n                    }\n                    data[child.nodeName].push(childData);\n                }\n            }\n            // TODO : manage other node types (4=CDATA, etc)\n        }\n    }\n\n    return data;\n}\n\n/**\n * Méthode de la classe (privée) permettant de récupérer les attributs d'un noeud élément\n *\n * @private\n * @memberof XML\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (XML);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Formats/XML.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Protocols/JSONP.js":
/*!******************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Protocols/JSONP.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/**\n * JSONP : Implémentation du protocole JSONP de la plateforme Géoportail\n *\n * @module JSONP\n * @private\n * @alias Gp.Protocols.JSONP\n */\n\n\n// cf. https://github.com/sobstel/jsonp.js\nvar JSONP = {\n\n    /**\n     * Construction d'un identifiant statique basé sur le timestamp,\n     * et qui s'incremente de +1 à chaque appel\n     */\n    uuid : (function () {\n        var id = Math.floor(Date.now());\n        return function () {\n            return id++;\n        };\n    })(),\n\n    /**\n     * Cette fonction réalise l'appel du service fourni via le paramètre \"options.url\"\n     * en mettant en œuvre le protocole JSONP.\n     *\n     * @method call\n     * @static\n     * @param {Object} options - parametres d'invocation du service en JSONP\n     * @param {String} options.url - URL du service à invoquer (indépendamment du protocole JSONP).\n     *  Cette URL contient déjà les paramètres du service.\n     *  Si le paramètre dédié à la mise en oeuvre du protocole JSONP (callback=xxx) n'est pas présent, il est rajouté par la fonction ;\n     *  sa valeur est déterminée en fonction du paramètre callbackName.\n     * @param {Number} [options.timeOut = 0] - Nombre de ms au bout duquel on considère que le service n'a pas répondu.\n     *  Une valeur de 0 pour ce paramètre permet de désactiver la gestion du timeOut.\n     * @param {String} [options.callbackSuffix = null] - Suffixe de la fonction de callback à rajouter sur l'URL.\n     *  Si aucun suffixe n'est spécifié (cas par défaut), on utilisera l'identifiant this.uuid () comme suffixe. Ex: \"callback1458574396582 ()\"\n     * @param {String} [options.callbackName = gp.protocol.jsonp] - Valeur du paramètre callback à rajouter sur l'URL.\n     *  Si l'URL fournie contient déjà le paramètre callback, le paramètre callbackName ne sera pas pris en compte.\n     *  La fonction de callback est créée dynamiquement par la fonction JSONP ;\n     *  elle a deux fonctions :\n     *    elle annule la condition de timeOut\n     *    puis appelle la fonction fournie par l'utilisateur via le paramètre onResponse.\n     * @param {Function} options.onResponse - Nom de la fonction qui sera appelée lors de la réception des résultats du service.\n     *  Ce paramètre sera ignoré si l'URL contient déjà le paramètre callback.\n     *  La fonction de rappel appelée sera alors celle ayant pour nom la valeur de ce paramètre.\n     * @param {Function} [options.onTimeOut] - Nom de la fonction qui sera appelée en cas de non réponse du service.\n     *  Le temps au bout duquel on considère que le service n'a pas répondu est déterminé par le paramètre timeOut.\n     *  @example\n     *  var options = {\n     *      url : 'http://localhost/some/test.json&callback=myResults',\n     *      timeOut : 100,\n     *      callbackName : 'myResults',\n     *      callbackSuffix : \"\",\n     *      onResponse : function (response) {\n     *          console.log('results : ', response);\n     *      },\n     *\n     *   };\n     *   JSONP.call(options);\n     */\n    call : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"JSONP\");\n        logger.trace(\"[JSONP::call ()]\");\n\n        // analyse parametres\n\n        if (!options) {\n            logger.error(\"missing parameter : options !\");\n            throw new Error(\"missing parameter : options !\");\n        }\n\n        if (!options.url) {\n            logger.error(\"missing parameter : options.url !\");\n            throw new Error(\"missing parameter : options.url !\");\n        }\n\n        if (!options.timeOut) {\n            logger.info(\"setting 'options.timeOut' default value\");\n            options.timeOut = 0;\n        }\n\n        // FIXME si un callback coté client a été mis en place,\n        // cette condition sur cette methode n'a pas de sens !?\n        if (!options.onResponse) {\n            logger.error(\"missing parameter : options.onResponse !\");\n            throw new Error(\"missing parameter : options.onResponse !\");\n            // FIXME doit on definir un callback interne par defaut !?\n            // options.onResponse = function (data) {\n            //    console.log(\"response callback (inner) : \", data);\n            // };\n        }\n\n        // ID du callback à utiliser : null ou string.\n        // si l'utilisateur a spécifié un suffixe pour le callback, on le récupère comme un ID (ex: options.callbackSuffix = \"\")\n        // sinon, on utilise un timestamp : this.uuid ()\n        var callbackId = (typeof options.callbackSuffix === \"string\") ? options.callbackSuffix : this.uuid();\n\n        // on recherche le parametre callback et son nom de fonction dans l'url\n        var urlHasCallbackKey = false;\n        var urlHasCallbackName = false;\n\n        var idx = options.url.indexOf(\"callback=\");\n\n        if (idx !== -1) {\n            urlHasCallbackKey = true;\n            // extraction callbackName de l'url : entre \"callback=\" et \"&\" ou fin de ligne\n            var j = options.url.indexOf(\"&\", idx);\n            if (j === -1) {\n                j = options.url.length;\n            }\n\n            // on ecrase le parametre options.callbackName s'il avait été défini\n            var callbackName = options.url.substring(idx + 9, j);\n\n            if (callbackName) {\n                urlHasCallbackName = true;\n                options.callbackName = callbackName;\n                logger.info(\"setting 'options.callbackName' value (\" + options.callbackName + \") from 'options.url' parameter\");\n            }\n        }\n\n        // on ajoute le parametre callback dans l'URL s'il n'existe pas\n        if (!urlHasCallbackKey) {\n            // gestion des autres param. et \"?\"\n            var k = options.url.indexOf(\"?\");\n            if (k === -1) {\n                // aucun param., ni de '?'\n                options.url = options.url + \"?\" + \"callback=\";\n            } else if (k === options.url.length) {\n                // uniquement le '?'\n                options.url = options.url + \"callback=\";\n            } else {\n                // le '?' et les param. existent\n                options.url = options.url + \"&\" + \"callback=\";\n            }\n            logger.info(\"setting callback default key in 'options.url' : \" + options.url);\n        }\n\n        // utilisation de la fonction callback coté client ?\n        var HasCallbackName = options.callbackName ? true : urlHasCallbackName;\n\n        // on ajoute le nom de la fonction callback dans l'URL si elle n'existe pas\n        if (!urlHasCallbackName) {\n            // fonction callback par defaut\n            if (!options.callbackName) {\n                logger.info(\"setting 'options.callbackName' default value\");\n                options.callbackName = \"callback\"; // ou \"gp.protocol.jsonp\" ?\n                // info : si on ne veut pas gerer d'ID dans le callback,\n                // options.callbackSuffix = \"\"\n                if (callbackId || callbackId === \"\") {\n                    options.callbackName += callbackId;\n                }\n            }\n            options.url = options.url.replace(\"callback=\", \"callback=\" + options.callbackName);\n            logger.info(\"setting callback function name in 'options.url' : \" + options.url);\n        }\n\n        // timeOut par defaut\n        if (!options.onTimeOut) {\n            logger.info(\"setting 'options.onTimeOut' default value\");\n            /** callback timeout par defaut */\n            options.onTimeOut = function (/* error */) {\n                console.log(\"TimeOut while invoking url : \" + options.url);\n            };\n        }\n\n        if (!HasCallbackName) {\n            var self = this;\n\n            // event du timeout\n            var onTimeOutTrigger = null;\n\n            // declenche le timeout si > à 0 !\n            if (options.timeOut > 0) {\n                onTimeOutTrigger = window.setTimeout(\n                    function () {\n                        /** fonction de reponse du service */\n                        window[options.callbackName] = function () {};\n                        options.onTimeOut();\n                        self._deleteScript(callbackId);\n                    }, options.timeOut);\n            }\n\n            // FIXME le nom de la fonction n'accepte pas de namespace !\n            // ex. Gp.Function.callback\n            /**\n            * fonction de reponse du service\n            * @param {Object} data - data\n            * @private\n            */\n            window[options.callbackName] = function (data) {\n                window.clearTimeout(onTimeOutTrigger);\n                options.onResponse(data);\n                self._deleteScript(callbackId);\n            };\n        }\n\n        this._createScript(callbackId, options.url);\n    },\n\n    /**\n    * create Script\n    * @param {String} callbackId - callback Id\n    * @param {String} url - url\n    * @private\n    */\n    _createScript : function (callbackId, url) {\n        var scriptu;\n        var scripto = document.getElementById(\"results\" + callbackId);\n\n        scriptu = document.createElement(\"script\");\n        scriptu.setAttribute(\"type\", \"text/javascript\");\n        scriptu.setAttribute(\"src\", url);\n        scriptu.setAttribute(\"charset\", \"UTF-8\");\n        scriptu.setAttribute(\"id\", \"results\" + callbackId);\n        scriptu.setAttribute(\"async\", \"true\"); // FIXME async ?\n        // head ou body ou autres ?\n        var node = document.documentElement || document.getElementsByTagName(\"head\")[0];\n        if (scripto === null) {\n            node.appendChild(scriptu);\n        } else {\n            // s'il existe déjà, on le remplace !\n            node.replaceChild(scriptu, scripto);\n        }\n    },\n\n    /**\n    * delete Script\n    * @param {String} callbackId - callback Id\n    * @private\n    */\n    _deleteScript : function (callbackId) {\n        var script = document.getElementById(\"results\" + callbackId);\n        if (script) {\n            var node = script.parentNode || document.documentElement;\n            if (!node) {\n                return;\n            }\n            node.removeChild(script);\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (JSONP);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Protocols/JSONP.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Protocols/Protocol.js":
/*!*********************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Protocols/Protocol.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var _XHR__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XHR */ \"./node_modules/geoportal-access-lib/src/Protocols/XHR.js\");\n/* harmony import */ var _JSONP__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./JSONP */ \"./node_modules/geoportal-access-lib/src/Protocols/JSONP.js\");\n/**\n * Interface de dialogue avec les webservices\n *\n * @module Protocols\n * @private\n * @alias Gp.Protocols\n */\n\n\n\n\nvar Protocol = {\n\n    /**\n     * Interface unique d\"envoi d\"une requête.\n     *\n     * @method send\n     * @static\n     * @param {Object} options - options generales\n     * @param {String} options.url      - url du service\n     * @param {String} options.method   - GET, POST, PUT, DELETE\n     * @param {String} options.protocol - XHR | JSONP\n     * @param {String} options.format   - format de la reponse du service : json, xml ou null (brute)...\n     * @param {String} options.wrap     - encapsuler la reponse du service dans du JSON : true|false (true par defaut sur le protocole JSONP)\n     * @param {String} options.callbackSuffix - suffixe de la fonction de callback (JSONP uniquement) (ex: si callbackSuffix=\"\", la fonction s'appellera \"callback\")\n     * @param {String} options.timeOut  - 0 ms\n     * @param {Boolean} options.nocache  - true|false\n     * @param {Object|String} options.data        - content (post) ou param (get)\n     * @param {Object|String} options.headers     - (post) ex. referer\n     * @param {Object|String} options.content - (post) ex. \"application/json\"\n     * @param {String} options.scope       - this (TODO)\n     * @param {Function} options.onResponse - callback\n     * @param {Function} options.onFailure - callback\n     * @param {Function} options.onTimeOut - callback\n     * @param {String} options.proxyUrl -  (TODO)\n     */\n    send : function (options) {\n        // INFO\n        // \"output\" - param est interne à la classe \"Protocol\" (parametrable via \"wrap\"), et à ajouter à l\"url\n        //      ce param est independant du service car il est géré par le filtre LUA :\n        //          ex. json|xml (json par defaut).\n        //          Ce param. permet d\"encapsuler du XML dans du JSON :\n        //              {http : {status:200, error:null},xml :\"réponse du service\"}\n        //          Utile pour les services qui ne repondent que du XML (ex. Geocodage)\n        //\n        // |-------------------------------------------------|\n        // |      \\service |      |     |                    |\n        // | output\\ format| json | xml |     remarques      |\n        // |--------\\------|------|-----|--------------------|\n        // |    json       | json | json| json/xml encapsulé |\n        // |    xml        | json | xml | param inactif      |\n        // |-------------------------------------------------|\n        // ex. le service demande une reponse native au \"format\" json et avec un \"output\" json.\n        // on a donc une reponse json encapsulé dans un json : ce qu'on ne souhaite pas !\n        // dans ce cas on ne renseigne pas output=json\n\n        // INFO\n        // \"wrap\" - choix d\"encapsuler ou non les reponses dans du JSON.\n        //      Par defaut, on encapsule uniquement les reponses sur le protocole JSONP (et qui sont en xml) !\n\n        // INFO\n        // \"callback\" - param est interne à la classe \"Protocol\" (non parametrable), et à ajouter à l\"url\n        //      ce param est independant du service car il est géré aussi par le filtre LUA :\n        //          ex. callback|null\n        //          Ce param. permet de renvoyer une reponse javascript :\n        //              callback ({http : {status:200, error:null},xml :\"réponse du service\"})\n        //          Ce param. est non renseigné par defaut car pour du JSONP, on utilise le\n        //          le protocol JSONP, et ce dernier implemente déjà le callback !\n\n        // settings par defaut\n        var settings = options || {\n            method : \"GET\",\n            // protocol : \"JSONP\",\n            protocol : \"XHR\",\n            timeOut : 0,\n            format : null,\n            wrap : true,\n            nocache : true,\n            output : \"json\",\n            callback : null,\n            callbackSuffix : null\n        };\n\n        // on determine l'environnement d'execution : browser ou non ?\n        // et on stoppe pour nodeJS... sur un protocole JSONP !\n        if (typeof window === \"undefined\" && options.protocol === \"JSONP\") {\n            console.log(\"Value (s) for parameter (s) 'protocol=JSONP (instead use XHR)' not supported to NodeJS\");\n            return;\n        }\n\n        if (options.protocol === \"XHR\" || options.format === \"json\") {\n            settings.wrap = false;\n        } else if (options.protocol === \"JSONP\" && options.format === \"xml\") {\n            settings.wrap = true;\n        }\n\n        settings.callback = null; // FIXME non géré !?\n        settings.output = settings.wrap ? \"json\" : null;\n\n        // on encapsule les reponses dans un objet JSON\n        if (settings.wrap) {\n            var params = {};\n            params.output = settings.output;\n            params.callback = settings.callback;\n            delete params.callback; // FIXME non géré !?\n            settings.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].normalyzeUrl(options.url, params);\n        }\n\n        // choix de l\"implementation :\n        // XHR ou JSONP\n        switch (settings.protocol) {\n            case \"XHR\":\n                // on normalise l'url (gestion du cache)\n                if (options.method === \"GET\" && options.nocache) {\n                    settings.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].normalyzeUrl(settings.url, {\n                        t : new Date().getTime()\n                    });\n                }\n                // appel du service en XHR\n                _XHR__WEBPACK_IMPORTED_MODULE_1__[\"default\"].call(settings);\n                break;\n            case \"JSONP\":\n\n                // on normalise l'url si les params. sont renseignés dans la string|object \"data\"\n                if (settings.data) {\n                    settings.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].normalyzeUrl(settings.url, settings.data);\n                }\n\n                // appel du service en JSONP\n                _JSONP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].call(settings);\n                break;\n            default:\n                throw new Error(\"protocol not supported (XHR|JSONP) !\");\n        }\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Protocol);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Protocols/Protocol.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Protocols/XHR.js":
/*!****************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Protocols/XHR.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! es6-promise */ \"./node_modules/es6-promise/dist/es6-promise.js\");\n/* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(es6_promise__WEBPACK_IMPORTED_MODULE_2__);\n/* global Promise, require, XDomainRequest */\n\n\n\n\n// import __request from \"request\";\n// import __xmldom from \"xmldom\";\n\n/**\n * Ajax Request (use of Promises)\n *\n * @module XHR\n * @alias Gp.Protocols.XHR\n * @see dependance 'es6-promise'\n */\n\n// cf. https://xhr.spec.whatwg.org/\n// cf. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\nvar XHR = {\n\n    /**\n     * Interface unique d'envoi d'une requête.\n     *\n     * @method call\n     * @static\n     * @param {Object} settings - options generales\n     * @param {String} settings.url    - url du service\n     * @param {String} settings.method - GET, POST, PUT, DELETE\n     * @param {String} settings.format - format de la reponse du service : json, xml ou null (brute)\n     * @param {String} settings.data   - content (post) ou param (get)\n     * @param {String} settings.proxy  - proxy url\n     * @param {Object|String} settings.headers - (post) ex. referer\n     * @param {Object|String} settings.content - (post) ex. 'application/json'\n     * @param {String} settings.timeOut - timeout = 0 par defaut\n     * @param {String} settings.scope - this\n     * @param {Function} settings.onResponse - callback\n     * @param {Function} settings.onFailure  - callback\n     */\n    call : function (settings) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"XHR\");\n        logger.trace(\"[XHR::call()]\");\n\n        // FIXME\n        // To polyfill the global environment\n        es6_promise__WEBPACK_IMPORTED_MODULE_2___default.a.polyfill();\n\n        // test sur les settings obligatoires\n        if (!settings.url) {\n            throw new Error(\"missing parameter : url is not defined !\");\n        }\n\n        if (!settings.method) {\n            throw new Error(\"missing parameter : method is not defined !\");\n        }\n\n        if (!settings.format) {\n            settings.format = \"text\"; // reponse brute !\n        }\n\n        var options = {};\n        options.url = settings.url;\n        options.data = settings.data ? settings.data : null;\n        options.method = settings.method;\n        options.timeOut = settings.timeOut || 0;\n        options.scope = settings.scope || this;\n        options.proxy = settings.proxy || null;\n        options.content = settings.content || null;\n        options.headers = settings.headers || {\n            referer : \"http://localhost\"\n        };\n\n        // test sur les valeurs de 'settings.method'\n        switch (settings.method) {\n            case \"DELETE\":\n            case \"GET\":\n                break;\n            case \"PUT\":\n            case \"POST\":\n                // on force sur ces params spécifiques au mode POST\n                options.content = settings.content ? settings.content : \"application/x-www-form-urlencoded\"; // FIXME en attente des services : bascule en \"application/xml\" ou \"application/json\"\n                options.headers = settings.headers ? settings.headers : { referer : \"http://localhost\" }; // FIXME parametrable...\n                break;\n            case \"HEAD\":\n            case \"OPTIONS\":\n                throw new Error(\"HTTP method not yet supported !\");\n            default:\n                throw new Error(\"HTTP method unknown !\");\n        }\n\n        // test sur les valeurs de 'settings.format'\n        switch (settings.format) {\n            case \"text\":\n                this.__call(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            case \"json\":\n                this.__callJSON(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            case \"xml\":\n                this.__callXML(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            default:\n                throw new Error(\"This output Format is not yet supported !\");\n        }\n    },\n\n    /**\n     * Requete\n     *\n     * @method __call\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __call : function (options) {\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"XHR\");\n        logger.trace(\"[XHR::__call()]\");\n\n        var promise = new Promise(\n            function (resolve, reject) {\n                // traitement du corps de la requête\n                var corps = (options.method === \"POST\" || options.method === \"PUT\") ? 1 : 0;\n\n                // seulement si options.data n'est pas vide (peut être un objet ou une chaine de caractères)\n                if (options.data && ((typeof options.data === \"object\" && Object.keys(options.data).length) || (typeof options.data === \"string\" && options.data.length)) && !corps) {\n                    if (options.scope.CLASSNAME === \"Geocode\" || options.scope.CLASSNAME === \"ReverseGeocode\") {\n                        options.url = options.url + options.data;\n                    } else {\n                        options.url = _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(options.url, options.data);\n                    }\n                }\n\n                logger.trace(\"URL = \", options.url);\n\n                var hXHR = null;\n\n                // test on env. nodejs or browser\n                if (typeof window === \"undefined\") {\n                    var nodefetch = __webpack_require__(/*! node-fetch */ \"node-fetch\");\n\n                    var opts = {\n                        headers : {\n                            Referer : \"https://localhost\"\n                        }\n                    };\n\n                    if (options.data && typeof options.data === \"string\" && corps) {\n                        opts = {\n                            method : options.method,\n                            body : options.data,\n                            headers : {\n                                \"Content-Type\" : options.content,\n                                Referer : \"https://localhost\"\n                            }\n                        };\n                    }\n\n                    return nodefetch(options.url, opts)\n                        .then(function (response) {\n                            if (response.ok) { // res.status >= 200 && res.status < 300\n                                resolve(response.text());\n                            } else {\n                                var message = \"Errors Occured on Http Request (status : '\" + response.statusText + \"' | url : '\" + response.url + \"')\";\n                                var status = response.status;\n                                reject({\n                                    message : message,\n                                    status : status\n                                });\n                            }\n                        })\n                        .catch(function (e) {\n                            reject({\n                                message : e,\n                                status : -1\n                            });\n                        });\n                } else {\n                    if (window.XMLHttpRequest) {\n                        logger.trace(\"XMLHttpRequest\");\n\n                        hXHR = new XMLHttpRequest();\n                        hXHR.open(options.method, options.url, true); // async\n                        hXHR.overrideMimeType = options.content;\n\n                        // gestion du timeout\n                        var onTimeOutTrigger = null;\n                        if (options.timeOut > 0) {\n                            // FIXME le timeout interne ne me permet pas de declencher le bon message...\n                            // hXHR.timeout = options.timeOut;\n                            logger.trace(\"XHR - TimeOut actif !\");\n                            /**\n                             * Description\n                             *\n                             * @method onTimeOutTrigger\n                             * @private\n                             */\n                            onTimeOutTrigger = window.setTimeout(\n                                function () {\n                                    var message = \"TimeOut Occured on Http Request with XMLHttpRequest !\";\n                                    reject({\n                                        message : message,\n                                        status : -1\n                                    });\n                                }, options.timeOut);\n                        }\n\n                        if (corps) {\n                            // headers, data, content of data\n                            // cf. https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#dom-xmlhttprequest-setrequestheader\n                            logger.trace(\"data = \", options.data);\n                            hXHR.setRequestHeader(\"Content-type\", options.content);\n                            // FIXME refused to set unsafe header content-length javascript\n                            // hXHR.setRequestHeader (\"Content-length\", options.data.length);\n                            // hXHR.setRequestHeader (\"Referer\", options.headers.referer);\n                        }\n\n                        /**\n                         * On Error\n                         * FIXME ne se declenche pas !?\n                         *\n                         * @param {Object} e - Event\n                         * @method onerror\n                         * @private\n                         */\n                        hXHR.onerror = function (e) {\n                            console.log(e);\n                            reject(new Error(\"Errors Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * On Timeout\n                         * FIXME ne se declenche pas !?\n                         *\n                         * @param {Object} e - Event\n                         * @method ontimeout\n                         * @private\n                         */\n                        hXHR.ontimeout = function (e) {\n                            console.log(e);\n                            reject(new Error(\"TimeOut Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * Description\n                         *\n                         * @method onreadystatechange\n                         * @private\n                         */\n                        hXHR.onreadystatechange = function (e) {\n                            if (hXHR.readyState === 4) { // DONE\n                                if (hXHR.status === 200) {\n                                    window.clearTimeout(onTimeOutTrigger);\n                                    resolve(hXHR.response);\n                                } else {\n                                    var message = \"Errors Occured on Http Request (status : '\" + e.target.statusText + \"' | url : '\" + e.target.responseURL + \"' | response : '\" + e.target.response + \"')\";\n                                    var status = e.target.status;\n                                    reject({\n                                        message : message,\n                                        status : status\n                                    });\n                                }\n                            }\n                        };\n\n                        // gestion du content data\n                        var data4xhr = (options.data && corps) ? options.data : null;\n\n                        hXHR.send(data4xhr);\n                    } else if (window.XDomainRequest) {\n                        // worked in Internet Explorer 8–10 only !\n                        logger.trace(\"XDomainRequest\");\n\n                        hXHR = new XDomainRequest();\n                        hXHR.open(options.method, options.url);\n\n                        hXHR.overrideMimeType = options.content;\n\n                        if (options.timeOut > 0) {\n                            hXHR.timeout = options.timeout;\n                            logger.trace(\"XHR - TimeOut actif !\");\n                        }\n\n                        if (corps) {\n                            // headers, data, content of data\n                            // cf. https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#dom-xmlhttprequest-setrequestheader\n                            hXHR.setRequestHeader(\"Content-type\", options.content);\n                            // FIXME refused to set unsafe header content-length javascript\n                            // hXHR.setRequestHeader (\"Content-length\", options.data.length);\n                            // hXHR.setRequestHeader (\"Referer\", options.headers.referer);\n                        }\n\n                        /**\n                         * Description\n                         *\n                         * @method onerror\n                         * @private\n                         */\n                        hXHR.onerror = function () {\n                            reject(new Error(\"Errors Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * Description\n                         *\n                         * @method ontimeout\n                         * @private\n                         */\n                        hXHR.ontimeout = function () {\n                            reject(new Error(\"TimeOut Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * On Load\n                         *\n                         * @method onload\n                         * @private\n                         */\n                        hXHR.onload = function (e) {\n                            if (hXHR.status === 200) {\n                                resolve(hXHR.responseText);\n                            } else {\n                                var message = \"Errors Occured on Http Request (status : '\" + e.target.statusText + \"' | url : '\" + e.target.responseURL + \"')\";\n                                var status = e.target.status;\n                                reject({\n                                    message : message,\n                                    status : status\n                                });\n                            }\n                        };\n\n                        var data4xdr = (options.data && corps) ? options.data : null;\n\n                        hXHR.send(data4xdr);\n                    } else {\n                        throw new Error(\"CORS not supported\");\n                    }\n                }\n            }\n        );\n\n        return promise;\n    },\n\n    /**\n     * Requete avec parser JSON\n     *\n     * @method __callJSON\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __callJSON : function (options) {\n        return this.__call(options)\n            .then(JSON.parse)\n            .catch(function (error) {\n                console.log(\"_callJSON failed on : \", options.url, error);\n                // FIXME pas d'exception, laissons le fil se derouler...\n                // throw error;\n            });\n    },\n\n    /**\n     * Requete avec parser XML\n     *\n     * @method __callXML\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __callXML : function (options) {\n        return this.__call(options)\n            .then(function (response) {\n                var xmlDoc;\n\n                // test on env. nodejs or browser\n                if (typeof window === \"undefined\") {\n                    var DOMParser = __webpack_require__(/*! xmldom */ \"xmldom\").DOMParser; // __xmldom.DOMParser\n                    xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n                } else {\n                    if (window.DOMParser) {\n                        var parser = new window.DOMParser();\n                        xmlDoc = parser.parseFromString(response, \"text/xml\");\n                    } else { // IE\n                        xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n                        xmlDoc.async = false;\n                        xmlDoc.loadXML(response);\n                    }\n                }\n\n                return xmlDoc;\n            })\n            .catch(function (error) {\n                console.log(\"__callXML failed on : \", options.url, error);\n                // FIXME pas d'exception, laissons le fil se derouler...\n                // throw error;\n            });\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (XHR);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1Byb3RvY29scy9YSFIuanM/MGM1YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRThDO0FBQ1Q7QUFDQTtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0IsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4REFBTTtBQUMzQjs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxrREFBVTs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDO0FBQ3JDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRHQUE0RztBQUM1Ryx5RUFBeUUsZ0NBQWdDO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0EscUJBQXFCLDhEQUFNO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLHNDQUFzQyxxREFBTTtBQUM1QztBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0MsbUJBQU8sQ0FBQyw4QkFBWTs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EscUVBQXFFO0FBQ3JFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0NBQW9DLG1CQUFPLENBQUMsc0JBQVEsWUFBWTtBQUNoRTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBOztBQUVlLGtFQUFHLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1Byb3RvY29scy9YSFIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgUHJvbWlzZSwgcmVxdWlyZSwgWERvbWFpblJlcXVlc3QgKi9cblxuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5pbXBvcnQgSGVscGVyIGZyb20gXCIuLi9VdGlscy9IZWxwZXJcIjtcbmltcG9ydCBFUzZQcm9taXNlIGZyb20gXCJlczYtcHJvbWlzZVwiO1xuLy8gaW1wb3J0IF9fcmVxdWVzdCBmcm9tIFwicmVxdWVzdFwiO1xuLy8gaW1wb3J0IF9feG1sZG9tIGZyb20gXCJ4bWxkb21cIjtcblxuLyoqXG4gKiBBamF4IFJlcXVlc3QgKHVzZSBvZiBQcm9taXNlcylcbiAqXG4gKiBAbW9kdWxlIFhIUlxuICogQGFsaWFzIEdwLlByb3RvY29scy5YSFJcbiAqIEBzZWUgZGVwZW5kYW5jZSAnZXM2LXByb21pc2UnXG4gKi9cblxuLy8gY2YuIGh0dHBzOi8veGhyLnNwZWMud2hhdHdnLm9yZy9cbi8vIGNmLiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3RcblxudmFyIFhIUiA9IHtcblxuICAgIC8qKlxuICAgICAqIEludGVyZmFjZSB1bmlxdWUgZCdlbnZvaSBkJ3VuZSByZXF1w6p0ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY2FsbFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3MgLSBvcHRpb25zIGdlbmVyYWxlc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZXR0aW5ncy51cmwgICAgLSB1cmwgZHUgc2VydmljZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZXR0aW5ncy5tZXRob2QgLSBHRVQsIFBPU1QsIFBVVCwgREVMRVRFXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNldHRpbmdzLmZvcm1hdCAtIGZvcm1hdCBkZSBsYSByZXBvbnNlIGR1IHNlcnZpY2UgOiBqc29uLCB4bWwgb3UgbnVsbCAoYnJ1dGUpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNldHRpbmdzLmRhdGEgICAtIGNvbnRlbnQgKHBvc3QpIG91IHBhcmFtIChnZXQpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNldHRpbmdzLnByb3h5ICAtIHByb3h5IHVybFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gc2V0dGluZ3MuaGVhZGVycyAtIChwb3N0KSBleC4gcmVmZXJlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gc2V0dGluZ3MuY29udGVudCAtIChwb3N0KSBleC4gJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNldHRpbmdzLnRpbWVPdXQgLSB0aW1lb3V0ID0gMCBwYXIgZGVmYXV0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNldHRpbmdzLnNjb3BlIC0gdGhpc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRpbmdzLm9uUmVzcG9uc2UgLSBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRpbmdzLm9uRmFpbHVyZSAgLSBjYWxsYmFja1xuICAgICAqL1xuICAgIGNhbGwgOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgLy8gbG9nZ2VyXG4gICAgICAgIHZhciBsb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiWEhSXCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoXCJbWEhSOjpjYWxsKCldXCIpO1xuXG4gICAgICAgIC8vIEZJWE1FXG4gICAgICAgIC8vIFRvIHBvbHlmaWxsIHRoZSBnbG9iYWwgZW52aXJvbm1lbnRcbiAgICAgICAgRVM2UHJvbWlzZS5wb2x5ZmlsbCgpO1xuXG4gICAgICAgIC8vIHRlc3Qgc3VyIGxlcyBzZXR0aW5ncyBvYmxpZ2F0b2lyZXNcbiAgICAgICAgaWYgKCFzZXR0aW5ncy51cmwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgcGFyYW1ldGVyIDogdXJsIGlzIG5vdCBkZWZpbmVkICFcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNldHRpbmdzLm1ldGhvZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBwYXJhbWV0ZXIgOiBtZXRob2QgaXMgbm90IGRlZmluZWQgIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2V0dGluZ3MuZm9ybWF0KSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5mb3JtYXQgPSBcInRleHRcIjsgLy8gcmVwb25zZSBicnV0ZSAhXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgICAgICBvcHRpb25zLnVybCA9IHNldHRpbmdzLnVybDtcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gc2V0dGluZ3MuZGF0YSA/IHNldHRpbmdzLmRhdGEgOiBudWxsO1xuICAgICAgICBvcHRpb25zLm1ldGhvZCA9IHNldHRpbmdzLm1ldGhvZDtcbiAgICAgICAgb3B0aW9ucy50aW1lT3V0ID0gc2V0dGluZ3MudGltZU91dCB8fCAwO1xuICAgICAgICBvcHRpb25zLnNjb3BlID0gc2V0dGluZ3Muc2NvcGUgfHwgdGhpcztcbiAgICAgICAgb3B0aW9ucy5wcm94eSA9IHNldHRpbmdzLnByb3h5IHx8IG51bGw7XG4gICAgICAgIG9wdGlvbnMuY29udGVudCA9IHNldHRpbmdzLmNvbnRlbnQgfHwgbnVsbDtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzID0gc2V0dGluZ3MuaGVhZGVycyB8fCB7XG4gICAgICAgICAgICByZWZlcmVyIDogXCJodHRwOi8vbG9jYWxob3N0XCJcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB0ZXN0IHN1ciBsZXMgdmFsZXVycyBkZSAnc2V0dGluZ3MubWV0aG9kJ1xuICAgICAgICBzd2l0Y2ggKHNldHRpbmdzLm1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSBcIkRFTEVURVwiOlxuICAgICAgICAgICAgY2FzZSBcIkdFVFwiOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlBVVFwiOlxuICAgICAgICAgICAgY2FzZSBcIlBPU1RcIjpcbiAgICAgICAgICAgICAgICAvLyBvbiBmb3JjZSBzdXIgY2VzIHBhcmFtcyBzcMOpY2lmaXF1ZXMgYXUgbW9kZSBQT1NUXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb250ZW50ID0gc2V0dGluZ3MuY29udGVudCA/IHNldHRpbmdzLmNvbnRlbnQgOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiOyAvLyBGSVhNRSBlbiBhdHRlbnRlIGRlcyBzZXJ2aWNlcyA6IGJhc2N1bGUgZW4gXCJhcHBsaWNhdGlvbi94bWxcIiBvdSBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHNldHRpbmdzLmhlYWRlcnMgPyBzZXR0aW5ncy5oZWFkZXJzIDogeyByZWZlcmVyIDogXCJodHRwOi8vbG9jYWxob3N0XCIgfTsgLy8gRklYTUUgcGFyYW1ldHJhYmxlLi4uXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSEVBRFwiOlxuICAgICAgICAgICAgY2FzZSBcIk9QVElPTlNcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIVFRQIG1ldGhvZCBub3QgeWV0IHN1cHBvcnRlZCAhXCIpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIVFRQIG1ldGhvZCB1bmtub3duICFcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0ZXN0IHN1ciBsZXMgdmFsZXVycyBkZSAnc2V0dGluZ3MuZm9ybWF0J1xuICAgICAgICBzd2l0Y2ggKHNldHRpbmdzLmZvcm1hdCkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2FsbChvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vblJlc3BvbnNlLmNhbGwodGhpcywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkZhaWx1cmUuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2FsbEpTT04ob3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudHJhY2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25SZXNwb25zZS5jYWxsKHRoaXMsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25GYWlsdXJlLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ4bWxcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2FsbFhNTChvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vblJlc3BvbnNlLmNhbGwodGhpcywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkZhaWx1cmUuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG91dHB1dCBGb3JtYXQgaXMgbm90IHlldCBzdXBwb3J0ZWQgIVwiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXF1ZXRlXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9fY2FsbFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gcHJvbWlzZVxuICAgICAqL1xuICAgIF9fY2FsbCA6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBsb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiWEhSXCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoXCJbWEhSOjpfX2NhbGwoKV1cIik7XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShcbiAgICAgICAgICAgIGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAvLyB0cmFpdGVtZW50IGR1IGNvcnBzIGRlIGxhIHJlcXXDqnRlXG4gICAgICAgICAgICAgICAgdmFyIGNvcnBzID0gKG9wdGlvbnMubWV0aG9kID09PSBcIlBPU1RcIiB8fCBvcHRpb25zLm1ldGhvZCA9PT0gXCJQVVRcIikgPyAxIDogMDtcblxuICAgICAgICAgICAgICAgIC8vIHNldWxlbWVudCBzaSBvcHRpb25zLmRhdGEgbidlc3QgcGFzIHZpZGUgKHBldXQgw6p0cmUgdW4gb2JqZXQgb3UgdW5lIGNoYWluZSBkZSBjYXJhY3TDqHJlcylcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kYXRhICYmICgodHlwZW9mIG9wdGlvbnMuZGF0YSA9PT0gXCJvYmplY3RcIiAmJiBPYmplY3Qua2V5cyhvcHRpb25zLmRhdGEpLmxlbmd0aCkgfHwgKHR5cGVvZiBvcHRpb25zLmRhdGEgPT09IFwic3RyaW5nXCIgJiYgb3B0aW9ucy5kYXRhLmxlbmd0aCkpICYmICFjb3Jwcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zY29wZS5DTEFTU05BTUUgPT09IFwiR2VvY29kZVwiIHx8IG9wdGlvbnMuc2NvcGUuQ0xBU1NOQU1FID09PSBcIlJldmVyc2VHZW9jb2RlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudXJsID0gb3B0aW9ucy51cmwgKyBvcHRpb25zLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnVybCA9IEhlbHBlci5ub3JtYWx5emVVcmwob3B0aW9ucy51cmwsIG9wdGlvbnMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsb2dnZXIudHJhY2UoXCJVUkwgPSBcIiwgb3B0aW9ucy51cmwpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGhYSFIgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gdGVzdCBvbiBlbnYuIG5vZGVqcyBvciBicm93c2VyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVmZXRjaCA9IHJlcXVpcmUoXCJub2RlLWZldGNoXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWZlcmVyIDogXCJodHRwczovL2xvY2FsaG9zdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiB0eXBlb2Ygb3B0aW9ucy5kYXRhID09PSBcInN0cmluZ1wiICYmIGNvcnBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgOiBvcHRpb25zLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIiA6IG9wdGlvbnMuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVmZXJlciA6IFwiaHR0cHM6Ly9sb2NhbGhvc3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZWZldGNoKG9wdGlvbnMudXJsLCBvcHRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7IC8vIHJlcy5zdGF0dXMgPj0gMjAwICYmIHJlcy5zdGF0dXMgPCAzMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJFcnJvcnMgT2NjdXJlZCBvbiBIdHRwIFJlcXVlc3QgKHN0YXR1cyA6ICdcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQgKyBcIicgfCB1cmwgOiAnXCIgKyByZXNwb25zZS51cmwgKyBcIicpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlIDogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA6IHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA6IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudHJhY2UoXCJYTUxIdHRwUmVxdWVzdFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaFhIUiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaFhIUi5vcGVuKG9wdGlvbnMubWV0aG9kLCBvcHRpb25zLnVybCwgdHJ1ZSk7IC8vIGFzeW5jXG4gICAgICAgICAgICAgICAgICAgICAgICBoWEhSLm92ZXJyaWRlTWltZVR5cGUgPSBvcHRpb25zLmNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdlc3Rpb24gZHUgdGltZW91dFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9uVGltZU91dFRyaWdnZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudGltZU91dCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRSBsZSB0aW1lb3V0IGludGVybmUgbmUgbWUgcGVybWV0IHBhcyBkZSBkZWNsZW5jaGVyIGxlIGJvbiBtZXNzYWdlLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaFhIUi50aW1lb3V0ID0gb3B0aW9ucy50aW1lT3V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcIlhIUiAtIFRpbWVPdXQgYWN0aWYgIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBEZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQG1ldGhvZCBvblRpbWVPdXRUcmlnZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblRpbWVPdXRUcmlnZ2VyID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJUaW1lT3V0IE9jY3VyZWQgb24gSHR0cCBSZXF1ZXN0IHdpdGggWE1MSHR0cFJlcXVlc3QgIVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlIDogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgOiAtMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMudGltZU91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3Jwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlYWRlcnMsIGRhdGEsIGNvbnRlbnQgb2YgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNmLiBodHRwczovL2R2Y3MudzMub3JnL2hnL3hoci9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCNkb20teG1saHR0cHJlcXVlc3Qtc2V0cmVxdWVzdGhlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcImRhdGEgPSBcIiwgb3B0aW9ucy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoWEhSLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgb3B0aW9ucy5jb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRSByZWZ1c2VkIHRvIHNldCB1bnNhZmUgaGVhZGVyIGNvbnRlbnQtbGVuZ3RoIGphdmFzY3JpcHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoWEhSLnNldFJlcXVlc3RIZWFkZXIgKFwiQ29udGVudC1sZW5ndGhcIiwgb3B0aW9ucy5kYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaFhIUi5zZXRSZXF1ZXN0SGVhZGVyIChcIlJlZmVyZXJcIiwgb3B0aW9ucy5oZWFkZXJzLnJlZmVyZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIE9uIEVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBGSVhNRSBuZSBzZSBkZWNsZW5jaGUgcGFzICE/XG4gICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGUgLSBFdmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICogQG1ldGhvZCBvbmVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBoWEhSLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJFcnJvcnMgT2NjdXJlZCBvbiBIdHRwIFJlcXVlc3Qgd2l0aCBYTUxIdHRwUmVxdWVzdCAhXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogT24gVGltZW91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICogRklYTUUgbmUgc2UgZGVjbGVuY2hlIHBhcyAhP1xuICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIC0gRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2Qgb250aW1lb3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBoWEhSLm9udGltZW91dCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlRpbWVPdXQgT2NjdXJlZCBvbiBIdHRwIFJlcXVlc3Qgd2l0aCBYTUxIdHRwUmVxdWVzdCAhXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogRGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaFhIUi5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoWEhSLnJlYWR5U3RhdGUgPT09IDQpIHsgLy8gRE9ORVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaFhIUi5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChvblRpbWVPdXRUcmlnZ2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaFhIUi5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiRXJyb3JzIE9jY3VyZWQgb24gSHR0cCBSZXF1ZXN0IChzdGF0dXMgOiAnXCIgKyBlLnRhcmdldC5zdGF0dXNUZXh0ICsgXCInIHwgdXJsIDogJ1wiICsgZS50YXJnZXQucmVzcG9uc2VVUkwgKyBcIicgfCByZXNwb25zZSA6ICdcIiArIGUudGFyZ2V0LnJlc3BvbnNlICsgXCInKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IGUudGFyZ2V0LnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzIDogc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdlc3Rpb24gZHUgY29udGVudCBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YTR4aHIgPSAob3B0aW9ucy5kYXRhICYmIGNvcnBzKSA/IG9wdGlvbnMuZGF0YSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhYSFIuc2VuZChkYXRhNHhocik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LlhEb21haW5SZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3b3JrZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgOOKAkzEwIG9ubHkgIVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKFwiWERvbWFpblJlcXVlc3RcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhYSFIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhYSFIub3BlbihvcHRpb25zLm1ldGhvZCwgb3B0aW9ucy51cmwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBoWEhSLm92ZXJyaWRlTWltZVR5cGUgPSBvcHRpb25zLmNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRpbWVPdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaFhIUi50aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcIlhIUiAtIFRpbWVPdXQgYWN0aWYgIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcnBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGVhZGVycywgZGF0YSwgY29udGVudCBvZiBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2YuIGh0dHBzOi8vZHZjcy53My5vcmcvaGcveGhyL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sI2RvbS14bWxodHRwcmVxdWVzdC1zZXRyZXF1ZXN0aGVhZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaFhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIG9wdGlvbnMuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRklYTUUgcmVmdXNlZCB0byBzZXQgdW5zYWZlIGhlYWRlciBjb250ZW50LWxlbmd0aCBqYXZhc2NyaXB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaFhIUi5zZXRSZXF1ZXN0SGVhZGVyIChcIkNvbnRlbnQtbGVuZ3RoXCIsIG9wdGlvbnMuZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhYSFIuc2V0UmVxdWVzdEhlYWRlciAoXCJSZWZlcmVyXCIsIG9wdGlvbnMuaGVhZGVycy5yZWZlcmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBEZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2Qgb25lcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaFhIUi5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJFcnJvcnMgT2NjdXJlZCBvbiBIdHRwIFJlcXVlc3Qgd2l0aCBYTUxIdHRwUmVxdWVzdCAhXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogRGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIG9udGltZW91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaFhIUi5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlRpbWVPdXQgT2NjdXJlZCBvbiBIdHRwIFJlcXVlc3Qgd2l0aCBYTUxIdHRwUmVxdWVzdCAhXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogT24gTG9hZFxuICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2Qgb25sb2FkXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBoWEhSLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhYSFIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShoWEhSLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcIkVycm9ycyBPY2N1cmVkIG9uIEh0dHAgUmVxdWVzdCAoc3RhdHVzIDogJ1wiICsgZS50YXJnZXQuc3RhdHVzVGV4dCArIFwiJyB8IHVybCA6ICdcIiArIGUudGFyZ2V0LnJlc3BvbnNlVVJMICsgXCInKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gZS50YXJnZXQuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgOiBzdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGE0eGRyID0gKG9wdGlvbnMuZGF0YSAmJiBjb3JwcykgPyBvcHRpb25zLmRhdGEgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBoWEhSLnNlbmQoZGF0YTR4ZHIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ09SUyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXF1ZXRlIGF2ZWMgcGFyc2VyIEpTT05cbiAgICAgKlxuICAgICAqIEBtZXRob2QgX19jYWxsSlNPTlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gcHJvbWlzZVxuICAgICAqL1xuICAgIF9fY2FsbEpTT04gOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2NhbGwob3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKEpTT04ucGFyc2UpXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJfY2FsbEpTT04gZmFpbGVkIG9uIDogXCIsIG9wdGlvbnMudXJsLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgLy8gRklYTUUgcGFzIGQnZXhjZXB0aW9uLCBsYWlzc29ucyBsZSBmaWwgc2UgZGVyb3VsZXIuLi5cbiAgICAgICAgICAgICAgICAvLyB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXF1ZXRlIGF2ZWMgcGFyc2VyIFhNTFxuICAgICAqXG4gICAgICogQG1ldGhvZCBfX2NhbGxYTUxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHByb21pc2VcbiAgICAgKi9cbiAgICBfX2NhbGxYTUwgOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2NhbGwob3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciB4bWxEb2M7XG5cbiAgICAgICAgICAgICAgICAvLyB0ZXN0IG9uIGVudi4gbm9kZWpzIG9yIGJyb3dzZXJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgRE9NUGFyc2VyID0gcmVxdWlyZShcInhtbGRvbVwiKS5ET01QYXJzZXI7IC8vIF9feG1sZG9tLkRPTVBhcnNlclxuICAgICAgICAgICAgICAgICAgICB4bWxEb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHJlc3BvbnNlLCBcInRleHQveG1sXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuRE9NUGFyc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcocmVzcG9uc2UsIFwidGV4dC94bWxcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIElFXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWxEb2MgPSBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeG1sRG9jLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB4bWxEb2MubG9hZFhNTChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geG1sRG9jO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIl9fY2FsbFhNTCBmYWlsZWQgb24gOiBcIiwgb3B0aW9ucy51cmwsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBGSVhNRSBwYXMgZCdleGNlcHRpb24sIGxhaXNzb25zIGxlIGZpbCBzZSBkZXJvdWxlci4uLlxuICAgICAgICAgICAgICAgIC8vIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBYSFI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Protocols/XHR.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js":
/*!*********************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CommonService */ \"./node_modules/geoportal-access-lib/src/Services/CommonService.js\");\n/* harmony import */ var _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _Request_AltiRequestFactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Request/AltiRequestFactory */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js\");\n/* harmony import */ var _Response_AltiResponseFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Response/AltiResponseFactory */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js\");\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n *\n * Appel du service d'altimétrie du Géoportail\n *\n * @todo gestion du parma. output et callback\n * @todo outputFormat (REST) et format (WPS)\n * @todo La reponse JSON peut encapsuler un XML !\n *\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.Alti\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {Array.<Object>} options.positions - Tableau ({lon:float,lat:float}) contenant les coordonnées des points (CRS:84)\n *      dont on veut connaître les altitudes (ou à partir desquelles on va calculer le profil).\n *      Chaque élément du tableau est un objet JavaScript avec deux attributs : lon et lat, qui sont des flottants.\n *      Minimum 2 éléments si on souhaite calculer un profil altimétrique (ElevationLine).\n *      Maximum 50 éléments.\n *\n * @param {String} options.outputFormat - Le format de la réponse du service alti : 'xml' ou 'json'.\n *      Ce paramètre déterminera l'extension '.xml' ou '.json' du service dans le cas de l'API REST,\n *      ou la valeur du paramètre 'format' dans le cas de la norme WPS.\n *      Nécessaire si serverUrl est renseigné, et qu'on souhaite passer par l'API REST,\n *      pour connaître le format dans lequel sera fournie la réponse (pour son traitement).\n *      Non nécessaire pour la norme WPS. Par défaut, ce paramètre vaut 'json'.\n *\n * @param {Number} [options.sampling] - Nombre de points à utiliser pour déterminer le tracé d'un profil altimétrique, compris entre 2 et 5000.\n *      A spécifier lorsqu'on souhaite accéder à cette fonctionnalité.\n *      Dans ce cas, les points fournis en entrée (au minimum de deux) servent à déterminer l'axe planimétrique\n *      le long duquel le profil doit être calculé.\n *      Si le paramètre sampling n'est pas spécifié ou moins de deux points sont fournis,\n *      c'est le service Elevation qui sera interrogé (altitudes simples calculées pour les points fournis).\n *      Une valeur de sampling strictement inférieure à 2 déclenchera un échantillonnage avec la valeur par défaut du service (3 points).\n *\n * @param {String} [options.api] - Manière d'accéder au service : 'REST' (via l'API REST) ou 'WPS' (via la norme WPS).\n *      Par défaut, on utilise l'API REST.\n *\n * @param {Boolean} [options.zonly] - Permet de ne récupérer que les altitudes en sortie s'il vaut 'true'.\n *      Vaut 'false' par défaut.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      positions : [{lon:, lat:}, {lon:, lat:}],\n *      outputFormat : 'json' // json|xml\n *      sampling : 3,\n *      api : 'REST', // REST|WPS\n *      zonly : false // false|true\n *   };\n *\n * @private\n */\nfunction Alti (options) {\n    if (!(this instanceof Alti)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\", \"Alti\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"Alti\";\n\n    // appel du constructeur par heritage\n    _CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"Gp.Services.Alti\");\n    this.logger.trace(\"[Constructeur Alti (options)]\");\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    if (!options.positions) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_MISSING\", \"positions\"));\n    }\n\n    if (options.positions.length === 0) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"positions\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.positions = options.positions;\n\n    // format de réponse du service : \"json\" ou \"xml\" (valeur par défaut), en minuscule !\n    this.options.outputFormat = (typeof options.outputFormat === \"string\") ? options.outputFormat.toLowerCase() : \"xml\";\n\n    // sampling\n    this.options.sampling = options.sampling || null;\n\n    // type d'api utilisé pour requeter le service, en majuscule !\n    this.options.api = (typeof options.api === \"string\") ? options.api.toUpperCase() : \"REST\";\n\n    // l'api ne peut être interrogée qu'en GET.\n    if (this.options.api === \"REST\") {\n        this.options.httpMethod = \"GET\";\n    }\n\n    // param. zonly\n    this.options.zonly = options.zonly || false;\n\n    // gestion de l'url du service par defaut\n    // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n    // en fonction du type d'api, REST ou WPS, du format de reponse demandé (outputFormat)\n    // ainsi que sur le type de service (profil ou elevation)\n    if (!this.options.serverUrl) {\n        var lstUrlByDefault = _DefaultUrlService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Alti.url(this.options.apiKey);\n        var urlFound = null;\n        switch (this.options.api) {\n            case \"WPS\":\n                urlFound = lstUrlByDefault.wps;\n                break;\n            case \"REST\":\n                var key = (options.sampling ? \"profil\" : \"elevation\") + \"-\" + this.options.outputFormat;\n                urlFound = lstUrlByDefault[key];\n                break;\n            default:\n                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_UNKNOWN\", \"api\"));\n        }\n\n        if (!urlFound) {\n            throw new Error(\"Url by default not found !\");\n        }\n        this.options.serverUrl = urlFound;\n        this.logger.trace(\"Server URL by default : \" + this.options.serverUrl);\n    }\n\n    // gestion du type de service\n    // si l'extension de l'url est .json ou .xml, on surcharge le format de sortie (outputFormat)\n    var idx = this.options.serverUrl.lastIndexOf(\".\");\n    if (idx !== -1) {\n        var extension = this.options.serverUrl.substring(idx + 1);\n        if (extension && extension.length < 5) { // FIXME extension de moins de 4 car. ...\n            this.logger.trace(\"Server Extension URL : \" + extension);\n            switch (extension.toLowerCase()) {\n                case \"json\":\n                case \"xml\":\n                    this.options.outputFormat = extension.toLowerCase();\n                    break;\n                default:\n                    throw new Error(\"type of service : unknown or unsupported (json or xml) !\");\n            }\n        }\n    }\n}\n\n/**\n * @lends module:Alti#\n */\nAlti.prototype = Object.create(_CommonService__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype, {\n    // todo\n    // getter/setter\n});\n\n/**\n * Constructeur (alias)\n */\nAlti.prototype.constructor = Alti;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAlti.prototype.buildRequest = function (error, success) {\n    // utilisation en mode callback\n    var options = {\n        httpMethod : this.options.httpMethod,\n        // callback\n        onSuccess : function (result) {\n            // sauvegarde de la requete !\n            this.request = result;\n            success.call(this, this.request);\n        },\n        onError : error,\n        scope : this,\n        // spécifique au service :\n        positions : this.options.positions,\n        outputFormat : this.options.outputFormat,\n        sampling : this.options.sampling,\n        api : this.options.api,\n        zonly : this.options.zonly\n    };\n\n    _Request_AltiRequestFactory__WEBPACK_IMPORTED_MODULE_5__[\"default\"].build(options);\n};\n\n/**\n * Analyse de la reponse (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAlti.prototype.analyzeResponse = function (error, success) {\n    // INFO\n    // Factory pour masquer la complexité du retour du service qui renvoie soit\n    //  - une 'string' qui contient du XML ou JSON natif en mode XHR\n    //  - un objet JSON qui est natif ou encapsulé\n\n    if (this.response) {\n        var options = {\n            response : this.response,\n            outputFormat : this.options.outputFormat, // utile pour parser la string en mode XHR : JSON ou XML !\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        _Response_AltiResponseFactory__WEBPACK_IMPORTED_MODULE_6__[\"default\"].build(options);\n    } else {\n        error.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Alti);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Response_model_AltiResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Response/model/AltiResponse */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js\");\n/* harmony import */ var _Response_model_Elevation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Response/model/Elevation */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js\");\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service Altimétrique du Géoportail\n *      (calcul altimétrique simple ou profil altimétrique d'une courbe),\n *      lorsque le paramètre output = xml,\n *      afin de récupérer les élévations retournées.\n *\n * @module AltiResponseReader\n * @alias Gp.Services.Alti.Formats.AltiResponseReader\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n/**\n *\n * Objet AltiResponseReader\n *\n * @member {Object} AltiResponseReader\n *\n * @property {Object} AltiResponseReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} AltiResponseReader.READERS.elevations -  Lecture d'un noeud \"elevations\" de la réponse XML\n *      du service alti, correspondant logiquement à la racine du document\n *      (contient un ou plusieurs childNodes correspondant chacun à une élévation retournée)\n *\n * @property {Method} AltiResponseReader.READERS.elevation - ecture d'un noeud \"elevation\" de la réponse xml du service alti.\n *      (contient un ou 4 childNode (s) correspondant à l'altitude (z) et éventuellement lat, lon, et acc)\n *\n * @property {Method} AltiResponseReader.READERS.lat - Lecture d'un noeud \"lat\" de la réponse xml du service alti.\n *      (contient une valeur de latitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.lon - Lecture d'un noeud \"lon\" de la réponse xml du service alti.\n *      (contient une valeur de longitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.z - Lecture d'un noeud \"z\" de la réponse xml du service alti.\n *      (contient une valeur d'altitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.acc - Lecture d'un noeud \"acc\" de la réponse xml du service alti.\n *      (contient une valeur de précision, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.exceptionreport - Lecture d'un noeud \"ExceptionReport\" de la réponse xml du service alti.\n *\n * @property {Method} AltiResponseReader.READERS.exception - Lecture d'un noeud \"Exception\" de la réponse xml du service alti.\n *\n * @property {Method} AltiResponseReader.read - Méthode permettant de lancer la lecture d'une réponse XML du service altimétrique,\n *      à l'aide des readers de la classe.\n *\n */\nvar AltiResponseReader = {};\n\nAltiResponseReader.READERS = {\n\n    /**\n     * Lecture d'un noeud \"elevations\" de la réponse XML du service alti, correspondant logiquement à la racine du document\n     *      (contient un ou plusieurs childNodes correspondant chacun à une élévation retournée)\n     *\n     * @param {DOMElement} root - racine de la réponse XML\n     * @static\n     * @memberof AltiResponseReader\n     * @returns {Object} Retourne un objet de type AltiResponse\n     */\n    elevations : function (root) {\n        // INFO : on passe en paramètre l'objet en entrée elevations, vide, à remplir.\n        var altiResponse = new _Response_model_AltiResponse__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n        if (root.hasChildNodes()) {\n            var children = root.childNodes;\n            var child;\n            var elevation;\n\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n\n                if (AltiResponseReader.READERS[child.nodeName]) {\n                    elevation = AltiResponseReader.READERS[child.nodeName](child);\n                    altiResponse.elevations.push(elevation);\n                }\n            }\n        }\n\n        return altiResponse;\n    },\n\n    /**\n     * Lecture d'un noeud \"elevation\" de la réponse xml du service alti.\n     *      (contient un ou 4 childNode (s) correspondant à l'altitude (z) et éventuellement lat, lon, et acc)\n     *\n     * @param {DOMElement} node - noeud elevation à lire pour récupérer les informations de l'élévation retournée (z [, lon, lat, acc])\n     * @return {Array} elevationResponse - format de la réponse en sortie, instance de AltiResponse\n     * @static\n     * @memberof AltiResponseReader\n     */\n    elevation : function (node) {\n        var elevation = new _Response_model_Elevation__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (AltiResponseReader.READERS[child.nodeName]) {\n                    // INFO : on passe en paramètre l'objet en entrée elevation, vide, à remplir.\n                    AltiResponseReader.READERS[child.nodeName](child, elevation);\n                }\n            }\n        }\n        return elevation;\n    },\n\n    /**\n     * Lecture d'un noeud \"lat\" de la réponse xml du service alti.\n     *      (contient une valeur de latitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la latitude\n     * @param {Object} elevation - objet dans lequel stocker la latitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    lat : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.lat = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : latitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"lon\" de la réponse xml du service alti.\n     *      (contient une valeur de longitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la longitude\n     * @param {Object} elevation - objet dans lequel stocker la longitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    lon : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.lon = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : longitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"z\" de la réponse xml du service alti.\n     *      (contient une valeur d'altitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'altitude\n     * @param {Object} elevation - objet dans lequel stocker l'altitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    z : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            if (elevation) {\n                elevation.z = parseFloat(textNode.nodeValue);\n            } else {\n                elevation = new _Response_model_Elevation__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                elevation.z = parseFloat(textNode.nodeValue);\n                return elevation;\n            }\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : altitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"acc\" de la réponse xml du service alti.\n     *      (contient une valeur de précision, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la précision\n     * @param {Object} elevation - objet dans lequel stocker la précision retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    acc : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.acc = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : précision (acc) attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"ExceptionReport\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} exceptionReport - objet contenant l'exception\n     * @static\n     * @memberof AltiResponseReader\n     */\n    exceptionreport : function (node) {\n        var response = {};\n\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = AltiResponseReader.READERS.exception(child);\n                }\n            }\n        }\n\n        return response;\n    },\n\n    /**\n     * Lecture d'un noeud \"Exception\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} exceptionReport - objet contenant l'exception, avec deux attributs :\n     *      {String} exceptionReport.exceptionCode - qui contient l'identifiant du code de l'exception\n     *      {String} exceptionReport.exception - qui contient le message de l'exception\n     * @static\n     * @memberof AltiResponseReader\n     */\n    exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    },\n\n    /**\n     * Lecture d'un noeud \"Error\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} error - objet contenant l'exception\n     * @static\n     */\n    error : function (node) {\n        var response = {\n            error : {}\n        };\n        // get error code and description\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                var textNode;\n                // get error code\n                if (child.nodeType === 1 && child.nodeName === \"code\") { // 1 === node.ELEMENT_NODE\n                    textNode = child.firstChild;\n                    if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n                        response.error.code = textNode.nodeValue;\n                    }\n                }\n                // get error description\n                if (child.nodeType === 1 && child.nodeName === \"description\") { // 1 === node.ELEMENT_NODE\n                    textNode = child.firstChild;\n                    if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n                        response.error.description = textNode.nodeValue;\n                    }\n                }\n            }\n        }\n        return response;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service altimétrique,\n *      à l'aide des readers de la classe.\n *\n * @method AltiResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @static\n * @memberof AltiResponseReader\n */\nAltiResponseReader.read = function (root) {\n    if (root.nodeName === \"elevations\") {\n        var altiResponse = AltiResponseReader.READERS.elevations(root);\n        return altiResponse;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        var exceptionReport = AltiResponseReader.READERS.exceptionreport(root);\n        return exceptionReport;\n    } else if (root.nodeName === \"error\") {\n        var error = AltiResponseReader.READERS.error(root);\n        return error;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiResponseReader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _AltiRequestREST__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AltiRequestREST */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js\");\n/* harmony import */ var _AltiRequestWPS__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AltiRequestWPS */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js\");\n/**\n * Creation d'une requête en REST ou WPS\n * (Factory)\n *\n * @module AltiRequestFactory\n * @alias Gp.Services.Alti.Request.AltiRequestFactory\n * @private\n */\n\n\n\n\n\nvar AltiRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      httpMethod : 'GET', // GET|POST\n     *      onSuccess : function (response) {},\n     *      onError : function (error) {},\n     *      scope : this,\n     *      positions : [{lon:, lat:}, {lon:, lat:}],\n     *      outputFormat : 'json' // json|xml\n     *      sampling : 3,\n     *      api : 'REST', // REST|WPS\n     *      zonly : false // false|true\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiRequestFactory\");\n        logger.trace([\"AltiRequestFactory::build()\"]);\n\n        var request = null;\n\n        // on factorise les options par groupe;\n        // - global,\n        // - param, les params pour les data inputs\n        // - wps, les param du service\n        // - callback\n\n        var settings = {\n            // ajout des valeurs par defaut spécifiques au service\n            type : options.sampling ? \"Profil\" : \"Elevation\",\n            method : options.httpMethod,\n            param : {\n                positions : null,\n                delimiter : null, // FIXME par defaut, on ne le met pas en place car ça fait planter la requête !?\n                indent : null, // par defaut\n                crs : null, // par defaut\n                format : null, // (only to POST)\n                sampling : null, // (only use by Profil)\n                zonly : null // (only use by Elevation)\n            }\n        };\n\n        // surcharge des valeurs obligatoires\n        settings.param.positions = options.positions;\n        settings.param.format = options.outputFormat;\n        settings.param.sampling = options.sampling;\n        settings.param.zonly = options.zonly;\n\n        // gestion des callback\n        var bOnError = !!(options.onError !== null && typeof options.onError === \"function\"); // cast variable to boolean\n        var bOnSuccess = !!(options.onSuccess !== null && typeof options.onSuccess === \"function\");\n\n        var message = null;\n        switch (options.api) {\n            case \"REST\":\n                // FIXME les exceptions ne sont pas 'catchées' sur le constructeur !\n                var myReq = new _AltiRequestREST__WEBPACK_IMPORTED_MODULE_2__[\"default\"](settings);\n                if (!myReq.processRequestString()) {\n                    message = \"Error in process request (rest) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                request = myReq.requestString;\n                break;\n            case \"WPS\":\n                // ajout des valeurs par defaut spécifiques au service WPS\n                settings.wps = {\n                    service : null, // par defaut\n                    version : null, // par defaut\n                    identifier : null, // par defaut\n                    rawdataoutput : null, // par defaut\n                    request : null // par defaut\n                };\n\n                request = _AltiRequestWPS__WEBPACK_IMPORTED_MODULE_3__[\"default\"].build(settings);\n                if (!request) {\n                    message = \"Error in process request (wps) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                break;\n            default:\n                message = \"Type of API is not supported by service (REST or WPS) !\";\n                if (bOnError) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message));\n                    return;\n                }\n                throw new Error(message);\n        }\n\n        if (bOnSuccess) {\n            options.onSuccess.call(options.scope, request);\n        }\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequestFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVxdWVzdC9BbHRpUmVxdWVzdEZhY3RvcnkuanM/ZGQxNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvRDtBQUNRO0FBQ1o7QUFDRjs7QUFFOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5Qyx5Q0FBeUM7QUFDekM7QUFDQSwwQkFBMEIsV0FBVyxHQUFHLFdBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhEQUFNO0FBQzNCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkZBQTZGO0FBQzdGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdEQUFlO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxnRUFBWTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCLHVEQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxnRUFBWTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGdFQUFZO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUsaUZBQWtCLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVxdWVzdC9BbHRpUmVxdWVzdEZhY3RvcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0aW9uIGQndW5lIHJlcXXDqnRlIGVuIFJFU1Qgb3UgV1BTXG4gKiAoRmFjdG9yeSlcbiAqXG4gKiBAbW9kdWxlIEFsdGlSZXF1ZXN0RmFjdG9yeVxuICogQGFsaWFzIEdwLlNlcnZpY2VzLkFsdGkuUmVxdWVzdC5BbHRpUmVxdWVzdEZhY3RvcnlcbiAqIEBwcml2YXRlXG4gKi9cbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uLy4uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuaW1wb3J0IEVycm9yU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vRXhjZXB0aW9ucy9FcnJvclNlcnZpY2VcIjtcbmltcG9ydCBBbHRpUmVxdWVzdFJFU1QgZnJvbSBcIi4vQWx0aVJlcXVlc3RSRVNUXCI7XG5pbXBvcnQgQWx0aVJlcXVlc3RXUFMgZnJvbSBcIi4vQWx0aVJlcXVlc3RXUFNcIjtcblxudmFyIEFsdGlSZXF1ZXN0RmFjdG9yeSA9IHtcblxuICAgIC8qKlxuICAgICAqIGludGVyZmFjZSB1bmlxdWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGRlZmluaWVzIGRhbnMgbGUgY29tcG9zYW50IEFsdGlcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICAgIGh0dHBNZXRob2QgOiAnR0VUJywgLy8gR0VUfFBPU1RcbiAgICAgKiAgICAgIG9uU3VjY2VzcyA6IGZ1bmN0aW9uIChyZXNwb25zZSkge30sXG4gICAgICogICAgICBvbkVycm9yIDogZnVuY3Rpb24gKGVycm9yKSB7fSxcbiAgICAgKiAgICAgIHNjb3BlIDogdGhpcyxcbiAgICAgKiAgICAgIHBvc2l0aW9ucyA6IFt7bG9uOiwgbGF0On0sIHtsb246LCBsYXQ6fV0sXG4gICAgICogICAgICBvdXRwdXRGb3JtYXQgOiAnanNvbicgLy8ganNvbnx4bWxcbiAgICAgKiAgICAgIHNhbXBsaW5nIDogMyxcbiAgICAgKiAgICAgIGFwaSA6ICdSRVNUJywgLy8gUkVTVHxXUFNcbiAgICAgKiAgICAgIHpvbmx5IDogZmFsc2UgLy8gZmFsc2V8dHJ1ZVxuICAgICAqICAgfTtcbiAgICAgKlxuICAgICAqL1xuICAgIGJ1aWxkIDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbG9nZ2VyXG4gICAgICAgIHZhciBsb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKFwiQWx0aVJlcXVlc3RGYWN0b3J5XCIpO1xuICAgICAgICBsb2dnZXIudHJhY2UoW1wiQWx0aVJlcXVlc3RGYWN0b3J5OjpidWlsZCgpXCJdKTtcblxuICAgICAgICB2YXIgcmVxdWVzdCA9IG51bGw7XG5cbiAgICAgICAgLy8gb24gZmFjdG9yaXNlIGxlcyBvcHRpb25zIHBhciBncm91cGU7XG4gICAgICAgIC8vIC0gZ2xvYmFsLFxuICAgICAgICAvLyAtIHBhcmFtLCBsZXMgcGFyYW1zIHBvdXIgbGVzIGRhdGEgaW5wdXRzXG4gICAgICAgIC8vIC0gd3BzLCBsZXMgcGFyYW0gZHUgc2VydmljZVxuICAgICAgICAvLyAtIGNhbGxiYWNrXG5cbiAgICAgICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICAgICAgLy8gYWpvdXQgZGVzIHZhbGV1cnMgcGFyIGRlZmF1dCBzcMOpY2lmaXF1ZXMgYXUgc2VydmljZVxuICAgICAgICAgICAgdHlwZSA6IG9wdGlvbnMuc2FtcGxpbmcgPyBcIlByb2ZpbFwiIDogXCJFbGV2YXRpb25cIixcbiAgICAgICAgICAgIG1ldGhvZCA6IG9wdGlvbnMuaHR0cE1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtIDoge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9ucyA6IG51bGwsXG4gICAgICAgICAgICAgICAgZGVsaW1pdGVyIDogbnVsbCwgLy8gRklYTUUgcGFyIGRlZmF1dCwgb24gbmUgbGUgbWV0IHBhcyBlbiBwbGFjZSBjYXIgw6dhIGZhaXQgcGxhbnRlciBsYSByZXF1w6p0ZSAhP1xuICAgICAgICAgICAgICAgIGluZGVudCA6IG51bGwsIC8vIHBhciBkZWZhdXRcbiAgICAgICAgICAgICAgICBjcnMgOiBudWxsLCAvLyBwYXIgZGVmYXV0XG4gICAgICAgICAgICAgICAgZm9ybWF0IDogbnVsbCwgLy8gKG9ubHkgdG8gUE9TVClcbiAgICAgICAgICAgICAgICBzYW1wbGluZyA6IG51bGwsIC8vIChvbmx5IHVzZSBieSBQcm9maWwpXG4gICAgICAgICAgICAgICAgem9ubHkgOiBudWxsIC8vIChvbmx5IHVzZSBieSBFbGV2YXRpb24pXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3VyY2hhcmdlIGRlcyB2YWxldXJzIG9ibGlnYXRvaXJlc1xuICAgICAgICBzZXR0aW5ncy5wYXJhbS5wb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9ucztcbiAgICAgICAgc2V0dGluZ3MucGFyYW0uZm9ybWF0ID0gb3B0aW9ucy5vdXRwdXRGb3JtYXQ7XG4gICAgICAgIHNldHRpbmdzLnBhcmFtLnNhbXBsaW5nID0gb3B0aW9ucy5zYW1wbGluZztcbiAgICAgICAgc2V0dGluZ3MucGFyYW0uem9ubHkgPSBvcHRpb25zLnpvbmx5O1xuXG4gICAgICAgIC8vIGdlc3Rpb24gZGVzIGNhbGxiYWNrXG4gICAgICAgIHZhciBiT25FcnJvciA9ICEhKG9wdGlvbnMub25FcnJvciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucy5vbkVycm9yID09PSBcImZ1bmN0aW9uXCIpOyAvLyBjYXN0IHZhcmlhYmxlIHRvIGJvb2xlYW5cbiAgICAgICAgdmFyIGJPblN1Y2Nlc3MgPSAhIShvcHRpb25zLm9uU3VjY2VzcyAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucy5vblN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIik7XG5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuYXBpKSB7XG4gICAgICAgICAgICBjYXNlIFwiUkVTVFwiOlxuICAgICAgICAgICAgICAgIC8vIEZJWE1FIGxlcyBleGNlcHRpb25zIG5lIHNvbnQgcGFzICdjYXRjaMOpZXMnIHN1ciBsZSBjb25zdHJ1Y3RldXIgIVxuICAgICAgICAgICAgICAgIHZhciBteVJlcSA9IG5ldyBBbHRpUmVxdWVzdFJFU1Qoc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIGlmICghbXlSZXEucHJvY2Vzc1JlcXVlc3RTdHJpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJFcnJvciBpbiBwcm9jZXNzIHJlcXVlc3QgKHJlc3QpICFcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJPbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBteVJlcS5yZXF1ZXN0U3RyaW5nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIldQU1wiOlxuICAgICAgICAgICAgICAgIC8vIGFqb3V0IGRlcyB2YWxldXJzIHBhciBkZWZhdXQgc3DDqWNpZmlxdWVzIGF1IHNlcnZpY2UgV1BTXG4gICAgICAgICAgICAgICAgc2V0dGluZ3Mud3BzID0ge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlIDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uIDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyIDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICByYXdkYXRhb3V0cHV0IDogbnVsbCwgLy8gcGFyIGRlZmF1dFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0IDogbnVsbCAvLyBwYXIgZGVmYXV0XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBBbHRpUmVxdWVzdFdQUy5idWlsZChzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIGluIHByb2Nlc3MgcmVxdWVzdCAod3BzKSAhXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVycm9yLmNhbGwob3B0aW9ucy5zY29wZSwgbmV3IEVycm9yU2VydmljZShtZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVHlwZSBvZiBBUEkgaXMgbm90IHN1cHBvcnRlZCBieSBzZXJ2aWNlIChSRVNUIG9yIFdQUykgIVwiO1xuICAgICAgICAgICAgICAgIGlmIChiT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IuY2FsbChvcHRpb25zLnNjb3BlLCBuZXcgRXJyb3JTZXJ2aWNlKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYk9uU3VjY2Vzcykge1xuICAgICAgICAgICAgb3B0aW9ucy5vblN1Y2Nlc3MuY2FsbChvcHRpb25zLnNjb3BlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFsdGlSZXF1ZXN0RmFjdG9yeTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/AltiElevationRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js\");\n/* harmony import */ var _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/AltiProfilRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js\");\n/* jshint multistr : true */\n\n\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des requêtes de type REST sur le service altimetrique.\n *\n * @todo Le service Alti n'implemente pas le POST !?\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiRequestREST\n * @param {Object} options - options\n * @param {Object}   options.param.positions - tableau de coordonnées lon/lat\n * @param {String}   options.param.delimiter - '|'\n * @param {Boolean}  options.param.indent - false|true\n * @param {String}   options.param.crs - 'CRS:84'\n * @param {String}   options.param.sampling - 3\n * @param {Boolean}  options.param.zonly - false|true\n * @param {String}   options.param.format - \"JSON|XML\"\n * @param {String}   options.type - \"Profil|Elevation\"\n * @param {String}   options.method - GET|POST\n *\n * @example\n *      var options = {\n *           type : 'Profil', // Elevation\n *           method : 'GET',  // par defaut\n *           param : {\n *               positions : [\n *                   {lon:'1.11', lat:'1.11'},\n *                   {lon:'1.10', lat:'1.10'},\n *                   {lon:'1.12', lat:'1.12'}\n *               ],\n *               delimiter : \";\",         // par defaut\n *               indent    : true,        // par defaut\n *               crs       : 'EPSG:4326', // par defaut\n *               format    : 'json',      // par defaut (only to POST)\n *               sampling  : 3 ,          // par defaut (only use by Profil)\n *               zonly     : false        // par defaut (only use by Elevation)\n *           }\n *      };\n *\n *      var result;\n *      try {\n *          var obj = new AltiRequestREST (options);\n *          if (! obj.processRequestString ()) {\n *              throw new Error(\"Request empty !?\")\n *          }\n *          result = obj.requestString;\n *      } catch (e) {\n *          // exceptions...\n *      }\n * @private\n */\nfunction AltiRequestREST (options) {\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiRequestREST\");\n    this.logger.trace(\"[Constructeur AltiRequestREST ()]\");\n\n    if (!(this instanceof AltiRequestREST)) {\n        throw new TypeError(\"AltiRequestREST constructor cannot be called as a function.\");\n    }\n\n    this.options = options || {};\n\n    // existance des options\n    if (!this.options) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"options\"));\n    }\n\n    // type de requete : Altitude ou Profil\n    // (param. à determiner en fonction des parametres d'entrée)\n    if (!this.options.type) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"type (Elevation or Profil)\"));\n    }\n\n    // construction du modele de requête\n    // (test du type d'objet candidat)\n    this.DataObject = null;\n    switch (this.options.type) {\n        case \"Elevation\":\n            this.DataObject = new _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.options.param);\n            break;\n        case \"Profil\":\n            this.DataObject = new _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.options.param);\n            break;\n        default:\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_TYPE\", \"type (Elevation or Profil)\"));\n    }\n\n    /**\n     * methode.\n     * Par defaut, \"GET\".\n     */\n    this.method = this.options.method || \"GET\";\n}\n\nAltiRequestREST.prototype = {\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AltiRequestREST,\n\n    /**\n     * Template de la requête.\n     */\n    template : {\n        get : {\n            // FIXME on retire le param 'delimiter' : &delimiter='__DELIMITER__'\n            value : \"lon=__LON__&lat=__LAT__&indent=__INDENT__&crs='__CRS__'\",\n            input : {\n                point : \"&zonly=__ZONLY__\",\n                profil : \"&sampling=__SAMPLING__\"\n            }\n        },\n        post : {\n            // FIXME on retire le param 'delimiter' : delimiter='__DELIMITER__'\\n\\\n            value : \"lon=__LON__\\n\" +\n                \"lat=__LAT__\\n\" +\n                \"indent=__INDENT__\\n\" +\n                \"crs='__CRS__'\\n\",\n            input : {\n                point : \"zonly=__ZONLY__\",\n                profil : \"sampling=__SAMPLING__\"\n            }\n        }\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out : lon=0.2367,2.1570&lat=48.0551,46.6077&delimiter=,&indent=true&zonly=true&crs='CRS:84'\n     * // POST out : Not yet supported method POST !\n     * @returns {String}\n     */\n    processRequestString : function () {\n        this.logger.trace(\"AltiRequestREST::processRequestString ()\");\n\n        var template = \"\";\n        if (this.method === \"POST\") {\n            template = this.template.post.value;\n        } else if (this.method === \"GET\") {\n            template = this.template.get.value;\n        }\n\n        template = template.replace(/__LON__/g, this.DataObject.getLon());\n        template = template.replace(/__LAT__/g, this.DataObject.getLat());\n        // FIXME on retire le param 'delimiter'\n        // template = template.replace(/__DELIMITER__/g, this.DataObject.delimiter);\n        template = template.replace(/__INDENT__/g, this.DataObject.indent);\n        template = template.replace(/__CRS__/g, this.DataObject.crs);\n\n        // ajout +\n        template = template + this.__addDataInputs();\n        this.logger.trace(\"traduction tmpl\", template);\n\n        // sauvegarde\n        this.requestString = template;\n\n        return this.requestString;\n    },\n\n    /**\n     * Ajout de parametres spécifiques (ex. zonly)\n     *\n     * @returns {String}\n     */\n    __addDataInputs : function () {\n        this.logger.trace(\"AltiRequestREST::addDataInput ()\");\n\n        var myTemplate;\n        if (this.method === \"POST\") {\n            myTemplate = this.template.post;\n        } else if (this.method === \"GET\") {\n            myTemplate = this.template.get;\n        } else {\n            throw new Error(\"No other HTTP method supported by the service !\");\n        }\n\n        var tmpl = null;\n        if (this.DataObject.CLASSNAME === \"AltiElevationRequest\") {\n            tmpl = myTemplate.input.point;\n            return tmpl.replace(/__ZONLY__/g, this.DataObject.zonly);\n        } else if (this.DataObject.CLASSNAME === \"AltiProfilRequest\") {\n            tmpl = myTemplate.input.profil;\n            return tmpl.replace(/__SAMPLING__/g, this.DataObject.sampling);\n        } else {\n            throw new Error(\"No other object supported than elevation or profil !?\");\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequestREST);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestREST.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Formats_WPS__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Formats/WPS */ \"./node_modules/geoportal-access-lib/src/Formats/WPS.js\");\n/* harmony import */ var _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/AltiElevationRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js\");\n/* harmony import */ var _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/AltiProfilRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js\");\n/**\n * Classe d'interface des requêtes de type WPS sur le service altimetrique.\n * (Factory)\n *\n * @module Gp.Services.Alti.Request.AltiRequestWPS\n * @alias Gp.Services.Alti.Request.AltiRequestWPS\n * @private\n */\n\n\n\n\n\n\nvar AltiRequestWPS = {\n\n    /**\n     * Interface unique de construction de la requête.\n     *\n     * @method build\n     * @param {Object} options - options\n     * @param {Object}   options.param.positions - tableau de coordonnées lon/lat\n     * @param {String}   options.param.delimiter - '|'\n     * @param {Boolean}  options.param.indent - false|true\n     * @param {String}   options.param.crs - 'CRS:84'\n     * @param {String}   options.param.sampling - 3\n     * @param {Boolean}  options.param.zonly - false|true\n     * @param {String}   options.param.format - \"JSON|XML\" (only to POST)\n     * @param {String}   options.wps.service - \"WPS\"\n     * @param {String}   options.wps.version - \"1.0.0\"\n     * @param {String}   options.wps.identifier - \"gs:WPSElevation|gs:WPSLineElevation\"\n     * @param {String}   options.wps.rawdataoutput - \"result\"\n     * @param {String}   options.wps.request - \"Execute\"\n     * @param {String}   options.type - \"Profil|Elevation\"\n     * @param {String}   options.method - GET|POST\n     * @example\n     *      var options = {\n     *           type : 'Profil', // Elevation\n     *           method : 'GET',  // par defaut\n     *           param : {\n     *               positions : [\n     *                   {lon:'1.11', lat:'1.11'},\n     *                   {lon:'1.10', lat:'1.10'},\n     *                   {lon:'1.12', lat:'1.12'}\n     *               ],\n     *               delimiter : \";\",         // par defaut\n     *               indent    : true,        // par defaut\n     *               crs       : 'EPSG:4326', // par defaut\n     *               format    : 'json',      // par defaut (only to POST)\n     *               sampling  : 3 ,          // par defaut (only use by Profil)\n     *               zonly     : false,       // par defaut (only use by Elevation)\n     *           },\n     *           wps : {\n     *                 service : 'WPS',         // par defaut\n     *                 version : '1.0.0',       // par defaut\n     *                 identifier : 'gs:WPS',   // par defaut, Elevation = gs:WPSElevation, Profil = gs:WPSLineElevation\n     *                 rawdataoutput : 'result',// par defaut\n     *                 request : 'Execute'      // par defaut\n     *           }\n     *       };\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiRequestWPS\");\n        logger.trace([\"AltiRequestWPS::build()\"]);\n\n        // existance des options\n        if (!options) {\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"options\"));\n        }\n\n        // type de requete : Altitude ou Profil\n        // (param. à determiner en fonction des parametres d'entrée)\n        if (!options.type) {\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_EMPTY\", \"type (Elevation or Profil)\"));\n        }\n\n        // construction du modele de requête\n        // (test du type d'objet candidat)\n        var DataObject = null;\n        switch (options.type) {\n            case \"Elevation\":\n                // surcharge\n                options.wps.identifier = \"gs:WPSElevation\";\n                DataObject = new _model_AltiElevationRequest__WEBPACK_IMPORTED_MODULE_3__[\"default\"](options.param);\n                break;\n            case \"Profil\":\n                // surcharge\n                options.wps.identifier = \"gs:WPSLineElevation\";\n                DataObject = new _model_AltiProfilRequest__WEBPACK_IMPORTED_MODULE_4__[\"default\"](options.param);\n                break;\n            default:\n                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"PARAM_TYPE\", \"type (Elevation or Profil)\"));\n        }\n\n        // construction de la requête WPS\n        var settings = {\n            data : DataObject,\n            method : options.method,\n            param : options.wps\n        };\n\n        var rqstWPS = new _Formats_WPS__WEBPACK_IMPORTED_MODULE_2__[\"default\"](settings);\n\n        if (!rqstWPS.processRequestString()) {\n            throw new Error(\"Enable to process request !\");\n        }\n\n        return rqstWPS.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequestWPS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVxdWVzdC9BbHRpUmVxdWVzdFdQUy5qcz80MzcwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDSDtBQUNWO0FBQ3lCO0FBQ047O0FBRTFEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVCQUF1QjtBQUNqRCwwQkFBMEIsdUJBQXVCO0FBQ2pELDBCQUEwQjtBQUMxQjtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOERBQU07QUFDM0I7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QixnRUFBQztBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0VBQUM7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUVBQW9CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGdFQUFpQjtBQUNsRDtBQUNBO0FBQ0EsZ0NBQWdDLGdFQUFDO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsb0RBQUc7O0FBRTdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUsNkVBQWMsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXF1ZXN0L0FsdGlSZXF1ZXN0V1BTLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzc2UgZCdpbnRlcmZhY2UgZGVzIHJlcXXDqnRlcyBkZSB0eXBlIFdQUyBzdXIgbGUgc2VydmljZSBhbHRpbWV0cmlxdWUuXG4gKiAoRmFjdG9yeSlcbiAqXG4gKiBAbW9kdWxlIEdwLlNlcnZpY2VzLkFsdGkuUmVxdWVzdC5BbHRpUmVxdWVzdFdQU1xuICogQGFsaWFzIEdwLlNlcnZpY2VzLkFsdGkuUmVxdWVzdC5BbHRpUmVxdWVzdFdQU1xuICogQHByaXZhdGVcbiAqL1xuaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vLi4vVXRpbHMvTG9nZ2VyQnlEZWZhdWx0XCI7XG5pbXBvcnQgXyBmcm9tIFwiLi4vLi4vLi4vVXRpbHMvTWVzc2FnZXNSZXNvdXJjZXNcIjtcbmltcG9ydCBXUFMgZnJvbSBcIi4uLy4uLy4uL0Zvcm1hdHMvV1BTXCI7XG5pbXBvcnQgQWx0aUVsZXZhdGlvblJlcXVlc3QgZnJvbSBcIi4vbW9kZWwvQWx0aUVsZXZhdGlvblJlcXVlc3RcIjtcbmltcG9ydCBBbHRpUHJvZmlsUmVxdWVzdCBmcm9tIFwiLi9tb2RlbC9BbHRpUHJvZmlsUmVxdWVzdFwiO1xuXG52YXIgQWx0aVJlcXVlc3RXUFMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcmZhY2UgdW5pcXVlIGRlIGNvbnN0cnVjdGlvbiBkZSBsYSByZXF1w6p0ZS5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgYnVpbGRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICBvcHRpb25zLnBhcmFtLnBvc2l0aW9ucyAtIHRhYmxlYXUgZGUgY29vcmRvbm7DqWVzIGxvbi9sYXRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLnBhcmFtLmRlbGltaXRlciAtICd8J1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gIG9wdGlvbnMucGFyYW0uaW5kZW50IC0gZmFsc2V8dHJ1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMucGFyYW0uY3JzIC0gJ0NSUzo4NCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLnBhcmFtLnNhbXBsaW5nIC0gM1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gIG9wdGlvbnMucGFyYW0uem9ubHkgLSBmYWxzZXx0cnVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgb3B0aW9ucy5wYXJhbS5mb3JtYXQgLSBcIkpTT058WE1MXCIgKG9ubHkgdG8gUE9TVClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLndwcy5zZXJ2aWNlIC0gXCJXUFNcIlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMud3BzLnZlcnNpb24gLSBcIjEuMC4wXCJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLndwcy5pZGVudGlmaWVyIC0gXCJnczpXUFNFbGV2YXRpb258Z3M6V1BTTGluZUVsZXZhdGlvblwiXG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgb3B0aW9ucy53cHMucmF3ZGF0YW91dHB1dCAtIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLndwcy5yZXF1ZXN0IC0gXCJFeGVjdXRlXCJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLnR5cGUgLSBcIlByb2ZpbHxFbGV2YXRpb25cIlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgIG9wdGlvbnMubWV0aG9kIC0gR0VUfFBPU1RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICogICAgICAgICAgIHR5cGUgOiAnUHJvZmlsJywgLy8gRWxldmF0aW9uXG4gICAgICogICAgICAgICAgIG1ldGhvZCA6ICdHRVQnLCAgLy8gcGFyIGRlZmF1dFxuICAgICAqICAgICAgICAgICBwYXJhbSA6IHtcbiAgICAgKiAgICAgICAgICAgICAgIHBvc2l0aW9ucyA6IFtcbiAgICAgKiAgICAgICAgICAgICAgICAgICB7bG9uOicxLjExJywgbGF0OicxLjExJ30sXG4gICAgICogICAgICAgICAgICAgICAgICAge2xvbjonMS4xMCcsIGxhdDonMS4xMCd9LFxuICAgICAqICAgICAgICAgICAgICAgICAgIHtsb246JzEuMTInLCBsYXQ6JzEuMTInfVxuICAgICAqICAgICAgICAgICAgICAgXSxcbiAgICAgKiAgICAgICAgICAgICAgIGRlbGltaXRlciA6IFwiO1wiLCAgICAgICAgIC8vIHBhciBkZWZhdXRcbiAgICAgKiAgICAgICAgICAgICAgIGluZGVudCAgICA6IHRydWUsICAgICAgICAvLyBwYXIgZGVmYXV0XG4gICAgICogICAgICAgICAgICAgICBjcnMgICAgICAgOiAnRVBTRzo0MzI2JywgLy8gcGFyIGRlZmF1dFxuICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ICAgIDogJ2pzb24nLCAgICAgIC8vIHBhciBkZWZhdXQgKG9ubHkgdG8gUE9TVClcbiAgICAgKiAgICAgICAgICAgICAgIHNhbXBsaW5nICA6IDMgLCAgICAgICAgICAvLyBwYXIgZGVmYXV0IChvbmx5IHVzZSBieSBQcm9maWwpXG4gICAgICogICAgICAgICAgICAgICB6b25seSAgICAgOiBmYWxzZSwgICAgICAgLy8gcGFyIGRlZmF1dCAob25seSB1c2UgYnkgRWxldmF0aW9uKVxuICAgICAqICAgICAgICAgICB9LFxuICAgICAqICAgICAgICAgICB3cHMgOiB7XG4gICAgICogICAgICAgICAgICAgICAgIHNlcnZpY2UgOiAnV1BTJywgICAgICAgICAvLyBwYXIgZGVmYXV0XG4gICAgICogICAgICAgICAgICAgICAgIHZlcnNpb24gOiAnMS4wLjAnLCAgICAgICAvLyBwYXIgZGVmYXV0XG4gICAgICogICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgOiAnZ3M6V1BTJywgICAvLyBwYXIgZGVmYXV0LCBFbGV2YXRpb24gPSBnczpXUFNFbGV2YXRpb24sIFByb2ZpbCA9IGdzOldQU0xpbmVFbGV2YXRpb25cbiAgICAgKiAgICAgICAgICAgICAgICAgcmF3ZGF0YW91dHB1dCA6ICdyZXN1bHQnLC8vIHBhciBkZWZhdXRcbiAgICAgKiAgICAgICAgICAgICAgICAgcmVxdWVzdCA6ICdFeGVjdXRlJyAgICAgIC8vIHBhciBkZWZhdXRcbiAgICAgKiAgICAgICAgICAgfVxuICAgICAqICAgICAgIH07XG4gICAgICovXG4gICAgYnVpbGQgOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAvLyBsb2dnZXJcbiAgICAgICAgdmFyIGxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoXCJBbHRpUmVxdWVzdFdQU1wiKTtcbiAgICAgICAgbG9nZ2VyLnRyYWNlKFtcIkFsdGlSZXF1ZXN0V1BTOjpidWlsZCgpXCJdKTtcblxuICAgICAgICAvLyBleGlzdGFuY2UgZGVzIG9wdGlvbnNcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXy5nZXRNZXNzYWdlKFwiUEFSQU1fRU1QVFlcIiwgXCJvcHRpb25zXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHR5cGUgZGUgcmVxdWV0ZSA6IEFsdGl0dWRlIG91IFByb2ZpbFxuICAgICAgICAvLyAocGFyYW0uIMOgIGRldGVybWluZXIgZW4gZm9uY3Rpb24gZGVzIHBhcmFtZXRyZXMgZCdlbnRyw6llKVxuICAgICAgICBpZiAoIW9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF8uZ2V0TWVzc2FnZShcIlBBUkFNX0VNUFRZXCIsIFwidHlwZSAoRWxldmF0aW9uIG9yIFByb2ZpbClcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc3RydWN0aW9uIGR1IG1vZGVsZSBkZSByZXF1w6p0ZVxuICAgICAgICAvLyAodGVzdCBkdSB0eXBlIGQnb2JqZXQgY2FuZGlkYXQpXG4gICAgICAgIHZhciBEYXRhT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJFbGV2YXRpb25cIjpcbiAgICAgICAgICAgICAgICAvLyBzdXJjaGFyZ2VcbiAgICAgICAgICAgICAgICBvcHRpb25zLndwcy5pZGVudGlmaWVyID0gXCJnczpXUFNFbGV2YXRpb25cIjtcbiAgICAgICAgICAgICAgICBEYXRhT2JqZWN0ID0gbmV3IEFsdGlFbGV2YXRpb25SZXF1ZXN0KG9wdGlvbnMucGFyYW0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlByb2ZpbFwiOlxuICAgICAgICAgICAgICAgIC8vIHN1cmNoYXJnZVxuICAgICAgICAgICAgICAgIG9wdGlvbnMud3BzLmlkZW50aWZpZXIgPSBcImdzOldQU0xpbmVFbGV2YXRpb25cIjtcbiAgICAgICAgICAgICAgICBEYXRhT2JqZWN0ID0gbmV3IEFsdGlQcm9maWxSZXF1ZXN0KG9wdGlvbnMucGFyYW0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXy5nZXRNZXNzYWdlKFwiUEFSQU1fVFlQRVwiLCBcInR5cGUgKEVsZXZhdGlvbiBvciBQcm9maWwpXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnN0cnVjdGlvbiBkZSBsYSByZXF1w6p0ZSBXUFNcbiAgICAgICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICAgICAgZGF0YSA6IERhdGFPYmplY3QsXG4gICAgICAgICAgICBtZXRob2QgOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtIDogb3B0aW9ucy53cHNcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcnFzdFdQUyA9IG5ldyBXUFMoc2V0dGluZ3MpO1xuXG4gICAgICAgIGlmICghcnFzdFdQUy5wcm9jZXNzUmVxdWVzdFN0cmluZygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmFibGUgdG8gcHJvY2VzcyByZXF1ZXN0ICFcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcnFzdFdQUy5yZXF1ZXN0U3RyaW5nO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFsdGlSZXF1ZXN0V1BTO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/AltiRequestWPS.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _AltiRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AltiRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js\");\n\n\n\n\n/**\n * @classdesc\n *\n * Classe de gestion des param. des requêtes de type POINT du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiElevationRequest\n * @param {Object} options - options\n * @param {Boolean}  options.zonly - false|true\n *\n * @private\n */\nfunction AltiElevationRequest (options) {\n    if (!(this instanceof AltiElevationRequest)) {\n        throw new TypeError(\"AltiElevationRequest constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"AltiElevationRequest\";\n\n    // appel du constructeur par heritage\n    _AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur AltiElevationRequest ()]\");\n\n    /**\n     * Z uniquement.\n     * true|false\n     */\n    this.zonly = this.options.zonly || false; // test des options héritées !\n}\n\n/**\n * @lends module:AltiElevationRequest#\n */\n\nAltiElevationRequest.prototype = Object.create(_AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype, {\n\n    /**\n     * Setter/getter pour \"zonly\"\n     */\n    zonly : {\n        /** getter */\n        get : function () {\n            return this._zonly;\n        },\n        /** setter */\n        set : function (z) {\n            this._zonly = z;\n        }\n    }\n\n});\n\n/**\n * Constructeur (alias)\n */\nAltiElevationRequest.prototype.constructor = AltiElevationRequest;\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Array}\n */\nAltiElevationRequest.prototype.getData = function () {\n    // par glop..., appel de AltiRequest::getData () !\n    var map = [];\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    // map.push({k : \"delimiter\", v : this.delimiter}); // FIXME on retire le param \"delimiter\"\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"zonly\",\n        v : this.zonly\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiElevationRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVxdWVzdC9tb2RlbC9BbHRpRWxldmF0aW9uUmVxdWVzdC5qcz8zZDNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDdUQ7QUFDZjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxvREFBVzs7QUFFZixrQkFBa0IsOERBQU07QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBLCtDQUErQyxvREFBVzs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLG9DQUFvQyxFQUFFO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFZSxtRkFBb0IsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXF1ZXN0L21vZGVsL0FsdGlFbGV2YXRpb25SZXF1ZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcbmltcG9ydCBBbHRpUmVxdWVzdCBmcm9tIFwiLi9BbHRpUmVxdWVzdFwiO1xuXG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqXG4gKiBDbGFzc2UgZGUgZ2VzdGlvbiBkZXMgcGFyYW0uIGRlcyByZXF1w6p0ZXMgZGUgdHlwZSBQT0lOVCBkdSBzZXJ2aWNlIGFsdGltZXRyaXF1ZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5BbHRpLlJlcXVlc3QuQWx0aUVsZXZhdGlvblJlcXVlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uc1xuICogQHBhcmFtIHtCb29sZWFufSAgb3B0aW9ucy56b25seSAtIGZhbHNlfHRydWVcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBBbHRpRWxldmF0aW9uUmVxdWVzdCAob3B0aW9ucykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBbHRpRWxldmF0aW9uUmVxdWVzdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFsdGlFbGV2YXRpb25SZXF1ZXN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm9tIGRlIGxhIGNsYXNzZSAoaGVyaXRhZ2UpXG4gICAgICovXG4gICAgdGhpcy5DTEFTU05BTUUgPSBcIkFsdGlFbGV2YXRpb25SZXF1ZXN0XCI7XG5cbiAgICAvLyBhcHBlbCBkdSBjb25zdHJ1Y3RldXIgcGFyIGhlcml0YWdlXG4gICAgQWx0aVJlcXVlc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcigpO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiW0NvbnN0cnVjdGV1ciBBbHRpRWxldmF0aW9uUmVxdWVzdCAoKV1cIik7XG5cbiAgICAvKipcbiAgICAgKiBaIHVuaXF1ZW1lbnQuXG4gICAgICogdHJ1ZXxmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuem9ubHkgPSB0aGlzLm9wdGlvbnMuem9ubHkgfHwgZmFsc2U7IC8vIHRlc3QgZGVzIG9wdGlvbnMgaMOpcml0w6llcyAhXG59XG5cbi8qKlxuICogQGxlbmRzIG1vZHVsZTpBbHRpRWxldmF0aW9uUmVxdWVzdCNcbiAqL1xuXG5BbHRpRWxldmF0aW9uUmVxdWVzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEFsdGlSZXF1ZXN0LnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogU2V0dGVyL2dldHRlciBwb3VyIFwiem9ubHlcIlxuICAgICAqL1xuICAgIHpvbmx5IDoge1xuICAgICAgICAvKiogZ2V0dGVyICovXG4gICAgICAgIGdldCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl96b25seTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIHNldHRlciAqL1xuICAgICAgICBzZXQgOiBmdW5jdGlvbiAoeikge1xuICAgICAgICAgICAgdGhpcy5fem9ubHkgPSB6O1xuICAgICAgICB9XG4gICAgfVxuXG59KTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RldXIgKGFsaWFzKVxuICovXG5BbHRpRWxldmF0aW9uUmVxdWVzdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBbHRpRWxldmF0aW9uUmVxdWVzdDtcblxuLyoqXG4gKiBUYWJsZWF1IGRlIGNsZWZzL3ZhbGV1cnMgcG91ciBwYXJhbS5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbkFsdGlFbGV2YXRpb25SZXF1ZXN0LnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHBhciBnbG9wLi4uLCBhcHBlbCBkZSBBbHRpUmVxdWVzdDo6Z2V0RGF0YSAoKSAhXG4gICAgdmFyIG1hcCA9IFtdO1xuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwibG9uXCIsXG4gICAgICAgIHYgOiB0aGlzLmdldExvbigpXG4gICAgfSk7XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJsYXRcIixcbiAgICAgICAgdiA6IHRoaXMuZ2V0TGF0KClcbiAgICB9KTtcbiAgICAvLyBtYXAucHVzaCh7ayA6IFwiZGVsaW1pdGVyXCIsIHYgOiB0aGlzLmRlbGltaXRlcn0pOyAvLyBGSVhNRSBvbiByZXRpcmUgbGUgcGFyYW0gXCJkZWxpbWl0ZXJcIlxuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwiaW5kZW50XCIsXG4gICAgICAgIHYgOiB0aGlzLmluZGVudFxuICAgIH0pO1xuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwiY3JzXCIsXG4gICAgICAgIHYgOiB0aGlzLmNyc1xuICAgIH0pO1xuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwiem9ubHlcIixcbiAgICAgICAgdiA6IHRoaXMuem9ubHlcbiAgICB9KTtcbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcImZvcm1hdFwiLFxuICAgICAgICB2IDogdGhpcy5mb3JtYXRcbiAgICB9KTtcblxuICAgIHJldHVybiBtYXA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBbHRpRWxldmF0aW9uUmVxdWVzdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiElevationRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js ***!
  \************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _AltiRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AltiRequest */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js\");\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes de type PROFIL du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiProfilRequest\n * @param {Object}   options - options\n * @param {String}   options.sampling - 3\n *\n * @private\n */\nfunction AltiProfilRequest (options) {\n    if (!(this instanceof AltiProfilRequest)) {\n        throw new TypeError(\"AltiProfilRequest constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"AltiProfilRequest\";\n\n    // appel du constructeur par heritage\n    _AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur AltiProfilRequest ()]\");\n\n    /**\n     * Sampling\n     * Par defaut, 3\n     */\n    this.sampling = this.options.sampling || 3; // test des options héritées !\n}\n\n/**\n * @lends module:AltiProfilRequest#\n */\n\nAltiProfilRequest.prototype = Object.create(_AltiRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype, {\n\n    /**\n     * Setter/getter pour \"sampling\"\n     */\n    sampling : {\n        /** getter */\n        get : function () {\n            return this._sampling;\n        },\n        /** setter */\n        set : function (value) {\n            this._sampling = value;\n        }\n    }\n});\n\n/**\n * Constructeur (alias)\n */\nAltiProfilRequest.prototype.constructor = AltiProfilRequest;\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]}\n */\nAltiProfilRequest.prototype.getData = function () {\n    // par glop..., appel de AltiRequest::getData () !\n    var map = [];\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    // map.push({k : \"delimiter\", v : this.delimiter}); // FIXME on retire le param \"delimiter\"\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"sampling\",\n        v : this.sampling\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiProfilRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVxdWVzdC9tb2RlbC9BbHRpUHJvZmlsUmVxdWVzdC5qcz9hZmY5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDdUQ7QUFDZjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksb0RBQVc7O0FBRWYsa0JBQWtCLDhEQUFNO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEMsb0RBQVc7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLG9DQUFvQyxFQUFFO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFZSxnRkFBaUIsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXF1ZXN0L21vZGVsL0FsdGlQcm9maWxSZXF1ZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi8uLi8uLi8uLi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcbmltcG9ydCBBbHRpUmVxdWVzdCBmcm9tIFwiLi9BbHRpUmVxdWVzdFwiO1xuXG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqIENsYXNzZSBkZSBnZXN0aW9uIGRlcyBwYXJhbS4gZGVzIHJlcXXDqnRlcyBkZSB0eXBlIFBST0ZJTCBkdSBzZXJ2aWNlIGFsdGltZXRyaXF1ZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhbGlhcyBHcC5TZXJ2aWNlcy5BbHRpLlJlcXVlc3QuQWx0aVByb2ZpbFJlcXVlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSAgIG9wdGlvbnMgLSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gICBvcHRpb25zLnNhbXBsaW5nIC0gM1xuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEFsdGlQcm9maWxSZXF1ZXN0IChvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFsdGlQcm9maWxSZXF1ZXN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQWx0aVByb2ZpbFJlcXVlc3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb20gZGUgbGEgY2xhc3NlIChoZXJpdGFnZSlcbiAgICAgKi9cbiAgICB0aGlzLkNMQVNTTkFNRSA9IFwiQWx0aVByb2ZpbFJlcXVlc3RcIjtcblxuICAgIC8vIGFwcGVsIGR1IGNvbnN0cnVjdGV1ciBwYXIgaGVyaXRhZ2VcbiAgICBBbHRpUmVxdWVzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5sb2dnZXIgPSBMb2dnZXIuZ2V0TG9nZ2VyKCk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCJbQ29uc3RydWN0ZXVyIEFsdGlQcm9maWxSZXF1ZXN0ICgpXVwiKTtcblxuICAgIC8qKlxuICAgICAqIFNhbXBsaW5nXG4gICAgICogUGFyIGRlZmF1dCwgM1xuICAgICAqL1xuICAgIHRoaXMuc2FtcGxpbmcgPSB0aGlzLm9wdGlvbnMuc2FtcGxpbmcgfHwgMzsgLy8gdGVzdCBkZXMgb3B0aW9ucyBow6lyaXTDqWVzICFcbn1cblxuLyoqXG4gKiBAbGVuZHMgbW9kdWxlOkFsdGlQcm9maWxSZXF1ZXN0I1xuICovXG5cbkFsdGlQcm9maWxSZXF1ZXN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQWx0aVJlcXVlc3QucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBTZXR0ZXIvZ2V0dGVyIHBvdXIgXCJzYW1wbGluZ1wiXG4gICAgICovXG4gICAgc2FtcGxpbmcgOiB7XG4gICAgICAgIC8qKiBnZXR0ZXIgKi9cbiAgICAgICAgZ2V0IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NhbXBsaW5nO1xuICAgICAgICB9LFxuICAgICAgICAvKiogc2V0dGVyICovXG4gICAgICAgIHNldCA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fc2FtcGxpbmcgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqIENvbnN0cnVjdGV1ciAoYWxpYXMpXG4gKi9cbkFsdGlQcm9maWxSZXF1ZXN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFsdGlQcm9maWxSZXF1ZXN0O1xuXG4vKipcbiAqIFRhYmxlYXUgZGUgY2xlZnMvdmFsZXVycyBwb3VyIHBhcmFtLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3RbXX1cbiAqL1xuQWx0aVByb2ZpbFJlcXVlc3QucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcGFyIGdsb3AuLi4sIGFwcGVsIGRlIEFsdGlSZXF1ZXN0OjpnZXREYXRhICgpICFcbiAgICB2YXIgbWFwID0gW107XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJsb25cIixcbiAgICAgICAgdiA6IHRoaXMuZ2V0TG9uKClcbiAgICB9KTtcbiAgICBtYXAucHVzaCh7XG4gICAgICAgIGsgOiBcImxhdFwiLFxuICAgICAgICB2IDogdGhpcy5nZXRMYXQoKVxuICAgIH0pO1xuICAgIC8vIG1hcC5wdXNoKHtrIDogXCJkZWxpbWl0ZXJcIiwgdiA6IHRoaXMuZGVsaW1pdGVyfSk7IC8vIEZJWE1FIG9uIHJldGlyZSBsZSBwYXJhbSBcImRlbGltaXRlclwiXG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJpbmRlbnRcIixcbiAgICAgICAgdiA6IHRoaXMuaW5kZW50XG4gICAgfSk7XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJjcnNcIixcbiAgICAgICAgdiA6IHRoaXMuY3JzXG4gICAgfSk7XG4gICAgbWFwLnB1c2goe1xuICAgICAgICBrIDogXCJzYW1wbGluZ1wiLFxuICAgICAgICB2IDogdGhpcy5zYW1wbGluZ1xuICAgIH0pO1xuICAgIG1hcC5wdXNoKHtcbiAgICAgICAgayA6IFwiZm9ybWF0XCIsXG4gICAgICAgIHYgOiB0aGlzLmZvcm1hdFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hcDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFsdGlQcm9maWxSZXF1ZXN0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiProfilRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiRequest\n * @param {Object} options - options\n * @param {Object}   options.positions - tableau de coordonnées lon/lat\n * @param {String}   options.delimiter - \"|\"\n * @param {Boolean}  options.indent - false|true\n * @param {String}   options.crs - \"CRS:84\"\n * @param {String}   options.format - \"JSON|XML\"\n *\n * @private\n */\nfunction AltiRequest (options) {\n    if (!(this instanceof AltiRequest)) {\n        throw new TypeError(\"AltiRequest constructor cannot be called as a function.\");\n    }\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger();\n    this.logger.trace(\"[Constructeur AltiRequest ()]\");\n\n    /**\n     * Options en paramêtres du constructeur.\n     */\n    this.options = options || {};\n\n    /**\n     * Liste des coordonnées.\n     * @example\n     * var c = [{lon : \"\", lat : \"\"}, {lon : \"\", lat : \"\"}];\n     */\n    this.positions = this.options.positions || [];\n\n    /**\n     * Caractère de séparation.\n     * Par defaut, \"|\".\n     */\n    this.delimiter = this.options.delimiter || \"|\";\n\n    /**\n     * Indentation.\n     * true|false\n     */\n    this.indent = this.options.indent || false;\n\n    /**\n     * Projection.\n     * Par defaut, CRS:84.\n     */\n    this.crs = this.options.crs || \"CRS:84\";\n\n    /**\n     * format de sortie.\n     * Par defaut, \"json\".\n     */\n    this.format = this.options.format || \"json\";\n}\n\n/**\n * CLASSNAME\n */\nAltiRequest.CLASSNAME = \"AltiRequest\";\n\nAltiRequest.prototype = {\n\n    /**\n     * @lends module:AltiRequest#\n     */\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AltiRequest,\n\n    /**\n     * Ajout d\"une liste de coordonnées.\n     *\n     * @param {Object[]} lstPosition - liste de positions\n     * @example\n     * obj.setPositions ([{lon : \"0.15\", lat : \"0.15\"}, {lon : \"1.15\", lat : \"1.15\"}]);\n     */\n    setPositions : function (lstPosition) {\n        var positions = [];\n        for (var i = 0; i < lstPosition.length; i++) {\n            var o = lstPosition[i];\n            if (o.lon && o.lat) {\n                positions.push(o);\n            }\n        }\n\n        this.positions = positions;\n    },\n\n    /**\n     * Liste des coordonnées.\n     *\n     * @param {Int} pos - position\n     * @returns {positions}\n     * @example\n     * obj.getPositions ();  // [{lon : \"\", lat : \"\"}, {lon : \"\", lat : \"\"}]\n     * obj.getPositions (0); // [{lon : \"\", lat : \"\"}]\n     */\n    getPositions : function (pos) {\n        // FIXME test if not a number !?\n        if (!pos) {\n            return this.positions;\n        }\n\n        var index = this.positions.length - 1;\n        if (pos > index || pos < index) {\n            this.logger.warn(\"index out of range !\");\n            return this.positions;\n        }\n\n        return this.positions[pos];\n    },\n\n    /**\n     * Ajout d\"une liste de coordonnées.\n     *\n     * @param {Object[]} lstPosition - liste de positions\n     * @example\n     * obj.addPositions ([{lon : \"0.15\", lat : \"0.15\"}, {lon : \"1.15\", lat : \"1.15\"}]);\n     */\n    addPositions : function (lstPosition) {\n        for (var i = 0; i < lstPosition.length; i++) {\n            var o = lstPosition[i];\n            if (o.lon && o.lat) {\n                this.positions.push(lstPosition[i]);\n            }\n        }\n    },\n\n    /**\n     * Retourne la liste des longitudes avec un caractère de séparation.\n     *\n     * @returns {String} - une liste de longitudes\n     * @example\n     * // out : 0.2367|2.1570|43.789|...\n     */\n    getLon : function () {\n        var lstLon = [];\n        for (var i = 0; i < this.positions.length; i++) {\n            lstLon.push(this.positions[i].lon);\n        }\n        this.logger.trace(lstLon);\n        return lstLon.join(this.delimiter);\n    },\n\n    /**\n     * Retourne la liste des lattitudes avec un caractère de séparation.\n     *\n     * @returns {String} - une liste de lattitudes\n     * @example\n     * // out : 0.2367|2.1570|43.789|...\n     */\n    getLat : function () {\n        var lstLat = [];\n        for (var i = 0; i < this.positions.length; i++) {\n            lstLat.push(this.positions[i].lat);\n        }\n        this.logger.trace(lstLat);\n        return lstLat.join(this.delimiter);\n    }\n\n};\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]}\n */\nAltiRequest.prototype.getData = function () {\n    var map = [];\n\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    map.push({\n        k : \"delimiter\",\n        v : this.delimiter\n    });\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiRequest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Request/model/AltiRequest.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _Formats_XML__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Formats/XML */ \"./node_modules/geoportal-access-lib/src/Formats/XML.js\");\n/* harmony import */ var _Formats_AltiResponseReader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Formats/AltiResponseReader */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Formats/AltiResponseReader.js\");\n/* harmony import */ var _model_AltiResponse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model/AltiResponse */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js\");\n/* harmony import */ var _model_Elevation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./model/Elevation */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js\");\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module AltiResponseFactory\n * @private\n * @alias Gp.Services.Alti.Response.AltiResponseFactory\n */\n\n\n\n\n\n\n\n\nvar AltiResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"AltiResponseFactory\");\n        logger.trace([\"AltiResponseFactory::build()\"]);\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                switch (options.outputFormat) {\n                    case \"xml\":\n                        logger.trace(\"analyze response : xml\");\n\n                        try {\n                            var p = new _Formats_XML__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                                reader : _Formats_AltiResponseReader__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n                            });\n\n                            if (typeof options.response === \"string\") {\n                                p.setXMLString(options.response);\n                            } else {\n                                p.setXMLDoc(options.response);\n                            }\n\n                            data = p.parse();\n\n                            if (!data) {\n                                throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION_2\"));\n                            }\n                        } catch (e) {\n                            var message = e.message;\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", message),\n                                status : 200,\n                                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        break;\n\n                    case \"json\":\n                        logger.trace(\"analyze response : json\");\n                        logger.trace(\"analyze response : \", typeof options.response);\n\n                        var JSONResponse = null;\n                        if (typeof options.response === \"string\") {\n                            JSONResponse = JSON.parse(options.response);\n                        } else {\n                            JSONResponse = options.response;\n                        }\n\n                        // le service renvoie t il une erreur ?\n                        if (JSONResponse && JSONResponse.error) {\n                            // ex. {\"error\": {\"code\": \"BAD_PARAMETER\",\"description\": \"The values () cannot be parsed as a valid longitude (double value such as -180 < lat < 180).\"}}\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", JSONResponse.error.description),\n                                status : 200,\n                                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        // analyse de la reponse\n                        if (JSONResponse) {\n                            var elevations = JSONResponse.elevations;\n                            var altiResponse = new _model_AltiResponse__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n                            var elevation;\n                            if (Array.isArray(elevations) && elevations.length) {\n                                for (var i = 0; i < elevations.length; i++) {\n                                    elevation = new _model_Elevation__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n\n                                    if (typeof elevations[i] === \"object\") {\n                                        // elevations[i] est un objet elevation\n                                        if (elevations[i].lon) {\n                                            elevation.lon = elevations[i].lon;\n                                        }\n                                        if (elevations[i].lat) {\n                                            elevation.lat = elevations[i].lat;\n                                        }\n                                        if (elevations[i].z) {\n                                            elevation.z = elevations[i].z;\n                                        }\n                                        if (elevations[i].acc) {\n                                            elevation.acc = elevations[i].acc;\n                                        }\n                                    } else if (typeof elevations[i] === \"number\") {\n                                        // elevations[i] est un nombre, dans le cas de zonly=true notamment\n                                        elevation.z = elevations[i];\n                                    }\n\n                                    if (Array.isArray(altiResponse.elevations)) {\n                                        altiResponse.elevations.push(elevation);\n                                    }\n                                }\n                            }\n                            data = altiResponse;\n                        }\n\n                        if (!data) {\n                            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                                message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_ANALYSE_2\"),\n                                type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_UNKERR,\n                                status : -1\n                            }));\n                            return;\n                        }\n                        break;\n\n                    default:\n                        options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                            message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_FORMAT_2\"),\n                            type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_UNKERR,\n                            status : -1\n                        }));\n                        return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                } else if (data.error) {\n                    var errorMess = data.error.description;\n                    options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                        message : _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", errorMess),\n                        type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiResponseFactory);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Response/AltiResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js ***!
  \********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Response object for {@link module:Services~getAltitude Gp.Services.getAltitude ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Array.<Gp.Services.Alti.Elevation>} elevations - Elevations array.\n *\n * @namespace\n * @alias Gp.Services.AltiResponse\n */\nfunction AltiResponse () {\n    if (!(this instanceof AltiResponse)) {\n        throw new TypeError(\"AltiResponse constructor cannot be called as a function.\");\n    }\n\n    this.elevations = [];\n}\n\nAltiResponse.prototype = {\n\n    constructor : AltiResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AltiResponse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVzcG9uc2UvbW9kZWwvQWx0aVJlc3BvbnNlLmpzPzZmNjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBLHdCQUF3Qiw2REFBNkQ7QUFDckY7QUFDQSxjQUFjLG1DQUFtQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWUsMkVBQVksRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvU2VydmljZXMvQWx0aS9SZXNwb25zZS9tb2RlbC9BbHRpUmVzcG9uc2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlc3BvbnNlIG9iamVjdCBmb3Ige0BsaW5rIG1vZHVsZTpTZXJ2aWNlc35nZXRBbHRpdHVkZSBHcC5TZXJ2aWNlcy5nZXRBbHRpdHVkZSAoKX0gaW52b2NhdGlvbiB3aGVuIHN1Y2Nlc3NmdWwuIFJlY2VpdmVkIGFzIHRoZSBhcmd1bWVudCBvZiBvblN1Y2Nlc3MgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48R3AuU2VydmljZXMuQWx0aS5FbGV2YXRpb24+fSBlbGV2YXRpb25zIC0gRWxldmF0aW9ucyBhcnJheS5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuQWx0aVJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIEFsdGlSZXNwb25zZSAoKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFsdGlSZXNwb25zZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFsdGlSZXNwb25zZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHRoaXMuZWxldmF0aW9ucyA9IFtdO1xufVxuXG5BbHRpUmVzcG9uc2UucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBBbHRpUmVzcG9uc2VcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWx0aVJlc3BvbnNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/AltiResponse.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Single elevation object returned by underlying web service. Contains at least, one elevation (z). May also contain point coordinates and elevation accuracy if \"zonly\" parameter wasn't set to true.\n *\n * @property {Float} lat - Point latitude. (only if zonly=false)\n * @property {Float} lon - Point longitude. (only if zonly=false)\n * @property {Float} z - Point elevation.\n * @property {Float} acc - Accuracy of elevation for this point. (only if zonly=false)\n *\n * @namespace\n * @alias Gp.Services.Alti.Elevation\n */\nfunction Elevation () {\n    if (!(this instanceof Elevation)) {\n        throw new TypeError(\"Elevation constructor cannot be called as a function.\");\n    }\n\n    this.z = null;\n}\n\nElevation.prototype = {\n\n    constructor : Elevation\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Elevation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVzcG9uc2UvbW9kZWwvRWxldmF0aW9uLmpzP2M2NjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU07QUFDcEIsY0FBYyxNQUFNO0FBQ3BCLGNBQWMsTUFBTTtBQUNwQixjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVlLHdFQUFTLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1NlcnZpY2VzL0FsdGkvUmVzcG9uc2UvbW9kZWwvRWxldmF0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFNpbmdsZSBlbGV2YXRpb24gb2JqZWN0IHJldHVybmVkIGJ5IHVuZGVybHlpbmcgd2ViIHNlcnZpY2UuIENvbnRhaW5zIGF0IGxlYXN0LCBvbmUgZWxldmF0aW9uICh6KS4gTWF5IGFsc28gY29udGFpbiBwb2ludCBjb29yZGluYXRlcyBhbmQgZWxldmF0aW9uIGFjY3VyYWN5IGlmIFwiem9ubHlcIiBwYXJhbWV0ZXIgd2Fzbid0IHNldCB0byB0cnVlLlxuICpcbiAqIEBwcm9wZXJ0eSB7RmxvYXR9IGxhdCAtIFBvaW50IGxhdGl0dWRlLiAob25seSBpZiB6b25seT1mYWxzZSlcbiAqIEBwcm9wZXJ0eSB7RmxvYXR9IGxvbiAtIFBvaW50IGxvbmdpdHVkZS4gKG9ubHkgaWYgem9ubHk9ZmFsc2UpXG4gKiBAcHJvcGVydHkge0Zsb2F0fSB6IC0gUG9pbnQgZWxldmF0aW9uLlxuICogQHByb3BlcnR5IHtGbG9hdH0gYWNjIC0gQWNjdXJhY3kgb2YgZWxldmF0aW9uIGZvciB0aGlzIHBvaW50LiAob25seSBpZiB6b25seT1mYWxzZSlcbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAYWxpYXMgR3AuU2VydmljZXMuQWx0aS5FbGV2YXRpb25cbiAqL1xuZnVuY3Rpb24gRWxldmF0aW9uICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRWxldmF0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRWxldmF0aW9uIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdGhpcy56ID0gbnVsbDtcbn1cblxuRWxldmF0aW9uLnByb3RvdHlwZSA9IHtcblxuICAgIGNvbnN0cnVjdG9yIDogRWxldmF0aW9uXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVsZXZhdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/Alti/Response/model/Elevation.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/CommonService.js":
/*!*************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/CommonService.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils/LoggerByDefault */ \"./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/Helper */ \"./node_modules/geoportal-access-lib/src/Utils/Helper.js\");\n/* harmony import */ var _Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Utils/MessagesResources */ \"./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\");\n/* harmony import */ var _Protocols_Protocol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Protocols/Protocol */ \"./node_modules/geoportal-access-lib/src/Protocols/Protocol.js\");\n/* harmony import */ var _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Exceptions/ErrorService */ \"./node_modules/geoportal-access-lib/src/Exceptions/ErrorService.js\");\n/* harmony import */ var _DefaultUrlService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DefaultUrlService */ \"./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../package.json */ \"./node_modules/geoportal-access-lib/package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_6___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../package.json */ \"./node_modules/geoportal-access-lib/package.json\", 1);\n\n\n\n\n\n\n// package.json (extract version)\n\n\n/**\n * @classdesc\n * Composant Service\n *\n * @constructor\n * @alias Gp.Services.CommonService\n * @param {Object} options - options communes à tous les services\n *\n * @param {String} options.apiKey - Clef d'accès à la plateforme Géoportail,\n *      nécessaire pour franchir la couche de contrôle des accès pour avoir une réponse du service invoqué.\n *      Plusieurs clefs peuvent être passées dans le cas de l'invocation du service d'autoconfiguration.\n *      Si ce paramètre n'est pas renseigné, alors le paramètre serverUrl doit être renseigné (comprenant alors, si nécessaire la clef API).\n *\n * @param {String} options.serverUrl - URL d'accès au service.\n *      Permet de forcer l'utilisation d'un service équivalent déployé derrière une éventuelle autre URL d'accès.\n *      Si ce paramètre est renseigné alors, le paramètre apiKey est ignoré.\n *\n * @param {String} [options.protocol] - Le protocole à utiliser pour récupérer les informations du service :\n *      peut valoir 'JSONP' ou 'XHR'.\n *      Par défaut, c'est le protocole XHR qui sera utilisé.\n *      Attention, le protocole JSONP n'est pas valide dans un environnement NodeJS (Utilisation du mode XHR).\n *\n * @param {Boolean} [options.ssl] - Indique si l'on souhaite intérroger les services en https.\n *      Ce paramètre ne fonctionne que pour une utilisation hors navigateur (ex. NodeJS).\n *      Sur un navigateur, le protocole est automatiquement extrait de l'url du site...\n *      Par défaut, on utilise le protocole http (ssl=false).\n *\n * @param {String} [options.proxyURL] - Le proxy à utiliser pour pallier au problème de cross-domain dans le cas d'une requête XHR.\n *      Utile si le paramètre 'protocol' vaut 'XHR', il ne sera pas pris en compte si protocol vaut JSONP.\n *\n * @param {String} [options.callbackSuffix] - Suffixe de la fonction de callback à utiliser, dans le cas du protocole JSONP.\n *      Par défaut, la fonction de callback portera un nom du type \"callback\"+ID, où ID est soit un identifiant unique généré à chaque requête,\n *      soit le paramètre callbackSuffix s'il est spécifié. Par exemple, si callbackSuffix=\"_2\", la fonction sera \"callback_2 ()\".\n *      Utile pour utiliser une réponse déjà encapsulée dans une fonction de callback, dont le nom est connu (ex : chargement de l'autoconfiguration en local)\n *      Utile seulement si le paramètre 'protocol' vaut 'JSONP', il ne sera pas pris en compte si protocol vaut 'XHR'.\n *\n * @param {String} [options.httpMethod] - La méthode HTTP\n *      à utiliser dans le cas d'une requête XHR : peut valoir 'GET' ou 'POST'.\n *      Non pris en compte si 'protocol' vaut JSONP qui fonctionne obligatoirement en GET.\n *      Par défaut, c'est la méthode GET qui est utilisée.\n *\n * @param {String} [options.contentType] - Content-Type de la requete\n *      à utiliser dans le cas d'une requête XHR en mode POST.\n *      Non pris en compte si 'protocol' vaut JSONP et/ou la méthode HTTP vaut GET.\n *      Par défaut, c'est la méthode GET qui est utilisée donc on n'utilise pas de Content-Type.\n *\n * @param {Number} [options.timeOut] - Délai d'attente maximal (en ms) de la réponse du service (à partir de l'envoi de la requête).\n *      Par défaut, aucun timeOut n'est pris en compte (timeoutDelay= 0).\n *\n * @param {Boolean} [options.rawResponse] - Indique si l'on souhaite que la réponse du service ne soit pas parsée par l'API avant d'être restituée.\n *      (Cf. paramètre « onSuccess » pour plus de détails).\n *\n * @param {Function} [options.onSuccess] - Fonction appelée lorsque le service répond correctement à la requête\n *      (code HTTP 200, sans message d'erreur).\n *      Cette fonction prend en paramètre la réponse du service,\n *      soit sous la forme d'un Object Javascript formaté par le parseur dédié à la syntaxe du service (comportement par défaut) ;\n *      soit brute au format String non prétraité si le paramètre « rawResponse » a été précisé avec la valeur « true ».\n *\n * @param {Function} [options.onFailure] - Fonction appelée lorsque le service ne répond pas correctement\n *      (code HTTP de retour différent de 200 ou pas de réponse).\n *\n * @param {Function} [options.onBeforeParse] - Fonction appelée avant le parsing de la réponse\n *      Permet de modifier la réponse avant parsing et la fonction doit retourner une String.\n *      Cette fonction prend en paramètre la réponse telle que renvoyée par le service\n *      (cad au format json ou xml).\n *      Pour le JSONP, si le paramètre \"rawResponse\" a été précisé avec la valeur \"true\",\n *      la fonction prend en paramètre un Object JavaScript contenant la réponse XML.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      ssl : false,\n *      proxyURL : null,\n *      callbackName : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      onBeforeParse : function (rawResponse) {}\n *   };\n * @private\n */\nfunction CommonService (options) {\n    if (!(this instanceof CommonService)) {\n        throw new TypeError(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"CLASS_CONSTRUCTOR\"));\n    }\n\n    this.logger = _Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"CommonService\");\n    this.logger.trace(\"[Constructeur CommonService (options)]\");\n\n    // #####################\n    // récupération des options par défaut pour les paramètres optionnels\n    // #####################\n\n    /**\n     * Options du service\n     * @type {Object}\n     */\n    this.options = {\n        // protocol : \"JSONP\",\n        protocol : \"XHR\",\n        ssl : true,\n        proxyURL : \"\",\n        // callbackName : \"\",\n        callbackSuffix : null,\n        httpMethod : \"GET\",\n        timeOut : 0,\n        rawResponse : false,\n        scope : this,\n        /**\n        * callback par defaut pour la reponse\n        * @param {Object} response - response\n        * @private\n        */\n        onSuccess : function (response) {\n            console.log(\"onSuccess - la reponse est la suivante : \", response);\n        },\n        /**\n        * callback par defaut pour les erreurs\n        * @param {Object} error - error\n        * @private\n        */\n        onFailure : function (error) {\n            if (error.status === 200 || !error.status) {\n                console.log(\"onFailure : \", error.message);\n            } else {\n                console.log(\"onFailure - Erreur (\", error.status, \") : \", error.message);\n            }\n        }\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    // gestion des clefs API\n    if (!this.options.apiKey && !this.options.serverUrl) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_MISSING\", \"apiKey\", \"serverUrl\"));\n    }\n\n    // modification de la fonction de callback onSuccess dans le cas où la réponse brute est demandée\n    if (this.options.rawResponse && !this.options.onSuccess) {\n        /**\n        * callback par defaut pour la reponse\n        * @param {Object} response - response\n        * @private\n        */\n        this.options.onSuccess = function (response) {\n            console.log(\"onSuccess - la réponse brute du service est la suivante : \", response);\n        };\n    }\n\n    // gestion du callback onSuccess\n    var bOnSuccess = !!(this.options.onSuccess !== null && typeof this.options.onSuccess === \"function\");\n    if (!bOnSuccess) {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_MISSING\", \"onSuccess()\"));\n    }\n\n    // gestion de l'url du service par defaut\n    if (!this.options.serverUrl) {\n        // INFO\n        // gestion de l'url du service par defaut pour les services qui ne possèdent qu'une seul url par defaut\n        // les cas particuliers des services avec plusieurs urls (ex. Alti) devront être traité dans la classe du composant\n        // donc si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n        _DefaultUrlService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ssl = this.options.ssl;\n        var urlByDefault = _DefaultUrlService__WEBPACK_IMPORTED_MODULE_5__[\"default\"][this.CLASSNAME].url(this.options.apiKey);\n        if (typeof urlByDefault === \"string\") {\n            this.options.serverUrl = urlByDefault;\n        } else {\n            this.logger.trace(\"URL par defaut à determiner au niveau du composant...\");\n        }\n    }\n\n    // FIXME nettoyage des KVP dans l'url du service\n    // if (this.options.serverUrl) {\n    //     // INFO\n    //     // si l'url est renseignée, il faut la nettoyer de tous ses KVP\n    //     // ex. on ne veut pas de params. 'callback' ou 'output' car ceci declencherait\n    //     // des opérations d'encapsulations des reponses légèrement farfelues ...\n    //     var urlsource = this.options.serverUrl;\n    //     var urlparts = urlsource.split(\"?\");\n    //     this.options.serverUrl = urlparts[0];\n    // }\n\n    // gestion de la methode HTTP\n    this.options.httpMethod = (typeof options.httpMethod === \"string\") ? options.httpMethod.toUpperCase() : \"GET\";\n\n    switch (this.options.httpMethod) {\n        case \"POST\":\n        case \"GET\":\n            break;\n        case \"PUT\":\n        case \"DELETE\":\n        case \"HEAD\":\n        case \"OPTIONS\":\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_NOT_SUPPORT\", \"httpMethod\"));\n        default:\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_UNKNOWN\", \"httpMethod\"));\n    }\n\n    // gestion du protocole\n    // this.options.protocol = (typeof options.protocol === \"string\" ) ? options.protocol.toUpperCase() : \"JSONP\";\n    this.options.protocol = (typeof options.protocol === \"string\") ? options.protocol.toUpperCase() : \"XHR\";\n\n    switch (this.options.protocol) {\n        case \"JSONP\":\n        case \"XHR\":\n            break;\n        default:\n            throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_UNKNOWN\", \"protocol\"));\n    }\n\n    // on determine l'environnement d'execution : browser ou non ?\n    // et on lance une exception sur l'utilisation du protocole JSONP pour nodeJS...\n    if (typeof window === \"undefined\" && this.options.protocol === \"JSONP\") {\n        throw new Error(_Utils_MessagesResources__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMessage(\"PARAM_NOT_SUPPORT_NODEJS\", \"protocol=JSONP (instead use XHR)\"));\n    }\n\n    // le protocole JSONP ne fonctionne qu'en GET.\n    if (this.options.protocol === \"JSONP\") {\n        this.options.httpMethod = \"GET\";\n    }\n\n    // gestion du cache\n    this.options.nocache = options.nocache || false;\n\n    // #####################\n    // attributs d'instances\n    // #####################\n\n    /**\n     * Format de réponse du service\n     */\n    this.options.outputFormat = null;\n    /**\n     * Requête envoyée au service\n     */\n    this.request = null;\n    /**\n     * Reponse du service\n     */\n    this.response = null;\n}\n\n/**\n * @lends module:CommonService\n */\nCommonService.prototype = {\n\n    /*\n     * Constructeur (alias)\n     */\n    constructor : CommonService,\n\n    /**\n     * Appel du service Géoportail\n     */\n    call : function () {\n        /* jshint validthis : true */\n        this.logger.trace(\"CommonService::call ()\");\n\n        var context = this;\n        /** fonction d'execution */\n        function run () {\n            this.logger.trace(\"CommonService::run ()\");\n            this.buildRequest.call(context, onError, onBuildRequest);\n        }\n\n        run.call(context);\n\n        // callback de fin de construction de la requête\n        function onBuildRequest (result) {\n            this.logger.trace(\"CommonService::onBuildRequest : \", result);\n            this.callService.call(context, onError, onCallService);\n        }\n\n        // callback de fin d'appel au service\n        function onCallService (result) {\n            this.logger.trace(\"CommonService::onCallService : \", result);\n            this.analyzeResponse.call(context, onError, onAnalyzeResponse);\n        }\n\n        // callback de fin de lecture de la reponse\n        function onAnalyzeResponse (result) {\n            this.logger.trace(\"CommonService::onAnalyzeResponse : \", result);\n            if (result) {\n                this.options.onSuccess.call(this, result);\n            } else {\n                return onError.call(this, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"Analyse de la reponse en échec !?\"));\n            }\n        }\n\n        // callback de gestion des erreurs : renvoit un objet de type ErrorService\n        function onError (error) {\n            this.logger.trace(\"CommonService::onError()\");\n            // error : l'objet est du type ErrorService ou Error\n            var e = error;\n            if (!(e instanceof _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"])) {\n                e = new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](error.message);\n            }\n            this.options.onFailure.call(this, e);\n        }\n    },\n\n    /**\n     * Création de la requête\n     * @param {Function} error - callback\n     * @param {Function} success - callback\n     */\n    buildRequest : function (error, success) {\n        // INFO\n        this.logger.error(\"overwritten method !\");\n        // retourne l'objet 'this.request'\n        if (error) {\n            error.call(this, \"This method must be overwritten !\");\n        }\n        success.call(this, \"This method must be overwritten !\");\n    },\n\n    /**\n     * Appel du service\n     * @param {Function} error - callback\n     * @param {Function} success - callback\n     */\n    callService : function (error, success) {\n        // INFO\n        // retourne l'objet 'this.response'\n\n        // NOTES\n        //  Pour le mode XHR, on recupère une reponse sous forme d'un json ou xml (#document).\n        //  Pour le mode JSONP, on a toujours un objet JSON mais sous 2 formes :\n        //      - natif\n        //      - XML encapsulé :\n        //          {http : {status:200, error:null},xml :'réponse du service'}\n        //          {http : {status:400, error:'reponse du service'},xml :null}\n        //  En XHR, la reponse est directement sauvegardée dans 'this.response'.\n        //  Par contre, en JSONP, on doit analyser la reponse (status ou non vide),\n        //  et ne renvoyer que le contenu (xml ou l'objet)\n\n        // gestion de la proxification du service\n        var strUrlProxified = null;\n        var strData = this.request;\n\n        // a t on mis en place un proxy ?\n        // la proxyfication est valable uniquement en mode XHR !\n        var bUrlProxified = !!(this.options.proxyURL && this.options.protocol === \"XHR\");\n\n        // rajout de l'option gpbibaccess\n        // INFO : acces au numero de version de package.conf aprés compilation !\n        if (this.CLASSNAME !== \"Geocode\" && this.CLASSNAME !== \"ReverseGeocode\" && this.CLASSNAME !== \"AutoComplete\") {\n            this.options.serverUrl = _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(this.options.serverUrl, {\n                \"gp-access-lib\" : _package_json__WEBPACK_IMPORTED_MODULE_6__.version\n            }, false);\n        }\n\n        // si le proxy est renseigné, on proxifie l'url du service\n        if (bUrlProxified) {\n            if (this.options.httpMethod === \"GET\") {\n                strUrlProxified = this.options.proxyURL + _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(this.options.serverUrl, this.request, true);\n                strData = null;\n            }\n\n            if (this.options.httpMethod === \"POST\") {\n                strUrlProxified = this.options.proxyURL + _Utils_Helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].normalyzeUrl(this.options.serverUrl, null, true);\n                strData = this.request;\n            }\n        }\n\n        // contexte du composant spécifique !\n        var self = this;\n\n        var options = {\n            url : strUrlProxified || this.options.serverUrl,\n            method : this.options.httpMethod,\n            protocol : this.options.protocol,\n            timeOut : this.options.timeOut || 0,\n            format : this.options.outputFormat, // ceci declenche le parsing de la reponse du service, mais on souhaite toujours une reponse brute (string) !\n            nocache : this.options.nocache || false, // ceci permet d'ajouter un timestamp dans la requête\n            wrap : this.options.protocol !== \"XHR\", // ceci declenche l'encapsulation de la reponse XML du service dans du JSON, mais pas en mode XHR !\n            callbackSuffix : this.options.callbackSuffix,\n            // callbackName : this.options.callbackName || null,\n            data : strData,\n            headers : null, // TODO...\n            content : this.options.contentType || \"application/xml\",\n            scope : this.options.scope || this,\n            // callback de reponse\n            onResponse : function (response) {\n                self.logger.trace(\"callService::onResponse()\");\n\n                // le contenu de la reponse à renvoyer !\n                var content = null;\n\n                // XHR : on renvoie toujours la reponse brute du service (json ou xml)\n                // au parser du composant...\n                if (self.options.protocol === \"XHR\") {\n                    self.logger.trace(\"Response XHR\", response);\n                    content = response; // par defaut, la reponse du service  !\n                }\n\n                // JSONP : on pre-analyse la reponse brute du service (encapsuler ou pas)\n                // avant de l'envoyer au parser du composant...\n                if (self.options.protocol === \"JSONP\") {\n                    self.logger.trace(\"Response JSON\", response);\n                    if (response) {\n                        if (response.http) {\n                            // reponse encapsulée :\n                            // ex. reponse du service en xml\n                            // > {http : {status:200, error:null},xml :'réponse du service'}\n                            if (response.http.status !== 200) {\n                                error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n                                    status : response.http.status,\n                                    message : response.http.error,\n                                    type : _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].TYPE_SRVERR\n                                }));\n                                return;\n                            } else {\n                                content = response.xml; // par defaut !\n                                if (self.options.rawResponse) {\n                                    content = response;\n                                }\n                            }\n                        } else {\n                            // reponse non encapsulée :\n                            // ex. reponse du service en json ou xml\n                            content = response;\n                        }\n                    } else {\n                        error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"Le contenu de la reponse est vide !?\"));\n                        return;\n                    }\n                }\n\n                // si on souhaite parser la reponse du service\n                if (typeof self.options.onBeforeParse === \"function\") {\n                    var newResponse = self.options.onBeforeParse(content);\n                    if (typeof newResponse === \"string\") {\n                        // la reponse parsée par l'utilisateur est retournée sous\n                        // forme de string !\n                        content = newResponse;\n                    }\n                }\n                // sauvegarde de la reponse dans l'objet parent (CommonService)\n                self.response = content;\n                // on renvoie la reponse...\n                success.call(self, content);\n            },\n            // callback des erreurs\n            onFailure : function (e) {\n                self.logger.trace(\"callService::onFailure()\");\n                // on est forcement sur une erreur levée par un service !\n                e.type = _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"].TYPE_SRVERR;\n                error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](e));\n            },\n            // callback de timeOut\n            onTimeOut : function () {\n                self.logger.trace(\"callService::onTimeOut()\");\n                error.call(self, new _Exceptions_ErrorService__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"TimeOut!\"));\n            }\n        };\n\n        _Protocols_Protocol__WEBPACK_IMPORTED_MODULE_3__[\"default\"].send(options);\n    },\n\n    /**\n     * Analyse de la réponse\n     * @param {Function} error - callback\n     * @param {Function} success - callback\n     */\n    analyzeResponse : function (error, success) {\n        // INFO\n        this.logger.error(\"overwritten method !\");\n        // retourne l'objet spécifique au type de composant (json)\n        if (error) {\n            error.call(this, \"This method must be overwritten !\");\n        }\n        success.call(this, \"This method must be overwritten !\");\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CommonService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/CommonService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// cette classe contient les URLs par defaut des services.\n//  DefaultUrlService.Alti.url(key)[elevation-json]\n//  DefaultUrlService.Alti.url(key)[elevation-xml]\n//  DefaultUrlService.Alti.url(key)[profil-json]\n//  DefaultUrlService.Alti.url(key)[profil-xml]\n//  DefaultUrlService.Alti.url(key)[wps]\n//  DefaultUrlService.ProcessIsoCurve.url(key)\n//  DefaultUrlService.AutoComplete.url(key)\n//  DefaultUrlService.ReverseGeocode.url(key)\n//  DefaultUrlService.AutoConf.url(key)[apiKey]\n//  DefaultUrlService.AutoConf.url(key)[apiKeys]\n//  DefaultUrlService.AutoConf.url(key)[aggregate]\n//  DefaultUrlService.Geocode.url(key)\n//  DefaultUrlService.Route.url(key)\n\n// Example :\n//\n// DefaultUrlService.Alti.url('alti')[elevation-json]\n//  output {String} -> http://wxs.ign.fr/calcul/alti/rest/elevation.json\n//\n// DefaultUrlService.Alti.url('calcul')\n// output {Object|String}\n// -> http://wxs.ign.fr/calcul/alti/rest/elevation.json\n// -> http://wxs.ign.fr/calcul/alti/rest/elevation.xml\n// -> http://wxs.ign.fr/calcul/alti/rest/elevationLine.json\n// -> http://wxs.ign.fr/calcul/alti/rest/elevationLine.xml\n// -> http://wxs.ign.fr/calcul/alti/wps\n//\n// ssl by default.\n//\n// Force to not do ssl :\n// DefaultUrlService.ssl = false;\n//\n// DefaultUrlService.AutoComplete.url('calcul')\n// output {Object|String}\n// -> https://wxs.ign.fr/calcul/ols/apis/completion\n\n// constantes internes\nvar HOSTNAME = \"wxs.ign.fr\";\n\n/**\n * Default Geoportal web services URLs access.\n *\n * @namespace\n * @alias Gp.Services.DefaultUrl\n */\nvar DefaultUrlService = {\n\n    /** if set true, require the use of https protocol */\n    ssl : true,\n\n    /**\n    * base url of services (ssl protocol management)\n    * @param {String} key - key\n    * @param {String} path - path\n    * @returns {String} url\n    */\n    url : function (key, path) {\n        // comportement par défaut => https\n        // sinon, il est fixé par l'option 'ssl' (false => http)\n        var _protocol;\n        if (DefaultUrlService.ssl === false) {\n            _protocol = \"http://\";\n        } else {\n            _protocol = \"https://\";\n        }\n\n        return _protocol + HOSTNAME.concat(\"/\", key, path);\n    },\n\n    /**\n     * Elevation web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns elevation service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"elevation-json\", \"elevation-xml\", \"profil-json\" or \"profil-xml\").\n     */\n    Alti : {\n        _key : {\n            // rest\n            \"elevation-json\" : \"/alti/rest/elevation.json\",\n            \"elevation-xml\" : \"/alti/rest/elevation.xml\",\n            \"profil-json\" : \"/alti/rest/elevationLine.json\",\n            \"profil-xml\" : \"/alti/rest/elevationLine.xml\",\n            // other\n            wps : \"/alti/wps\"\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return {\n                // rest\n                \"elevation-json\" : DefaultUrlService.url(key, this._key[\"elevation-json\"]),\n                \"elevation-xml\" : DefaultUrlService.url(key, this._key[\"elevation-xml\"]),\n                \"profil-json\" : DefaultUrlService.url(key, this._key[\"profil-json\"]),\n                \"profil-xml\" : DefaultUrlService.url(key, this._key[\"profil-xml\"]),\n                // other\n                wps : DefaultUrlService.url(key, this._key[\"wps\"])\n            };\n        }\n    },\n    /**\n     * IsoCurve web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns isocurve service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"iso-json\" or \"iso-xml\").\n     */\n    ProcessIsoCurve : {\n        _key : \"/geoportail/isochrone/rest/1.0.0/isochrone\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Autocompletion web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns autocomplete service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    AutoComplete : {\n        _key : \"/ols/apis/completion\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Reverse geocoding web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns reverse geocoding service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    ReverseGeocode : {\n        _key : \"/geoportail/ols\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Autoconfiguration web service access\n     *\n     * @member {Object}\n     * @property {Function} url ([key1,...]) - Returns autoconfiguration service default urls with geoportal access key (s) given as a String array parameter. The result is a javascript object with different urls given the access mode (\"apiKey\", \"apiKeys\" or \"aggregate\").\n     */\n    AutoConf : {\n        _key : {\n            apiKey : \"/autoconf\",\n            apiKeys : \"/autoconf?keys=%KEYS%\",\n            aggregate : \"/autoconf/id/\"\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            var keys = \"\";\n            if (Array.isArray(key) && key.length > 0) {\n                keys = key[0];\n                for (var i = 1; i < key.length; i++) {\n                    keys += \",\" + key[i];\n                }\n            }\n            return {\n                apiKey : DefaultUrlService.url(key, this._key[\"apiKey\"]), // une seule clé\n                apiKeys : DefaultUrlService.url(key[0], this._key[\"apiKeys\"]).replace(\"%KEYS%\", keys), // autoconf de plusieurs clés\n                aggregate : DefaultUrlService.url(key, this._key[\"aggregate\"])\n            };\n        }\n    },\n    /**\n     * Geocoding web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns geocoding service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    Geocode : {\n        _key : \"/geoportail/ols\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Routing web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns routing service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols.\n     */\n    Route : {\n        _key : \"/geoportail/itineraire/rest/1.0.0/route\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DefaultUrlService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Services/DefaultUrlService.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Utils/Helper.js":
/*!***************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Utils/Helper.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Classe utilitaire\n *\n * @module Helper\n * @alias Gp.Helper\n */\nvar Helper = {\n\n    /**\n     * concatenation des parametres key/value dans les urls\n     *\n     * @method normalyzeParameters\n     * @static\n     * @param {Object} params - tableau de clef/valeur\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeParameters ({\n     *         key1:value1,\n     *         key2:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne les paramètres concaténés\n     */\n    normalyzeParameters : function (params) {\n        var myParams = null;\n\n        if (params) {\n            var tabParams = [];\n            for (var key in params) {\n                if (params.hasOwnProperty(key)) {\n                    var value = params[key];\n                    if (!value) {\n                        value = \"\";\n                    }\n                    tabParams.push(key + \"=\" + value);\n                }\n            }\n\n            myParams = tabParams.join(\"&\");\n        }\n\n        return myParams;\n    },\n\n    /**\n     * Concaténation et encodage des urls.\n     *\n     * @method normalyzeUrl\n     * @static\n     * @param {String} url - url\n     * @param {Object|String} params - tableau de clef/valeur ou string\n     * @param {Boolean} encode - true|false, false par defaut\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeUrl (url, {\n     *         key1:value1,\n     *         key2=:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"url?key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne une url normalisée\n     */\n    normalyzeUrl : function (url, params, encode) {\n        var myUrl = url;\n\n        if (url) {\n            var k = url.indexOf(\"?\");\n            if (k === -1) { // pas de ? et KVP\n                myUrl += \"?\";\n            }\n\n            if (k !== -1 && k !== url.length - 1) { // KVP\n                myUrl += \"&\";\n            }\n        }\n\n        if (params) {\n            if (typeof params === \"string\") {\n                myUrl += params;\n            } else {\n                myUrl += this.normalyzeParameters(params);\n            }\n        }\n\n        if (encode) {\n            // FIXME bonne idée ?\n            myUrl = encodeURIComponent(myUrl);\n        }\n\n        return myUrl;\n    },\n\n    /**\n     * Indentation d'une chaine\n     *\n     * @method indent\n     * @static\n     * @param {Number} n - nombre de tabulation\n     * @param {String} msg - chaine\n     *\n     * @example\n     * Gp.Utils.Helper.indent (2, \"message à indenter\")\n     * // out\n     * // ........message à indenter\n     *\n     * @returns {String} retourne une chaine indentée\n     */\n    indent : function (n, msg) {\n        var num = n || 0;\n        return new Array(num + 1).join(\"\\t\") + msg;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Helper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1V0aWxzL0hlbHBlci5qcz8wYmQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxjQUFjO0FBQzdCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUEsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWUscUVBQU0sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvVXRpbHMvSGVscGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzc2UgdXRpbGl0YWlyZVxuICpcbiAqIEBtb2R1bGUgSGVscGVyXG4gKiBAYWxpYXMgR3AuSGVscGVyXG4gKi9cbnZhciBIZWxwZXIgPSB7XG5cbiAgICAvKipcbiAgICAgKiBjb25jYXRlbmF0aW9uIGRlcyBwYXJhbWV0cmVzIGtleS92YWx1ZSBkYW5zIGxlcyB1cmxzXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIG5vcm1hbHl6ZVBhcmFtZXRlcnNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIHRhYmxlYXUgZGUgY2xlZi92YWxldXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogIEdwLlV0aWxzLkhlbHBlci5ub3JtYWx5emVQYXJhbWV0ZXJzICh7XG4gICAgICogICAgICAgICBrZXkxOnZhbHVlMSxcbiAgICAgKiAgICAgICAgIGtleTI6dmFsdWUyLFxuICAgICAqICAgICAgICAga2V5Mzp2YWx1ZTNcbiAgICAgKiAgfSk7XG4gICAgICogIC8vIG91dCA6IFwia2V5MT12YWx1ZTEma2V5Mj12YWx1ZTIma2V5Mz12YWx1ZTNcIlxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmV0b3VybmUgbGVzIHBhcmFtw6h0cmVzIGNvbmNhdMOpbsOpc1xuICAgICAqL1xuICAgIG5vcm1hbHl6ZVBhcmFtZXRlcnMgOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBteVBhcmFtcyA9IG51bGw7XG5cbiAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgdmFyIHRhYlBhcmFtcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhYlBhcmFtcy5wdXNoKGtleSArIFwiPVwiICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbXlQYXJhbXMgPSB0YWJQYXJhbXMuam9pbihcIiZcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbXlQYXJhbXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbmNhdMOpbmF0aW9uIGV0IGVuY29kYWdlIGRlcyB1cmxzLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBub3JtYWx5emVVcmxcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIHVybFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gcGFyYW1zIC0gdGFibGVhdSBkZSBjbGVmL3ZhbGV1ciBvdSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuY29kZSAtIHRydWV8ZmFsc2UsIGZhbHNlIHBhciBkZWZhdXRcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogIEdwLlV0aWxzLkhlbHBlci5ub3JtYWx5emVVcmwgKHVybCwge1xuICAgICAqICAgICAgICAga2V5MTp2YWx1ZTEsXG4gICAgICogICAgICAgICBrZXkyPTp2YWx1ZTIsXG4gICAgICogICAgICAgICBrZXkzOnZhbHVlM1xuICAgICAqICB9KTtcbiAgICAgKiAgLy8gb3V0IDogXCJ1cmw/a2V5MT12YWx1ZTEma2V5Mj12YWx1ZTIma2V5Mz12YWx1ZTNcIlxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmV0b3VybmUgdW5lIHVybCBub3JtYWxpc8OpZVxuICAgICAqL1xuICAgIG5vcm1hbHl6ZVVybCA6IGZ1bmN0aW9uICh1cmwsIHBhcmFtcywgZW5jb2RlKSB7XG4gICAgICAgIHZhciBteVVybCA9IHVybDtcblxuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICB2YXIgayA9IHVybC5pbmRleE9mKFwiP1wiKTtcbiAgICAgICAgICAgIGlmIChrID09PSAtMSkgeyAvLyBwYXMgZGUgPyBldCBLVlBcbiAgICAgICAgICAgICAgICBteVVybCArPSBcIj9cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGsgIT09IC0xICYmIGsgIT09IHVybC5sZW5ndGggLSAxKSB7IC8vIEtWUFxuICAgICAgICAgICAgICAgIG15VXJsICs9IFwiJlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBteVVybCArPSBwYXJhbXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG15VXJsICs9IHRoaXMubm9ybWFseXplUGFyYW1ldGVycyhwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuY29kZSkge1xuICAgICAgICAgICAgLy8gRklYTUUgYm9ubmUgaWTDqWUgP1xuICAgICAgICAgICAgbXlVcmwgPSBlbmNvZGVVUklDb21wb25lbnQobXlVcmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG15VXJsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbmRlbnRhdGlvbiBkJ3VuZSBjaGFpbmVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgaW5kZW50XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuIC0gbm9tYnJlIGRlIHRhYnVsYXRpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gY2hhaW5lXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIEdwLlV0aWxzLkhlbHBlci5pbmRlbnQgKDIsIFwibWVzc2FnZSDDoCBpbmRlbnRlclwiKVxuICAgICAqIC8vIG91dFxuICAgICAqIC8vIC4uLi4uLi4ubWVzc2FnZSDDoCBpbmRlbnRlclxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gcmV0b3VybmUgdW5lIGNoYWluZSBpbmRlbnTDqWVcbiAgICAgKi9cbiAgICBpbmRlbnQgOiBmdW5jdGlvbiAobiwgbXNnKSB7XG4gICAgICAgIHZhciBudW0gPSBuIHx8IDA7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkobnVtICsgMSkuam9pbihcIlxcdFwiKSArIG1zZztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIZWxwZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Utils/Helper.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js":
/*!************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar LoggerByDefault = {\n    /**\n     * logger statique\n     *\n     * @static\n     * @param {String} name - nom du logger\n     * @returns {Object} retourne un logger\n     */\n    getLogger : function (name) {\n        // Substitute global constants configured at compile time\n        // cf. webpack.config.js\n        // FIXME howtodo !? DefineWebpackPlugin ? EnvironmentWebpackPlugin ?\n        (\"false\".match(/true/)) ? loglevel__WEBPACK_IMPORTED_MODULE_0__[\"disableAll\"]() : loglevel__WEBPACK_IMPORTED_MODULE_0__[\"enableAll\"]();\n        var logname = name || \"default\";\n        return loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"](logname);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LoggerByDefault);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcz8wNjVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFnQzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLG1EQUFjLEtBQUssa0RBQWE7QUFDM0U7QUFDQSxlQUFlLGtEQUFhO0FBQzVCO0FBQ0E7O0FBRWUsOEVBQWUsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9nZW9wb3J0YWwtYWNjZXNzLWxpYi9zcmMvVXRpbHMvTG9nZ2VyQnlEZWZhdWx0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTG9nIGZyb20gXCJsb2dsZXZlbFwiO1xuXG52YXIgTG9nZ2VyQnlEZWZhdWx0ID0ge1xuICAgIC8qKlxuICAgICAqIGxvZ2dlciBzdGF0aXF1ZVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gbm9tIGR1IGxvZ2dlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHJldG91cm5lIHVuIGxvZ2dlclxuICAgICAqL1xuICAgIGdldExvZ2dlciA6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIC8vIFN1YnN0aXR1dGUgZ2xvYmFsIGNvbnN0YW50cyBjb25maWd1cmVkIGF0IGNvbXBpbGUgdGltZVxuICAgICAgICAvLyBjZi4gd2VicGFjay5jb25maWcuanNcbiAgICAgICAgLy8gRklYTUUgaG93dG9kbyAhPyBEZWZpbmVXZWJwYWNrUGx1Z2luID8gRW52aXJvbm1lbnRXZWJwYWNrUGx1Z2luID9cbiAgICAgICAgKFwiX19QUk9EVUNUSU9OX19cIi5tYXRjaCgvdHJ1ZS8pKSA/IExvZy5kaXNhYmxlQWxsKCkgOiBMb2cuZW5hYmxlQWxsKCk7XG4gICAgICAgIHZhciBsb2duYW1lID0gbmFtZSB8fCBcImRlZmF1bHRcIjtcbiAgICAgICAgcmV0dXJuIExvZy5nZXRMb2dnZXIobG9nbmFtZSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9nZ2VyQnlEZWZhdWx0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Utils/LoggerByDefault.js\n");

/***/ }),

/***/ "./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js":
/*!**************************************************************************!*\
  !*** ./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Classe de gestion des erreurs qui permer d'associer un message d'erreur à l'exception lancée.\n *\n * @example\n * MessagesResources.getMessage(\"ERROR_PARAM_MISSING\", \"x\", \"y\", \"z\")));\n * // --> output : Parameter(s) 'x - y - z' missing\n *\n * @module MessagesResources\n * @alias Gp.Utils.MessagesResources\n * @private\n */\nvar MessagesResources = {\n\n    // Paramètres\n    PARAM_MISSING : \"Parameter(s) '%var%' missing\",\n    PARAM_EMPTY : \"Parameter(s) '%var%' empty\",\n    PARAM_TYPE : \"Wrong type(s) for parameter(s) '%var%'\",\n    PARAM_FORMAT : \"Parameter(s) '%var%' not correctly formatted\",\n    PARAM_NOT_SUPPORT : \"Value(s) for parameter(s) '%var%' not supported\",\n    PARAM_NOT_SUPPORT_NODEJS : \"Value(s) for parameter(s) '%var%' not supported to NodeJS\",\n    PARAM_UNKNOWN : \"Value(s) for parameter(s) '%var%' unknown\",\n\n    // Services\n    // Requête\n    SERVICE_REQUEST_BUILD : \"An error occurred during the request building of the service\",\n    SERVICE_REQUEST_EMPTY : \"The request sent to the service is empty\",\n\n    // Réponse\n    SERVICE_RESPONSE_EXCEPTION : \"The service returned an exception : '%var%'\",\n    SERVICE_RESPONSE_EXCEPTION_2 : \"The service returned an exception\",\n    SERVICE_RESPONSE_ANALYSE : \"An error occurred while parsing the response '%var%' of the service\",\n    SERVICE_RESPONSE_ANALYSE_2 : \"An unknown error occurred while parsing the response\",\n    SERVICE_RESPONSE_EMPTY : \"The response of the service is empty\",\n    SERVICE_RESPONSE_EMPTY_2 : \"The response from the service could not be analyzed or is empty\",\n    SERVICE_RESPONSE_FORMAT : \"The format of the service response is not supported (handled format(s) : '%var%')\",\n    SERVICE_RESPONSE_FORMAT_2 : \"The format of the service response is not supported\",\n    SERVICE_RESPONSE_FORMAT_3 : \"No suggestion matching the search\",\n\n    // Classes\n    CLASS_CONSTRUCTOR : \"'%var%' constructor cannot be called as a function.\",\n\n    /**\n     * Fonction qui va retourner le message d'erreur associé à la clé donnée\n     *\n     * @method getMessage\n     * @param {String} clef - Clef de l'erreur (ex : ERROR_PARAM)\n     * @param {String[]} parametres - Paramètres/variables concernés par le message d'erreur associé à la clef donnée\n     * @return {String} message - String contenant le message de l'exception\n     */\n    getMessage : function (clef, parametres) {\n        // param de la fonction uniquement pour la documentation...\n\n        if (Object.keys(arguments).length === 0) {\n            return \"Message indefined !\";\n        }\n\n        var params = Array.prototype.slice.call(arguments);\n        var key = params.shift();\n        var args = params;\n\n        var message = this[key];\n\n        try {\n            if (Array.isArray(args) && args.length > 0) {\n                message = message.replace(\"%var%\", args.join(\" - \"));\n            } else {\n                message = message.replace(\"%var%\", \"%var% (not specified)\");\n            }\n        } catch (e) {\n            // error de string.replace()\n\n        }\n\n        return message;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MessagesResources);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1V0aWxzL01lc3NhZ2VzUmVzb3VyY2VzLmpzP2NlYmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWUsZ0ZBQWlCLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2VvcG9ydGFsLWFjY2Vzcy1saWIvc3JjL1V0aWxzL01lc3NhZ2VzUmVzb3VyY2VzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzc2UgZGUgZ2VzdGlvbiBkZXMgZXJyZXVycyBxdWkgcGVybWVyIGQnYXNzb2NpZXIgdW4gbWVzc2FnZSBkJ2VycmV1ciDDoCBsJ2V4Y2VwdGlvbiBsYW5jw6llLlxuICpcbiAqIEBleGFtcGxlXG4gKiBNZXNzYWdlc1Jlc291cmNlcy5nZXRNZXNzYWdlKFwiRVJST1JfUEFSQU1fTUlTU0lOR1wiLCBcInhcIiwgXCJ5XCIsIFwielwiKSkpO1xuICogLy8gLS0+IG91dHB1dCA6IFBhcmFtZXRlcihzKSAneCAtIHkgLSB6JyBtaXNzaW5nXG4gKlxuICogQG1vZHVsZSBNZXNzYWdlc1Jlc291cmNlc1xuICogQGFsaWFzIEdwLlV0aWxzLk1lc3NhZ2VzUmVzb3VyY2VzXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgTWVzc2FnZXNSZXNvdXJjZXMgPSB7XG5cbiAgICAvLyBQYXJhbcOodHJlc1xuICAgIFBBUkFNX01JU1NJTkcgOiBcIlBhcmFtZXRlcihzKSAnJXZhciUnIG1pc3NpbmdcIixcbiAgICBQQVJBTV9FTVBUWSA6IFwiUGFyYW1ldGVyKHMpICcldmFyJScgZW1wdHlcIixcbiAgICBQQVJBTV9UWVBFIDogXCJXcm9uZyB0eXBlKHMpIGZvciBwYXJhbWV0ZXIocykgJyV2YXIlJ1wiLFxuICAgIFBBUkFNX0ZPUk1BVCA6IFwiUGFyYW1ldGVyKHMpICcldmFyJScgbm90IGNvcnJlY3RseSBmb3JtYXR0ZWRcIixcbiAgICBQQVJBTV9OT1RfU1VQUE9SVCA6IFwiVmFsdWUocykgZm9yIHBhcmFtZXRlcihzKSAnJXZhciUnIG5vdCBzdXBwb3J0ZWRcIixcbiAgICBQQVJBTV9OT1RfU1VQUE9SVF9OT0RFSlMgOiBcIlZhbHVlKHMpIGZvciBwYXJhbWV0ZXIocykgJyV2YXIlJyBub3Qgc3VwcG9ydGVkIHRvIE5vZGVKU1wiLFxuICAgIFBBUkFNX1VOS05PV04gOiBcIlZhbHVlKHMpIGZvciBwYXJhbWV0ZXIocykgJyV2YXIlJyB1bmtub3duXCIsXG5cbiAgICAvLyBTZXJ2aWNlc1xuICAgIC8vIFJlcXXDqnRlXG4gICAgU0VSVklDRV9SRVFVRVNUX0JVSUxEIDogXCJBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIHJlcXVlc3QgYnVpbGRpbmcgb2YgdGhlIHNlcnZpY2VcIixcbiAgICBTRVJWSUNFX1JFUVVFU1RfRU1QVFkgOiBcIlRoZSByZXF1ZXN0IHNlbnQgdG8gdGhlIHNlcnZpY2UgaXMgZW1wdHlcIixcblxuICAgIC8vIFLDqXBvbnNlXG4gICAgU0VSVklDRV9SRVNQT05TRV9FWENFUFRJT04gOiBcIlRoZSBzZXJ2aWNlIHJldHVybmVkIGFuIGV4Y2VwdGlvbiA6ICcldmFyJSdcIixcbiAgICBTRVJWSUNFX1JFU1BPTlNFX0VYQ0VQVElPTl8yIDogXCJUaGUgc2VydmljZSByZXR1cm5lZCBhbiBleGNlcHRpb25cIixcbiAgICBTRVJWSUNFX1JFU1BPTlNFX0FOQUxZU0UgOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHBhcnNpbmcgdGhlIHJlc3BvbnNlICcldmFyJScgb2YgdGhlIHNlcnZpY2VcIixcbiAgICBTRVJWSUNFX1JFU1BPTlNFX0FOQUxZU0VfMiA6IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCB3aGlsZSBwYXJzaW5nIHRoZSByZXNwb25zZVwiLFxuICAgIFNFUlZJQ0VfUkVTUE9OU0VfRU1QVFkgOiBcIlRoZSByZXNwb25zZSBvZiB0aGUgc2VydmljZSBpcyBlbXB0eVwiLFxuICAgIFNFUlZJQ0VfUkVTUE9OU0VfRU1QVFlfMiA6IFwiVGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZpY2UgY291bGQgbm90IGJlIGFuYWx5emVkIG9yIGlzIGVtcHR5XCIsXG4gICAgU0VSVklDRV9SRVNQT05TRV9GT1JNQVQgOiBcIlRoZSBmb3JtYXQgb2YgdGhlIHNlcnZpY2UgcmVzcG9uc2UgaXMgbm90IHN1cHBvcnRlZCAoaGFuZGxlZCBmb3JtYXQocykgOiAnJXZhciUnKVwiLFxuICAgIFNFUlZJQ0VfUkVTUE9OU0VfRk9STUFUXzIgOiBcIlRoZSBmb3JtYXQgb2YgdGhlIHNlcnZpY2UgcmVzcG9uc2UgaXMgbm90IHN1cHBvcnRlZFwiLFxuICAgIFNFUlZJQ0VfUkVTUE9OU0VfRk9STUFUXzMgOiBcIk5vIHN1Z2dlc3Rpb24gbWF0Y2hpbmcgdGhlIHNlYXJjaFwiLFxuXG4gICAgLy8gQ2xhc3Nlc1xuICAgIENMQVNTX0NPTlNUUlVDVE9SIDogXCInJXZhciUnIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIixcblxuICAgIC8qKlxuICAgICAqIEZvbmN0aW9uIHF1aSB2YSByZXRvdXJuZXIgbGUgbWVzc2FnZSBkJ2VycmV1ciBhc3NvY2nDqSDDoCBsYSBjbMOpIGRvbm7DqWVcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0TWVzc2FnZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGVmIC0gQ2xlZiBkZSBsJ2VycmV1ciAoZXggOiBFUlJPUl9QQVJBTSlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBwYXJhbWV0cmVzIC0gUGFyYW3DqHRyZXMvdmFyaWFibGVzIGNvbmNlcm7DqXMgcGFyIGxlIG1lc3NhZ2UgZCdlcnJldXIgYXNzb2Npw6kgw6AgbGEgY2xlZiBkb25uw6llXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBtZXNzYWdlIC0gU3RyaW5nIGNvbnRlbmFudCBsZSBtZXNzYWdlIGRlIGwnZXhjZXB0aW9uXG4gICAgICovXG4gICAgZ2V0TWVzc2FnZSA6IGZ1bmN0aW9uIChjbGVmLCBwYXJhbWV0cmVzKSB7XG4gICAgICAgIC8vIHBhcmFtIGRlIGxhIGZvbmN0aW9uIHVuaXF1ZW1lbnQgcG91ciBsYSBkb2N1bWVudGF0aW9uLi4uXG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGFyZ3VtZW50cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJNZXNzYWdlIGluZGVmaW5lZCAhXCI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyYW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGtleSA9IHBhcmFtcy5zaGlmdCgpO1xuICAgICAgICB2YXIgYXJncyA9IHBhcmFtcztcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXNba2V5XTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZShcIiV2YXIlXCIsIGFyZ3Muam9pbihcIiAtIFwiKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoXCIldmFyJVwiLCBcIiV2YXIlIChub3Qgc3BlY2lmaWVkKVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gZXJyb3IgZGUgc3RyaW5nLnJlcGxhY2UoKVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlc1Jlc291cmNlcztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/geoportal-access-lib/src/Utils/MessagesResources.js\n");

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/loglevel/lib/loglevel.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/proj4/dist/proj4-src.js":
/*!**********************************************!*\
  !*** ./node_modules/proj4/dist/proj4-src.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? module.exports = factory() :\n    undefined;\n}(this, (function () { 'use strict';\n\n    var globals = function(defs) {\n      defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n      defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n      defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n      defs.WGS84 = defs['EPSG:4326'];\n      defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n      defs.GOOGLE = defs['EPSG:3857'];\n      defs['EPSG:900913'] = defs['EPSG:3857'];\n      defs['EPSG:102113'] = defs['EPSG:3857'];\n    };\n\n    var PJD_3PARAM = 1;\n    var PJD_7PARAM = 2;\n    var PJD_GRIDSHIFT = 3;\n    var PJD_WGS84 = 4; // WGS84 or equivalent\n    var PJD_NODATUM = 5; // WGS84 or equivalent\n    var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\n    var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\n    var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\n    var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\n    var HALF_PI = Math.PI/2;\n    // ellipoid pj_set_ell.c\n    var SIXTH = 0.1666666666666666667;\n    /* 1/6 */\n    var RA4 = 0.04722222222222222222;\n    /* 17/360 */\n    var RA6 = 0.02215608465608465608;\n    var EPSLN = 1.0e-10;\n    // you'd think you could use Number.EPSILON above but that makes\n    // Mollweide get into an infinate loop.\n\n    var D2R = 0.01745329251994329577;\n    var R2D = 57.29577951308232088;\n    var FORTPI = Math.PI/4;\n    var TWO_PI = Math.PI * 2;\n    // SPI is slightly greater than Math.PI, so values that exceed the -180..180\n    // degree range by a tiny amount don't get wrapped. This prevents points that\n    // have drifted from their original location along the 180th meridian (due to\n    // floating point error) from changing their sign.\n    var SPI = 3.14159265359;\n\n    var exports$1 = {};\n    exports$1.greenwich = 0.0; //\"0dE\",\n    exports$1.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\n    exports$1.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\n    exports$1.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\n    exports$1.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\n    exports$1.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\n    exports$1.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\n    exports$1.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\n    exports$1.ferro = -17.666666666667; //\"17d40'W\",\n    exports$1.brussels = 4.367975; //\"4d22'4.71\\\"E\",\n    exports$1.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\n    exports$1.athens = 23.7163375; //\"23d42'58.815\\\"E\",\n    exports$1.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n\n    var units = {\n      ft: {to_meter: 0.3048},\n      'us-ft': {to_meter: 1200 / 3937}\n    };\n\n    var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\n    function match(obj, key) {\n      if (obj[key]) {\n        return obj[key];\n      }\n      var keys = Object.keys(obj);\n      var lkey = key.toLowerCase().replace(ignoredChar, '');\n      var i = -1;\n      var testkey, processedKey;\n      while (++i < keys.length) {\n        testkey = keys[i];\n        processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n        if (processedKey === lkey) {\n          return obj[testkey];\n        }\n      }\n    }\n\n    var parseProj = function(defData) {\n      var self = {};\n      var paramObj = defData.split('+').map(function(v) {\n        return v.trim();\n      }).filter(function(a) {\n        return a;\n      }).reduce(function(p, a) {\n        var split = a.split('=');\n        split.push(true);\n        p[split[0].toLowerCase()] = split[1];\n        return p;\n      }, {});\n      var paramName, paramVal, paramOutname;\n      var params = {\n        proj: 'projName',\n        datum: 'datumCode',\n        rf: function(v) {\n          self.rf = parseFloat(v);\n        },\n        lat_0: function(v) {\n          self.lat0 = v * D2R;\n        },\n        lat_1: function(v) {\n          self.lat1 = v * D2R;\n        },\n        lat_2: function(v) {\n          self.lat2 = v * D2R;\n        },\n        lat_ts: function(v) {\n          self.lat_ts = v * D2R;\n        },\n        lon_0: function(v) {\n          self.long0 = v * D2R;\n        },\n        lon_1: function(v) {\n          self.long1 = v * D2R;\n        },\n        lon_2: function(v) {\n          self.long2 = v * D2R;\n        },\n        alpha: function(v) {\n          self.alpha = parseFloat(v) * D2R;\n        },\n        gamma: function(v) {\n          self.rectified_grid_angle = parseFloat(v);\n        },\n        lonc: function(v) {\n          self.longc = v * D2R;\n        },\n        x_0: function(v) {\n          self.x0 = parseFloat(v);\n        },\n        y_0: function(v) {\n          self.y0 = parseFloat(v);\n        },\n        k_0: function(v) {\n          self.k0 = parseFloat(v);\n        },\n        k: function(v) {\n          self.k0 = parseFloat(v);\n        },\n        a: function(v) {\n          self.a = parseFloat(v);\n        },\n        b: function(v) {\n          self.b = parseFloat(v);\n        },\n        r_a: function() {\n          self.R_A = true;\n        },\n        zone: function(v) {\n          self.zone = parseInt(v, 10);\n        },\n        south: function() {\n          self.utmSouth = true;\n        },\n        towgs84: function(v) {\n          self.datum_params = v.split(\",\").map(function(a) {\n            return parseFloat(a);\n          });\n        },\n        to_meter: function(v) {\n          self.to_meter = parseFloat(v);\n        },\n        units: function(v) {\n          self.units = v;\n          var unit = match(units, v);\n          if (unit) {\n            self.to_meter = unit.to_meter;\n          }\n        },\n        from_greenwich: function(v) {\n          self.from_greenwich = v * D2R;\n        },\n        pm: function(v) {\n          var pm = match(exports$1, v);\n          self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n        },\n        nadgrids: function(v) {\n          if (v === '@null') {\n            self.datumCode = 'none';\n          }\n          else {\n            self.nadgrids = v;\n          }\n        },\n        axis: function(v) {\n          var legalAxis = \"ewnsud\";\n          if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n            self.axis = v;\n          }\n        },\n        approx: function() {\n          self.approx = true;\n        }\n      };\n      for (paramName in paramObj) {\n        paramVal = paramObj[paramName];\n        if (paramName in params) {\n          paramOutname = params[paramName];\n          if (typeof paramOutname === 'function') {\n            paramOutname(paramVal);\n          }\n          else {\n            self[paramOutname] = paramVal;\n          }\n        }\n        else {\n          self[paramName] = paramVal;\n        }\n      }\n      if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n        self.datumCode = self.datumCode.toLowerCase();\n      }\n      return self;\n    };\n\n    var NEUTRAL = 1;\n    var KEYWORD = 2;\n    var NUMBER = 3;\n    var QUOTED = 4;\n    var AFTERQUOTE = 5;\n    var ENDED = -1;\n    var whitespace = /\\s/;\n    var latin = /[A-Za-z]/;\n    var keyword = /[A-Za-z84]/;\n    var endThings = /[,\\]]/;\n    var digets = /[\\d\\.E\\-\\+]/;\n    // const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\n    function Parser(text) {\n      if (typeof text !== 'string') {\n        throw new Error('not a string');\n      }\n      this.text = text.trim();\n      this.level = 0;\n      this.place = 0;\n      this.root = null;\n      this.stack = [];\n      this.currentObject = null;\n      this.state = NEUTRAL;\n    }\n    Parser.prototype.readCharicter = function() {\n      var char = this.text[this.place++];\n      if (this.state !== QUOTED) {\n        while (whitespace.test(char)) {\n          if (this.place >= this.text.length) {\n            return;\n          }\n          char = this.text[this.place++];\n        }\n      }\n      switch (this.state) {\n        case NEUTRAL:\n          return this.neutral(char);\n        case KEYWORD:\n          return this.keyword(char)\n        case QUOTED:\n          return this.quoted(char);\n        case AFTERQUOTE:\n          return this.afterquote(char);\n        case NUMBER:\n          return this.number(char);\n        case ENDED:\n          return;\n      }\n    };\n    Parser.prototype.afterquote = function(char) {\n      if (char === '\"') {\n        this.word += '\"';\n        this.state = QUOTED;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.word = this.word.trim();\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n    };\n    Parser.prototype.afterItem = function(char) {\n      if (char === ',') {\n        if (this.word !== null) {\n          this.currentObject.push(this.word);\n        }\n        this.word = null;\n        this.state = NEUTRAL;\n        return;\n      }\n      if (char === ']') {\n        this.level--;\n        if (this.word !== null) {\n          this.currentObject.push(this.word);\n          this.word = null;\n        }\n        this.state = NEUTRAL;\n        this.currentObject = this.stack.pop();\n        if (!this.currentObject) {\n          this.state = ENDED;\n        }\n\n        return;\n      }\n    };\n    Parser.prototype.number = function(char) {\n      if (digets.test(char)) {\n        this.word += char;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.word = parseFloat(this.word);\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n    };\n    Parser.prototype.quoted = function(char) {\n      if (char === '\"') {\n        this.state = AFTERQUOTE;\n        return;\n      }\n      this.word += char;\n      return;\n    };\n    Parser.prototype.keyword = function(char) {\n      if (keyword.test(char)) {\n        this.word += char;\n        return;\n      }\n      if (char === '[') {\n        var newObjects = [];\n        newObjects.push(this.word);\n        this.level++;\n        if (this.root === null) {\n          this.root = newObjects;\n        } else {\n          this.currentObject.push(newObjects);\n        }\n        this.stack.push(this.currentObject);\n        this.currentObject = newObjects;\n        this.state = NEUTRAL;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n    };\n    Parser.prototype.neutral = function(char) {\n      if (latin.test(char)) {\n        this.word = char;\n        this.state = KEYWORD;\n        return;\n      }\n      if (char === '\"') {\n        this.word = '';\n        this.state = QUOTED;\n        return;\n      }\n      if (digets.test(char)) {\n        this.word = char;\n        this.state = NUMBER;\n        return;\n      }\n      if (endThings.test(char)) {\n        this.afterItem(char);\n        return;\n      }\n      throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n    };\n    Parser.prototype.output = function() {\n      while (this.place < this.text.length) {\n        this.readCharicter();\n      }\n      if (this.state === ENDED) {\n        return this.root;\n      }\n      throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n    };\n\n    function parseString(txt) {\n      var parser = new Parser(txt);\n      return parser.output();\n    }\n\n    function mapit(obj, key, value) {\n      if (Array.isArray(key)) {\n        value.unshift(key);\n        key = null;\n      }\n      var thing = key ? {} : obj;\n\n      var out = value.reduce(function(newObj, item) {\n        sExpr(item, newObj);\n        return newObj\n      }, thing);\n      if (key) {\n        obj[key] = out;\n      }\n    }\n\n    function sExpr(v, obj) {\n      if (!Array.isArray(v)) {\n        obj[v] = true;\n        return;\n      }\n      var key = v.shift();\n      if (key === 'PARAMETER') {\n        key = v.shift();\n      }\n      if (v.length === 1) {\n        if (Array.isArray(v[0])) {\n          obj[key] = {};\n          sExpr(v[0], obj[key]);\n          return;\n        }\n        obj[key] = v[0];\n        return;\n      }\n      if (!v.length) {\n        obj[key] = true;\n        return;\n      }\n      if (key === 'TOWGS84') {\n        obj[key] = v;\n        return;\n      }\n      if (key === 'AXIS') {\n        if (!(key in obj)) {\n          obj[key] = [];\n        }\n        obj[key].push(v);\n        return;\n      }\n      if (!Array.isArray(key)) {\n        obj[key] = {};\n      }\n\n      var i;\n      switch (key) {\n        case 'UNIT':\n        case 'PRIMEM':\n        case 'VERT_DATUM':\n          obj[key] = {\n            name: v[0].toLowerCase(),\n            convert: v[1]\n          };\n          if (v.length === 3) {\n            sExpr(v[2], obj[key]);\n          }\n          return;\n        case 'SPHEROID':\n        case 'ELLIPSOID':\n          obj[key] = {\n            name: v[0],\n            a: v[1],\n            rf: v[2]\n          };\n          if (v.length === 4) {\n            sExpr(v[3], obj[key]);\n          }\n          return;\n        case 'PROJECTEDCRS':\n        case 'PROJCRS':\n        case 'GEOGCS':\n        case 'GEOCCS':\n        case 'PROJCS':\n        case 'LOCAL_CS':\n        case 'GEODCRS':\n        case 'GEODETICCRS':\n        case 'GEODETICDATUM':\n        case 'EDATUM':\n        case 'ENGINEERINGDATUM':\n        case 'VERT_CS':\n        case 'VERTCRS':\n        case 'VERTICALCRS':\n        case 'COMPD_CS':\n        case 'COMPOUNDCRS':\n        case 'ENGINEERINGCRS':\n        case 'ENGCRS':\n        case 'FITTED_CS':\n        case 'LOCAL_DATUM':\n        case 'DATUM':\n          v[0] = ['name', v[0]];\n          mapit(obj, key, v);\n          return;\n        default:\n          i = -1;\n          while (++i < v.length) {\n            if (!Array.isArray(v[i])) {\n              return sExpr(v, obj[key]);\n            }\n          }\n          return mapit(obj, key, v);\n      }\n    }\n\n    var D2R$1 = 0.01745329251994329577;\n    function rename(obj, params) {\n      var outName = params[0];\n      var inName = params[1];\n      if (!(outName in obj) && (inName in obj)) {\n        obj[outName] = obj[inName];\n        if (params.length === 3) {\n          obj[outName] = params[2](obj[outName]);\n        }\n      }\n    }\n\n    function d2r(input) {\n      return input * D2R$1;\n    }\n\n    function cleanWKT(wkt) {\n      if (wkt.type === 'GEOGCS') {\n        wkt.projName = 'longlat';\n      } else if (wkt.type === 'LOCAL_CS') {\n        wkt.projName = 'identity';\n        wkt.local = true;\n      } else {\n        if (typeof wkt.PROJECTION === 'object') {\n          wkt.projName = Object.keys(wkt.PROJECTION)[0];\n        } else {\n          wkt.projName = wkt.PROJECTION;\n        }\n      }\n      if (wkt.AXIS) {\n        var axisOrder = '';\n        for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n          var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n          if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\n            axisOrder += 'n';\n          } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\n            axisOrder += 's';\n          } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\n            axisOrder += 'e';\n          } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\n            axisOrder += 'w';\n          }\n        }\n        if (axisOrder.length === 2) {\n          axisOrder += 'u';\n        }\n        if (axisOrder.length === 3) {\n          wkt.axis = axisOrder;\n        }\n      }\n      if (wkt.UNIT) {\n        wkt.units = wkt.UNIT.name.toLowerCase();\n        if (wkt.units === 'metre') {\n          wkt.units = 'meter';\n        }\n        if (wkt.UNIT.convert) {\n          if (wkt.type === 'GEOGCS') {\n            if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n              wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n            }\n          } else {\n            wkt.to_meter = wkt.UNIT.convert;\n          }\n        }\n      }\n      var geogcs = wkt.GEOGCS;\n      if (wkt.type === 'GEOGCS') {\n        geogcs = wkt;\n      }\n      if (geogcs) {\n        //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n        //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n        //}\n        if (geogcs.DATUM) {\n          wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n        } else {\n          wkt.datumCode = geogcs.name.toLowerCase();\n        }\n        if (wkt.datumCode.slice(0, 2) === 'd_') {\n          wkt.datumCode = wkt.datumCode.slice(2);\n        }\n        if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n          wkt.datumCode = 'nzgd49';\n        }\n        if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n          if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n            wkt.sphere = true;\n          }\n          wkt.datumCode = 'wgs84';\n        }\n        if (wkt.datumCode.slice(-6) === '_ferro') {\n          wkt.datumCode = wkt.datumCode.slice(0, - 6);\n        }\n        if (wkt.datumCode.slice(-8) === '_jakarta') {\n          wkt.datumCode = wkt.datumCode.slice(0, - 8);\n        }\n        if (~wkt.datumCode.indexOf('belge')) {\n          wkt.datumCode = 'rnb72';\n        }\n        if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n          wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n          if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n            wkt.ellps = 'intl';\n          }\n\n          wkt.a = geogcs.DATUM.SPHEROID.a;\n          wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n        }\n\n        if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n          wkt.datum_params = geogcs.DATUM.TOWGS84;\n        }\n        if (~wkt.datumCode.indexOf('osgb_1936')) {\n          wkt.datumCode = 'osgb36';\n        }\n        if (~wkt.datumCode.indexOf('osni_1952')) {\n          wkt.datumCode = 'osni52';\n        }\n        if (~wkt.datumCode.indexOf('tm65')\n          || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n          wkt.datumCode = 'ire65';\n        }\n        if (wkt.datumCode === 'ch1903+') {\n          wkt.datumCode = 'ch1903';\n        }\n        if (~wkt.datumCode.indexOf('israel')) {\n          wkt.datumCode = 'isr93';\n        }\n      }\n      if (wkt.b && !isFinite(wkt.b)) {\n        wkt.b = wkt.a;\n      }\n\n      function toMeter(input) {\n        var ratio = wkt.to_meter || 1;\n        return input * ratio;\n      }\n      var renamer = function(a) {\n        return rename(wkt, a);\n      };\n      var list = [\n        ['standard_parallel_1', 'Standard_Parallel_1'],\n        ['standard_parallel_1', 'Latitude of 1st standard parallel'],\n        ['standard_parallel_2', 'Standard_Parallel_2'],\n        ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\n        ['false_easting', 'False_Easting'],\n        ['false_easting', 'False easting'],\n        ['false-easting', 'Easting at false origin'],\n        ['false_northing', 'False_Northing'],\n        ['false_northing', 'False northing'],\n        ['false_northing', 'Northing at false origin'],\n        ['central_meridian', 'Central_Meridian'],\n        ['central_meridian', 'Longitude of natural origin'],\n        ['central_meridian', 'Longitude of false origin'],\n        ['latitude_of_origin', 'Latitude_Of_Origin'],\n        ['latitude_of_origin', 'Central_Parallel'],\n        ['latitude_of_origin', 'Latitude of natural origin'],\n        ['latitude_of_origin', 'Latitude of false origin'],\n        ['scale_factor', 'Scale_Factor'],\n        ['k0', 'scale_factor'],\n        ['latitude_of_center', 'Latitude_Of_Center'],\n        ['latitude_of_center', 'Latitude_of_center'],\n        ['lat0', 'latitude_of_center', d2r],\n        ['longitude_of_center', 'Longitude_Of_Center'],\n        ['longitude_of_center', 'Longitude_of_center'],\n        ['longc', 'longitude_of_center', d2r],\n        ['x0', 'false_easting', toMeter],\n        ['y0', 'false_northing', toMeter],\n        ['long0', 'central_meridian', d2r],\n        ['lat0', 'latitude_of_origin', d2r],\n        ['lat0', 'standard_parallel_1', d2r],\n        ['lat1', 'standard_parallel_1', d2r],\n        ['lat2', 'standard_parallel_2', d2r],\n        ['azimuth', 'Azimuth'],\n        ['alpha', 'azimuth', d2r],\n        ['srsCode', 'name']\n      ];\n      list.forEach(renamer);\n      if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n        wkt.long0 = wkt.longc;\n      }\n      if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n        wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n        wkt.lat_ts = wkt.lat1;\n      }\n    }\n    var wkt = function(wkt) {\n      var lisp = parseString(wkt);\n      var type = lisp.shift();\n      var name = lisp.shift();\n      lisp.unshift(['name', name]);\n      lisp.unshift(['type', type]);\n      var obj = {};\n      sExpr(lisp, obj);\n      cleanWKT(obj);\n      return obj;\n    };\n\n    function defs(name) {\n      /*global console*/\n      var that = this;\n      if (arguments.length === 2) {\n        var def = arguments[1];\n        if (typeof def === 'string') {\n          if (def.charAt(0) === '+') {\n            defs[name] = parseProj(arguments[1]);\n          }\n          else {\n            defs[name] = wkt(arguments[1]);\n          }\n        } else {\n          defs[name] = def;\n        }\n      }\n      else if (arguments.length === 1) {\n        if (Array.isArray(name)) {\n          return name.map(function(v) {\n            if (Array.isArray(v)) {\n              defs.apply(that, v);\n            }\n            else {\n              defs(v);\n            }\n          });\n        }\n        else if (typeof name === 'string') {\n          if (name in defs) {\n            return defs[name];\n          }\n        }\n        else if ('EPSG' in name) {\n          defs['EPSG:' + name.EPSG] = name;\n        }\n        else if ('ESRI' in name) {\n          defs['ESRI:' + name.ESRI] = name;\n        }\n        else if ('IAU2000' in name) {\n          defs['IAU2000:' + name.IAU2000] = name;\n        }\n        else {\n          console.log(name);\n        }\n        return;\n      }\n\n\n    }\n    globals(defs);\n\n    function testObj(code){\n      return typeof code === 'string';\n    }\n    function testDef(code){\n      return code in defs;\n    }\n    var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\n    function testWKT(code){\n      return codeWords.some(function (word) {\n        return code.indexOf(word) > -1;\n      });\n    }\n    var codes = ['3857', '900913', '3785', '102113'];\n    function checkMercator(item) {\n      var auth = match(item, 'authority');\n      if (!auth) {\n        return;\n      }\n      var code = match(auth, 'epsg');\n      return code && codes.indexOf(code) > -1;\n    }\n    function checkProjStr(item) {\n      var ext = match(item, 'extension');\n      if (!ext) {\n        return;\n      }\n      return match(ext, 'proj4');\n    }\n    function testProj(code){\n      return code[0] === '+';\n    }\n    function parse(code){\n      if (testObj(code)) {\n        //check to see if this is a WKT string\n        if (testDef(code)) {\n          return defs[code];\n        }\n        if (testWKT(code)) {\n          var out = wkt(code);\n          // test of spetial case, due to this being a very common and often malformed\n          if (checkMercator(out)) {\n            return defs['EPSG:3857'];\n          }\n          var maybeProjStr = checkProjStr(out);\n          if (maybeProjStr) {\n            return parseProj(maybeProjStr);\n          }\n          return out;\n        }\n        if (testProj(code)) {\n          return parseProj(code);\n        }\n      }else{\n        return code;\n      }\n    }\n\n    var extend = function(destination, source) {\n      destination = destination || {};\n      var value, property;\n      if (!source) {\n        return destination;\n      }\n      for (property in source) {\n        value = source[property];\n        if (value !== undefined) {\n          destination[property] = value;\n        }\n      }\n      return destination;\n    };\n\n    var msfnz = function(eccent, sinphi, cosphi) {\n      var con = eccent * sinphi;\n      return cosphi / (Math.sqrt(1 - con * con));\n    };\n\n    var sign = function(x) {\n      return x<0 ? -1 : 1;\n    };\n\n    var adjust_lon = function(x) {\n      return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n    };\n\n    var tsfnz = function(eccent, phi, sinphi) {\n      var con = eccent * sinphi;\n      var com = 0.5 * eccent;\n      con = Math.pow(((1 - con) / (1 + con)), com);\n      return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n    };\n\n    var phi2z = function(eccent, ts) {\n      var eccnth = 0.5 * eccent;\n      var con, dphi;\n      var phi = HALF_PI - 2 * Math.atan(ts);\n      for (var i = 0; i <= 15; i++) {\n        con = eccent * Math.sin(phi);\n        dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n        phi += dphi;\n        if (Math.abs(dphi) <= 0.0000000001) {\n          return phi;\n        }\n      }\n      //console.log(\"phi2z has NoConvergence\");\n      return -9999;\n    };\n\n    function init() {\n      var con = this.b / this.a;\n      this.es = 1 - con * con;\n      if(!('x0' in this)){\n        this.x0 = 0;\n      }\n      if(!('y0' in this)){\n        this.y0 = 0;\n      }\n      this.e = Math.sqrt(this.es);\n      if (this.lat_ts) {\n        if (this.sphere) {\n          this.k0 = Math.cos(this.lat_ts);\n        }\n        else {\n          this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n        }\n      }\n      else {\n        if (!this.k0) {\n          if (this.k) {\n            this.k0 = this.k;\n          }\n          else {\n            this.k0 = 1;\n          }\n        }\n      }\n    }\n\n    /* Mercator forward equations--mapping lat,long to x,y\n      --------------------------------------------------*/\n\n    function forward(p) {\n      var lon = p.x;\n      var lat = p.y;\n      // convert to radians\n      if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n        return null;\n      }\n\n      var x, y;\n      if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n        return null;\n      }\n      else {\n        if (this.sphere) {\n          x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n          y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n        }\n        else {\n          var sinphi = Math.sin(lat);\n          var ts = tsfnz(this.e, lat, sinphi);\n          x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n          y = this.y0 - this.a * this.k0 * Math.log(ts);\n        }\n        p.x = x;\n        p.y = y;\n        return p;\n      }\n    }\n\n    /* Mercator inverse equations--mapping x,y to lat/long\n      --------------------------------------------------*/\n    function inverse(p) {\n\n      var x = p.x - this.x0;\n      var y = p.y - this.y0;\n      var lon, lat;\n\n      if (this.sphere) {\n        lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n      }\n      else {\n        var ts = Math.exp(-y / (this.a * this.k0));\n        lat = phi2z(this.e, ts);\n        if (lat === -9999) {\n          return null;\n        }\n      }\n      lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$1 = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\n    var merc = {\n      init: init,\n      forward: forward,\n      inverse: inverse,\n      names: names$1\n    };\n\n    function init$1() {\n      //no-op for longlat\n    }\n\n    function identity(pt) {\n      return pt;\n    }\n    var names$2 = [\"longlat\", \"identity\"];\n    var longlat = {\n      init: init$1,\n      forward: identity,\n      inverse: identity,\n      names: names$2\n    };\n\n    var projs = [merc, longlat];\n    var names = {};\n    var projStore = [];\n\n    function add(proj, i) {\n      var len = projStore.length;\n      if (!proj.names) {\n        console.log(i);\n        return true;\n      }\n      projStore[len] = proj;\n      proj.names.forEach(function(n) {\n        names[n.toLowerCase()] = len;\n      });\n      return this;\n    }\n\n    function get(name) {\n      if (!name) {\n        return false;\n      }\n      var n = name.toLowerCase();\n      if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n        return projStore[names[n]];\n      }\n    }\n\n    function start() {\n      projs.forEach(add);\n    }\n    var projections = {\n      start: start,\n      add: add,\n      get: get\n    };\n\n    var exports$2 = {};\n    exports$2.MERIT = {\n      a: 6378137.0,\n      rf: 298.257,\n      ellipseName: \"MERIT 1983\"\n    };\n\n    exports$2.SGS85 = {\n      a: 6378136.0,\n      rf: 298.257,\n      ellipseName: \"Soviet Geodetic System 85\"\n    };\n\n    exports$2.GRS80 = {\n      a: 6378137.0,\n      rf: 298.257222101,\n      ellipseName: \"GRS 1980(IUGG, 1980)\"\n    };\n\n    exports$2.IAU76 = {\n      a: 6378140.0,\n      rf: 298.257,\n      ellipseName: \"IAU 1976\"\n    };\n\n    exports$2.airy = {\n      a: 6377563.396,\n      b: 6356256.910,\n      ellipseName: \"Airy 1830\"\n    };\n\n    exports$2.APL4 = {\n      a: 6378137,\n      rf: 298.25,\n      ellipseName: \"Appl. Physics. 1965\"\n    };\n\n    exports$2.NWL9D = {\n      a: 6378145.0,\n      rf: 298.25,\n      ellipseName: \"Naval Weapons Lab., 1965\"\n    };\n\n    exports$2.mod_airy = {\n      a: 6377340.189,\n      b: 6356034.446,\n      ellipseName: \"Modified Airy\"\n    };\n\n    exports$2.andrae = {\n      a: 6377104.43,\n      rf: 300.0,\n      ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n    };\n\n    exports$2.aust_SA = {\n      a: 6378160.0,\n      rf: 298.25,\n      ellipseName: \"Australian Natl & S. Amer. 1969\"\n    };\n\n    exports$2.GRS67 = {\n      a: 6378160.0,\n      rf: 298.2471674270,\n      ellipseName: \"GRS 67(IUGG 1967)\"\n    };\n\n    exports$2.bessel = {\n      a: 6377397.155,\n      rf: 299.1528128,\n      ellipseName: \"Bessel 1841\"\n    };\n\n    exports$2.bess_nam = {\n      a: 6377483.865,\n      rf: 299.1528128,\n      ellipseName: \"Bessel 1841 (Namibia)\"\n    };\n\n    exports$2.clrk66 = {\n      a: 6378206.4,\n      b: 6356583.8,\n      ellipseName: \"Clarke 1866\"\n    };\n\n    exports$2.clrk80 = {\n      a: 6378249.145,\n      rf: 293.4663,\n      ellipseName: \"Clarke 1880 mod.\"\n    };\n\n    exports$2.clrk58 = {\n      a: 6378293.645208759,\n      rf: 294.2606763692654,\n      ellipseName: \"Clarke 1858\"\n    };\n\n    exports$2.CPM = {\n      a: 6375738.7,\n      rf: 334.29,\n      ellipseName: \"Comm. des Poids et Mesures 1799\"\n    };\n\n    exports$2.delmbr = {\n      a: 6376428.0,\n      rf: 311.5,\n      ellipseName: \"Delambre 1810 (Belgium)\"\n    };\n\n    exports$2.engelis = {\n      a: 6378136.05,\n      rf: 298.2566,\n      ellipseName: \"Engelis 1985\"\n    };\n\n    exports$2.evrst30 = {\n      a: 6377276.345,\n      rf: 300.8017,\n      ellipseName: \"Everest 1830\"\n    };\n\n    exports$2.evrst48 = {\n      a: 6377304.063,\n      rf: 300.8017,\n      ellipseName: \"Everest 1948\"\n    };\n\n    exports$2.evrst56 = {\n      a: 6377301.243,\n      rf: 300.8017,\n      ellipseName: \"Everest 1956\"\n    };\n\n    exports$2.evrst69 = {\n      a: 6377295.664,\n      rf: 300.8017,\n      ellipseName: \"Everest 1969\"\n    };\n\n    exports$2.evrstSS = {\n      a: 6377298.556,\n      rf: 300.8017,\n      ellipseName: \"Everest (Sabah & Sarawak)\"\n    };\n\n    exports$2.fschr60 = {\n      a: 6378166.0,\n      rf: 298.3,\n      ellipseName: \"Fischer (Mercury Datum) 1960\"\n    };\n\n    exports$2.fschr60m = {\n      a: 6378155.0,\n      rf: 298.3,\n      ellipseName: \"Fischer 1960\"\n    };\n\n    exports$2.fschr68 = {\n      a: 6378150.0,\n      rf: 298.3,\n      ellipseName: \"Fischer 1968\"\n    };\n\n    exports$2.helmert = {\n      a: 6378200.0,\n      rf: 298.3,\n      ellipseName: \"Helmert 1906\"\n    };\n\n    exports$2.hough = {\n      a: 6378270.0,\n      rf: 297.0,\n      ellipseName: \"Hough\"\n    };\n\n    exports$2.intl = {\n      a: 6378388.0,\n      rf: 297.0,\n      ellipseName: \"International 1909 (Hayford)\"\n    };\n\n    exports$2.kaula = {\n      a: 6378163.0,\n      rf: 298.24,\n      ellipseName: \"Kaula 1961\"\n    };\n\n    exports$2.lerch = {\n      a: 6378139.0,\n      rf: 298.257,\n      ellipseName: \"Lerch 1979\"\n    };\n\n    exports$2.mprts = {\n      a: 6397300.0,\n      rf: 191.0,\n      ellipseName: \"Maupertius 1738\"\n    };\n\n    exports$2.new_intl = {\n      a: 6378157.5,\n      b: 6356772.2,\n      ellipseName: \"New International 1967\"\n    };\n\n    exports$2.plessis = {\n      a: 6376523.0,\n      rf: 6355863.0,\n      ellipseName: \"Plessis 1817 (France)\"\n    };\n\n    exports$2.krass = {\n      a: 6378245.0,\n      rf: 298.3,\n      ellipseName: \"Krassovsky, 1942\"\n    };\n\n    exports$2.SEasia = {\n      a: 6378155.0,\n      b: 6356773.3205,\n      ellipseName: \"Southeast Asia\"\n    };\n\n    exports$2.walbeck = {\n      a: 6376896.0,\n      b: 6355834.8467,\n      ellipseName: \"Walbeck\"\n    };\n\n    exports$2.WGS60 = {\n      a: 6378165.0,\n      rf: 298.3,\n      ellipseName: \"WGS 60\"\n    };\n\n    exports$2.WGS66 = {\n      a: 6378145.0,\n      rf: 298.25,\n      ellipseName: \"WGS 66\"\n    };\n\n    exports$2.WGS7 = {\n      a: 6378135.0,\n      rf: 298.26,\n      ellipseName: \"WGS 72\"\n    };\n\n    var WGS84 = exports$2.WGS84 = {\n      a: 6378137.0,\n      rf: 298.257223563,\n      ellipseName: \"WGS 84\"\n    };\n\n    exports$2.sphere = {\n      a: 6370997.0,\n      b: 6370997.0,\n      ellipseName: \"Normal Sphere (r=6370997)\"\n    };\n\n    function eccentricity(a, b, rf, R_A) {\n      var a2 = a * a; // used in geocentric\n      var b2 = b * b; // used in geocentric\n      var es = (a2 - b2) / a2; // e ^ 2\n      var e = 0;\n      if (R_A) {\n        a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n        a2 = a * a;\n        es = 0;\n      } else {\n        e = Math.sqrt(es); // eccentricity\n      }\n      var ep2 = (a2 - b2) / b2; // used in geocentric\n      return {\n        es: es,\n        e: e,\n        ep2: ep2\n      };\n    }\n    function sphere(a, b, rf, ellps, sphere) {\n      if (!a) { // do we have an ellipsoid?\n        var ellipse = match(exports$2, ellps);\n        if (!ellipse) {\n          ellipse = WGS84;\n        }\n        a = ellipse.a;\n        b = ellipse.b;\n        rf = ellipse.rf;\n      }\n\n      if (rf && !b) {\n        b = (1.0 - 1.0 / rf) * a;\n      }\n      if (rf === 0 || Math.abs(a - b) < EPSLN) {\n        sphere = true;\n        b = a;\n      }\n      return {\n        a: a,\n        b: b,\n        rf: rf,\n        sphere: sphere\n      };\n    }\n\n    var exports$3 = {};\n    exports$3.wgs84 = {\n      towgs84: \"0,0,0\",\n      ellipse: \"WGS84\",\n      datumName: \"WGS84\"\n    };\n\n    exports$3.ch1903 = {\n      towgs84: \"674.374,15.056,405.346\",\n      ellipse: \"bessel\",\n      datumName: \"swiss\"\n    };\n\n    exports$3.ggrs87 = {\n      towgs84: \"-199.87,74.79,246.62\",\n      ellipse: \"GRS80\",\n      datumName: \"Greek_Geodetic_Reference_System_1987\"\n    };\n\n    exports$3.nad83 = {\n      towgs84: \"0,0,0\",\n      ellipse: \"GRS80\",\n      datumName: \"North_American_Datum_1983\"\n    };\n\n    exports$3.nad27 = {\n      nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n      ellipse: \"clrk66\",\n      datumName: \"North_American_Datum_1927\"\n    };\n\n    exports$3.potsdam = {\n      towgs84: \"598.1,73.7,418.2,0.202,0.045,-2.455,6.7\",\n      ellipse: \"bessel\",\n      datumName: \"Potsdam Rauenberg 1950 DHDN\"\n    };\n\n    exports$3.carthage = {\n      towgs84: \"-263.0,6.0,431.0\",\n      ellipse: \"clark80\",\n      datumName: \"Carthage 1934 Tunisia\"\n    };\n\n    exports$3.hermannskogel = {\n      towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\n      ellipse: \"bessel\",\n      datumName: \"Hermannskogel\"\n    };\n\n    exports$3.osni52 = {\n      towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n      ellipse: \"airy\",\n      datumName: \"Irish National\"\n    };\n\n    exports$3.ire65 = {\n      towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n      ellipse: \"mod_airy\",\n      datumName: \"Ireland 1965\"\n    };\n\n    exports$3.rassadiran = {\n      towgs84: \"-133.63,-157.5,-158.62\",\n      ellipse: \"intl\",\n      datumName: \"Rassadiran\"\n    };\n\n    exports$3.nzgd49 = {\n      towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n      ellipse: \"intl\",\n      datumName: \"New Zealand Geodetic Datum 1949\"\n    };\n\n    exports$3.osgb36 = {\n      towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n      ellipse: \"airy\",\n      datumName: \"Airy 1830\"\n    };\n\n    exports$3.s_jtsk = {\n      towgs84: \"589,76,480\",\n      ellipse: 'bessel',\n      datumName: 'S-JTSK (Ferro)'\n    };\n\n    exports$3.beduaram = {\n      towgs84: '-106,-87,188',\n      ellipse: 'clrk80',\n      datumName: 'Beduaram'\n    };\n\n    exports$3.gunung_segara = {\n      towgs84: '-403,684,41',\n      ellipse: 'bessel',\n      datumName: 'Gunung Segara Jakarta'\n    };\n\n    exports$3.rnb72 = {\n      towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n      ellipse: \"intl\",\n      datumName: \"Reseau National Belge 1972\"\n    };\n\n    function datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {\n      var out = {};\n\n      if (datumCode === undefined || datumCode === 'none') {\n        out.datum_type = PJD_NODATUM;\n      } else {\n        out.datum_type = PJD_WGS84;\n      }\n\n      if (datum_params) {\n        out.datum_params = datum_params.map(parseFloat);\n        if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n          out.datum_type = PJD_3PARAM;\n        }\n        if (out.datum_params.length > 3) {\n          if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n            out.datum_type = PJD_7PARAM;\n            out.datum_params[3] *= SEC_TO_RAD;\n            out.datum_params[4] *= SEC_TO_RAD;\n            out.datum_params[5] *= SEC_TO_RAD;\n            out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n          }\n        }\n      }\n\n      if (nadgrids) {\n        out.datum_type = PJD_GRIDSHIFT;\n        out.grids = nadgrids;\n      }\n      out.a = a; //datum object also uses these values\n      out.b = b;\n      out.es = es;\n      out.ep2 = ep2;\n      return out;\n    }\n\n    /**\n     * Resources for details of NTv2 file formats:\n     * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n     * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n     */\n\n    var loadedNadgrids = {};\n\n    /**\n     * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n     * as an ArrayBuffer.\n     */\n    function nadgrid(key, data) {\n      var view = new DataView(data);\n      var isLittleEndian = detectLittleEndian(view);\n      var header = readHeader(view, isLittleEndian);\n      if (header.nSubgrids > 1) {\n        console.log('Only single NTv2 subgrids are currently supported, subsequent sub grids are ignored');\n      }\n      var subgrids = readSubgrids(view, header, isLittleEndian);\n      var nadgrid = {header: header, subgrids: subgrids};\n      loadedNadgrids[key] = nadgrid;\n      return nadgrid;\n    }\n\n    /**\n     * Given a proj4 value for nadgrids, return an array of loaded grids\n     */\n    function getNadgrids(nadgrids) {\n      // Format details: http://proj.maptools.org/gen_parms.html\n      if (nadgrids === undefined) { return null; }\n      var grids = nadgrids.split(',');\n      return grids.map(parseNadgridString);\n    }\n\n    function parseNadgridString(value) {\n      if (value.length === 0) {\n        return null;\n      }\n      var optional = value[0] === '@';\n      if (optional) {\n        value = value.slice(1);\n      }\n      if (value === 'null') {\n        return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n      }\n      return {\n        name: value,\n        mandatory: !optional,\n        grid: loadedNadgrids[value] || null,\n        isNull: false\n      };\n    }\n\n    function secondsToRadians(seconds) {\n      return (seconds / 3600) * Math.PI / 180;\n    }\n\n    function detectLittleEndian(view) {\n      var nFields = view.getInt32(8, false);\n      if (nFields === 11) {\n        return false;\n      }\n      nFields = view.getInt32(8, true);\n      if (nFields !== 11) {\n        console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n      }\n      return true;\n    }\n\n    function readHeader(view, isLittleEndian) {\n      return {\n        nFields: view.getInt32(8, isLittleEndian),\n        nSubgridFields: view.getInt32(24, isLittleEndian),\n        nSubgrids: view.getInt32(40, isLittleEndian),\n        shiftType: decodeString(view, 56, 56 + 8).trim(),\n        fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n        fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n        toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n        toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n      };\n    }\n\n    function decodeString(view, start, end) {\n      return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n    }\n\n    function readSubgrids(view, header, isLittleEndian) {\n      var gridOffset = 176;\n      var grids = [];\n      for (var i = 0; i < header.nSubgrids; i++) {\n        var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n        var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n        var lngColumnCount = Math.round(\n          1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n        var latColumnCount = Math.round(\n          1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n        // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n        grids.push({\n          ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n          del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n          lim: [lngColumnCount, latColumnCount],\n          count: subHeader.gridNodeCount,\n          cvs: mapNodes(nodes)\n        });\n      }\n      return grids;\n    }\n\n    function mapNodes(nodes) {\n      return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n    }\n\n    function readGridHeader(view, offset, isLittleEndian) {\n      return {\n        name: decodeString(view, offset + 8, offset + 16).trim(),\n        parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n        lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n        upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n        lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n        upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n        latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n        longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n        gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n      };\n    }\n\n    function readGridNodes(view, offset, gridHeader, isLittleEndian) {\n      var nodesOffset = offset + 176;\n      var gridRecordLength = 16;\n      var gridShiftRecords = [];\n      for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n        var record = {\n          latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n          longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n          latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n          longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n        };\n        gridShiftRecords.push(record);\n      }\n      return gridShiftRecords;\n    }\n\n    function Projection(srsCode,callback) {\n      if (!(this instanceof Projection)) {\n        return new Projection(srsCode);\n      }\n      callback = callback || function(error){\n        if(error){\n          throw error;\n        }\n      };\n      var json = parse(srsCode);\n      if(typeof json !== 'object'){\n        callback(srsCode);\n        return;\n      }\n      var ourProj = Projection.projections.get(json.projName);\n      if(!ourProj){\n        callback(srsCode);\n        return;\n      }\n      if (json.datumCode && json.datumCode !== 'none') {\n        var datumDef = match(exports$3, json.datumCode);\n        if (datumDef) {\n          json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n          json.ellps = datumDef.ellipse;\n          json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n        }\n      }\n      json.k0 = json.k0 || 1.0;\n      json.axis = json.axis || 'enu';\n      json.ellps = json.ellps || 'wgs84';\n      json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n      var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n      var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n      var nadgrids = getNadgrids(json.nadgrids);\n      var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n        nadgrids);\n\n      extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n      extend(this, ourProj); // transfer all the methods from the projection\n\n      // copy the 4 things over we calulated in deriveConstants.sphere\n      this.a = sphere_.a;\n      this.b = sphere_.b;\n      this.rf = sphere_.rf;\n      this.sphere = sphere_.sphere;\n\n      // copy the 3 things we calculated in deriveConstants.eccentricity\n      this.es = ecc.es;\n      this.e = ecc.e;\n      this.ep2 = ecc.ep2;\n\n      // add in the datum object\n      this.datum = datumObj;\n\n      // init the projection\n      this.init();\n\n      // legecy callback from back in the day when it went to spatialreference.org\n      callback(null, this);\n\n    }\n    Projection.projections = projections;\n    Projection.projections.start();\n\n    'use strict';\n    function compareDatums(source, dest) {\n      if (source.datum_type !== dest.datum_type) {\n        return false; // false, datums are not equal\n      } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n        // the tolerance for es is to ensure that GRS80 and WGS84\n        // are considered identical\n        return false;\n      } else if (source.datum_type === PJD_3PARAM) {\n        return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n      } else if (source.datum_type === PJD_7PARAM) {\n        return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n      } else {\n        return true; // datums are equal\n      }\n    } // cs_compare_datums()\n\n    /*\n     * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n     * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n     * according to the current ellipsoid parameters.\n     *\n     *    Latitude  : Geodetic latitude in radians                     (input)\n     *    Longitude : Geodetic longitude in radians                    (input)\n     *    Height    : Geodetic height, in meters                       (input)\n     *    X         : Calculated Geocentric X coordinate, in meters    (output)\n     *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n     *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n     *\n     */\n    function geodeticToGeocentric(p, es, a) {\n      var Longitude = p.x;\n      var Latitude = p.y;\n      var Height = p.z ? p.z : 0; //Z value not always supplied\n\n      var Rn; /*  Earth radius at location  */\n      var Sin_Lat; /*  Math.sin(Latitude)  */\n      var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n      var Cos_Lat; /*  Math.cos(Latitude)  */\n\n      /*\n       ** Don't blow up if Latitude is just a little out of the value\n       ** range as it may just be a rounding issue.  Also removed longitude\n       ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n       */\n      if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n        Latitude = -HALF_PI;\n      } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n        Latitude = HALF_PI;\n      } else if (Latitude < -HALF_PI) {\n        /* Latitude out of range */\n        //..reportError('geocent:lat out of range:' + Latitude);\n        return { x: -Infinity, y: -Infinity, z: p.z };\n      } else if (Latitude > HALF_PI) {\n        /* Latitude out of range */\n        return { x: Infinity, y: Infinity, z: p.z };\n      }\n\n      if (Longitude > Math.PI) {\n        Longitude -= (2 * Math.PI);\n      }\n      Sin_Lat = Math.sin(Latitude);\n      Cos_Lat = Math.cos(Latitude);\n      Sin2_Lat = Sin_Lat * Sin_Lat;\n      Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n      return {\n        x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n        y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n        z: ((Rn * (1 - es)) + Height) * Sin_Lat\n      };\n    } // cs_geodetic_to_geocentric()\n\n    function geocentricToGeodetic(p, es, a, b) {\n      /* local defintions and variables */\n      /* end-criterium of loop, accuracy of sin(Latitude) */\n      var genau = 1e-12;\n      var genau2 = (genau * genau);\n      var maxiter = 30;\n\n      var P; /* distance between semi-minor axis and location */\n      var RR; /* distance between center and location */\n      var CT; /* sin of geocentric latitude */\n      var ST; /* cos of geocentric latitude */\n      var RX;\n      var RK;\n      var RN; /* Earth radius at location */\n      var CPHI0; /* cos of start or old geodetic latitude in iterations */\n      var SPHI0; /* sin of start or old geodetic latitude in iterations */\n      var CPHI; /* cos of searched geodetic latitude */\n      var SPHI; /* sin of searched geodetic latitude */\n      var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n      var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n      var X = p.x;\n      var Y = p.y;\n      var Z = p.z ? p.z : 0.0; //Z value not always supplied\n      var Longitude;\n      var Latitude;\n      var Height;\n\n      P = Math.sqrt(X * X + Y * Y);\n      RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n      /*      special cases for latitude and longitude */\n      if (P / a < genau) {\n\n        /*  special case, if P=0. (X=0., Y=0.) */\n        Longitude = 0.0;\n\n        /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n         *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n        if (RR / a < genau) {\n          Latitude = HALF_PI;\n          Height = -b;\n          return {\n            x: p.x,\n            y: p.y,\n            z: p.z\n          };\n        }\n      } else {\n        /*  ellipsoidal (geodetic) longitude\n         *  interval: -PI < Longitude <= +PI */\n        Longitude = Math.atan2(Y, X);\n      }\n\n      /* --------------------------------------------------------------\n       * Following iterative algorithm was developped by\n       * \"Institut for Erdmessung\", University of Hannover, July 1988.\n       * Internet: www.ife.uni-hannover.de\n       * Iterative computation of CPHI,SPHI and Height.\n       * Iteration of CPHI and SPHI to 10**-12 radian resp.\n       * 2*10**-7 arcsec.\n       * --------------------------------------------------------------\n       */\n      CT = Z / RR;\n      ST = P / RR;\n      RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n      CPHI0 = ST * (1.0 - es) * RX;\n      SPHI0 = CT * RX;\n      iter = 0;\n\n      /* loop to find sin(Latitude) resp. Latitude\n       * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n      do {\n        iter++;\n        RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n        /*  ellipsoidal (geodetic) height */\n        Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n        RK = es * RN / (RN + Height);\n        RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n        CPHI = ST * (1.0 - RK) * RX;\n        SPHI = CT * RX;\n        SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n        CPHI0 = CPHI;\n        SPHI0 = SPHI;\n      }\n      while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n      /*      ellipsoidal (geodetic) latitude */\n      Latitude = Math.atan(SPHI / Math.abs(CPHI));\n      return {\n        x: Longitude,\n        y: Latitude,\n        z: Height\n      };\n    } // cs_geocentric_to_geodetic()\n\n    /****************************************************************/\n    // pj_geocentic_to_wgs84( p )\n    //  p = point to transform in geocentric coordinates (x,y,z)\n\n\n    /** point object, nothing fancy, just allows values to be\n        passed back and forth by reference rather than by value.\n        Other point classes may be used as long as they have\n        x and y properties, which will get modified in the transform method.\n    */\n    function geocentricToWgs84(p, datum_type, datum_params) {\n\n      if (datum_type === PJD_3PARAM) {\n        // if( x[io] === HUGE_VAL )\n        //    continue;\n        return {\n          x: p.x + datum_params[0],\n          y: p.y + datum_params[1],\n          z: p.z + datum_params[2],\n        };\n      } else if (datum_type === PJD_7PARAM) {\n        var Dx_BF = datum_params[0];\n        var Dy_BF = datum_params[1];\n        var Dz_BF = datum_params[2];\n        var Rx_BF = datum_params[3];\n        var Ry_BF = datum_params[4];\n        var Rz_BF = datum_params[5];\n        var M_BF = datum_params[6];\n        // if( x[io] === HUGE_VAL )\n        //    continue;\n        return {\n          x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n          y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n          z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n        };\n      }\n    } // cs_geocentric_to_wgs84\n\n    /****************************************************************/\n    // pj_geocentic_from_wgs84()\n    //  coordinate system definition,\n    //  point to transform in geocentric coordinates (x,y,z)\n    function geocentricFromWgs84(p, datum_type, datum_params) {\n\n      if (datum_type === PJD_3PARAM) {\n        //if( x[io] === HUGE_VAL )\n        //    continue;\n        return {\n          x: p.x - datum_params[0],\n          y: p.y - datum_params[1],\n          z: p.z - datum_params[2],\n        };\n\n      } else if (datum_type === PJD_7PARAM) {\n        var Dx_BF = datum_params[0];\n        var Dy_BF = datum_params[1];\n        var Dz_BF = datum_params[2];\n        var Rx_BF = datum_params[3];\n        var Ry_BF = datum_params[4];\n        var Rz_BF = datum_params[5];\n        var M_BF = datum_params[6];\n        var x_tmp = (p.x - Dx_BF) / M_BF;\n        var y_tmp = (p.y - Dy_BF) / M_BF;\n        var z_tmp = (p.z - Dz_BF) / M_BF;\n        //if( x[io] === HUGE_VAL )\n        //    continue;\n\n        return {\n          x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n          y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n          z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n        };\n      } //cs_geocentric_from_wgs84()\n    }\n\n    function checkParams(type) {\n      return (type === PJD_3PARAM || type === PJD_7PARAM);\n    }\n\n    var datum_transform = function(source, dest, point) {\n      // Short cut if the datums are identical.\n      if (compareDatums(source, dest)) {\n        return point; // in this case, zero is sucess,\n        // whereas cs_compare_datums returns 1 to indicate TRUE\n        // confusing, should fix this\n      }\n\n      // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n      if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n        return point;\n      }\n\n      // If this datum requires grid shifts, then apply it to geodetic coordinates.\n      var source_a = source.a;\n      var source_es = source.es;\n      if (source.datum_type === PJD_GRIDSHIFT) {\n        var gridShiftCode = applyGridShift(source, false, point);\n        if (gridShiftCode !== 0) {\n          return undefined;\n        }\n        source_a = SRS_WGS84_SEMIMAJOR;\n        source_es = SRS_WGS84_ESQUARED;\n      }\n\n      var dest_a = dest.a;\n      var dest_b = dest.b;\n      var dest_es = dest.es;\n      if (dest.datum_type === PJD_GRIDSHIFT) {\n        dest_a = SRS_WGS84_SEMIMAJOR;\n        dest_b = SRS_WGS84_SEMIMINOR;\n        dest_es = SRS_WGS84_ESQUARED;\n      }\n\n      // Do we need to go through geocentric coordinates?\n      if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n        return point;\n      }\n\n      // Convert to geocentric coordinates.\n      point = geodeticToGeocentric(point, source_es, source_a);\n      // Convert between datums\n      if (checkParams(source.datum_type)) {\n        point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n      }\n      if (checkParams(dest.datum_type)) {\n        point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n      }\n      point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);\n\n      if (dest.datum_type === PJD_GRIDSHIFT) {\n        var destGridShiftResult = applyGridShift(dest, true, point);\n        if (destGridShiftResult !== 0) {\n          return undefined;\n        }\n      }\n\n      return point;\n    };\n\n    function applyGridShift(source, inverse, point) {\n      if (source.grids === null || source.grids.length === 0) {\n        console.log('Grid shift grids not found');\n        return -1;\n      }\n      var input = {x: -point.x, y: point.y};\n      var output = {x: Number.NaN, y: Number.NaN};\n      var attemptedGrids = [];\n      for (var i = 0; i < source.grids.length; i++) {\n        var grid = source.grids[i];\n        attemptedGrids.push(grid.name);\n        if (grid.isNull) {\n          output = input;\n          break;\n        }\n        if (grid.grid === null) {\n          if (grid.mandatory) {\n            console.log(\"Unable to find mandatory grid '\" + grid.name + \"'\");\n            return -1;\n          }\n          continue;\n        }\n        var subgrid = grid.grid.subgrids[0];\n        // skip tables that don't match our point at all\n        var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;\n        var minX = subgrid.ll[0] - epsilon;\n        var minY = subgrid.ll[1] - epsilon;\n        var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;\n        var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;\n        if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {\n          continue;\n        }\n        output = applySubgridShift(input, inverse, subgrid);\n        if (!isNaN(output.x)) {\n          break;\n        }\n      }\n      if (isNaN(output.x)) {\n        console.log(\"Failed to find a grid shift table for location '\"+\n          -input.x * R2D + \" \" + input.y * R2D + \" tried: '\" + attemptedGrids + \"'\");\n        return -1;\n      }\n      point.x = -output.x;\n      point.y = output.y;\n      return 0;\n    }\n\n    function applySubgridShift(pin, inverse, ct) {\n      var val = {x: Number.NaN, y: Number.NaN};\n      if (isNaN(pin.x)) { return val; }\n      var tb = {x: pin.x, y: pin.y};\n      tb.x -= ct.ll[0];\n      tb.y -= ct.ll[1];\n      tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;\n      var t = nadInterpolate(tb, ct);\n      if (inverse) {\n        if (isNaN(t.x)) {\n          return val;\n        }\n        t.x = tb.x - t.x;\n        t.y = tb.y - t.y;\n        var i = 9, tol = 1e-12;\n        var dif, del;\n        do {\n          del = nadInterpolate(t, ct);\n          if (isNaN(del.x)) {\n            console.log(\"Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.\");\n            break;\n          }\n          dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};\n          t.x += dif.x;\n          t.y += dif.y;\n        } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);\n        if (i < 0) {\n          console.log(\"Inverse grid shift iterator failed to converge.\");\n          return val;\n        }\n        val.x = adjust_lon(t.x + ct.ll[0]);\n        val.y = t.y + ct.ll[1];\n      } else {\n        if (!isNaN(t.x)) {\n          val.x = pin.x + t.x;\n          val.y = pin.y + t.y;\n        }\n      }\n      return val;\n    }\n\n    function nadInterpolate(pin, ct) {\n      var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};\n      var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};\n      var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};\n      var val= {x: Number.NaN, y: Number.NaN};\n      var inx;\n      if (indx.x < 0 || indx.x >= ct.lim[0]) {\n        return val;\n      }\n      if (indx.y < 0 || indx.y >= ct.lim[1]) {\n        return val;\n      }\n      inx = (indx.y * ct.lim[0]) + indx.x;\n      var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n      inx++;\n      var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n      inx += ct.lim[0];\n      var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n      inx--;\n      var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n      var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),\n        m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;\n      val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);\n      val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);\n      return val;\n    }\n\n    var adjust_axis = function(crs, denorm, point) {\n      var xin = point.x,\n        yin = point.y,\n        zin = point.z || 0.0;\n      var v, t, i;\n      var out = {};\n      for (i = 0; i < 3; i++) {\n        if (denorm && i === 2 && point.z === undefined) {\n          continue;\n        }\n        if (i === 0) {\n          v = xin;\n          if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n            t = 'x';\n          } else {\n            t = 'y';\n          }\n\n        }\n        else if (i === 1) {\n          v = yin;\n          if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n            t = 'y';\n          } else {\n            t = 'x';\n          }\n        }\n        else {\n          v = zin;\n          t = 'z';\n        }\n        switch (crs.axis[i]) {\n        case 'e':\n          out[t] = v;\n          break;\n        case 'w':\n          out[t] = -v;\n          break;\n        case 'n':\n          out[t] = v;\n          break;\n        case 's':\n          out[t] = -v;\n          break;\n        case 'u':\n          if (point[t] !== undefined) {\n            out.z = v;\n          }\n          break;\n        case 'd':\n          if (point[t] !== undefined) {\n            out.z = -v;\n          }\n          break;\n        default:\n          //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n          return null;\n        }\n      }\n      return out;\n    };\n\n    var toPoint = function (array){\n      var out = {\n        x: array[0],\n        y: array[1]\n      };\n      if (array.length>2) {\n        out.z = array[2];\n      }\n      if (array.length>3) {\n        out.m = array[3];\n      }\n      return out;\n    };\n\n    var checkSanity = function (point) {\n      checkCoord(point.x);\n      checkCoord(point.y);\n    };\n    function checkCoord(num) {\n      if (typeof Number.isFinite === 'function') {\n        if (Number.isFinite(num)) {\n          return;\n        }\n        throw new TypeError('coordinates must be finite numbers');\n      }\n      if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n        throw new TypeError('coordinates must be finite numbers');\n      }\n    }\n\n    function checkNotWGS(source, dest) {\n      return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n    }\n\n    function transform(source, dest, point, enforceAxis) {\n      var wgs84;\n      if (Array.isArray(point)) {\n        point = toPoint(point);\n      }\n      checkSanity(point);\n      // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n      if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n        wgs84 = new Projection('WGS84');\n        point = transform(source, wgs84, point, enforceAxis);\n        source = wgs84;\n      }\n      // DGR, 2010/11/12\n      if (enforceAxis && source.axis !== 'enu') {\n        point = adjust_axis(source, false, point);\n      }\n      // Transform source points to long/lat, if they aren't already.\n      if (source.projName === 'longlat') {\n        point = {\n          x: point.x * D2R,\n          y: point.y * D2R,\n          z: point.z || 0\n        };\n      } else {\n        if (source.to_meter) {\n          point = {\n            x: point.x * source.to_meter,\n            y: point.y * source.to_meter,\n            z: point.z || 0\n          };\n        }\n        point = source.inverse(point); // Convert Cartesian to longlat\n        if (!point) {\n          return;\n        }\n      }\n      // Adjust for the prime meridian if necessary\n      if (source.from_greenwich) {\n        point.x += source.from_greenwich;\n      }\n\n      // Convert datums if needed, and if possible.\n      point = datum_transform(source.datum, dest.datum, point);\n      if (!point) {\n        return;\n      }\n\n      // Adjust for the prime meridian if necessary\n      if (dest.from_greenwich) {\n        point = {\n          x: point.x - dest.from_greenwich,\n          y: point.y,\n          z: point.z || 0\n        };\n      }\n\n      if (dest.projName === 'longlat') {\n        // convert radians to decimal degrees\n        point = {\n          x: point.x * R2D,\n          y: point.y * R2D,\n          z: point.z || 0\n        };\n      } else { // else project\n        point = dest.forward(point);\n        if (dest.to_meter) {\n          point = {\n            x: point.x / dest.to_meter,\n            y: point.y / dest.to_meter,\n            z: point.z || 0\n          };\n        }\n      }\n\n      // DGR, 2010/11/12\n      if (enforceAxis && dest.axis !== 'enu') {\n        return adjust_axis(dest, true, point);\n      }\n\n      return point;\n    }\n\n    var wgs84 = Projection('WGS84');\n\n    function transformer(from, to, coords, enforceAxis) {\n      var transformedArray, out, keys;\n      if (Array.isArray(coords)) {\n        transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};\n        if (coords.length > 2) {\n          if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n            if (typeof transformedArray.z === 'number') {\n              return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n            } else {\n              return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n            }\n          } else {\n            return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n          }\n        } else {\n          return [transformedArray.x, transformedArray.y];\n        }\n      } else {\n        out = transform(from, to, coords, enforceAxis);\n        keys = Object.keys(coords);\n        if (keys.length === 2) {\n          return out;\n        }\n        keys.forEach(function (key) {\n          if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n            if (key === 'x' || key === 'y' || key === 'z') {\n              return;\n            }\n          } else {\n            if (key === 'x' || key === 'y') {\n              return;\n            }\n          }\n          out[key] = coords[key];\n        });\n        return out;\n      }\n    }\n\n    function checkProj(item) {\n      if (item instanceof Projection) {\n        return item;\n      }\n      if (item.oProj) {\n        return item.oProj;\n      }\n      return Projection(item);\n    }\n\n    function proj4$1(fromProj, toProj, coord) {\n      fromProj = checkProj(fromProj);\n      var single = false;\n      var obj;\n      if (typeof toProj === 'undefined') {\n        toProj = fromProj;\n        fromProj = wgs84;\n        single = true;\n      } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n        coord = toProj;\n        toProj = fromProj;\n        fromProj = wgs84;\n        single = true;\n      }\n      toProj = checkProj(toProj);\n      if (coord) {\n        return transformer(fromProj, toProj, coord);\n      } else {\n        obj = {\n          forward: function (coords, enforceAxis) {\n            return transformer(fromProj, toProj, coords, enforceAxis);\n          },\n          inverse: function (coords, enforceAxis) {\n            return transformer(toProj, fromProj, coords, enforceAxis);\n          }\n        };\n        if (single) {\n          obj.oProj = toProj;\n        }\n        return obj;\n      }\n    }\n\n    /**\n     * UTM zones are grouped, and assigned to one of a group of 6\n     * sets.\n     *\n     * {int} @private\n     */\n    var NUM_100K_SETS = 6;\n\n    /**\n     * The column letters (for easting) of the lower left value, per\n     * set.\n     *\n     * {string} @private\n     */\n    var SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n    /**\n     * The row letters (for northing) of the lower left value, per\n     * set.\n     *\n     * {string} @private\n     */\n    var SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\n    var A = 65; // A\n    var I = 73; // I\n    var O = 79; // O\n    var V = 86; // V\n    var Z = 90; // Z\n    var mgrs = {\n      forward: forward$1,\n      inverse: inverse$1,\n      toPoint: toPoint$1\n    };\n    /**\n     * Conversion of lat/lon to MGRS.\n     *\n     * @param {object} ll Object literal with lat and lon properties on a\n     *     WGS84 ellipsoid.\n     * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n     *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n     * @return {string} the MGRS string for the given location and accuracy.\n     */\n    function forward$1(ll, accuracy) {\n      accuracy = accuracy || 5; // default accuracy 1m\n      return encode(LLtoUTM({\n        lat: ll[1],\n        lon: ll[0]\n      }), accuracy);\n    }\n\n    /**\n     * Conversion of MGRS to lat/lon.\n     *\n     * @param {string} mgrs MGRS string.\n     * @return {array} An array with left (longitude), bottom (latitude), right\n     *     (longitude) and top (latitude) values in WGS84, representing the\n     *     bounding box for the provided MGRS reference.\n     */\n    function inverse$1(mgrs) {\n      var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n      if (bbox.lat && bbox.lon) {\n        return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n      }\n      return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n    }\n\n    function toPoint$1(mgrs) {\n      var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n      if (bbox.lat && bbox.lon) {\n        return [bbox.lon, bbox.lat];\n      }\n      return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n    }\n    /**\n     * Conversion from degrees to radians.\n     *\n     * @private\n     * @param {number} deg the angle in degrees.\n     * @return {number} the angle in radians.\n     */\n    function degToRad(deg) {\n      return (deg * (Math.PI / 180.0));\n    }\n\n    /**\n     * Conversion from radians to degrees.\n     *\n     * @private\n     * @param {number} rad the angle in radians.\n     * @return {number} the angle in degrees.\n     */\n    function radToDeg(rad) {\n      return (180.0 * (rad / Math.PI));\n    }\n\n    /**\n     * Converts a set of Longitude and Latitude co-ordinates to UTM\n     * using the WGS84 ellipsoid.\n     *\n     * @private\n     * @param {object} ll Object literal with lat and lon properties\n     *     representing the WGS84 coordinate to be converted.\n     * @return {object} Object literal containing the UTM value with easting,\n     *     northing, zoneNumber and zoneLetter properties, and an optional\n     *     accuracy property in digits. Returns null if the conversion failed.\n     */\n    function LLtoUTM(ll) {\n      var Lat = ll.lat;\n      var Long = ll.lon;\n      var a = 6378137.0; //ellip.radius;\n      var eccSquared = 0.00669438; //ellip.eccsq;\n      var k0 = 0.9996;\n      var LongOrigin;\n      var eccPrimeSquared;\n      var N, T, C, A, M;\n      var LatRad = degToRad(Lat);\n      var LongRad = degToRad(Long);\n      var LongOriginRad;\n      var ZoneNumber;\n      // (int)\n      ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n      //Make sure the longitude 180.00 is in Zone 60\n      if (Long === 180) {\n        ZoneNumber = 60;\n      }\n\n      // Special zone for Norway\n      if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n        ZoneNumber = 32;\n      }\n\n      // Special zones for Svalbard\n      if (Lat >= 72.0 && Lat < 84.0) {\n        if (Long >= 0.0 && Long < 9.0) {\n          ZoneNumber = 31;\n        }\n        else if (Long >= 9.0 && Long < 21.0) {\n          ZoneNumber = 33;\n        }\n        else if (Long >= 21.0 && Long < 33.0) {\n          ZoneNumber = 35;\n        }\n        else if (Long >= 33.0 && Long < 42.0) {\n          ZoneNumber = 37;\n        }\n      }\n\n      LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n      // in middle of\n      // zone\n      LongOriginRad = degToRad(LongOrigin);\n\n      eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n      N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n      T = Math.tan(LatRad) * Math.tan(LatRad);\n      C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n      A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n      M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n      var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n      var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n      if (Lat < 0.0) {\n        UTMNorthing += 10000000.0; //10000000 meter offset for\n        // southern hemisphere\n      }\n\n      return {\n        northing: Math.round(UTMNorthing),\n        easting: Math.round(UTMEasting),\n        zoneNumber: ZoneNumber,\n        zoneLetter: getLetterDesignator(Lat)\n      };\n    }\n\n    /**\n     * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n     * class where the Zone can be specified as a single string eg.\"60N\" which\n     * is then broken down into the ZoneNumber and ZoneLetter.\n     *\n     * @private\n     * @param {object} utm An object literal with northing, easting, zoneNumber\n     *     and zoneLetter properties. If an optional accuracy property is\n     *     provided (in meters), a bounding box will be returned instead of\n     *     latitude and longitude.\n     * @return {object} An object literal containing either lat and lon values\n     *     (if no accuracy was provided), or top, right, bottom and left values\n     *     for the bounding box calculated according to the provided accuracy.\n     *     Returns null if the conversion failed.\n     */\n    function UTMtoLL(utm) {\n\n      var UTMNorthing = utm.northing;\n      var UTMEasting = utm.easting;\n      var zoneLetter = utm.zoneLetter;\n      var zoneNumber = utm.zoneNumber;\n      // check the ZoneNummber is valid\n      if (zoneNumber < 0 || zoneNumber > 60) {\n        return null;\n      }\n\n      var k0 = 0.9996;\n      var a = 6378137.0; //ellip.radius;\n      var eccSquared = 0.00669438; //ellip.eccsq;\n      var eccPrimeSquared;\n      var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n      var N1, T1, C1, R1, D, M;\n      var LongOrigin;\n      var mu, phi1Rad;\n\n      // remove 500,000 meter offset for longitude\n      var x = UTMEasting - 500000.0;\n      var y = UTMNorthing;\n\n      // We must know somehow if we are in the Northern or Southern\n      // hemisphere, this is the only time we use the letter So even\n      // if the Zone letter isn't exactly correct it should indicate\n      // the hemisphere correctly\n      if (zoneLetter < 'N') {\n        y -= 10000000.0; // remove 10,000,000 meter offset used\n        // for southern hemisphere\n      }\n\n      // There are 60 zones with zone 1 being at West -180 to -174\n      LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n      // in middle of\n      // zone\n\n      eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n      M = y / k0;\n      mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n      phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n      // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n      N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n      T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n      C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n      R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n      D = x / (N1 * k0);\n\n      var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n      lat = radToDeg(lat);\n\n      var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n      lon = LongOrigin + radToDeg(lon);\n\n      var result;\n      if (utm.accuracy) {\n        var topRight = UTMtoLL({\n          northing: utm.northing + utm.accuracy,\n          easting: utm.easting + utm.accuracy,\n          zoneLetter: utm.zoneLetter,\n          zoneNumber: utm.zoneNumber\n        });\n        result = {\n          top: topRight.lat,\n          right: topRight.lon,\n          bottom: lat,\n          left: lon\n        };\n      }\n      else {\n        result = {\n          lat: lat,\n          lon: lon\n        };\n      }\n      return result;\n    }\n\n    /**\n     * Calculates the MGRS letter designator for the given latitude.\n     *\n     * @private\n     * @param {number} lat The latitude in WGS84 to get the letter designator\n     *     for.\n     * @return {char} The letter designator.\n     */\n    function getLetterDesignator(lat) {\n      //This is here as an error flag to show that the Latitude is\n      //outside MGRS limits\n      var LetterDesignator = 'Z';\n\n      if ((84 >= lat) && (lat >= 72)) {\n        LetterDesignator = 'X';\n      }\n      else if ((72 > lat) && (lat >= 64)) {\n        LetterDesignator = 'W';\n      }\n      else if ((64 > lat) && (lat >= 56)) {\n        LetterDesignator = 'V';\n      }\n      else if ((56 > lat) && (lat >= 48)) {\n        LetterDesignator = 'U';\n      }\n      else if ((48 > lat) && (lat >= 40)) {\n        LetterDesignator = 'T';\n      }\n      else if ((40 > lat) && (lat >= 32)) {\n        LetterDesignator = 'S';\n      }\n      else if ((32 > lat) && (lat >= 24)) {\n        LetterDesignator = 'R';\n      }\n      else if ((24 > lat) && (lat >= 16)) {\n        LetterDesignator = 'Q';\n      }\n      else if ((16 > lat) && (lat >= 8)) {\n        LetterDesignator = 'P';\n      }\n      else if ((8 > lat) && (lat >= 0)) {\n        LetterDesignator = 'N';\n      }\n      else if ((0 > lat) && (lat >= -8)) {\n        LetterDesignator = 'M';\n      }\n      else if ((-8 > lat) && (lat >= -16)) {\n        LetterDesignator = 'L';\n      }\n      else if ((-16 > lat) && (lat >= -24)) {\n        LetterDesignator = 'K';\n      }\n      else if ((-24 > lat) && (lat >= -32)) {\n        LetterDesignator = 'J';\n      }\n      else if ((-32 > lat) && (lat >= -40)) {\n        LetterDesignator = 'H';\n      }\n      else if ((-40 > lat) && (lat >= -48)) {\n        LetterDesignator = 'G';\n      }\n      else if ((-48 > lat) && (lat >= -56)) {\n        LetterDesignator = 'F';\n      }\n      else if ((-56 > lat) && (lat >= -64)) {\n        LetterDesignator = 'E';\n      }\n      else if ((-64 > lat) && (lat >= -72)) {\n        LetterDesignator = 'D';\n      }\n      else if ((-72 > lat) && (lat >= -80)) {\n        LetterDesignator = 'C';\n      }\n      return LetterDesignator;\n    }\n\n    /**\n     * Encodes a UTM location as MGRS string.\n     *\n     * @private\n     * @param {object} utm An object literal with easting, northing,\n     *     zoneLetter, zoneNumber\n     * @param {number} accuracy Accuracy in digits (1-5).\n     * @return {string} MGRS string for the given UTM location.\n     */\n    function encode(utm, accuracy) {\n      // prepend with leading zeroes\n      var seasting = \"00000\" + utm.easting,\n        snorthing = \"00000\" + utm.northing;\n\n      return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n    }\n\n    /**\n     * Get the two letter 100k designator for a given UTM easting,\n     * northing and zone number value.\n     *\n     * @private\n     * @param {number} easting\n     * @param {number} northing\n     * @param {number} zoneNumber\n     * @return the two letter 100k designator for the given UTM location.\n     */\n    function get100kID(easting, northing, zoneNumber) {\n      var setParm = get100kSetForZone(zoneNumber);\n      var setColumn = Math.floor(easting / 100000);\n      var setRow = Math.floor(northing / 100000) % 20;\n      return getLetter100kID(setColumn, setRow, setParm);\n    }\n\n    /**\n     * Given a UTM zone number, figure out the MGRS 100K set it is in.\n     *\n     * @private\n     * @param {number} i An UTM zone number.\n     * @return {number} the 100k set the UTM zone is in.\n     */\n    function get100kSetForZone(i) {\n      var setParm = i % NUM_100K_SETS;\n      if (setParm === 0) {\n        setParm = NUM_100K_SETS;\n      }\n\n      return setParm;\n    }\n\n    /**\n     * Get the two-letter MGRS 100k designator given information\n     * translated from the UTM northing, easting and zone number.\n     *\n     * @private\n     * @param {number} column the column index as it relates to the MGRS\n     *        100k set spreadsheet, created from the UTM easting.\n     *        Values are 1-8.\n     * @param {number} row the row index as it relates to the MGRS 100k set\n     *        spreadsheet, created from the UTM northing value. Values\n     *        are from 0-19.\n     * @param {number} parm the set block, as it relates to the MGRS 100k set\n     *        spreadsheet, created from the UTM zone. Values are from\n     *        1-60.\n     * @return two letter MGRS 100k code.\n     */\n    function getLetter100kID(column, row, parm) {\n      // colOrigin and rowOrigin are the letters at the origin of the set\n      var index = parm - 1;\n      var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n      var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n      // colInt and rowInt are the letters to build to return\n      var colInt = colOrigin + column - 1;\n      var rowInt = rowOrigin + row;\n      var rollover = false;\n\n      if (colInt > Z) {\n        colInt = colInt - Z + A - 1;\n        rollover = true;\n      }\n\n      if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n        colInt++;\n      }\n\n      if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n        colInt++;\n\n        if (colInt === I) {\n          colInt++;\n        }\n      }\n\n      if (colInt > Z) {\n        colInt = colInt - Z + A - 1;\n      }\n\n      if (rowInt > V) {\n        rowInt = rowInt - V + A - 1;\n        rollover = true;\n      }\n      else {\n        rollover = false;\n      }\n\n      if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n        rowInt++;\n      }\n\n      if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n        rowInt++;\n\n        if (rowInt === I) {\n          rowInt++;\n        }\n      }\n\n      if (rowInt > V) {\n        rowInt = rowInt - V + A - 1;\n      }\n\n      var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n      return twoLetter;\n    }\n\n    /**\n     * Decode the UTM parameters from a MGRS string.\n     *\n     * @private\n     * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n     * @return {object} An object literal with easting, northing, zoneLetter,\n     *     zoneNumber and accuracy (in meters) properties.\n     */\n    function decode(mgrsString) {\n\n      if (mgrsString && mgrsString.length === 0) {\n        throw (\"MGRSPoint coverting from nothing\");\n      }\n\n      var length = mgrsString.length;\n\n      var hunK = null;\n      var sb = \"\";\n      var testChar;\n      var i = 0;\n\n      // get Zone number\n      while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n        if (i >= 2) {\n          throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n        }\n        sb += testChar;\n        i++;\n      }\n\n      var zoneNumber = parseInt(sb, 10);\n\n      if (i === 0 || i + 3 > length) {\n        // A good MGRS string has to be 4-5 digits long,\n        // ##AAA/#AAA at least.\n        throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n      }\n\n      var zoneLetter = mgrsString.charAt(i++);\n\n      // Should we check the zone letter here? Why not.\n      if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n        throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n      }\n\n      hunK = mgrsString.substring(i, i += 2);\n\n      var set = get100kSetForZone(zoneNumber);\n\n      var east100k = getEastingFromChar(hunK.charAt(0), set);\n      var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n      // We have a bug where the northing may be 2000000 too low.\n      // How\n      // do we know when to roll over?\n\n      while (north100k < getMinNorthing(zoneLetter)) {\n        north100k += 2000000;\n      }\n\n      // calculate the char index for easting/northing separator\n      var remainder = length - i;\n\n      if (remainder % 2 !== 0) {\n        throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n      }\n\n      var sep = remainder / 2;\n\n      var sepEasting = 0.0;\n      var sepNorthing = 0.0;\n      var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n      if (sep > 0) {\n        accuracyBonus = 100000.0 / Math.pow(10, sep);\n        sepEastingString = mgrsString.substring(i, i + sep);\n        sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n        sepNorthingString = mgrsString.substring(i + sep);\n        sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n      }\n\n      easting = sepEasting + east100k;\n      northing = sepNorthing + north100k;\n\n      return {\n        easting: easting,\n        northing: northing,\n        zoneLetter: zoneLetter,\n        zoneNumber: zoneNumber,\n        accuracy: accuracyBonus\n      };\n    }\n\n    /**\n     * Given the first letter from a two-letter MGRS 100k zone, and given the\n     * MGRS table set for the zone number, figure out the easting value that\n     * should be added to the other, secondary easting value.\n     *\n     * @private\n     * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n     * @param {number} set The MGRS table set for the zone number.\n     * @return {number} The easting value for the given letter and set.\n     */\n    function getEastingFromChar(e, set) {\n      // colOrigin is the letter at the origin of the set for the\n      // column\n      var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n      var eastingValue = 100000.0;\n      var rewindMarker = false;\n\n      while (curCol !== e.charCodeAt(0)) {\n        curCol++;\n        if (curCol === I) {\n          curCol++;\n        }\n        if (curCol === O) {\n          curCol++;\n        }\n        if (curCol > Z) {\n          if (rewindMarker) {\n            throw (\"Bad character: \" + e);\n          }\n          curCol = A;\n          rewindMarker = true;\n        }\n        eastingValue += 100000.0;\n      }\n\n      return eastingValue;\n    }\n\n    /**\n     * Given the second letter from a two-letter MGRS 100k zone, and given the\n     * MGRS table set for the zone number, figure out the northing value that\n     * should be added to the other, secondary northing value. You have to\n     * remember that Northings are determined from the equator, and the vertical\n     * cycle of letters mean a 2000000 additional northing meters. This happens\n     * approx. every 18 degrees of latitude. This method does *NOT* count any\n     * additional northings. You have to figure out how many 2000000 meters need\n     * to be added for the zone letter of the MGRS coordinate.\n     *\n     * @private\n     * @param {char} n Second letter of the MGRS 100k zone\n     * @param {number} set The MGRS table set number, which is dependent on the\n     *     UTM zone number.\n     * @return {number} The northing value for the given letter and set.\n     */\n    function getNorthingFromChar(n, set) {\n\n      if (n > 'V') {\n        throw (\"MGRSPoint given invalid Northing \" + n);\n      }\n\n      // rowOrigin is the letter at the origin of the set for the\n      // column\n      var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n      var northingValue = 0.0;\n      var rewindMarker = false;\n\n      while (curRow !== n.charCodeAt(0)) {\n        curRow++;\n        if (curRow === I) {\n          curRow++;\n        }\n        if (curRow === O) {\n          curRow++;\n        }\n        // fixing a bug making whole application hang in this loop\n        // when 'n' is a wrong character\n        if (curRow > V) {\n          if (rewindMarker) { // making sure that this loop ends\n            throw (\"Bad character: \" + n);\n          }\n          curRow = A;\n          rewindMarker = true;\n        }\n        northingValue += 100000.0;\n      }\n\n      return northingValue;\n    }\n\n    /**\n     * The function getMinNorthing returns the minimum northing value of a MGRS\n     * zone.\n     *\n     * Ported from Geotrans' c Lattitude_Band_Value structure table.\n     *\n     * @private\n     * @param {char} zoneLetter The MGRS zone to get the min northing for.\n     * @return {number}\n     */\n    function getMinNorthing(zoneLetter) {\n      var northing;\n      switch (zoneLetter) {\n      case 'C':\n        northing = 1100000.0;\n        break;\n      case 'D':\n        northing = 2000000.0;\n        break;\n      case 'E':\n        northing = 2800000.0;\n        break;\n      case 'F':\n        northing = 3700000.0;\n        break;\n      case 'G':\n        northing = 4600000.0;\n        break;\n      case 'H':\n        northing = 5500000.0;\n        break;\n      case 'J':\n        northing = 6400000.0;\n        break;\n      case 'K':\n        northing = 7300000.0;\n        break;\n      case 'L':\n        northing = 8200000.0;\n        break;\n      case 'M':\n        northing = 9100000.0;\n        break;\n      case 'N':\n        northing = 0.0;\n        break;\n      case 'P':\n        northing = 800000.0;\n        break;\n      case 'Q':\n        northing = 1700000.0;\n        break;\n      case 'R':\n        northing = 2600000.0;\n        break;\n      case 'S':\n        northing = 3500000.0;\n        break;\n      case 'T':\n        northing = 4400000.0;\n        break;\n      case 'U':\n        northing = 5300000.0;\n        break;\n      case 'V':\n        northing = 6200000.0;\n        break;\n      case 'W':\n        northing = 7000000.0;\n        break;\n      case 'X':\n        northing = 7900000.0;\n        break;\n      default:\n        northing = -1.0;\n      }\n      if (northing >= 0.0) {\n        return northing;\n      }\n      else {\n        throw (\"Invalid zone letter: \" + zoneLetter);\n      }\n\n    }\n\n    function Point(x, y, z) {\n      if (!(this instanceof Point)) {\n        return new Point(x, y, z);\n      }\n      if (Array.isArray(x)) {\n        this.x = x[0];\n        this.y = x[1];\n        this.z = x[2] || 0.0;\n      } else if(typeof x === 'object') {\n        this.x = x.x;\n        this.y = x.y;\n        this.z = x.z || 0.0;\n      } else if (typeof x === 'string' && typeof y === 'undefined') {\n        var coords = x.split(',');\n        this.x = parseFloat(coords[0], 10);\n        this.y = parseFloat(coords[1], 10);\n        this.z = parseFloat(coords[2], 10) || 0.0;\n      } else {\n        this.x = x;\n        this.y = y;\n        this.z = z || 0.0;\n      }\n      console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n    }\n\n    Point.fromMGRS = function(mgrsStr) {\n      return new Point(toPoint$1(mgrsStr));\n    };\n    Point.prototype.toMGRS = function(accuracy) {\n      return forward$1([this.x, this.y], accuracy);\n    };\n\n    var C00 = 1;\n    var C02 = 0.25;\n    var C04 = 0.046875;\n    var C06 = 0.01953125;\n    var C08 = 0.01068115234375;\n    var C22 = 0.75;\n    var C44 = 0.46875;\n    var C46 = 0.01302083333333333333;\n    var C48 = 0.00712076822916666666;\n    var C66 = 0.36458333333333333333;\n    var C68 = 0.00569661458333333333;\n    var C88 = 0.3076171875;\n\n    var pj_enfn = function(es) {\n      var en = [];\n      en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n      en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n      var t = es * es;\n      en[2] = t * (C44 - es * (C46 + es * C48));\n      t *= es;\n      en[3] = t * (C66 - es * C68);\n      en[4] = t * es * C88;\n      return en;\n    };\n\n    var pj_mlfn = function(phi, sphi, cphi, en) {\n      cphi *= sphi;\n      sphi *= sphi;\n      return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n    };\n\n    var MAX_ITER = 20;\n\n    var pj_inv_mlfn = function(arg, es, en) {\n      var k = 1 / (1 - es);\n      var phi = arg;\n      for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n        var s = Math.sin(phi);\n        var t = 1 - es * s * s;\n        //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n        //phi -= t * (t * Math.sqrt(t)) * k;\n        t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n        phi -= t;\n        if (Math.abs(t) < EPSLN) {\n          return phi;\n        }\n      }\n      //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n      return phi;\n    };\n\n    // Heavily based on this tmerc projection implementation\n    // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\n    function init$2() {\n      this.x0 = this.x0 !== undefined ? this.x0 : 0;\n      this.y0 = this.y0 !== undefined ? this.y0 : 0;\n      this.long0 = this.long0 !== undefined ? this.long0 : 0;\n      this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n      if (this.es) {\n        this.en = pj_enfn(this.es);\n        this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n      }\n    }\n\n    /**\n        Transverse Mercator Forward  - long/lat to x/y\n        long/lat in radians\n      */\n    function forward$2(p) {\n      var lon = p.x;\n      var lat = p.y;\n\n      var delta_lon = adjust_lon(lon - this.long0);\n      var con;\n      var x, y;\n      var sin_phi = Math.sin(lat);\n      var cos_phi = Math.cos(lat);\n\n      if (!this.es) {\n        var b = cos_phi * Math.sin(delta_lon);\n\n        if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n          return (93);\n        }\n        else {\n          x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n          y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n          b = Math.abs(y);\n\n          if (b >= 1) {\n            if ((b - 1) > EPSLN) {\n              return (93);\n            }\n            else {\n              y = 0;\n            }\n          }\n          else {\n            y = Math.acos(y);\n          }\n\n          if (lat < 0) {\n            y = -y;\n          }\n\n          y = this.a * this.k0 * (y - this.lat0) + this.y0;\n        }\n      }\n      else {\n        var al = cos_phi * delta_lon;\n        var als = Math.pow(al, 2);\n        var c = this.ep2 * Math.pow(cos_phi, 2);\n        var cs = Math.pow(c, 2);\n        var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n        var t = Math.pow(tq, 2);\n        var ts = Math.pow(t, 2);\n        con = 1 - this.es * Math.pow(sin_phi, 2);\n        al = al / Math.sqrt(con);\n        var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n        x = this.a * (this.k0 * al * (1 +\n          als / 6 * (1 - t + c +\n          als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n          als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n          this.x0;\n\n        y = this.a * (this.k0 * (ml - this.ml0 +\n          sin_phi * delta_lon * al / 2 * (1 +\n          als / 12 * (5 - t + 9 * c + 4 * cs +\n          als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n          als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n          this.y0;\n      }\n\n      p.x = x;\n      p.y = y;\n\n      return p;\n    }\n\n    /**\n        Transverse Mercator Inverse  -  x/y to long/lat\n      */\n    function inverse$2(p) {\n      var con, phi;\n      var lat, lon;\n      var x = (p.x - this.x0) * (1 / this.a);\n      var y = (p.y - this.y0) * (1 / this.a);\n\n      if (!this.es) {\n        var f = Math.exp(x / this.k0);\n        var g = 0.5 * (f - 1 / f);\n        var temp = this.lat0 + y / this.k0;\n        var h = Math.cos(temp);\n        con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n        lat = Math.asin(con);\n\n        if (y < 0) {\n          lat = -lat;\n        }\n\n        if ((g === 0) && (h === 0)) {\n          lon = 0;\n        }\n        else {\n          lon = adjust_lon(Math.atan2(g, h) + this.long0);\n        }\n      }\n      else { // ellipsoidal form\n        con = this.ml0 + y / this.k0;\n        phi = pj_inv_mlfn(con, this.es, this.en);\n\n        if (Math.abs(phi) < HALF_PI) {\n          var sin_phi = Math.sin(phi);\n          var cos_phi = Math.cos(phi);\n          var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n          var c = this.ep2 * Math.pow(cos_phi, 2);\n          var cs = Math.pow(c, 2);\n          var t = Math.pow(tan_phi, 2);\n          var ts = Math.pow(t, 2);\n          con = 1 - this.es * Math.pow(sin_phi, 2);\n          var d = x * Math.sqrt(con) / this.k0;\n          var ds = Math.pow(d, 2);\n          con = con * tan_phi;\n\n          lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n            ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n            ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n            ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n          lon = adjust_lon(this.long0 + (d * (1 -\n            ds / 6 * (1 + 2 * t + c -\n            ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n            ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n        }\n        else {\n          lat = HALF_PI * sign(y);\n          lon = 0;\n        }\n      }\n\n      p.x = lon;\n      p.y = lat;\n\n      return p;\n    }\n\n    var names$3 = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\n    var tmerc = {\n      init: init$2,\n      forward: forward$2,\n      inverse: inverse$2,\n      names: names$3\n    };\n\n    var sinh = function(x) {\n      var r = Math.exp(x);\n      r = (r - 1 / r) / 2;\n      return r;\n    };\n\n    var hypot = function(x, y) {\n      x = Math.abs(x);\n      y = Math.abs(y);\n      var a = Math.max(x, y);\n      var b = Math.min(x, y) / (a ? a : 1);\n\n      return a * Math.sqrt(1 + Math.pow(b, 2));\n    };\n\n    var log1py = function(x) {\n      var y = 1 + x;\n      var z = y - 1;\n\n      return z === 0 ? x : x * Math.log(y) / z;\n    };\n\n    var asinhy = function(x) {\n      var y = Math.abs(x);\n      y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n      return x < 0 ? -y : y;\n    };\n\n    var gatg = function(pp, B) {\n      var cos_2B = 2 * Math.cos(2 * B);\n      var i = pp.length - 1;\n      var h1 = pp[i];\n      var h2 = 0;\n      var h;\n\n      while (--i >= 0) {\n        h = -h2 + cos_2B * h1 + pp[i];\n        h2 = h1;\n        h1 = h;\n      }\n\n      return (B + h * Math.sin(2 * B));\n    };\n\n    var clens = function(pp, arg_r) {\n      var r = 2 * Math.cos(arg_r);\n      var i = pp.length - 1;\n      var hr1 = pp[i];\n      var hr2 = 0;\n      var hr;\n\n      while (--i >= 0) {\n        hr = -hr2 + r * hr1 + pp[i];\n        hr2 = hr1;\n        hr1 = hr;\n      }\n\n      return Math.sin(arg_r) * hr;\n    };\n\n    var cosh = function(x) {\n      var r = Math.exp(x);\n      r = (r + 1 / r) / 2;\n      return r;\n    };\n\n    var clens_cmplx = function(pp, arg_r, arg_i) {\n      var sin_arg_r = Math.sin(arg_r);\n      var cos_arg_r = Math.cos(arg_r);\n      var sinh_arg_i = sinh(arg_i);\n      var cosh_arg_i = cosh(arg_i);\n      var r = 2 * cos_arg_r * cosh_arg_i;\n      var i = -2 * sin_arg_r * sinh_arg_i;\n      var j = pp.length - 1;\n      var hr = pp[j];\n      var hi1 = 0;\n      var hr1 = 0;\n      var hi = 0;\n      var hr2;\n      var hi2;\n\n      while (--j >= 0) {\n        hr2 = hr1;\n        hi2 = hi1;\n        hr1 = hr;\n        hi1 = hi;\n        hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n        hi = -hi2 + i * hr1 + r * hi1;\n      }\n\n      r = sin_arg_r * cosh_arg_i;\n      i = cos_arg_r * sinh_arg_i;\n\n      return [r * hr - i * hi, r * hi + i * hr];\n    };\n\n    // Heavily based on this etmerc projection implementation\n    // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\n    function init$3() {\n      if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\n        throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\n      }\n      if (this.approx) {\n        // When '+approx' is set, use tmerc instead\n        tmerc.init.apply(this);\n        this.forward = tmerc.forward;\n        this.inverse = tmerc.inverse;\n      }\n\n      this.x0 = this.x0 !== undefined ? this.x0 : 0;\n      this.y0 = this.y0 !== undefined ? this.y0 : 0;\n      this.long0 = this.long0 !== undefined ? this.long0 : 0;\n      this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n      this.cgb = [];\n      this.cbg = [];\n      this.utg = [];\n      this.gtu = [];\n\n      var f = this.es / (1 + Math.sqrt(1 - this.es));\n      var n = f / (2 - f);\n      var np = n;\n\n      this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n      this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n      np = np * n;\n      this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n      this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n      np = np * n;\n      this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n      this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n      np = np * n;\n      this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n      this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n      np = np * n;\n      this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n      this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n      np = np * n;\n      this.cgb[5] = np * (601676 / 22275);\n      this.cbg[5] = np * (444337 / 155925);\n\n      np = Math.pow(n, 2);\n      this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n      this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n      this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n      this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n      this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n      np = np * n;\n      this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n      this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n      np = np * n;\n      this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n      this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n      np = np * n;\n      this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n      this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n      np = np * n;\n      this.utg[5] = np * (-20648693 / 638668800);\n      this.gtu[5] = np * (212378941 / 319334400);\n\n      var Z = gatg(this.cbg, this.lat0);\n      this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n    }\n\n    function forward$3(p) {\n      var Ce = adjust_lon(p.x - this.long0);\n      var Cn = p.y;\n\n      Cn = gatg(this.cbg, Cn);\n      var sin_Cn = Math.sin(Cn);\n      var cos_Cn = Math.cos(Cn);\n      var sin_Ce = Math.sin(Ce);\n      var cos_Ce = Math.cos(Ce);\n\n      Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n      Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n      Ce = asinhy(Math.tan(Ce));\n\n      var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n      Cn = Cn + tmp[0];\n      Ce = Ce + tmp[1];\n\n      var x;\n      var y;\n\n      if (Math.abs(Ce) <= 2.623395162778) {\n        x = this.a * (this.Qn * Ce) + this.x0;\n        y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n      }\n      else {\n        x = Infinity;\n        y = Infinity;\n      }\n\n      p.x = x;\n      p.y = y;\n\n      return p;\n    }\n\n    function inverse$3(p) {\n      var Ce = (p.x - this.x0) * (1 / this.a);\n      var Cn = (p.y - this.y0) * (1 / this.a);\n\n      Cn = (Cn - this.Zb) / this.Qn;\n      Ce = Ce / this.Qn;\n\n      var lon;\n      var lat;\n\n      if (Math.abs(Ce) <= 2.623395162778) {\n        var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n        Cn = Cn + tmp[0];\n        Ce = Ce + tmp[1];\n        Ce = Math.atan(sinh(Ce));\n\n        var sin_Cn = Math.sin(Cn);\n        var cos_Cn = Math.cos(Cn);\n        var sin_Ce = Math.sin(Ce);\n        var cos_Ce = Math.cos(Ce);\n\n        Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n        Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n        lon = adjust_lon(Ce + this.long0);\n        lat = gatg(this.cgb, Cn);\n      }\n      else {\n        lon = Infinity;\n        lat = Infinity;\n      }\n\n      p.x = lon;\n      p.y = lat;\n\n      return p;\n    }\n\n    var names$4 = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\n    var etmerc = {\n      init: init$3,\n      forward: forward$3,\n      inverse: inverse$3,\n      names: names$4\n    };\n\n    var adjust_zone = function(zone, lon) {\n      if (zone === undefined) {\n        zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n        if (zone < 0) {\n          return 0;\n        } else if (zone > 60) {\n          return 60;\n        }\n      }\n      return zone;\n    };\n\n    var dependsOn = 'etmerc';\n    function init$4() {\n      var zone = adjust_zone(this.zone, this.long0);\n      if (zone === undefined) {\n        throw new Error('unknown utm zone');\n      }\n      this.lat0 = 0;\n      this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n      this.x0 = 500000;\n      this.y0 = this.utmSouth ? 10000000 : 0;\n      this.k0 = 0.9996;\n\n      etmerc.init.apply(this);\n      this.forward = etmerc.forward;\n      this.inverse = etmerc.inverse;\n    }\n\n    var names$5 = [\"Universal Transverse Mercator System\", \"utm\"];\n    var utm = {\n      init: init$4,\n      names: names$5,\n      dependsOn: dependsOn\n    };\n\n    var srat = function(esinp, exp) {\n      return (Math.pow((1 - esinp) / (1 + esinp), exp));\n    };\n\n    var MAX_ITER$1 = 20;\n    function init$6() {\n      var sphi = Math.sin(this.lat0);\n      var cphi = Math.cos(this.lat0);\n      cphi *= cphi;\n      this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n      this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n      this.phic0 = Math.asin(sphi / this.C);\n      this.ratexp = 0.5 * this.C * this.e;\n      this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n    }\n\n    function forward$5(p) {\n      var lon = p.x;\n      var lat = p.y;\n\n      p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n      p.x = this.C * lon;\n      return p;\n    }\n\n    function inverse$5(p) {\n      var DEL_TOL = 1e-14;\n      var lon = p.x / this.C;\n      var lat = p.y;\n      var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n      for (var i = MAX_ITER$1; i > 0; --i) {\n        lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n        if (Math.abs(lat - p.y) < DEL_TOL) {\n          break;\n        }\n        p.y = lat;\n      }\n      /* convergence failed */\n      if (!i) {\n        return null;\n      }\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$7 = [\"gauss\"];\n    var gauss = {\n      init: init$6,\n      forward: forward$5,\n      inverse: inverse$5,\n      names: names$7\n    };\n\n    function init$5() {\n      gauss.init.apply(this);\n      if (!this.rc) {\n        return;\n      }\n      this.sinc0 = Math.sin(this.phic0);\n      this.cosc0 = Math.cos(this.phic0);\n      this.R2 = 2 * this.rc;\n      if (!this.title) {\n        this.title = \"Oblique Stereographic Alternative\";\n      }\n    }\n\n    function forward$4(p) {\n      var sinc, cosc, cosl, k;\n      p.x = adjust_lon(p.x - this.long0);\n      gauss.forward.apply(this, [p]);\n      sinc = Math.sin(p.y);\n      cosc = Math.cos(p.y);\n      cosl = Math.cos(p.x);\n      k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n      p.x = k * cosc * Math.sin(p.x);\n      p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n      p.x = this.a * p.x + this.x0;\n      p.y = this.a * p.y + this.y0;\n      return p;\n    }\n\n    function inverse$4(p) {\n      var sinc, cosc, lon, lat, rho;\n      p.x = (p.x - this.x0) / this.a;\n      p.y = (p.y - this.y0) / this.a;\n\n      p.x /= this.k0;\n      p.y /= this.k0;\n      if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n        var c = 2 * Math.atan2(rho, this.R2);\n        sinc = Math.sin(c);\n        cosc = Math.cos(c);\n        lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n        lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n      }\n      else {\n        lat = this.phic0;\n        lon = 0;\n      }\n\n      p.x = lon;\n      p.y = lat;\n      gauss.inverse.apply(this, [p]);\n      p.x = adjust_lon(p.x + this.long0);\n      return p;\n    }\n\n    var names$6 = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\n    var sterea = {\n      init: init$5,\n      forward: forward$4,\n      inverse: inverse$4,\n      names: names$6\n    };\n\n    function ssfn_(phit, sinphi, eccen) {\n      sinphi *= eccen;\n      return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n    }\n\n    function init$7() {\n      this.coslat0 = Math.cos(this.lat0);\n      this.sinlat0 = Math.sin(this.lat0);\n      if (this.sphere) {\n        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n          this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n        }\n      }\n      else {\n        if (Math.abs(this.coslat0) <= EPSLN) {\n          if (this.lat0 > 0) {\n            //North pole\n            //trace('stere:north pole');\n            this.con = 1;\n          }\n          else {\n            //South pole\n            //trace('stere:south pole');\n            this.con = -1;\n          }\n        }\n        this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n          this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n        }\n        this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n        this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n        this.cosX0 = Math.cos(this.X0);\n        this.sinX0 = Math.sin(this.X0);\n      }\n    }\n\n    // Stereographic forward equations--mapping lat,long to x,y\n    function forward$6(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var sinlat = Math.sin(lat);\n      var coslat = Math.cos(lat);\n      var A, X, sinX, cosX, ts, rh;\n      var dlon = adjust_lon(lon - this.long0);\n\n      if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n        //case of the origine point\n        //trace('stere:this is the origin point');\n        p.x = NaN;\n        p.y = NaN;\n        return p;\n      }\n      if (this.sphere) {\n        //trace('stere:sphere case');\n        A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n        p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n        p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n        return p;\n      }\n      else {\n        X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n        cosX = Math.cos(X);\n        sinX = Math.sin(X);\n        if (Math.abs(this.coslat0) <= EPSLN) {\n          ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n          rh = 2 * this.a * this.k0 * ts / this.cons;\n          p.x = this.x0 + rh * Math.sin(lon - this.long0);\n          p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n          //trace(p.toString());\n          return p;\n        }\n        else if (Math.abs(this.sinlat0) < EPSLN) {\n          //Eq\n          //trace('stere:equateur');\n          A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n          p.y = A * sinX;\n        }\n        else {\n          //other case\n          //trace('stere:normal case');\n          A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n          p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n        }\n        p.x = A * cosX * Math.sin(dlon) + this.x0;\n      }\n      //trace(p.toString());\n      return p;\n    }\n\n    //* Stereographic inverse equations--mapping x,y to lat/long\n    function inverse$6(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var lon, lat, ts, ce, Chi;\n      var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      if (this.sphere) {\n        var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n        lon = this.long0;\n        lat = this.lat0;\n        if (rh <= EPSLN) {\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n        lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n        if (Math.abs(this.coslat0) < EPSLN) {\n          if (this.lat0 > 0) {\n            lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n          }\n          else {\n            lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n          }\n        }\n        else {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n        }\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      else {\n        if (Math.abs(this.coslat0) <= EPSLN) {\n          if (rh <= EPSLN) {\n            lat = this.lat0;\n            lon = this.long0;\n            p.x = lon;\n            p.y = lat;\n            //trace(p.toString());\n            return p;\n          }\n          p.x *= this.con;\n          p.y *= this.con;\n          ts = rh * this.cons / (2 * this.a * this.k0);\n          lat = this.con * phi2z(this.e, ts);\n          lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n        }\n        else {\n          ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n          lon = this.long0;\n          if (rh <= EPSLN) {\n            Chi = this.X0;\n          }\n          else {\n            Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n            lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n          }\n          lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n        }\n      }\n      p.x = lon;\n      p.y = lat;\n\n      //trace(p.toString());\n      return p;\n\n    }\n\n    var names$8 = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\n    var stere = {\n      init: init$7,\n      forward: forward$6,\n      inverse: inverse$6,\n      names: names$8,\n      ssfn_: ssfn_\n    };\n\n    /*\n      references:\n        Formules et constantes pour le Calcul pour la\n        projection cylindrique conforme à axe oblique et pour la transformation entre\n        des systèmes de référence.\n        http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n      */\n\n    function init$8() {\n      var phy0 = this.lat0;\n      this.lambda0 = this.long0;\n      var sinPhy0 = Math.sin(phy0);\n      var semiMajorAxis = this.a;\n      var invF = this.rf;\n      var flattening = 1 / invF;\n      var e2 = 2 * flattening - Math.pow(flattening, 2);\n      var e = this.e = Math.sqrt(e2);\n      this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n      this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n      this.b0 = Math.asin(sinPhy0 / this.alpha);\n      var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n      var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n      var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n      this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n    }\n\n    function forward$7(p) {\n      var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n      var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n      var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n      // spheric latitude\n      var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n      // spheric longitude\n      var I = this.alpha * (p.x - this.lambda0);\n\n      // psoeudo equatorial rotation\n      var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n      var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n      p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n      p.x = this.R * rotI + this.x0;\n      return p;\n    }\n\n    function inverse$7(p) {\n      var Y = p.x - this.x0;\n      var X = p.y - this.y0;\n\n      var rotI = Y / this.R;\n      var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n      var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n      var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n      var lambda = this.lambda0 + I / this.alpha;\n\n      var S = 0;\n      var phy = b;\n      var prevPhy = -1000;\n      var iteration = 0;\n      while (Math.abs(phy - prevPhy) > 0.0000001) {\n        if (++iteration > 20) {\n          //...reportError(\"omercFwdInfinity\");\n          return;\n        }\n        //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n        S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n        prevPhy = phy;\n        phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n      }\n\n      p.x = lambda;\n      p.y = phy;\n      return p;\n    }\n\n    var names$9 = [\"somerc\"];\n    var somerc = {\n      init: init$8,\n      forward: forward$7,\n      inverse: inverse$7,\n      names: names$9\n    };\n\n    var TOL = 1e-7;\n\n    function isTypeA(P) {\n      var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\n      var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\n      \n      return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\n    }\n\n\n    /* Initialize the Oblique Mercator  projection\n        ------------------------------------------*/\n    function init$9() {  \n      var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\n        gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0;\n      \n      // only Type A uses the no_off or no_uoff property\n      // https://github.com/OSGeo/proj.4/issues/104\n      this.no_off = isTypeA(this);\n      this.no_rot = 'no_rot' in this;\n      \n      var alp = false;\n      if (\"alpha\" in this) {\n        alp = true;\n      }\n\n      var gam = false;\n      if (\"rectified_grid_angle\" in this) {\n        gam = true;\n      }\n\n      if (alp) {\n        alpha_c = this.alpha;\n      }\n      \n      if (gam) {\n        gamma = (this.rectified_grid_angle * D2R);\n      }\n      \n      if (alp || gam) {\n        lamc = this.longc;\n      } else {\n        lam1 = this.long1;\n        phi1 = this.lat1;\n        lam2 = this.long2;\n        phi2 = this.lat2;\n        \n        if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\n            Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\n            Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\n          throw new Error();\n        }\n      }\n      \n      var one_es = 1.0 - this.es;\n      com = Math.sqrt(one_es);\n      \n      if (Math.abs(this.lat0) > EPSLN) {\n        sinph0 = Math.sin(this.lat0);\n        cosph0 = Math.cos(this.lat0);\n        con = 1 - this.es * sinph0 * sinph0;\n        this.B = cosph0 * cosph0;\n        this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\n        this.A = this.B * this.k0 * com / con;\n        D = this.B * com / (cosph0 * Math.sqrt(con));\n        F = D * D -1;\n        \n        if (F <= 0) {\n          F = 0;\n        } else {\n          F = Math.sqrt(F);\n          if (this.lat0 < 0) {\n            F = -F;\n          }\n        }\n        \n        this.E = F += D;\n        this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\n      } else {\n        this.B = 1 / com;\n        this.A = this.k0;\n        this.E = D = F = 1;\n      }\n      \n      if (alp || gam) {\n        if (alp) {\n          gamma0 = Math.asin(Math.sin(alpha_c) / D);\n          if (!gam) {\n            gamma = alpha_c;\n          }\n        } else {\n          gamma0 = gamma;\n          alpha_c = Math.asin(D * Math.sin(gamma0));\n        }\n        this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\n      } else {\n        H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\n        L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\n        F = this.E / H;\n        p = (L - H) / (L + H);\n        J = this.E * this.E;\n        J = (J - L * H) / (J + L * H);\n        con = lam1 - lam2;\n        \n        if (con < -Math.pi) {\n          lam2 -=TWO_PI;\n        } else if (con > Math.pi) {\n          lam2 += TWO_PI;\n        }\n        \n        this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\n        gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\n        gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\n      }\n      \n      this.singam = Math.sin(gamma0);\n      this.cosgam = Math.cos(gamma0);\n      this.sinrot = Math.sin(gamma);\n      this.cosrot = Math.cos(gamma);\n      \n      this.rB = 1 / this.B;\n      this.ArB = this.A * this.rB;\n      this.BrA = 1 / this.ArB;\n      if (this.no_off) {\n        this.u_0 = 0;\n      } else {\n        this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\n        \n        if (this.lat0 < 0) {\n          this.u_0 = - this.u_0;\n        }  \n      }\n        \n      F = 0.5 * gamma0;\n      this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\n      this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\n    }\n\n\n    /* Oblique Mercator forward equations--mapping lat,long to x,y\n        ----------------------------------------------------------*/\n    function forward$8(p) {\n      var coords = {};\n      var S, T, U, V, W, temp, u, v;\n      p.x = p.x - this.lam0;\n      \n      if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\n        W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\n        \n        temp = 1 / W;\n        S = 0.5 * (W - temp);\n        T = 0.5 * (W + temp);\n        V = Math.sin(this.B * p.x);\n        U = (S * this.singam - V * this.cosgam) / T;\n            \n        if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\n          throw new Error();\n        }\n        \n        v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\n        temp = Math.cos(this.B * p.x);\n        \n        if (Math.abs(temp) < TOL) {\n          u = this.A * p.x;\n        } else {\n          u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\n        }    \n      } else {\n        v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\n        u = this.ArB * p.y;\n      }\n         \n      if (this.no_rot) {\n        coords.x = u;\n        coords.y = v;\n      } else {\n        u -= this.u_0;\n        coords.x = v * this.cosrot + u * this.sinrot;\n        coords.y = u * this.cosrot - v * this.sinrot;\n      }\n      \n      coords.x = (this.a * coords.x + this.x0);\n      coords.y = (this.a * coords.y + this.y0);\n      \n      return coords;\n    }\n\n    function inverse$8(p) {\n      var u, v, Qp, Sp, Tp, Vp, Up;\n      var coords = {};\n      \n      p.x = (p.x - this.x0) * (1.0 / this.a);\n      p.y = (p.y - this.y0) * (1.0 / this.a);\n\n      if (this.no_rot) {\n        v = p.y;\n        u = p.x;\n      } else {\n        v = p.x * this.cosrot - p.y * this.sinrot;\n        u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\n      }\n      \n      Qp = Math.exp(-this.BrA * v);\n      Sp = 0.5 * (Qp - 1 / Qp);\n      Tp = 0.5 * (Qp + 1 / Qp);\n      Vp = Math.sin(this.BrA * u);\n      Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\n      \n      if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\n        coords.x = 0;\n        coords.y = Up < 0 ? -HALF_PI : HALF_PI;\n      } else {\n        coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\n        coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\n        \n        if (coords.y === Infinity) {\n          throw new Error();\n        }\n            \n        coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\n      }\n      \n      coords.x += this.lam0;\n      \n      return coords;\n    }\n\n    var names$10 = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\n    var omerc = {\n      init: init$9,\n      forward: forward$8,\n      inverse: inverse$8,\n      names: names$10\n    };\n\n    function init$10() {\n      \n      //double lat0;                    /* the reference latitude               */\n      //double long0;                   /* the reference longitude              */\n      //double lat1;                    /* first standard parallel              */\n      //double lat2;                    /* second standard parallel             */\n      //double r_maj;                   /* major axis                           */\n      //double r_min;                   /* minor axis                           */\n      //double false_east;              /* x offset in meters                   */\n      //double false_north;             /* y offset in meters                   */\n      \n      //the above value can be set with proj4.defs\n      //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\n      if (!this.lat2) {\n        this.lat2 = this.lat1;\n      } //if lat2 is not defined\n      if (!this.k0) {\n        this.k0 = 1;\n      }\n      this.x0 = this.x0 || 0;\n      this.y0 = this.y0 || 0;\n      // Standard Parallels cannot be equal and on opposite sides of the equator\n      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n        return;\n      }\n\n      var temp = this.b / this.a;\n      this.e = Math.sqrt(1 - temp * temp);\n\n      var sin1 = Math.sin(this.lat1);\n      var cos1 = Math.cos(this.lat1);\n      var ms1 = msfnz(this.e, sin1, cos1);\n      var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n      var sin2 = Math.sin(this.lat2);\n      var cos2 = Math.cos(this.lat2);\n      var ms2 = msfnz(this.e, sin2, cos2);\n      var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n      var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n      if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n        this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n      }\n      else {\n        this.ns = sin1;\n      }\n      if (isNaN(this.ns)) {\n        this.ns = sin1;\n      }\n      this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n      this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n      if (!this.title) {\n        this.title = \"Lambert Conformal Conic\";\n      }\n    }\n\n    // Lambert Conformal conic forward equations--mapping lat,long to x,y\n    // -----------------------------------------------------------------\n    function forward$9(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      // singular cases :\n      if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n        lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n      }\n\n      var con = Math.abs(Math.abs(lat) - HALF_PI);\n      var ts, rh1;\n      if (con > EPSLN) {\n        ts = tsfnz(this.e, lat, Math.sin(lat));\n        rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n      }\n      else {\n        con = lat * this.ns;\n        if (con <= 0) {\n          return null;\n        }\n        rh1 = 0;\n      }\n      var theta = this.ns * adjust_lon(lon - this.long0);\n      p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n      p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n      return p;\n    }\n\n    // Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n    // -----------------------------------------------------------------\n    function inverse$9(p) {\n\n      var rh1, con, ts;\n      var lat, lon;\n      var x = (p.x - this.x0) / this.k0;\n      var y = (this.rh - (p.y - this.y0) / this.k0);\n      if (this.ns > 0) {\n        rh1 = Math.sqrt(x * x + y * y);\n        con = 1;\n      }\n      else {\n        rh1 = -Math.sqrt(x * x + y * y);\n        con = -1;\n      }\n      var theta = 0;\n      if (rh1 !== 0) {\n        theta = Math.atan2((con * x), (con * y));\n      }\n      if ((rh1 !== 0) || (this.ns > 0)) {\n        con = 1 / this.ns;\n        ts = Math.pow((rh1 / (this.a * this.f0)), con);\n        lat = phi2z(this.e, ts);\n        if (lat === -9999) {\n          return null;\n        }\n      }\n      else {\n        lat = -HALF_PI;\n      }\n      lon = adjust_lon(theta / this.ns + this.long0);\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$11 = [\n      \"Lambert Tangential Conformal Conic Projection\",\n      \"Lambert_Conformal_Conic\",\n      \"Lambert_Conformal_Conic_1SP\",\n      \"Lambert_Conformal_Conic_2SP\",\n      \"lcc\"\n    ];\n\n    var lcc = {\n      init: init$10,\n      forward: forward$9,\n      inverse: inverse$9,\n      names: names$11\n    };\n\n    function init$11() {\n      this.a = 6377397.155;\n      this.es = 0.006674372230614;\n      this.e = Math.sqrt(this.es);\n      if (!this.lat0) {\n        this.lat0 = 0.863937979737193;\n      }\n      if (!this.long0) {\n        this.long0 = 0.7417649320975901 - 0.308341501185665;\n      }\n      /* if scale not set default to 0.9999 */\n      if (!this.k0) {\n        this.k0 = 0.9999;\n      }\n      this.s45 = 0.785398163397448; /* 45 */\n      this.s90 = 2 * this.s45;\n      this.fi0 = this.lat0;\n      this.e2 = this.es;\n      this.e = Math.sqrt(this.e2);\n      this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n      this.uq = 1.04216856380474;\n      this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n      this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n      this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n      this.k1 = this.k0;\n      this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n      this.s0 = 1.37008346281555;\n      this.n = Math.sin(this.s0);\n      this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n      this.ad = this.s90 - this.uq;\n    }\n\n    /* ellipsoid */\n    /* calculate xy from lat/lon */\n    /* Constants, identical to inverse transform function */\n    function forward$10(p) {\n      var gfi, u, deltav, s, d, eps, ro;\n      var lon = p.x;\n      var lat = p.y;\n      var delta_lon = adjust_lon(lon - this.long0);\n      /* Transformation */\n      gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n      u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n      deltav = -delta_lon * this.alfa;\n      s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n      d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n      eps = this.n * d;\n      ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n      p.y = ro * Math.cos(eps) / 1;\n      p.x = ro * Math.sin(eps) / 1;\n\n      if (!this.czech) {\n        p.y *= -1;\n        p.x *= -1;\n      }\n      return (p);\n    }\n\n    /* calculate lat/lon from xy */\n    function inverse$10(p) {\n      var u, deltav, s, d, eps, ro, fi1;\n      var ok;\n\n      /* Transformation */\n      /* revert y, x*/\n      var tmp = p.x;\n      p.x = p.y;\n      p.y = tmp;\n      if (!this.czech) {\n        p.y *= -1;\n        p.x *= -1;\n      }\n      ro = Math.sqrt(p.x * p.x + p.y * p.y);\n      eps = Math.atan2(p.y, p.x);\n      d = eps / Math.sin(this.s0);\n      s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n      u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n      deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n      p.x = this.long0 - deltav / this.alfa;\n      fi1 = u;\n      ok = 0;\n      var iter = 0;\n      do {\n        p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n        if (Math.abs(fi1 - p.y) < 0.0000000001) {\n          ok = 1;\n        }\n        fi1 = p.y;\n        iter += 1;\n      } while (ok === 0 && iter < 15);\n      if (iter >= 15) {\n        return null;\n      }\n\n      return (p);\n    }\n\n    var names$12 = [\"Krovak\", \"krovak\"];\n    var krovak = {\n      init: init$11,\n      forward: forward$10,\n      inverse: inverse$10,\n      names: names$12\n    };\n\n    var mlfn = function(e0, e1, e2, e3, phi) {\n      return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n    };\n\n    var e0fn = function(x) {\n      return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n    };\n\n    var e1fn = function(x) {\n      return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n    };\n\n    var e2fn = function(x) {\n      return (0.05859375 * x * x * (1 + 0.75 * x));\n    };\n\n    var e3fn = function(x) {\n      return (x * x * x * (35 / 3072));\n    };\n\n    var gN = function(a, e, sinphi) {\n      var temp = e * sinphi;\n      return a / Math.sqrt(1 - temp * temp);\n    };\n\n    var adjust_lat = function(x) {\n      return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n    };\n\n    var imlfn = function(ml, e0, e1, e2, e3) {\n      var phi;\n      var dphi;\n\n      phi = ml / e0;\n      for (var i = 0; i < 15; i++) {\n        dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n        phi += dphi;\n        if (Math.abs(dphi) <= 0.0000000001) {\n          return phi;\n        }\n      }\n\n      //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n      return NaN;\n    };\n\n    function init$12() {\n      if (!this.sphere) {\n        this.e0 = e0fn(this.es);\n        this.e1 = e1fn(this.es);\n        this.e2 = e2fn(this.es);\n        this.e3 = e3fn(this.es);\n        this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n      }\n    }\n\n    /* Cassini forward equations--mapping lat,long to x,y\n      -----------------------------------------------------------------------*/\n    function forward$11(p) {\n\n      /* Forward equations\n          -----------------*/\n      var x, y;\n      var lam = p.x;\n      var phi = p.y;\n      lam = adjust_lon(lam - this.long0);\n\n      if (this.sphere) {\n        x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n        y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n      }\n      else {\n        //ellipsoid\n        var sinphi = Math.sin(phi);\n        var cosphi = Math.cos(phi);\n        var nl = gN(this.a, this.e, sinphi);\n        var tl = Math.tan(phi) * Math.tan(phi);\n        var al = lam * Math.cos(phi);\n        var asq = al * al;\n        var cl = this.es * cosphi * cosphi / (1 - this.es);\n        var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n        x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n        y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n      }\n\n      p.x = x + this.x0;\n      p.y = y + this.y0;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$11(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var x = p.x / this.a;\n      var y = p.y / this.a;\n      var phi, lam;\n\n      if (this.sphere) {\n        var dd = y + this.lat0;\n        phi = Math.asin(Math.sin(dd) * Math.cos(x));\n        lam = Math.atan2(Math.tan(x), Math.cos(dd));\n      }\n      else {\n        /* ellipsoid */\n        var ml1 = this.ml0 / this.a + y;\n        var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n        if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n          p.x = this.long0;\n          p.y = HALF_PI;\n          if (y < 0) {\n            p.y *= -1;\n          }\n          return p;\n        }\n        var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n        var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n        var tl1 = Math.pow(Math.tan(phi1), 2);\n        var dl = x * this.a / nl1;\n        var dsq = dl * dl;\n        phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n        lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n      }\n\n      p.x = adjust_lon(lam + this.long0);\n      p.y = adjust_lat(phi);\n      return p;\n\n    }\n\n    var names$13 = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\n    var cass = {\n      init: init$12,\n      forward: forward$11,\n      inverse: inverse$11,\n      names: names$13\n    };\n\n    var qsfnz = function(eccent, sinphi) {\n      var con;\n      if (eccent > 1.0e-7) {\n        con = eccent * sinphi;\n        return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n      }\n      else {\n        return (2 * sinphi);\n      }\n    };\n\n    /*\n      reference\n        \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n        The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n      */\n\n    var S_POLE = 1;\n\n    var N_POLE = 2;\n    var EQUIT = 3;\n    var OBLIQ = 4;\n\n    /* Initialize the Lambert Azimuthal Equal Area projection\n      ------------------------------------------------------*/\n    function init$13() {\n      var t = Math.abs(this.lat0);\n      if (Math.abs(t - HALF_PI) < EPSLN) {\n        this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n      }\n      else if (Math.abs(t) < EPSLN) {\n        this.mode = this.EQUIT;\n      }\n      else {\n        this.mode = this.OBLIQ;\n      }\n      if (this.es > 0) {\n        var sinphi;\n\n        this.qp = qsfnz(this.e, 1);\n        this.mmf = 0.5 / (1 - this.es);\n        this.apa = authset(this.es);\n        switch (this.mode) {\n        case this.N_POLE:\n          this.dd = 1;\n          break;\n        case this.S_POLE:\n          this.dd = 1;\n          break;\n        case this.EQUIT:\n          this.rq = Math.sqrt(0.5 * this.qp);\n          this.dd = 1 / this.rq;\n          this.xmf = 1;\n          this.ymf = 0.5 * this.qp;\n          break;\n        case this.OBLIQ:\n          this.rq = Math.sqrt(0.5 * this.qp);\n          sinphi = Math.sin(this.lat0);\n          this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n          this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n          this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n          this.ymf = (this.xmf = this.rq) / this.dd;\n          this.xmf *= this.dd;\n          break;\n        }\n      }\n      else {\n        if (this.mode === this.OBLIQ) {\n          this.sinph0 = Math.sin(this.lat0);\n          this.cosph0 = Math.cos(this.lat0);\n        }\n      }\n    }\n\n    /* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n      -----------------------------------------------------------------------*/\n    function forward$12(p) {\n\n      /* Forward equations\n          -----------------*/\n      var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n      var lam = p.x;\n      var phi = p.y;\n\n      lam = adjust_lon(lam - this.long0);\n      if (this.sphere) {\n        sinphi = Math.sin(phi);\n        cosphi = Math.cos(phi);\n        coslam = Math.cos(lam);\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n          if (y <= EPSLN) {\n            return null;\n          }\n          y = Math.sqrt(2 / y);\n          x = y * cosphi * Math.sin(lam);\n          y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n        }\n        else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n          if (this.mode === this.N_POLE) {\n            coslam = -coslam;\n          }\n          if (Math.abs(phi + this.lat0) < EPSLN) {\n            return null;\n          }\n          y = FORTPI - phi * 0.5;\n          y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n          x = y * Math.sin(lam);\n          y *= coslam;\n        }\n      }\n      else {\n        sinb = 0;\n        cosb = 0;\n        b = 0;\n        coslam = Math.cos(lam);\n        sinlam = Math.sin(lam);\n        sinphi = Math.sin(phi);\n        q = qsfnz(this.e, sinphi);\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          sinb = q / this.qp;\n          cosb = Math.sqrt(1 - sinb * sinb);\n        }\n        switch (this.mode) {\n        case this.OBLIQ:\n          b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n          break;\n        case this.EQUIT:\n          b = 1 + cosb * coslam;\n          break;\n        case this.N_POLE:\n          b = HALF_PI + phi;\n          q = this.qp - q;\n          break;\n        case this.S_POLE:\n          b = phi - HALF_PI;\n          q = this.qp + q;\n          break;\n        }\n        if (Math.abs(b) < EPSLN) {\n          return null;\n        }\n        switch (this.mode) {\n        case this.OBLIQ:\n        case this.EQUIT:\n          b = Math.sqrt(2 / b);\n          if (this.mode === this.OBLIQ) {\n            y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n          }\n          else {\n            y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n          }\n          x = this.xmf * b * cosb * sinlam;\n          break;\n        case this.N_POLE:\n        case this.S_POLE:\n          if (q >= 0) {\n            x = (b = Math.sqrt(q)) * sinlam;\n            y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n          }\n          else {\n            x = y = 0;\n          }\n          break;\n        }\n      }\n\n      p.x = this.a * x + this.x0;\n      p.y = this.a * y + this.y0;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$12(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var x = p.x / this.a;\n      var y = p.y / this.a;\n      var lam, phi, cCe, sCe, q, rho, ab;\n      if (this.sphere) {\n        var cosz = 0,\n          rh, sinz = 0;\n\n        rh = Math.sqrt(x * x + y * y);\n        phi = rh * 0.5;\n        if (phi > 1) {\n          return null;\n        }\n        phi = 2 * Math.asin(phi);\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          sinz = Math.sin(phi);\n          cosz = Math.cos(phi);\n        }\n        switch (this.mode) {\n        case this.EQUIT:\n          phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n          x *= sinz;\n          y = cosz * rh;\n          break;\n        case this.OBLIQ:\n          phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n          x *= sinz * this.cosph0;\n          y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n          break;\n        case this.N_POLE:\n          y = -y;\n          phi = HALF_PI - phi;\n          break;\n        case this.S_POLE:\n          phi -= HALF_PI;\n          break;\n        }\n        lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n      }\n      else {\n        ab = 0;\n        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n          x /= this.dd;\n          y *= this.dd;\n          rho = Math.sqrt(x * x + y * y);\n          if (rho < EPSLN) {\n            p.x = this.long0;\n            p.y = this.lat0;\n            return p;\n          }\n          sCe = 2 * Math.asin(0.5 * rho / this.rq);\n          cCe = Math.cos(sCe);\n          x *= (sCe = Math.sin(sCe));\n          if (this.mode === this.OBLIQ) {\n            ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n            q = this.qp * ab;\n            y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n          }\n          else {\n            ab = y * sCe / rho;\n            q = this.qp * ab;\n            y = rho * cCe;\n          }\n        }\n        else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n          if (this.mode === this.N_POLE) {\n            y = -y;\n          }\n          q = (x * x + y * y);\n          if (!q) {\n            p.x = this.long0;\n            p.y = this.lat0;\n            return p;\n          }\n          ab = 1 - q / this.qp;\n          if (this.mode === this.S_POLE) {\n            ab = -ab;\n          }\n        }\n        lam = Math.atan2(x, y);\n        phi = authlat(Math.asin(ab), this.apa);\n      }\n\n      p.x = adjust_lon(this.long0 + lam);\n      p.y = phi;\n      return p;\n    }\n\n    /* determine latitude from authalic latitude */\n    var P00 = 0.33333333333333333333;\n\n    var P01 = 0.17222222222222222222;\n    var P02 = 0.10257936507936507936;\n    var P10 = 0.06388888888888888888;\n    var P11 = 0.06640211640211640211;\n    var P20 = 0.01641501294219154443;\n\n    function authset(es) {\n      var t;\n      var APA = [];\n      APA[0] = es * P00;\n      t = es * es;\n      APA[0] += t * P01;\n      APA[1] = t * P10;\n      t *= es;\n      APA[0] += t * P02;\n      APA[1] += t * P11;\n      APA[2] = t * P20;\n      return APA;\n    }\n\n    function authlat(beta, APA) {\n      var t = beta + beta;\n      return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n    }\n\n    var names$14 = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\n    var laea = {\n      init: init$13,\n      forward: forward$12,\n      inverse: inverse$12,\n      names: names$14,\n      S_POLE: S_POLE,\n      N_POLE: N_POLE,\n      EQUIT: EQUIT,\n      OBLIQ: OBLIQ\n    };\n\n    var asinz = function(x) {\n      if (Math.abs(x) > 1) {\n        x = (x > 1) ? 1 : -1;\n      }\n      return Math.asin(x);\n    };\n\n    function init$14() {\n\n      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n        return;\n      }\n      this.temp = this.b / this.a;\n      this.es = 1 - Math.pow(this.temp, 2);\n      this.e3 = Math.sqrt(this.es);\n\n      this.sin_po = Math.sin(this.lat1);\n      this.cos_po = Math.cos(this.lat1);\n      this.t1 = this.sin_po;\n      this.con = this.sin_po;\n      this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n      this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n      this.sin_po = Math.sin(this.lat2);\n      this.cos_po = Math.cos(this.lat2);\n      this.t2 = this.sin_po;\n      this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n      this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n      this.sin_po = Math.sin(this.lat0);\n      this.cos_po = Math.cos(this.lat0);\n      this.t3 = this.sin_po;\n      this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n      if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n        this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n      }\n      else {\n        this.ns0 = this.con;\n      }\n      this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n      this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n    }\n\n    /* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n      -------------------------------------------------------------------*/\n    function forward$13(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      this.sin_phi = Math.sin(lat);\n      this.cos_phi = Math.cos(lat);\n\n      var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n      var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n      var theta = this.ns0 * adjust_lon(lon - this.long0);\n      var x = rh1 * Math.sin(theta) + this.x0;\n      var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$13(p) {\n      var rh1, qs, con, theta, lon, lat;\n\n      p.x -= this.x0;\n      p.y = this.rh - p.y + this.y0;\n      if (this.ns0 >= 0) {\n        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n        con = 1;\n      }\n      else {\n        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n        con = -1;\n      }\n      theta = 0;\n      if (rh1 !== 0) {\n        theta = Math.atan2(con * p.x, con * p.y);\n      }\n      con = rh1 * this.ns0 / this.a;\n      if (this.sphere) {\n        lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n      }\n      else {\n        qs = (this.c - con * con) / this.ns0;\n        lat = this.phi1z(this.e3, qs);\n      }\n\n      lon = adjust_lon(theta / this.ns0 + this.long0);\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    /* Function to compute phi1, the latitude for the inverse of the\n       Albers Conical Equal-Area projection.\n    -------------------------------------------*/\n    function phi1z(eccent, qs) {\n      var sinphi, cosphi, con, com, dphi;\n      var phi = asinz(0.5 * qs);\n      if (eccent < EPSLN) {\n        return phi;\n      }\n\n      var eccnts = eccent * eccent;\n      for (var i = 1; i <= 25; i++) {\n        sinphi = Math.sin(phi);\n        cosphi = Math.cos(phi);\n        con = eccent * sinphi;\n        com = 1 - con * con;\n        dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n        phi = phi + dphi;\n        if (Math.abs(dphi) <= 1e-7) {\n          return phi;\n        }\n      }\n      return null;\n    }\n\n    var names$15 = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\n    var aea = {\n      init: init$14,\n      forward: forward$13,\n      inverse: inverse$13,\n      names: names$15,\n      phi1z: phi1z\n    };\n\n    /*\n      reference:\n        Wolfram Mathworld \"Gnomonic Projection\"\n        http://mathworld.wolfram.com/GnomonicProjection.html\n        Accessed: 12th November 2009\n      */\n    function init$15() {\n\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      this.sin_p14 = Math.sin(this.lat0);\n      this.cos_p14 = Math.cos(this.lat0);\n      // Approximation for projecting points to the horizon (infinity)\n      this.infinity_dist = 1000 * this.a;\n      this.rc = 1;\n    }\n\n    /* Gnomonic forward equations--mapping lat,long to x,y\n        ---------------------------------------------------*/\n    function forward$14(p) {\n      var sinphi, cosphi; /* sin and cos value        */\n      var dlon; /* delta longitude value      */\n      var coslon; /* cos of longitude        */\n      var ksp; /* scale factor          */\n      var g;\n      var x, y;\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n          -----------------*/\n      dlon = adjust_lon(lon - this.long0);\n\n      sinphi = Math.sin(lat);\n      cosphi = Math.cos(lat);\n\n      coslon = Math.cos(dlon);\n      g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n      ksp = 1;\n      if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n        x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n      }\n      else {\n\n        // Point is in the opposing hemisphere and is unprojectable\n        // We still need to return a reasonable point, so we project\n        // to infinity, on a bearing\n        // equivalent to the northern hemisphere equivalent\n        // This is a reasonable approximation for short shapes and lines that\n        // straddle the horizon.\n\n        x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n        y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n      }\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$14(p) {\n      var rh; /* Rho */\n      var sinc, cosc;\n      var c;\n      var lon, lat;\n\n      /* Inverse equations\n          -----------------*/\n      p.x = (p.x - this.x0) / this.a;\n      p.y = (p.y - this.y0) / this.a;\n\n      p.x /= this.k0;\n      p.y /= this.k0;\n\n      if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n        c = Math.atan2(rh, this.rc);\n        sinc = Math.sin(c);\n        cosc = Math.cos(c);\n\n        lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n        lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n        lon = adjust_lon(this.long0 + lon);\n      }\n      else {\n        lat = this.phic0;\n        lon = 0;\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$16 = [\"gnom\"];\n    var gnom = {\n      init: init$15,\n      forward: forward$14,\n      inverse: inverse$14,\n      names: names$16\n    };\n\n    var iqsfnz = function(eccent, q) {\n      var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n      if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n        if (q < 0) {\n          return (-1 * HALF_PI);\n        }\n        else {\n          return HALF_PI;\n        }\n      }\n      //var phi = 0.5* q/(1-eccent*eccent);\n      var phi = Math.asin(0.5 * q);\n      var dphi;\n      var sin_phi;\n      var cos_phi;\n      var con;\n      for (var i = 0; i < 30; i++) {\n        sin_phi = Math.sin(phi);\n        cos_phi = Math.cos(phi);\n        con = eccent * sin_phi;\n        dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n        phi += dphi;\n        if (Math.abs(dphi) <= 0.0000000001) {\n          return phi;\n        }\n      }\n\n      //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n      return NaN;\n    };\n\n    /*\n      reference:\n        \"Cartographic Projection Procedures for the UNIX Environment-\n        A User's Manual\" by Gerald I. Evenden,\n        USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n    */\n    function init$16() {\n      //no-op\n      if (!this.sphere) {\n        this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n      }\n    }\n\n    /* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n        ------------------------------------------------------------*/\n    function forward$15(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var x, y;\n      /* Forward equations\n          -----------------*/\n      var dlon = adjust_lon(lon - this.long0);\n      if (this.sphere) {\n        x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n        y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n      }\n      else {\n        var qs = qsfnz(this.e, Math.sin(lat));\n        x = this.x0 + this.a * this.k0 * dlon;\n        y = this.y0 + this.a * qs * 0.5 / this.k0;\n      }\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n        ------------------------------------------------------------*/\n    function inverse$15(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var lon, lat;\n\n      if (this.sphere) {\n        lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n        lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n      }\n      else {\n        lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n        lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$17 = [\"cea\"];\n    var cea = {\n      init: init$16,\n      forward: forward$15,\n      inverse: inverse$15,\n      names: names$17\n    };\n\n    function init$17() {\n\n      this.x0 = this.x0 || 0;\n      this.y0 = this.y0 || 0;\n      this.lat0 = this.lat0 || 0;\n      this.long0 = this.long0 || 0;\n      this.lat_ts = this.lat_ts || 0;\n      this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n      this.rc = Math.cos(this.lat_ts);\n    }\n\n    // forward equations--mapping lat,long to x,y\n    // -----------------------------------------------------------------\n    function forward$16(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      var dlon = adjust_lon(lon - this.long0);\n      var dlat = adjust_lat(lat - this.lat0);\n      p.x = this.x0 + (this.a * dlon * this.rc);\n      p.y = this.y0 + (this.a * dlat);\n      return p;\n    }\n\n    // inverse equations--mapping x,y to lat/long\n    // -----------------------------------------------------------------\n    function inverse$16(p) {\n\n      var x = p.x;\n      var y = p.y;\n\n      p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n      p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n      return p;\n    }\n\n    var names$18 = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\n    var eqc = {\n      init: init$17,\n      forward: forward$16,\n      inverse: inverse$16,\n      names: names$18\n    };\n\n    var MAX_ITER$2 = 20;\n\n    function init$18() {\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      this.temp = this.b / this.a;\n      this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n      this.e = Math.sqrt(this.es);\n      this.e0 = e0fn(this.es);\n      this.e1 = e1fn(this.es);\n      this.e2 = e2fn(this.es);\n      this.e3 = e3fn(this.es);\n      this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n    }\n\n    /* Polyconic forward equations--mapping lat,long to x,y\n        ---------------------------------------------------*/\n    function forward$17(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var x, y, el;\n      var dlon = adjust_lon(lon - this.long0);\n      el = dlon * Math.sin(lat);\n      if (this.sphere) {\n        if (Math.abs(lat) <= EPSLN) {\n          x = this.a * dlon;\n          y = -1 * this.a * this.lat0;\n        }\n        else {\n          x = this.a * Math.sin(el) / Math.tan(lat);\n          y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n        }\n      }\n      else {\n        if (Math.abs(lat) <= EPSLN) {\n          x = this.a * dlon;\n          y = -1 * this.ml0;\n        }\n        else {\n          var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n          x = nl * Math.sin(el);\n          y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n        }\n\n      }\n      p.x = x + this.x0;\n      p.y = y + this.y0;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$17(p) {\n      var lon, lat, x, y, i;\n      var al, bl;\n      var phi, dphi;\n      x = p.x - this.x0;\n      y = p.y - this.y0;\n\n      if (this.sphere) {\n        if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n          lon = adjust_lon(x / this.a + this.long0);\n          lat = 0;\n        }\n        else {\n          al = this.lat0 + y / this.a;\n          bl = x * x / this.a / this.a + al * al;\n          phi = al;\n          var tanphi;\n          for (i = MAX_ITER$2; i; --i) {\n            tanphi = Math.tan(phi);\n            dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n            phi += dphi;\n            if (Math.abs(dphi) <= EPSLN) {\n              lat = phi;\n              break;\n            }\n          }\n          lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n        }\n      }\n      else {\n        if (Math.abs(y + this.ml0) <= EPSLN) {\n          lat = 0;\n          lon = adjust_lon(this.long0 + x / this.a);\n        }\n        else {\n\n          al = (this.ml0 + y) / this.a;\n          bl = x * x / this.a / this.a + al * al;\n          phi = al;\n          var cl, mln, mlnp, ma;\n          var con;\n          for (i = MAX_ITER$2; i; --i) {\n            con = this.e * Math.sin(phi);\n            cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n            mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n            mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n            ma = mln / this.a;\n            dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n            phi -= dphi;\n            if (Math.abs(dphi) <= EPSLN) {\n              lat = phi;\n              break;\n            }\n          }\n\n          //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n          cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n          lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n        }\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$19 = [\"Polyconic\", \"poly\"];\n    var poly = {\n      init: init$18,\n      forward: forward$17,\n      inverse: inverse$17,\n      names: names$19\n    };\n\n    /*\n      reference\n        Department of Land and Survey Technical Circular 1973/32\n          http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n        OSG Technical Report 4.1\n          http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n      */\n\n    /**\n     * iterations: Number of iterations to refine inverse transform.\n     *     0 -> km accuracy\n     *     1 -> m accuracy -- suitable for most mapping applications\n     *     2 -> mm accuracy\n     */\n\n\n    function init$19() {\n      this.A = [];\n      this.A[1] = 0.6399175073;\n      this.A[2] = -0.1358797613;\n      this.A[3] = 0.063294409;\n      this.A[4] = -0.02526853;\n      this.A[5] = 0.0117879;\n      this.A[6] = -0.0055161;\n      this.A[7] = 0.0026906;\n      this.A[8] = -0.001333;\n      this.A[9] = 0.00067;\n      this.A[10] = -0.00034;\n\n      this.B_re = [];\n      this.B_im = [];\n      this.B_re[1] = 0.7557853228;\n      this.B_im[1] = 0;\n      this.B_re[2] = 0.249204646;\n      this.B_im[2] = 0.003371507;\n      this.B_re[3] = -0.001541739;\n      this.B_im[3] = 0.041058560;\n      this.B_re[4] = -0.10162907;\n      this.B_im[4] = 0.01727609;\n      this.B_re[5] = -0.26623489;\n      this.B_im[5] = -0.36249218;\n      this.B_re[6] = -0.6870983;\n      this.B_im[6] = -1.1651967;\n\n      this.C_re = [];\n      this.C_im = [];\n      this.C_re[1] = 1.3231270439;\n      this.C_im[1] = 0;\n      this.C_re[2] = -0.577245789;\n      this.C_im[2] = -0.007809598;\n      this.C_re[3] = 0.508307513;\n      this.C_im[3] = -0.112208952;\n      this.C_re[4] = -0.15094762;\n      this.C_im[4] = 0.18200602;\n      this.C_re[5] = 1.01418179;\n      this.C_im[5] = 1.64497696;\n      this.C_re[6] = 1.9660549;\n      this.C_im[6] = 2.5127645;\n\n      this.D = [];\n      this.D[1] = 1.5627014243;\n      this.D[2] = 0.5185406398;\n      this.D[3] = -0.03333098;\n      this.D[4] = -0.1052906;\n      this.D[5] = -0.0368594;\n      this.D[6] = 0.007317;\n      this.D[7] = 0.01220;\n      this.D[8] = 0.00394;\n      this.D[9] = -0.0013;\n    }\n\n    /**\n        New Zealand Map Grid Forward  - long/lat to x/y\n        long/lat in radians\n      */\n    function forward$18(p) {\n      var n;\n      var lon = p.x;\n      var lat = p.y;\n\n      var delta_lat = lat - this.lat0;\n      var delta_lon = lon - this.long0;\n\n      // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n      // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n      var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n      var d_lambda = delta_lon;\n      var d_phi_n = 1; // d_phi^0\n\n      var d_psi = 0;\n      for (n = 1; n <= 10; n++) {\n        d_phi_n = d_phi_n * d_phi;\n        d_psi = d_psi + this.A[n] * d_phi_n;\n      }\n\n      // 2. Calculate theta\n      var th_re = d_psi;\n      var th_im = d_lambda;\n\n      // 3. Calculate z\n      var th_n_re = 1;\n      var th_n_im = 0; // theta^0\n      var th_n_re1;\n      var th_n_im1;\n\n      var z_re = 0;\n      var z_im = 0;\n      for (n = 1; n <= 6; n++) {\n        th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n        th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n        th_n_re = th_n_re1;\n        th_n_im = th_n_im1;\n        z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n        z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n      }\n\n      // 4. Calculate easting and northing\n      p.x = (z_im * this.a) + this.x0;\n      p.y = (z_re * this.a) + this.y0;\n\n      return p;\n    }\n\n    /**\n        New Zealand Map Grid Inverse  -  x/y to long/lat\n      */\n    function inverse$18(p) {\n      var n;\n      var x = p.x;\n      var y = p.y;\n\n      var delta_x = x - this.x0;\n      var delta_y = y - this.y0;\n\n      // 1. Calculate z\n      var z_re = delta_y / this.a;\n      var z_im = delta_x / this.a;\n\n      // 2a. Calculate theta - first approximation gives km accuracy\n      var z_n_re = 1;\n      var z_n_im = 0; // z^0\n      var z_n_re1;\n      var z_n_im1;\n\n      var th_re = 0;\n      var th_im = 0;\n      for (n = 1; n <= 6; n++) {\n        z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n        z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n        z_n_re = z_n_re1;\n        z_n_im = z_n_im1;\n        th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n        th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n      }\n\n      // 2b. Iterate to refine the accuracy of the calculation\n      //        0 iterations gives km accuracy\n      //        1 iteration gives m accuracy -- good enough for most mapping applications\n      //        2 iterations bives mm accuracy\n      for (var i = 0; i < this.iterations; i++) {\n        var th_n_re = th_re;\n        var th_n_im = th_im;\n        var th_n_re1;\n        var th_n_im1;\n\n        var num_re = z_re;\n        var num_im = z_im;\n        for (n = 2; n <= 6; n++) {\n          th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n          th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n          th_n_re = th_n_re1;\n          th_n_im = th_n_im1;\n          num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n          num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n        }\n\n        th_n_re = 1;\n        th_n_im = 0;\n        var den_re = this.B_re[1];\n        var den_im = this.B_im[1];\n        for (n = 2; n <= 6; n++) {\n          th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n          th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n          th_n_re = th_n_re1;\n          th_n_im = th_n_im1;\n          den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n          den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n        }\n\n        // Complex division\n        var den2 = den_re * den_re + den_im * den_im;\n        th_re = (num_re * den_re + num_im * den_im) / den2;\n        th_im = (num_im * den_re - num_re * den_im) / den2;\n      }\n\n      // 3. Calculate d_phi              ...                                    // and d_lambda\n      var d_psi = th_re;\n      var d_lambda = th_im;\n      var d_psi_n = 1; // d_psi^0\n\n      var d_phi = 0;\n      for (n = 1; n <= 9; n++) {\n        d_psi_n = d_psi_n * d_psi;\n        d_phi = d_phi + this.D[n] * d_psi_n;\n      }\n\n      // 4. Calculate latitude and longitude\n      // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n      var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n      var lon = this.long0 + d_lambda;\n\n      p.x = lon;\n      p.y = lat;\n\n      return p;\n    }\n\n    var names$20 = [\"New_Zealand_Map_Grid\", \"nzmg\"];\n    var nzmg = {\n      init: init$19,\n      forward: forward$18,\n      inverse: inverse$18,\n      names: names$20\n    };\n\n    /*\n      reference\n        \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n        The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n      */\n\n\n    /* Initialize the Miller Cylindrical projection\n      -------------------------------------------*/\n    function init$20() {\n      //no-op\n    }\n\n    /* Miller Cylindrical forward equations--mapping lat,long to x,y\n        ------------------------------------------------------------*/\n    function forward$19(p) {\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n          -----------------*/\n      var dlon = adjust_lon(lon - this.long0);\n      var x = this.x0 + this.a * dlon;\n      var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Miller Cylindrical inverse equations--mapping x,y to lat/long\n        ------------------------------------------------------------*/\n    function inverse$19(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n\n      var lon = adjust_lon(this.long0 + p.x / this.a);\n      var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$21 = [\"Miller_Cylindrical\", \"mill\"];\n    var mill = {\n      init: init$20,\n      forward: forward$19,\n      inverse: inverse$19,\n      names: names$21\n    };\n\n    var MAX_ITER$3 = 20;\n    function init$21() {\n      /* Place parameters in static storage for common use\n        -------------------------------------------------*/\n\n\n      if (!this.sphere) {\n        this.en = pj_enfn(this.es);\n      }\n      else {\n        this.n = 1;\n        this.m = 0;\n        this.es = 0;\n        this.C_y = Math.sqrt((this.m + 1) / this.n);\n        this.C_x = this.C_y / (this.m + 1);\n      }\n\n    }\n\n    /* Sinusoidal forward equations--mapping lat,long to x,y\n      -----------------------------------------------------*/\n    function forward$20(p) {\n      var x, y;\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n        -----------------*/\n      lon = adjust_lon(lon - this.long0);\n\n      if (this.sphere) {\n        if (!this.m) {\n          lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n        }\n        else {\n          var k = this.n * Math.sin(lat);\n          for (var i = MAX_ITER$3; i; --i) {\n            var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n            lat -= V;\n            if (Math.abs(V) < EPSLN) {\n              break;\n            }\n          }\n        }\n        x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n        y = this.a * this.C_y * lat;\n\n      }\n      else {\n\n        var s = Math.sin(lat);\n        var c = Math.cos(lat);\n        y = this.a * pj_mlfn(lat, s, c, this.en);\n        x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n      }\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$20(p) {\n      var lat, temp, lon, s;\n\n      p.x -= this.x0;\n      lon = p.x / this.a;\n      p.y -= this.y0;\n      lat = p.y / this.a;\n\n      if (this.sphere) {\n        lat /= this.C_y;\n        lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n        if (this.m) {\n          lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n        }\n        else if (this.n !== 1) {\n          lat = asinz(Math.sin(lat) / this.n);\n        }\n        lon = adjust_lon(lon + this.long0);\n        lat = adjust_lat(lat);\n      }\n      else {\n        lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n        s = Math.abs(lat);\n        if (s < HALF_PI) {\n          s = Math.sin(lat);\n          temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n          //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n          lon = adjust_lon(temp);\n        }\n        else if ((s - EPSLN) < HALF_PI) {\n          lon = this.long0;\n        }\n      }\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$22 = [\"Sinusoidal\", \"sinu\"];\n    var sinu = {\n      init: init$21,\n      forward: forward$20,\n      inverse: inverse$20,\n      names: names$22\n    };\n\n    function init$22() {}\n    /* Mollweide forward equations--mapping lat,long to x,y\n        ----------------------------------------------------*/\n    function forward$21(p) {\n\n      /* Forward equations\n          -----------------*/\n      var lon = p.x;\n      var lat = p.y;\n\n      var delta_lon = adjust_lon(lon - this.long0);\n      var theta = lat;\n      var con = Math.PI * Math.sin(lat);\n\n      /* Iterate using the Newton-Raphson method to find theta\n          -----------------------------------------------------*/\n      while (true) {\n        var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n        theta += delta_theta;\n        if (Math.abs(delta_theta) < EPSLN) {\n          break;\n        }\n      }\n      theta /= 2;\n\n      /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n           this is done here because of precision problems with \"cos(theta)\"\n           --------------------------------------------------------------------------*/\n      if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n        delta_lon = 0;\n      }\n      var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n      var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$21(p) {\n      var theta;\n      var arg;\n\n      /* Inverse equations\n          -----------------*/\n      p.x -= this.x0;\n      p.y -= this.y0;\n      arg = p.y / (1.4142135623731 * this.a);\n\n      /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n           a number very close to one is used instead.\n           -------------------------------------------------------------------*/\n      if (Math.abs(arg) > 0.999999999999) {\n        arg = 0.999999999999;\n      }\n      theta = Math.asin(arg);\n      var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n      if (lon < (-Math.PI)) {\n        lon = -Math.PI;\n      }\n      if (lon > Math.PI) {\n        lon = Math.PI;\n      }\n      arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n      if (Math.abs(arg) > 1) {\n        arg = 1;\n      }\n      var lat = Math.asin(arg);\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$23 = [\"Mollweide\", \"moll\"];\n    var moll = {\n      init: init$22,\n      forward: forward$21,\n      inverse: inverse$21,\n      names: names$23\n    };\n\n    function init$23() {\n\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      // Standard Parallels cannot be equal and on opposite sides of the equator\n      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n        return;\n      }\n      this.lat2 = this.lat2 || this.lat1;\n      this.temp = this.b / this.a;\n      this.es = 1 - Math.pow(this.temp, 2);\n      this.e = Math.sqrt(this.es);\n      this.e0 = e0fn(this.es);\n      this.e1 = e1fn(this.es);\n      this.e2 = e2fn(this.es);\n      this.e3 = e3fn(this.es);\n\n      this.sinphi = Math.sin(this.lat1);\n      this.cosphi = Math.cos(this.lat1);\n\n      this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n      this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n      if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n        this.ns = this.sinphi;\n      }\n      else {\n        this.sinphi = Math.sin(this.lat2);\n        this.cosphi = Math.cos(this.lat2);\n        this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n        this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n        this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n      }\n      this.g = this.ml1 + this.ms1 / this.ns;\n      this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n      this.rh = this.a * (this.g - this.ml0);\n    }\n\n    /* Equidistant Conic forward equations--mapping lat,long to x,y\n      -----------------------------------------------------------*/\n    function forward$22(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var rh1;\n\n      /* Forward equations\n          -----------------*/\n      if (this.sphere) {\n        rh1 = this.a * (this.g - lat);\n      }\n      else {\n        var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n        rh1 = this.a * (this.g - ml);\n      }\n      var theta = this.ns * adjust_lon(lon - this.long0);\n      var x = this.x0 + rh1 * Math.sin(theta);\n      var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Inverse equations\n      -----------------*/\n    function inverse$22(p) {\n      p.x -= this.x0;\n      p.y = this.rh - p.y + this.y0;\n      var con, rh1, lat, lon;\n      if (this.ns >= 0) {\n        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n        con = 1;\n      }\n      else {\n        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n        con = -1;\n      }\n      var theta = 0;\n      if (rh1 !== 0) {\n        theta = Math.atan2(con * p.x, con * p.y);\n      }\n\n      if (this.sphere) {\n        lon = adjust_lon(this.long0 + theta / this.ns);\n        lat = adjust_lat(this.g - rh1 / this.a);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      else {\n        var ml = this.g - rh1 / this.a;\n        lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n        lon = adjust_lon(this.long0 + theta / this.ns);\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n\n    }\n\n    var names$24 = [\"Equidistant_Conic\", \"eqdc\"];\n    var eqdc = {\n      init: init$23,\n      forward: forward$22,\n      inverse: inverse$22,\n      names: names$24\n    };\n\n    /* Initialize the Van Der Grinten projection\n      ----------------------------------------*/\n    function init$24() {\n      //this.R = 6370997; //Radius of earth\n      this.R = this.a;\n    }\n\n    function forward$23(p) {\n\n      var lon = p.x;\n      var lat = p.y;\n\n      /* Forward equations\n        -----------------*/\n      var dlon = adjust_lon(lon - this.long0);\n      var x, y;\n\n      if (Math.abs(lat) <= EPSLN) {\n        x = this.x0 + this.R * dlon;\n        y = this.y0;\n      }\n      var theta = asinz(2 * Math.abs(lat / Math.PI));\n      if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n        x = this.x0;\n        if (lat >= 0) {\n          y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n        }\n        else {\n          y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n        }\n        //  return(OK);\n      }\n      var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n      var asq = al * al;\n      var sinth = Math.sin(theta);\n      var costh = Math.cos(theta);\n\n      var g = costh / (sinth + costh - 1);\n      var gsq = g * g;\n      var m = g * (2 / sinth - 1);\n      var msq = m * m;\n      var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n      if (dlon < 0) {\n        con = -con;\n      }\n      x = this.x0 + con;\n      //con = Math.abs(con / (Math.PI * this.R));\n      var q = asq + g;\n      con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n      if (lat >= 0) {\n        //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n        y = this.y0 + con;\n      }\n      else {\n        //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n        y = this.y0 - con;\n      }\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    /* Van Der Grinten inverse equations--mapping x,y to lat/long\n      ---------------------------------------------------------*/\n    function inverse$23(p) {\n      var lon, lat;\n      var xx, yy, xys, c1, c2, c3;\n      var a1;\n      var m1;\n      var con;\n      var th1;\n      var d;\n\n      /* inverse equations\n        -----------------*/\n      p.x -= this.x0;\n      p.y -= this.y0;\n      con = Math.PI * this.R;\n      xx = p.x / con;\n      yy = p.y / con;\n      xys = xx * xx + yy * yy;\n      c1 = -Math.abs(yy) * (1 + xys);\n      c2 = c1 - 2 * yy * yy + xx * xx;\n      c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n      d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n      a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n      m1 = 2 * Math.sqrt(-a1 / 3);\n      con = ((3 * d) / a1) / m1;\n      if (Math.abs(con) > 1) {\n        if (con >= 0) {\n          con = 1;\n        }\n        else {\n          con = -1;\n        }\n      }\n      th1 = Math.acos(con) / 3;\n      if (p.y >= 0) {\n        lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n      }\n      else {\n        lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n      }\n\n      if (Math.abs(xx) < EPSLN) {\n        lon = this.long0;\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n      }\n\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$25 = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\n    var vandg = {\n      init: init$24,\n      forward: forward$23,\n      inverse: inverse$23,\n      names: names$25\n    };\n\n    function init$25() {\n      this.sin_p12 = Math.sin(this.lat0);\n      this.cos_p12 = Math.cos(this.lat0);\n    }\n\n    function forward$24(p) {\n      var lon = p.x;\n      var lat = p.y;\n      var sinphi = Math.sin(p.y);\n      var cosphi = Math.cos(p.y);\n      var dlon = adjust_lon(lon - this.long0);\n      var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n      if (this.sphere) {\n        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n          //North Pole case\n          p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n          p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n          return p;\n        }\n        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n          //South Pole case\n          p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n          p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n          return p;\n        }\n        else {\n          //default case\n          cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n          c = Math.acos(cos_c);\n          kp = c ? c / Math.sin(c) : 1;\n          p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n          p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n          return p;\n        }\n      }\n      else {\n        e0 = e0fn(this.es);\n        e1 = e1fn(this.es);\n        e2 = e2fn(this.es);\n        e3 = e3fn(this.es);\n        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n          //North Pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n          p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n          p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n          return p;\n        }\n        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n          //South Pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n          p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n          p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n          return p;\n        }\n        else {\n          //Default case\n          tanphi = sinphi / cosphi;\n          Nl1 = gN(this.a, this.e, this.sin_p12);\n          Nl = gN(this.a, this.e, sinphi);\n          psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n          Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n          if (Az === 0) {\n            s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n          }\n          else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n            s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n          }\n          else {\n            s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n          }\n          G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n          H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n          GH = G * H;\n          Hs = H * H;\n          s2 = s * s;\n          s3 = s2 * s;\n          s4 = s3 * s;\n          s5 = s4 * s;\n          c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n          p.x = this.x0 + c * Math.sin(Az);\n          p.y = this.y0 + c * Math.cos(Az);\n          return p;\n        }\n      }\n\n\n    }\n\n    function inverse$24(p) {\n      p.x -= this.x0;\n      p.y -= this.y0;\n      var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n      if (this.sphere) {\n        rh = Math.sqrt(p.x * p.x + p.y * p.y);\n        if (rh > (2 * HALF_PI * this.a)) {\n          return;\n        }\n        z = rh / this.a;\n\n        sinz = Math.sin(z);\n        cosz = Math.cos(z);\n\n        lon = this.long0;\n        if (Math.abs(rh) <= EPSLN) {\n          lat = this.lat0;\n        }\n        else {\n          lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n          con = Math.abs(this.lat0) - HALF_PI;\n          if (Math.abs(con) <= EPSLN) {\n            if (this.lat0 >= 0) {\n              lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n            }\n            else {\n              lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n            }\n          }\n          else {\n            /*con = cosz - this.sin_p12 * Math.sin(lat);\n            if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n              //no-op, just keep the lon value as is\n            } else {\n              var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n              lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n            }*/\n            lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n          }\n        }\n\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      else {\n        e0 = e0fn(this.es);\n        e1 = e1fn(this.es);\n        e2 = e2fn(this.es);\n        e3 = e3fn(this.es);\n        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n          //North pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          rh = Math.sqrt(p.x * p.x + p.y * p.y);\n          M = Mlp - rh;\n          lat = imlfn(M / this.a, e0, e1, e2, e3);\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n          //South pole case\n          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n          rh = Math.sqrt(p.x * p.x + p.y * p.y);\n          M = rh - Mlp;\n\n          lat = imlfn(M / this.a, e0, e1, e2, e3);\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n        else {\n          //default case\n          rh = Math.sqrt(p.x * p.x + p.y * p.y);\n          Az = Math.atan2(p.x, p.y);\n          N1 = gN(this.a, this.e, this.sin_p12);\n          cosAz = Math.cos(Az);\n          tmp = this.e * this.cos_p12 * cosAz;\n          A = -tmp * tmp / (1 - this.es);\n          B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n          D = rh / N1;\n          Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n          F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n          psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n          lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n          sinpsi = Math.sin(psi);\n          lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n          p.x = lon;\n          p.y = lat;\n          return p;\n        }\n      }\n\n    }\n\n    var names$26 = [\"Azimuthal_Equidistant\", \"aeqd\"];\n    var aeqd = {\n      init: init$25,\n      forward: forward$24,\n      inverse: inverse$24,\n      names: names$26\n    };\n\n    function init$26() {\n      //double temp;      /* temporary variable    */\n\n      /* Place parameters in static storage for common use\n          -------------------------------------------------*/\n      this.sin_p14 = Math.sin(this.lat0);\n      this.cos_p14 = Math.cos(this.lat0);\n    }\n\n    /* Orthographic forward equations--mapping lat,long to x,y\n        ---------------------------------------------------*/\n    function forward$25(p) {\n      var sinphi, cosphi; /* sin and cos value        */\n      var dlon; /* delta longitude value      */\n      var coslon; /* cos of longitude        */\n      var ksp; /* scale factor          */\n      var g, x, y;\n      var lon = p.x;\n      var lat = p.y;\n      /* Forward equations\n          -----------------*/\n      dlon = adjust_lon(lon - this.long0);\n\n      sinphi = Math.sin(lat);\n      cosphi = Math.cos(lat);\n\n      coslon = Math.cos(dlon);\n      g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n      ksp = 1;\n      if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n        x = this.a * ksp * cosphi * Math.sin(dlon);\n        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n      }\n      p.x = x;\n      p.y = y;\n      return p;\n    }\n\n    function inverse$25(p) {\n      var rh; /* height above ellipsoid      */\n      var z; /* angle          */\n      var sinz, cosz; /* sin of z and cos of z      */\n      var con;\n      var lon, lat;\n      /* Inverse equations\n          -----------------*/\n      p.x -= this.x0;\n      p.y -= this.y0;\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      z = asinz(rh / this.a);\n\n      sinz = Math.sin(z);\n      cosz = Math.cos(z);\n\n      lon = this.long0;\n      if (Math.abs(rh) <= EPSLN) {\n        lat = this.lat0;\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n        p.x = lon;\n        p.y = lat;\n        return p;\n      }\n      lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n\n    var names$27 = [\"ortho\"];\n    var ortho = {\n      init: init$26,\n      forward: forward$25,\n      inverse: inverse$25,\n      names: names$27\n    };\n\n    // QSC projection rewritten from the original PROJ4\n    // https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\n    /* constants */\n    var FACE_ENUM = {\n        FRONT: 1,\n        RIGHT: 2,\n        BACK: 3,\n        LEFT: 4,\n        TOP: 5,\n        BOTTOM: 6\n    };\n\n    var AREA_ENUM = {\n        AREA_0: 1,\n        AREA_1: 2,\n        AREA_2: 3,\n        AREA_3: 4\n    };\n\n    function init$27() {\n\n      this.x0 = this.x0 || 0;\n      this.y0 = this.y0 || 0;\n      this.lat0 = this.lat0 || 0;\n      this.long0 = this.long0 || 0;\n      this.lat_ts = this.lat_ts || 0;\n      this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n      /* Determine the cube face from the center of projection. */\n      if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n        this.face = FACE_ENUM.TOP;\n      } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n        this.face = FACE_ENUM.BOTTOM;\n      } else if (Math.abs(this.long0) <= FORTPI) {\n        this.face = FACE_ENUM.FRONT;\n      } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n        this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n      } else {\n        this.face = FACE_ENUM.BACK;\n      }\n\n      /* Fill in useful values for the ellipsoid <-> sphere shift\n       * described in [LK12]. */\n      if (this.es !== 0) {\n        this.one_minus_f = 1 - (this.a - this.b) / this.a;\n        this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n      }\n    }\n\n    // QSC forward equations--mapping lat,long to x,y\n    // -----------------------------------------------------------------\n    function forward$26(p) {\n      var xy = {x: 0, y: 0};\n      var lat, lon;\n      var theta, phi;\n      var t, mu;\n      /* nu; */\n      var area = {value: 0};\n\n      // move lon according to projection's lon\n      p.x -= this.long0;\n\n      /* Convert the geodetic latitude to a geocentric latitude.\n       * This corresponds to the shift from the ellipsoid to the sphere\n       * described in [LK12]. */\n      if (this.es !== 0) {//if (P->es != 0) {\n        lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n      } else {\n        lat = p.y;\n      }\n\n      /* Convert the input lat, lon into theta, phi as used by QSC.\n       * This depends on the cube face and the area on it.\n       * For the top and bottom face, we can compute theta and phi\n       * directly from phi, lam. For the other faces, we must use\n       * unit sphere cartesian coordinates as an intermediate step. */\n      lon = p.x; //lon = lp.lam;\n      if (this.face === FACE_ENUM.TOP) {\n        phi = HALF_PI - lat;\n        if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n          area.value = AREA_ENUM.AREA_0;\n          theta = lon - HALF_PI;\n        } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n          area.value = AREA_ENUM.AREA_1;\n          theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n        } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n          area.value = AREA_ENUM.AREA_2;\n          theta = lon + HALF_PI;\n        } else {\n          area.value = AREA_ENUM.AREA_3;\n          theta = lon;\n        }\n      } else if (this.face === FACE_ENUM.BOTTOM) {\n        phi = HALF_PI + lat;\n        if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n          area.value = AREA_ENUM.AREA_0;\n          theta = -lon + HALF_PI;\n        } else if (lon < FORTPI && lon >= -FORTPI) {\n          area.value = AREA_ENUM.AREA_1;\n          theta = -lon;\n        } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n          area.value = AREA_ENUM.AREA_2;\n          theta = -lon - HALF_PI;\n        } else {\n          area.value = AREA_ENUM.AREA_3;\n          theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n        }\n      } else {\n        var q, r, s;\n        var sinlat, coslat;\n        var sinlon, coslon;\n\n        if (this.face === FACE_ENUM.RIGHT) {\n          lon = qsc_shift_lon_origin(lon, +HALF_PI);\n        } else if (this.face === FACE_ENUM.BACK) {\n          lon = qsc_shift_lon_origin(lon, +SPI);\n        } else if (this.face === FACE_ENUM.LEFT) {\n          lon = qsc_shift_lon_origin(lon, -HALF_PI);\n        }\n        sinlat = Math.sin(lat);\n        coslat = Math.cos(lat);\n        sinlon = Math.sin(lon);\n        coslon = Math.cos(lon);\n        q = coslat * coslon;\n        r = coslat * sinlon;\n        s = sinlat;\n\n        if (this.face === FACE_ENUM.FRONT) {\n          phi = Math.acos(q);\n          theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n        } else if (this.face === FACE_ENUM.RIGHT) {\n          phi = Math.acos(r);\n          theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n        } else if (this.face === FACE_ENUM.BACK) {\n          phi = Math.acos(-q);\n          theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n        } else if (this.face === FACE_ENUM.LEFT) {\n          phi = Math.acos(-r);\n          theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n        } else {\n          /* Impossible */\n          phi = theta = 0;\n          area.value = AREA_ENUM.AREA_0;\n        }\n      }\n\n      /* Compute mu and nu for the area of definition.\n       * For mu, see Eq. (3-21) in [OL76], but note the typos:\n       * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n      mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n      t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n      /* Apply the result to the real area. */\n      if (area.value === AREA_ENUM.AREA_1) {\n        mu += HALF_PI;\n      } else if (area.value === AREA_ENUM.AREA_2) {\n        mu += SPI;\n      } else if (area.value === AREA_ENUM.AREA_3) {\n        mu += 1.5 * SPI;\n      }\n\n      /* Now compute x, y from mu and nu */\n      xy.x = t * Math.cos(mu);\n      xy.y = t * Math.sin(mu);\n      xy.x = xy.x * this.a + this.x0;\n      xy.y = xy.y * this.a + this.y0;\n\n      p.x = xy.x;\n      p.y = xy.y;\n      return p;\n    }\n\n    // QSC inverse equations--mapping x,y to lat/long\n    // -----------------------------------------------------------------\n    function inverse$26(p) {\n      var lp = {lam: 0, phi: 0};\n      var mu, nu, cosmu, tannu;\n      var tantheta, theta, cosphi, phi;\n      var t;\n      var area = {value: 0};\n\n      /* de-offset */\n      p.x = (p.x - this.x0) / this.a;\n      p.y = (p.y - this.y0) / this.a;\n\n      /* Convert the input x, y to the mu and nu angles as used by QSC.\n       * This depends on the area of the cube face. */\n      nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n      mu = Math.atan2(p.y, p.x);\n      if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n        area.value = AREA_ENUM.AREA_0;\n      } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n        area.value = AREA_ENUM.AREA_1;\n        mu -= HALF_PI;\n      } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n        area.value = AREA_ENUM.AREA_2;\n        mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n      } else {\n        area.value = AREA_ENUM.AREA_3;\n        mu += HALF_PI;\n      }\n\n      /* Compute phi and theta for the area of definition.\n       * The inverse projection is not described in the original paper, but some\n       * good hints can be found here (as of 2011-12-14):\n       * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n       * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n      t = (SPI / 12) * Math.tan(mu);\n      tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n      theta = Math.atan(tantheta);\n      cosmu = Math.cos(mu);\n      tannu = Math.tan(nu);\n      cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n      if (cosphi < -1) {\n        cosphi = -1;\n      } else if (cosphi > +1) {\n        cosphi = +1;\n      }\n\n      /* Apply the result to the real area on the cube face.\n       * For the top and bottom face, we can compute phi and lam directly.\n       * For the other faces, we must use unit sphere cartesian coordinates\n       * as an intermediate step. */\n      if (this.face === FACE_ENUM.TOP) {\n        phi = Math.acos(cosphi);\n        lp.phi = HALF_PI - phi;\n        if (area.value === AREA_ENUM.AREA_0) {\n          lp.lam = theta + HALF_PI;\n        } else if (area.value === AREA_ENUM.AREA_1) {\n          lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n        } else if (area.value === AREA_ENUM.AREA_2) {\n          lp.lam = theta - HALF_PI;\n        } else /* area.value == AREA_ENUM.AREA_3 */ {\n          lp.lam = theta;\n        }\n      } else if (this.face === FACE_ENUM.BOTTOM) {\n        phi = Math.acos(cosphi);\n        lp.phi = phi - HALF_PI;\n        if (area.value === AREA_ENUM.AREA_0) {\n          lp.lam = -theta + HALF_PI;\n        } else if (area.value === AREA_ENUM.AREA_1) {\n          lp.lam = -theta;\n        } else if (area.value === AREA_ENUM.AREA_2) {\n          lp.lam = -theta - HALF_PI;\n        } else /* area.value == AREA_ENUM.AREA_3 */ {\n          lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n        }\n      } else {\n        /* Compute phi and lam via cartesian unit sphere coordinates. */\n        var q, r, s;\n        q = cosphi;\n        t = q * q;\n        if (t >= 1) {\n          s = 0;\n        } else {\n          s = Math.sqrt(1 - t) * Math.sin(theta);\n        }\n        t += s * s;\n        if (t >= 1) {\n          r = 0;\n        } else {\n          r = Math.sqrt(1 - t);\n        }\n        /* Rotate q,r,s into the correct area. */\n        if (area.value === AREA_ENUM.AREA_1) {\n          t = r;\n          r = -s;\n          s = t;\n        } else if (area.value === AREA_ENUM.AREA_2) {\n          r = -r;\n          s = -s;\n        } else if (area.value === AREA_ENUM.AREA_3) {\n          t = r;\n          r = s;\n          s = -t;\n        }\n        /* Rotate q,r,s into the correct cube face. */\n        if (this.face === FACE_ENUM.RIGHT) {\n          t = q;\n          q = -r;\n          r = t;\n        } else if (this.face === FACE_ENUM.BACK) {\n          q = -q;\n          r = -r;\n        } else if (this.face === FACE_ENUM.LEFT) {\n          t = q;\n          q = r;\n          r = -t;\n        }\n        /* Now compute phi and lam from the unit sphere coordinates. */\n        lp.phi = Math.acos(-s) - HALF_PI;\n        lp.lam = Math.atan2(r, q);\n        if (this.face === FACE_ENUM.RIGHT) {\n          lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n        } else if (this.face === FACE_ENUM.BACK) {\n          lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n        } else if (this.face === FACE_ENUM.LEFT) {\n          lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n        }\n      }\n\n      /* Apply the shift from the sphere to the ellipsoid as described\n       * in [LK12]. */\n      if (this.es !== 0) {\n        var invert_sign;\n        var tanphi, xa;\n        invert_sign = (lp.phi < 0 ? 1 : 0);\n        tanphi = Math.tan(lp.phi);\n        xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n        lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n        if (invert_sign) {\n          lp.phi = -lp.phi;\n        }\n      }\n\n      lp.lam += this.long0;\n      p.x = lp.lam;\n      p.y = lp.phi;\n      return p;\n    }\n\n    /* Helper function for forward projection: compute the theta angle\n     * and determine the area number. */\n    function qsc_fwd_equat_face_theta(phi, y, x, area) {\n      var theta;\n      if (phi < EPSLN) {\n        area.value = AREA_ENUM.AREA_0;\n        theta = 0.0;\n      } else {\n        theta = Math.atan2(y, x);\n        if (Math.abs(theta) <= FORTPI) {\n          area.value = AREA_ENUM.AREA_0;\n        } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n          area.value = AREA_ENUM.AREA_1;\n          theta -= HALF_PI;\n        } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n          area.value = AREA_ENUM.AREA_2;\n          theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n        } else {\n          area.value = AREA_ENUM.AREA_3;\n          theta += HALF_PI;\n        }\n      }\n      return theta;\n    }\n\n    /* Helper function: shift the longitude. */\n    function qsc_shift_lon_origin(lon, offset) {\n      var slon = lon + offset;\n      if (slon < -SPI) {\n        slon += TWO_PI;\n      } else if (slon > +SPI) {\n        slon -= TWO_PI;\n      }\n      return slon;\n    }\n\n    var names$28 = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\n    var qsc = {\n      init: init$27,\n      forward: forward$26,\n      inverse: inverse$26,\n      names: names$28\n    };\n\n    // Robinson projection\n    // Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n    // Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\n    var COEFS_X = [\n        [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n        [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n        [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n        [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n        [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n        [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n        [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n        [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n        [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n        [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n        [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n        [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n        [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n        [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n        [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n        [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n        [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n        [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n        [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n    ];\n\n    var COEFS_Y = [\n        [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n        [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n        [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n        [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n        [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n        [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n        [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n        [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n        [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n        [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n        [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n        [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n        [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n        [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n        [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n        [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n        [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n        [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n        [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n    ];\n\n    var FXC = 0.8487;\n    var FYC = 1.3523;\n    var C1 = R2D/5; // rad to 5-degree interval\n    var RC1 = 1/C1;\n    var NODES = 18;\n\n    var poly3_val = function(coefs, x) {\n        return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n    };\n\n    var poly3_der = function(coefs, x) {\n        return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n    };\n\n    function newton_rapshon(f_df, start, max_err, iters) {\n        var x = start;\n        for (; iters; --iters) {\n            var upd = f_df(x);\n            x -= upd;\n            if (Math.abs(upd) < max_err) {\n                break;\n            }\n        }\n        return x;\n    }\n\n    function init$28() {\n        this.x0 = this.x0 || 0;\n        this.y0 = this.y0 || 0;\n        this.long0 = this.long0 || 0;\n        this.es = 0;\n        this.title = this.title || \"Robinson\";\n    }\n\n    function forward$27(ll) {\n        var lon = adjust_lon(ll.x - this.long0);\n\n        var dphi = Math.abs(ll.y);\n        var i = Math.floor(dphi * C1);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        dphi = R2D * (dphi - RC1 * i);\n        var xy = {\n            x: poly3_val(COEFS_X[i], dphi) * lon,\n            y: poly3_val(COEFS_Y[i], dphi)\n        };\n        if (ll.y < 0) {\n            xy.y = -xy.y;\n        }\n\n        xy.x = xy.x * this.a * FXC + this.x0;\n        xy.y = xy.y * this.a * FYC + this.y0;\n        return xy;\n    }\n\n    function inverse$27(xy) {\n        var ll = {\n            x: (xy.x - this.x0) / (this.a * FXC),\n            y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n        };\n\n        if (ll.y >= 1) { // pathologic case\n            ll.x /= COEFS_X[NODES][0];\n            ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n        } else {\n            // find table interval\n            var i = Math.floor(ll.y * NODES);\n            if (i < 0) {\n                i = 0;\n            } else if (i >= NODES) {\n                i = NODES - 1;\n            }\n            for (;;) {\n                if (COEFS_Y[i][0] > ll.y) {\n                    --i;\n                } else if (COEFS_Y[i+1][0] <= ll.y) {\n                    ++i;\n                } else {\n                    break;\n                }\n            }\n            // linear interpolation in 5 degree interval\n            var coefs = COEFS_Y[i];\n            var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n            // find t so that poly3_val(coefs, t) = ll.y\n            t = newton_rapshon(function(x) {\n                return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n            }, t, EPSLN, 100);\n\n            ll.x /= poly3_val(COEFS_X[i], t);\n            ll.y = (5 * i + t) * D2R;\n            if (xy.y < 0) {\n                ll.y = -ll.y;\n            }\n        }\n\n        ll.x = adjust_lon(ll.x + this.long0);\n        return ll;\n    }\n\n    var names$29 = [\"Robinson\", \"robin\"];\n    var robin = {\n      init: init$28,\n      forward: forward$27,\n      inverse: inverse$27,\n      names: names$29\n    };\n\n    function init$29() {\n        this.name = 'geocent';\n\n    }\n\n    function forward$28(p) {\n        var point = geodeticToGeocentric(p, this.es, this.a);\n        return point;\n    }\n\n    function inverse$28(p) {\n        var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n        return point;\n    }\n\n    var names$30 = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\n    var geocent = {\n        init: init$29,\n        forward: forward$28,\n        inverse: inverse$28,\n        names: names$30\n    };\n\n    var mode = {\n      N_POLE: 0,\n      S_POLE: 1,\n      EQUIT: 2,\n      OBLIQ: 3\n    };\n\n    var params = {\n      h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n      azi:   { def: 0, num: true, degrees: true }, // default is North\n      tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n      long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n      lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n    };\n\n    function init$30() {\n      Object.keys(params).forEach(function (p) {\n        if (typeof this[p] === \"undefined\") {\n          this[p] = params[p].def;\n        } else if (params[p].num && isNaN(this[p])) {\n          throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n        } else if (params[p].num) {\n          this[p] = parseFloat(this[p]);\n        }\n        if (params[p].degrees) {\n          this[p] = this[p] * D2R;\n        }\n      }.bind(this));\n\n      if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n        this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n      } else if (Math.abs(this.lat0) < EPSLN) {\n        this.mode = mode.EQUIT;\n      } else {\n        this.mode = mode.OBLIQ;\n        this.sinph0 = Math.sin(this.lat0);\n        this.cosph0 = Math.cos(this.lat0);\n      }\n\n      this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n      if (this.pn1 <= 0 || this.pn1 > 1e10) {\n        throw new Error(\"Invalid height\");\n      }\n      \n      this.p = 1 + this.pn1;\n      this.rp = 1 / this.p;\n      this.h1 = 1 / this.pn1;\n      this.pfact = (this.p + 1) * this.h1;\n      this.es = 0;\n\n      var omega = this.tilt;\n      var gamma = this.azi;\n      this.cg = Math.cos(gamma);\n      this.sg = Math.sin(gamma);\n      this.cw = Math.cos(omega);\n      this.sw = Math.sin(omega);\n    }\n\n    function forward$29(p) {\n      p.x -= this.long0;\n      var sinphi = Math.sin(p.y);\n      var cosphi = Math.cos(p.y);\n      var coslam = Math.cos(p.x);\n      var x, y;\n      switch (this.mode) {\n        case mode.OBLIQ:\n          y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n          break;\n        case mode.EQUIT:\n          y = cosphi * coslam;\n          break;\n        case mode.S_POLE:\n          y = -sinphi;\n          break;\n        case mode.N_POLE:\n          y = sinphi;\n          break;\n      }\n      y = this.pn1 / (this.p - y);\n      x = y * cosphi * Math.sin(p.x);\n\n      switch (this.mode) {\n        case mode.OBLIQ:\n          y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n          break;\n        case mode.EQUIT:\n          y *= sinphi;\n          break;\n        case mode.N_POLE:\n          y *= -(cosphi * coslam);\n          break;\n        case mode.S_POLE:\n          y *= cosphi * coslam;\n          break;\n      }\n\n      // Tilt \n      var yt, ba;\n      yt = y * this.cg + x * this.sg;\n      ba = 1 / (yt * this.sw * this.h1 + this.cw);\n      x = (x * this.cg - y * this.sg) * this.cw * ba;\n      y = yt * ba;\n\n      p.x = x * this.a;\n      p.y = y * this.a;\n      return p;\n    }\n\n    function inverse$29(p) {\n      p.x /= this.a;\n      p.y /= this.a;\n      var r = { x: p.x, y: p.y };\n\n      // Un-Tilt\n      var bm, bq, yt;\n      yt = 1 / (this.pn1 - p.y * this.sw);\n      bm = this.pn1 * p.x * yt;\n      bq = this.pn1 * p.y * this.cw * yt;\n      p.x = bm * this.cg + bq * this.sg;\n      p.y = bq * this.cg - bm * this.sg;\n\n      var rh = hypot(p.x, p.y);\n      if (Math.abs(rh) < EPSLN) {\n        r.x = 0;\n        r.y = p.y;\n      } else {\n        var cosz, sinz;\n        sinz = 1 - rh * rh * this.pfact;\n        sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n        cosz = Math.sqrt(1 - sinz * sinz);\n        switch (this.mode) {\n          case mode.OBLIQ:\n            r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n            p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n            p.x *= sinz * this.cosph0;\n            break;\n          case mode.EQUIT:\n            r.y = Math.asin(p.y * sinz / rh);\n            p.y = cosz * rh;\n            p.x *= sinz;\n            break;\n          case mode.N_POLE:\n            r.y = Math.asin(cosz);\n            p.y = -p.y;\n            break;\n          case mode.S_POLE:\n            r.y = -Math.asin(cosz);\n            break;\n        }\n        r.x = Math.atan2(p.x, p.y);\n      }\n\n      p.x = r.x + this.long0;\n      p.y = r.y;\n      return p;\n    }\n\n    var names$31 = [\"Tilted_Perspective\", \"tpers\"];\n    var tpers = {\n      init: init$30,\n      forward: forward$29,\n      inverse: inverse$29,\n      names: names$31\n    };\n\n    var includedProjections = function(proj4){\n      proj4.Proj.projections.add(tmerc);\n      proj4.Proj.projections.add(etmerc);\n      proj4.Proj.projections.add(utm);\n      proj4.Proj.projections.add(sterea);\n      proj4.Proj.projections.add(stere);\n      proj4.Proj.projections.add(somerc);\n      proj4.Proj.projections.add(omerc);\n      proj4.Proj.projections.add(lcc);\n      proj4.Proj.projections.add(krovak);\n      proj4.Proj.projections.add(cass);\n      proj4.Proj.projections.add(laea);\n      proj4.Proj.projections.add(aea);\n      proj4.Proj.projections.add(gnom);\n      proj4.Proj.projections.add(cea);\n      proj4.Proj.projections.add(eqc);\n      proj4.Proj.projections.add(poly);\n      proj4.Proj.projections.add(nzmg);\n      proj4.Proj.projections.add(mill);\n      proj4.Proj.projections.add(sinu);\n      proj4.Proj.projections.add(moll);\n      proj4.Proj.projections.add(eqdc);\n      proj4.Proj.projections.add(vandg);\n      proj4.Proj.projections.add(aeqd);\n      proj4.Proj.projections.add(ortho);\n      proj4.Proj.projections.add(qsc);\n      proj4.Proj.projections.add(robin);\n      proj4.Proj.projections.add(geocent);\n      proj4.Proj.projections.add(tpers);\n    };\n\n    proj4$1.defaultDatum = 'WGS84'; //default datum\n    proj4$1.Proj = Projection;\n    proj4$1.WGS84 = new proj4$1.Proj('WGS84');\n    proj4$1.Point = Point;\n    proj4$1.toPoint = toPoint;\n    proj4$1.defs = defs;\n    proj4$1.nadgrid = nadgrid;\n    proj4$1.transform = transform;\n    proj4$1.mgrs = mgrs;\n    proj4$1.version = '2.7.5';\n    includedProjections(proj4$1);\n\n    return proj4$1;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/proj4/dist/proj4-src.js\n");

/***/ }),

/***/ "./node_modules/proj4/dist/proj4-src.js-exposed":
/*!******************************************************!*\
  !*** ./node_modules/proj4/dist/proj4-src.js-exposed ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {module.exports = global[\"proj4\"] = __webpack_require__(/*! -!./proj4-src.js */ \"./node_modules/proj4/dist/proj4-src.js\");\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvcHJvajQvZGlzdC9wcm9qNC1zcmMuanMtZXhwb3NlZD85MzM0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlGQUFtQyxtQkFBTyxDQUFDLGdFQUFrQixFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Byb2o0L2Rpc3QvcHJvajQtc3JjLmpzLWV4cG9zZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcInByb2o0XCJdID0gcmVxdWlyZShcIi0hLi9wcm9qNC1zcmMuanNcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/proj4/dist/proj4-src.js-exposed\n");

/***/ }),

/***/ "./node_modules/proj4leaflet/src/proj4leaflet.js":
/*!*******************************************************!*\
  !*** ./node_modules/proj4leaflet/src/proj4leaflet.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\r\n\tvar L, proj4;\r\n\tif (true) {\r\n\t\t// AMD\r\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! leaflet */ \"leaflet\"), __webpack_require__(/*! proj4 */ \"./node_modules/proj4/dist/proj4-src.js-exposed\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t} else {}\r\n}(function (L, proj4) {\r\n\tif (proj4.__esModule && proj4.default) {\r\n\t\t// If proj4 was bundled as an ES6 module, unwrap it to get\r\n\t\t// to the actual main proj4 object.\r\n\t\t// See discussion in https://github.com/kartena/Proj4Leaflet/pull/147\r\n\t\tproj4 = proj4.default;\r\n\t}\r\n \r\n\tL.Proj = {};\r\n\r\n\tL.Proj._isProj4Obj = function(a) {\r\n\t\treturn (typeof a.inverse !== 'undefined' &&\r\n\t\t\ttypeof a.forward !== 'undefined');\r\n\t};\r\n\r\n\tL.Proj.Projection = L.Class.extend({\r\n\t\tinitialize: function(code, def, bounds) {\r\n\t\t\tvar isP4 = L.Proj._isProj4Obj(code);\r\n\t\t\tthis._proj = isP4 ? code : this._projFromCodeDef(code, def);\r\n\t\t\tthis.bounds = isP4 ? def : bounds;\r\n\t\t},\r\n\r\n\t\tproject: function (latlng) {\r\n\t\t\tvar point = this._proj.forward([latlng.lng, latlng.lat]);\r\n\t\t\treturn new L.Point(point[0], point[1]);\r\n\t\t},\r\n\r\n\t\tunproject: function (point, unbounded) {\r\n\t\t\tvar point2 = this._proj.inverse([point.x, point.y]);\r\n\t\t\treturn new L.LatLng(point2[1], point2[0], unbounded);\r\n\t\t},\r\n\r\n\t\t_projFromCodeDef: function(code, def) {\r\n\t\t\tif (def) {\r\n\t\t\t\tproj4.defs(code, def);\r\n\t\t\t} else if (proj4.defs[code] === undefined) {\r\n\t\t\t\tvar urn = code.split(':');\r\n\t\t\t\tif (urn.length > 3) {\r\n\t\t\t\t\tcode = urn[urn.length - 3] + ':' + urn[urn.length - 1];\r\n\t\t\t\t}\r\n\t\t\t\tif (proj4.defs[code] === undefined) {\r\n\t\t\t\t\tthrow 'No projection definition for code ' + code;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn proj4(code);\r\n\t\t}\r\n\t});\r\n\r\n\tL.Proj.CRS = L.Class.extend({\r\n\t\tincludes: L.CRS,\r\n\r\n\t\toptions: {\r\n\t\t\ttransformation: new L.Transformation(1, 0, -1, 0)\r\n\t\t},\r\n\r\n\t\tinitialize: function(a, b, c) {\r\n\t\t\tvar code,\r\n\t\t\t    proj,\r\n\t\t\t    def,\r\n\t\t\t    options;\r\n\r\n\t\t\tif (L.Proj._isProj4Obj(a)) {\r\n\t\t\t\tproj = a;\r\n\t\t\t\tcode = proj.srsCode;\r\n\t\t\t\toptions = b || {};\r\n\r\n\t\t\t\tthis.projection = new L.Proj.Projection(proj, options.bounds);\r\n\t\t\t} else {\r\n\t\t\t\tcode = a;\r\n\t\t\t\tdef = b;\r\n\t\t\t\toptions = c || {};\r\n\t\t\t\tthis.projection = new L.Proj.Projection(code, def, options.bounds);\r\n\t\t\t}\r\n\r\n\t\t\tL.Util.setOptions(this, options);\r\n\t\t\tthis.code = code;\r\n\t\t\tthis.transformation = this.options.transformation;\r\n\r\n\t\t\tif (this.options.origin) {\r\n\t\t\t\tthis.transformation =\r\n\t\t\t\t\tnew L.Transformation(1, -this.options.origin[0],\r\n\t\t\t\t\t\t-1, this.options.origin[1]);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.options.scales) {\r\n\t\t\t\tthis._scales = this.options.scales;\r\n\t\t\t} else if (this.options.resolutions) {\r\n\t\t\t\tthis._scales = [];\r\n\t\t\t\tfor (var i = this.options.resolutions.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tif (this.options.resolutions[i]) {\r\n\t\t\t\t\t\tthis._scales[i] = 1 / this.options.resolutions[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.infinite = !this.options.bounds;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function(zoom) {\r\n\t\t\tvar iZoom = Math.floor(zoom),\r\n\t\t\t\tbaseScale,\r\n\t\t\t\tnextScale,\r\n\t\t\t\tscaleDiff,\r\n\t\t\t\tzDiff;\r\n\t\t\tif (zoom === iZoom) {\r\n\t\t\t\treturn this._scales[zoom];\r\n\t\t\t} else {\r\n\t\t\t\t// Non-integer zoom, interpolate\r\n\t\t\t\tbaseScale = this._scales[iZoom];\r\n\t\t\t\tnextScale = this._scales[iZoom + 1];\r\n\t\t\t\tscaleDiff = nextScale - baseScale;\r\n\t\t\t\tzDiff = (zoom - iZoom);\r\n\t\t\t\treturn baseScale + scaleDiff * zDiff;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tzoom: function(scale) {\r\n\t\t\t// Find closest number in this._scales, down\r\n\t\t\tvar downScale = this._closestElement(this._scales, scale),\r\n\t\t\t\tdownZoom = this._scales.indexOf(downScale),\r\n\t\t\t\tnextScale,\r\n\t\t\t\tnextZoom,\r\n\t\t\t\tscaleDiff;\r\n\t\t\t// Check if scale is downScale => return array index\r\n\t\t\tif (scale === downScale) {\r\n\t\t\t\treturn downZoom;\r\n\t\t\t}\r\n\t\t\tif (downScale === undefined) {\r\n\t\t\t\treturn -Infinity;\r\n\t\t\t}\r\n\t\t\t// Interpolate\r\n\t\t\tnextZoom = downZoom + 1;\r\n\t\t\tnextScale = this._scales[nextZoom];\r\n\t\t\tif (nextScale === undefined) {\r\n\t\t\t\treturn Infinity;\r\n\t\t\t}\r\n\t\t\tscaleDiff = nextScale - downScale;\r\n\t\t\treturn (scale - downScale) / scaleDiff + downZoom;\r\n\t\t},\r\n\r\n\t\tdistance: L.CRS.Earth.distance,\r\n\r\n\t\tR: L.CRS.Earth.R,\r\n\r\n\t\t/* Get the closest lowest element in an array */\r\n\t\t_closestElement: function(array, element) {\r\n\t\t\tvar low;\r\n\t\t\tfor (var i = array.length; i--;) {\r\n\t\t\t\tif (array[i] <= element && (low === undefined || low < array[i])) {\r\n\t\t\t\t\tlow = array[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn low;\r\n\t\t}\r\n\t});\r\n\r\n\tL.Proj.GeoJSON = L.GeoJSON.extend({\r\n\t\tinitialize: function(geojson, options) {\r\n\t\t\tthis._callLevel = 0;\r\n\t\t\tL.GeoJSON.prototype.initialize.call(this, geojson, options);\r\n\t\t},\r\n\r\n\t\taddData: function(geojson) {\r\n\t\t\tvar crs;\r\n\r\n\t\t\tif (geojson) {\r\n\t\t\t\tif (geojson.crs && geojson.crs.type === 'name') {\r\n\t\t\t\t\tcrs = new L.Proj.CRS(geojson.crs.properties.name);\r\n\t\t\t\t} else if (geojson.crs && geojson.crs.type) {\r\n\t\t\t\t\tcrs = new L.Proj.CRS(geojson.crs.type + ':' + geojson.crs.properties.code);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (crs !== undefined) {\r\n\t\t\t\t\tthis.options.coordsToLatLng = function(coords) {\r\n\t\t\t\t\t\tvar point = L.point(coords[0], coords[1]);\r\n\t\t\t\t\t\treturn crs.projection.unproject(point);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Base class' addData might call us recursively, but\r\n\t\t\t// CRS shouldn't be cleared in that case, since CRS applies\r\n\t\t\t// to the whole GeoJSON, inluding sub-features.\r\n\t\t\tthis._callLevel++;\r\n\t\t\ttry {\r\n\t\t\t\tL.GeoJSON.prototype.addData.call(this, geojson);\r\n\t\t\t} finally {\r\n\t\t\t\tthis._callLevel--;\r\n\t\t\t\tif (this._callLevel === 0) {\r\n\t\t\t\t\tdelete this.options.coordsToLatLng;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tL.Proj.geoJson = function(geojson, options) {\r\n\t\treturn new L.Proj.GeoJSON(geojson, options);\r\n\t};\r\n\r\n\tL.Proj.ImageOverlay = L.ImageOverlay.extend({\r\n\t\tinitialize: function (url, bounds, options) {\r\n\t\t\tL.ImageOverlay.prototype.initialize.call(this, url, null, options);\r\n\t\t\tthis._projectedBounds = bounds;\r\n\t\t},\r\n\r\n\t\t// Danger ahead: Overriding internal methods in Leaflet.\r\n\t\t// Decided to do this rather than making a copy of L.ImageOverlay\r\n\t\t// and doing very tiny modifications to it.\r\n\t\t// Future will tell if this was wise or not.\r\n\t\t_animateZoom: function (event) {\r\n\t\t\tvar scale = this._map.getZoomScale(event.zoom);\r\n\t\t\tvar northWest = L.point(this._projectedBounds.min.x, this._projectedBounds.max.y);\r\n\t\t\tvar offset = this._projectedToNewLayerPoint(northWest, event.zoom, event.center);\r\n\r\n\t\t\tL.DomUtil.setTransform(this._image, offset, scale);\r\n\t\t},\r\n\r\n\t\t_reset: function () {\r\n\t\t\tvar zoom = this._map.getZoom();\r\n\t\t\tvar pixelOrigin = this._map.getPixelOrigin();\r\n\t\t\tvar bounds = L.bounds(\r\n\t\t\t\tthis._transform(this._projectedBounds.min, zoom)._subtract(pixelOrigin),\r\n\t\t\t\tthis._transform(this._projectedBounds.max, zoom)._subtract(pixelOrigin)\r\n\t\t\t);\r\n\t\t\tvar size = bounds.getSize();\r\n\r\n\t\t\tL.DomUtil.setPosition(this._image, bounds.min);\r\n\t\t\tthis._image.style.width = size.x + 'px';\r\n\t\t\tthis._image.style.height = size.y + 'px';\r\n\t\t},\r\n\r\n\t\t_projectedToNewLayerPoint: function (point, zoom, center) {\r\n\t\t\tvar viewHalf = this._map.getSize()._divideBy(2);\r\n\t\t\tvar newTopLeft = this._map.project(center, zoom)._subtract(viewHalf)._round();\r\n\t\t\tvar topLeft = newTopLeft.add(this._map._getMapPanePos());\r\n\r\n\t\t\treturn this._transform(point, zoom)._subtract(topLeft);\r\n\t\t},\r\n\r\n\t\t_transform: function (point, zoom) {\r\n\t\t\tvar crs = this._map.options.crs;\r\n\t\t\tvar transformation = crs.transformation;\r\n\t\t\tvar scale = crs.scale(zoom);\r\n\r\n\t\t\treturn transformation.transform(point, scale);\r\n\t\t}\r\n\t});\r\n\r\n\tL.Proj.imageOverlay = function (url, bounds, options) {\r\n\t\treturn new L.Proj.ImageOverlay(url, bounds, options);\r\n\t};\r\n\r\n\treturn L.Proj;\r\n}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/proj4leaflet/src/proj4leaflet.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/Common/CSS/GPgeneralWidget.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPgeneralWidget.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL0NTUy9HUGdlbmVyYWxXaWRnZXQuY3NzP2YyZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUGdlbmVyYWxXaWRnZXQuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPgeneralWidget.css\n");

/***/ }),

/***/ "./src/Common/CSS/GPmousePosition.css":
/*!********************************************!*\
  !*** ./src/Common/CSS/GPmousePosition.css ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL0NTUy9HUG1vdXNlUG9zaXRpb24uY3NzPzI5YjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL0NTUy9HUG1vdXNlUG9zaXRpb24uY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Common/CSS/GPmousePosition.css\n");

/***/ }),

/***/ "./src/Common/Controls/MousePositionDOM.js":
/*!*************************************************!*\
  !*** ./src/Common/Controls/MousePositionDOM.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nvar MousePositionDOM = {\n  /**\n  * Add uuid to the tag ID\n  * @param {String} id - id selector\n  * @returns {String} uid - id selector with an unique id\n  */\n  _addUID: function _addUID(id) {\n    var uid = this._uid ? id + \"-\" + this._uid : id;\n    return uid;\n  },\n\n  /**\n   * Main container (DOM)\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMainContainerElement: function _createMainContainerElement() {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPmousePosition\");\n    container.className = \"GPwidget\";\n    return container;\n  },\n  // ################################################################### //\n  // ################### Methods of main container ##################### //\n  // ################################################################### //\n\n  /**\n   * Hidden checkbox for minimizing/maximizing\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createShowMousePositionElement: function _createShowMousePositionElement() {\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPshowMousePosition\");\n    input.type = \"checkbox\";\n    return input;\n  },\n\n  /**\n   * Show mouse position control\n   * @param {Boolean} isDesktop - specifies if the support is desktop or tactile\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createShowMousePositionPictoElement: function _createShowMousePositionPictoElement(isDesktop) {\n    // contexte d'execution\n    var self = this;\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowMousePositionPicto\");\n    label.className = \"GPshowAdvancedToolPicto\";\n    label.htmlFor = this._addUID(\"GPshowMousePosition\");\n    label.title = \"Afficher les coordonnées du curseur\"; // FIXME detection disponible dans le JS !\n    // Detection : test for desktop or tactile\n    // var isDesktop = true;\n    // var userAgent = window.navigator.userAgent.toLowerCase();\n    // if (userAgent.indexOf(\"iphone\") !== -1 ||\n    // userAgent.indexOf(\"ipod\") !== -1 ||\n    // userAgent.indexOf(\"ipad\") !== -1 ||\n    // userAgent.indexOf(\"android\") !== -1 ||\n    // userAgent.indexOf(\"mobile\") !== -1 ||\n    // userAgent.indexOf(\"blackberry\") !== -1 ||\n    // userAgent.indexOf(\"tablet\") !== -1 ||\n    // userAgent.indexOf(\"phone\") !== -1 ||\n    // userAgent.indexOf(\"touch\") !== -1 ) {\n    //     isDesktop = false;\n    // }\n    // if (userAgent.indexOf(\"msie\") !== -1 ||\n    // userAgent.indexOf(\"trident\") !== -1) {\n    //     isDesktop = true;\n    // }\n    // Show map center localisation if panel opened and tactile support\n\n    label.addEventListener(\"click\", function (e) {\n      var mapCenterClass = \"\";\n\n      if (!document.getElementById(self._addUID(\"GPshowMousePosition\")).checked && !isDesktop) {\n        mapCenterClass = \"GPmapCenterVisible\";\n      }\n\n      document.getElementById(\"GPmapCenter\").className = mapCenterClass;\n      self.onShowMousePositionClick(e);\n    });\n    var spanOpen = document.createElement(\"span\");\n    spanOpen.id = this._addUID(\"GPshowMousePositionOpen\");\n    spanOpen.className = \"GPshowAdvancedToolOpen\";\n    label.appendChild(spanOpen);\n    return label;\n  },\n\n  /**\n   * mouse position panel\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMousePositionPanelElement: function _createMousePositionPanelElement() {\n    var panel = document.createElement(\"div\");\n    panel.id = this._addUID(\"GPmousePositionPanel\");\n    panel.className = \"GPpanel\"; // FIXME on decompose la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n    // div.appendChild(this._createMousePositionPanelHeaderElement());\n    // div.appendChild(this._createMousePositionPanelBasicElement());\n    // div.appendChild(this._createShowMousePositionSettingsElement());\n    // div.appendChild(this._createMousePositionSettingsElement());\n\n    return panel;\n  },\n\n  /**\n   * Map center localisation (tactile use)\n   *\n   * @returns {DOMElement} container\n   */\n  _createMapCenter: function _createMapCenter() {\n    var div = document.createElement(\"div\");\n    div.id = \"GPmapCenter\";\n    div.className = \"\";\n    return div;\n  },\n  // ################################################################### //\n  // ####################### Panel container ########################### //\n  // ################################################################### //\n\n  /**\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelHeaderElement: function _createMousePositionPanelHeaderElement() {\n    var container = document.createElement(\"div\");\n    container.className = \"GPpanelHeader\";\n    var divTitle = document.createElement(\"div\");\n    divTitle.className = \"GPpanelTitle\";\n    divTitle.innerHTML = \"Coordonnées\";\n    container.appendChild(divTitle);\n    var divClose = document.createElement(\"div\");\n    divClose.id = \"GPmousePositionPanelClose\";\n    divClose.className = \"GPpanelClose\";\n    divClose.title = \"Fermer le panneau\"; // Link panel close / visibility checkbox\n\n    var self = this;\n\n    if (divClose.addEventListener) {\n      divClose.addEventListener(\"click\", function () {\n        document.getElementById(self._addUID(\"GPshowMousePositionPicto\")).click();\n      }, false);\n    } else if (divClose.attachEvent) {\n      divClose.attachEvent(\"onclick\", function () {\n        document.getElementById(self._addUID(\"GPshowMousePositionPicto\")).click();\n      });\n    }\n\n    container.appendChild(divClose);\n    return container;\n  },\n\n  /**\n   * coordinate panel\n   * @param {Boolean} [displayAltitude] - specifies if the altitude panel must be displayed\n   * @param {Boolean} [displayCoordinates] - specifies if the coordinates panel must be displayed\n   * @param {Boolean} [editCoordinates] - specifies if the coordinates edition is allowed\n   * @param {Boolean} [currentProjectionUnits] - specifies if the current projection units\n   *\n   * FIXME\n   * call this._createMousePositionPanelBasicCoordinateElement\n   * call this._createMousePositionPanelBasicAltitudeElement\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMousePositionPanelBasicElement: function _createMousePositionPanelBasicElement(displayAltitude, displayCoordinates, editCoordinates, currentProjectionUnits) {\n    // default Values\n    displayAltitude = typeof displayAltitude === \"undefined\" ? true : displayAltitude;\n    displayCoordinates = typeof displayCoordinates === \"undefined\" ? true : displayCoordinates;\n    editCoordinates = typeof editCoordinates === \"undefined\" ? false : editCoordinates;\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPmousePositionBasicPanel\"); // FIXME on devrait decomposer la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n\n    container.appendChild(this._createMousePositionPanelBasicCoordinateElement(displayCoordinates, editCoordinates, currentProjectionUnits));\n    container.appendChild(this._createMousePositionPanelEditToolsElement(editCoordinates));\n    container.appendChild(this._createMousePositionPanelBasicAltitudeElement(displayAltitude));\n    return container;\n  },\n\n  /**\n   * create coordinate elements\n   *\n   * @param {String} coordType - (\"Lon\" ou \"Lat\")\n   * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n   *\n   * @returns {Array} list of DOM elements\n   */\n  _createCoordinateElement: function _createCoordinateElement(coordType, editCoordinates) {\n    var context = this;\n\n    if ([\"Lon\", \"Lat\"].indexOf(coordType) === -1) {\n      return [];\n    }\n\n    var list = [];\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPmousePosition\" + coordType);\n    input.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input.readOnly = true;\n\n    if (editCoordinates) {\n      input.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input.addEventListener(\"change\", function (e) {\n        this.classList.remove(\"error\");\n        var valid = context.validateExtentCoordinate(coordType, this.value, e);\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input);\n    var span = document.createElement(\"span\");\n    span.className = \"GPmousePositionUnits\";\n    list.push(span);\n    return list;\n  },\n\n  /**\n   *\n   * @param {String} coordType - (\"Lon\" ou \"Lat\")\n   * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n   *\n   * @returns {Array} list of DOM elements\n   */\n  _createDMSCoordinateElement: function _createDMSCoordinateElement(coordType, editCoordinates) {\n    if ([\"Lon\", \"Lat\"].indexOf(coordType) === -1) {\n      return [];\n    }\n\n    var context = this;\n    var list = [];\n    var input = document.createElement(\"input\");\n    input.id = this._addUID(\"GPmousePosition\" + coordType + \"Degrees\");\n    input.className = \"GPSexagesimal\";\n    input.setAttribute(\"name\", \"degrees\");\n    input.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input.readOnly = true;\n    input.dataset.min = 0;\n    input.dataset.max = coordType === \"Lon\" ? 180 : 90;\n\n    if (editCoordinates) {\n      input.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input.addEventListener(\"change\", function () {\n        this.classList.remove(\"error\");\n\n        var valid = context._checkDMSDegrees(coordType, this);\n\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input);\n    var span = document.createElement(\"span\");\n    span.className = \"GPmousePositionSexagesimalLabel\";\n    span.innerHTML = \"°\";\n    list.push(span);\n    var input1 = document.createElement(\"input\");\n    input1.id = this._addUID(\"GPmousePosition\" + coordType + \"Minutes\");\n    input1.className = \"GPSexagesimal\";\n    input1.setAttribute(\"name\", \"minutes\");\n    input1.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input1.readOnly = true;\n    input1.dataset.min = 0;\n    input1.dataset.max = 59;\n\n    if (editCoordinates) {\n      input1.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input1.addEventListener(\"change\", function () {\n        this.classList.remove(\"error\");\n\n        var valid = context._checkDMSElement(this);\n\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input1);\n    var span1 = document.createElement(\"span\");\n    span1.className = \"GPmousePositionSexagesimalLabel\";\n    span1.innerHTML = \"'\";\n    list.push(span1);\n    var input2 = document.createElement(\"input\");\n    input2.id = this._addUID(\"GPmousePosition\" + coordType + \"Seconds\");\n    input2.className = \"GPSexagesimalsec\";\n    input2.setAttribute(\"name\", \"seconds\");\n    input2.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n    input2.readOnly = true;\n    input2.dataset.min = 0;\n    input2.dataset.max = 59;\n\n    if (editCoordinates) {\n      input2.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(true);\n      });\n      input2.addEventListener(\"change\", function () {\n        this.classList.remove(\"error\");\n\n        var valid = context._checkDMSElement(this, true);\n\n        valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n      });\n    }\n\n    list.push(input2);\n    var span2 = document.createElement(\"span\");\n    span2.className = \"GPmousePositionSexagesimalLabel\";\n    span2.innerHTML = \"''\";\n    list.push(span2);\n    var select = document.createElement(\"select\");\n    select.id = this._addUID(\"GPmousePosition\" + coordType + \"Direction\");\n    select.className = \"GPmousePositionDirection\";\n    select.setAttribute(\"name\", \"direction\");\n    select.disabled = true;\n    var option = document.createElement(\"option\");\n    option.value = coordType === \"Lon\" ? \"E\" : \"N\";\n    option.innerHTML = coordType === \"Lon\" ? \"E\" : \"N\";\n    select.appendChild(option);\n    var option1 = document.createElement(\"option\");\n    option1.value = coordType === \"Lon\" ? \"O\" : \"S\";\n    option1.innerHTML = coordType === \"Lon\" ? \"O\" : \"S\";\n    select.appendChild(option1);\n    list.push(select);\n    return list;\n  },\n\n  /**\n   * @param {Boolean} [display=false] - specifies if the coordinates panel must be displayed\n   * @param {Boolean} [editCoordinates] - specifies if the coordinates edition is allowed\n   * @param {Boolean} [currentProjectionUnits] - specifies if the current projection units\n   *\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelBasicCoordinateElement: function _createMousePositionPanelBasicCoordinateElement(display, editCoordinates, currentProjectionUnits) {\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPmousePositionCoordinate\");\n    div.style.display = display ? \"block\" : \"none\"; // latitude\n\n    var divLat = document.createElement(\"div\");\n    var spanLat = document.createElement(\"span\");\n    spanLat.className = \"GPmousePositionLabel\";\n    spanLat.id = this._addUID(\"GPmousePositionLatLabel\");\n    spanLat.innerHTML = \"Latitude : \";\n    divLat.appendChild(spanLat);\n    var span = document.createElement(\"span\");\n    span.id = this._addUID(\"GPmousePositionLatCoordinate\");\n    var arrayCoords;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords = this._createDMSCoordinateElement(\"Lat\", editCoordinates);\n    } else {\n      arrayCoords = this._createCoordinateElement(\"Lat\", editCoordinates);\n    }\n\n    for (var i = 0; i < arrayCoords.length; i++) {\n      span.appendChild(arrayCoords[i]);\n    }\n\n    divLat.appendChild(span);\n    div.appendChild(divLat); // longitude\n\n    var divLon = document.createElement(\"div\");\n    var spanLon = document.createElement(\"span\");\n    spanLon.className = \"GPmousePositionLabel\";\n    spanLon.id = this._addUID(\"GPmousePositionLonLabel\");\n    spanLon.innerHTML = \"Longitude : \";\n    divLon.appendChild(spanLon);\n    var span1 = document.createElement(\"span\");\n    span1.id = this._addUID(\"GPmousePositionLonCoordinate\");\n    var arrayCoords1;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords1 = this._createDMSCoordinateElement(\"Lon\", editCoordinates);\n    } else {\n      arrayCoords1 = this._createCoordinateElement(\"Lon\", editCoordinates);\n    }\n\n    for (var j = 0; j < arrayCoords1.length; j++) {\n      span1.appendChild(arrayCoords1[j]);\n    }\n\n    divLon.appendChild(span1);\n    div.appendChild(divLon);\n    return div;\n  },\n\n  /**\n   * @param {Boolean} [display=false] - specifies if the altitude panel must be displayed\n   *\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelBasicAltitudeElement: function _createMousePositionPanelBasicAltitudeElement(display) {\n    var div = document.createElement(\"div\");\n    div.id = this._addUID(\"GPmousePositionAltitude\");\n    div.style.display = display ? \"block\" : \"none\";\n    var spanLabel = document.createElement(\"span\");\n    spanLabel.className = \"GPmousePositionLabel\";\n    spanLabel.innerHTML = \"Altitude : \";\n    div.appendChild(spanLabel);\n    var spanAlt = document.createElement(\"span\");\n    spanAlt.className = \"GPmousePositionCoords\";\n    spanAlt.id = this._addUID(\"GPmousePositionAlt\");\n    spanAlt.innerHTML = \"...\";\n    div.appendChild(spanAlt);\n    var spanUnits = document.createElement(\"span\");\n    spanUnits.className = \"GPmousePositionAltitudeUnits\";\n    spanUnits.innerHTML = \"m\";\n    div.appendChild(spanUnits);\n    return div;\n  },\n\n  /**\n   * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n   *\n   * @returns {DOMElement} container\n   */\n  _createMousePositionPanelEditToolsElement: function _createMousePositionPanelEditToolsElement(editCoordinates) {\n    var context = this;\n    var div = document.createElement(\"div\");\n    div.className = \"GPmousePositionPanelEditTools\";\n    div.id = this._addUID(\"GPmousePositionPanelEditTools\");\n\n    if (!editCoordinates) {\n      div.style.display = \"none\";\n    }\n\n    var span1 = document.createElement(\"span\");\n    span1.className = \"GPmousePositionEditTool\";\n    span1.id = this._addUID(\"GPmousePositionLocate\");\n    span1.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n\n    if (editCoordinates) {\n      span1.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeLocateClick();\n      });\n    }\n\n    div.appendChild(span1);\n    var span2 = document.createElement(\"span\");\n    span2.className = \"GPmousePositionEditTool\";\n    span2.id = this._addUID(\"GPmousePositionCloseEdit\");\n    span2.title = \"Quitter la saisie des coordonnées\";\n    span2.style.display = \"none\";\n\n    if (editCoordinates) {\n      span2.addEventListener(\"click\", function () {\n        context.onMousePositionEditModeClick(false);\n      });\n    }\n\n    div.appendChild(span2);\n    return div;\n  },\n  // ################################################################### //\n  // #################### Settings container ########################### //\n  // ################################################################### //\n\n  /**\n   * @param {Boolean} [display=false] - specifies if the settings panel must be displayed\n   *\n   * @returns {DOMElement[]} array containing input and label elements\n   */\n  _createShowMousePositionSettingsElement: function _createShowMousePositionSettingsElement(display) {\n    var list = [];\n    var context = this;\n    var input = document.createElement(\"input\");\n    input.type = \"checkbox\";\n    input.id = this._addUID(\"GPshowMousePositionSettings\");\n    var label = document.createElement(\"label\");\n    label.id = this._addUID(\"GPshowMousePositionSettingsPicto\");\n    label.htmlFor = this._addUID(\"GPshowMousePositionSettings\");\n    label.title = \"Réglages\";\n    label.className = \"GPshowMoreOptionsImage GPshowMoreOptions GPshowMousePositionSettingsPicto\"; // FIXME classname and id ?\n\n    label.style.display = display ? \"block\" : \"none\";\n\n    if (label.addEventListener) {\n      label.addEventListener(\"click\", function (e) {\n        if (typeof context.onShowMousePositionSettingsClick === \"function\") {\n          context.onShowMousePositionSettingsClick(e);\n        }\n      }, false);\n    } else if (label.attachEvent) {\n      label.attachEvent(\"onclick\", function (e) {\n        if (typeof context.onShowMousePositionSettingsClick === \"function\") {\n          context.onShowMousePositionSettingsClick(e);\n        }\n      });\n    }\n\n    list.push(input);\n    list.push(label);\n    return list;\n  },\n\n  /**\n   * settings panel\n   * @param {Boolean} [display=true] - specifies if the settings panel must be displayed\n   *\n   * FIXME\n   * don't call this._createMousePositionSettingsSystemsElement\n   * don't call this._createMousePositionSettingsUnitsElement\n   *\n   * @returns {DOMElement} DOM element\n   */\n  _createMousePositionSettingsElement: function _createMousePositionSettingsElement(display) {\n    var container = document.createElement(\"div\");\n    container.id = this._addUID(\"GPmousePositionSettings\");\n    container.style.display = display === undefined || display ? \"block\" : \"none\";\n    var span = document.createElement(\"span\");\n    span.className = \"GPmousePositionSettingsLabel\";\n    span.innerHTML = \"Système de référence\";\n    container.appendChild(span); // FIXME on decompose la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n    // FIXME tableau statique !\n    // var systems = [\n    //     {\n    //         code : \"GEOGRAPHIC\",\n    //         label : \"Géographique\"\n    //     },\n    //     {\n    //         code : \"MERCATOR\",\n    //         label : \"Mercator\"\n    //     },\n    //     {\n    //         code : \"LAMB93\",\n    //         label : \"Lambert 93\"\n    //     },\n    //     {\n    //         code : \"LAMB2E\",\n    //         label : \"Lambert II étendu\"\n    //     }\n    // ];\n    //\n    // var selectSystem = this._createMousePositionSettingsSystemsElement(systems);\n    //\n    // container.appendChild(selectSystem);\n    // FIXME on decompose la fonction pour les besoins du controle,\n    // on ajoutera ces childs à la main...\n    // FIXME tableau statique !\n    // var units = [\n    //     {\n    //         code : \"DEC\",\n    //         label : \"degrés décimaux\",\n    //     },\n    //     {\n    //         code : \"DMS\",\n    //         label : \"degrés sexagésimaux\",\n    //     },\n    //     {\n    //         code : \"RAD\",\n    //         label : \"radians\",\n    //     },\n    //     {\n    //         code : \"GON\",\n    //         label : \"grades\"\n    //     }\n    // ];\n    //\n    // var selectUnits = this._createMousePositionSettingsUnitsElement(units);\n    //\n    // container.appendChild(selectUnits);\n\n    return container;\n  },\n\n  /**\n   * @param {Object[]} systems - list of systems\n   *\n   * @returns {DOMElement} DOM element select\n   */\n  _createMousePositionSettingsSystemsElement: function _createMousePositionSettingsSystemsElement(systems) {\n    // contexte d'execution\n    var context = this;\n    var selectSystem = document.createElement(\"select\");\n    selectSystem.id = this._addUID(\"GPmousePositionProjectionSystem\");\n    selectSystem.className = \"GPinputSelect GPmousePositionSettingsSelect\";\n    selectSystem.addEventListener(\"change\", function (e) {\n      context.onMousePositionProjectionSystemChange(e);\n    });\n    selectSystem.addEventListener(\"mouseover\", function (e) {\n      // FIXME mettre une condition si target === option\n      if (e.target.nodeName !== \"OPTION\") {\n        context.onMousePositionProjectionSystemMouseOver(e);\n      }\n    });\n\n    for (var i = 0; i < systems.length; i++) {\n      var obj = systems[i];\n      var option = document.createElement(\"option\");\n      option.value = obj.code;\n      option.text = obj.label || i; // option.label = obj.label;\n\n      selectSystem.appendChild(option);\n    }\n\n    return selectSystem;\n  },\n\n  /**\n   * @param {Object[]} units - list of units\n   *\n   * @returns {DOMElement} DOM element select\n   */\n  _createMousePositionSettingsUnitsElement: function _createMousePositionSettingsUnitsElement(units) {\n    // contexte d'execution\n    var context = this;\n    var selectUnits = document.createElement(\"select\");\n    selectUnits.id = this._addUID(\"GPmousePositionProjectionUnits\");\n    selectUnits.className = \"GPinputSelect GPmousePositionSettingsSelect\";\n    selectUnits.addEventListener(\"change\", function (e) {\n      context.onMousePositionProjectionUnitsChange(e);\n    });\n\n    for (var j = 0; j < units.length; j++) {\n      var obj = units[j];\n      var option = document.createElement(\"option\");\n      option.value = obj.code ? obj.code : j;\n      option.text = obj.label || j; // option.label = obj.label;\n\n      selectUnits.appendChild(option);\n    }\n\n    return selectUnits;\n  },\n\n  /**\n   * @param {String} [currentProjectionType=\"Metric\"] - \"Geographical\" or \"Metric\"\n   */\n  _resetLabelElements: function _resetLabelElements(currentProjectionType) {\n    // Changement des labels dans le formulaire de saisie\n    var spanLat = document.getElementById(this._addUID(\"GPmousePositionLatLabel\"));\n    spanLat.innerHTML = currentProjectionType === \"Geographical\" ? \"Latitude :\" : \"X :\";\n    var spanLon = document.getElementById(this._addUID(\"GPmousePositionLonLabel\"));\n    spanLon.innerHTML = currentProjectionType === \"Geographical\" ? \"Longitude :\" : \"Y :\";\n  },\n\n  /**\n   * @param {String} currentProjectionUnits - projection units\n   */\n  _resetUnitElements: function _resetUnitElements(currentProjectionUnits) {\n    var value = \"\";\n\n    if (currentProjectionUnits === \"M\" || currentProjectionUnits === \"KM\") {\n      value = currentProjectionUnits.toLowerCase();\n    }\n\n    var elts = document.getElementsByClassName(\"GPmousePositionUnits\");\n\n    for (var e = 0; e < elts.length; e++) {\n      elts[e].innerHTML = value;\n    }\n  },\n\n  /**\n   * @param {Boolean} editCoordinates - edit coordinates option\n   * @param {String} currentProjectionType - current projection type\n   * @param {String} currentProjectionUnits - current projection unit\n   */\n  _resetCoordinateElements: function _resetCoordinateElements(editCoordinates, currentProjectionType, currentProjectionUnits) {\n    // Suppression de tous les enfants de GPmousePositionLatCoordinate\n    var latElt = document.getElementById(this._addUID(\"GPmousePositionLatCoordinate\"));\n\n    while (latElt.firstChild) {\n      latElt.removeChild(latElt.firstChild);\n    }\n\n    var arrayCoords;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords = this._createDMSCoordinateElement(\"Lat\", editCoordinates);\n    } else {\n      arrayCoords = this._createCoordinateElement(\"Lat\", editCoordinates);\n    }\n\n    for (var i = 0; i < arrayCoords.length; i++) {\n      latElt.appendChild(arrayCoords[i]);\n    } // Suppression de tous les enfants de GPmousePositionLonCoordinate\n\n\n    var lonElt = document.getElementById(this._addUID(\"GPmousePositionLonCoordinate\"));\n\n    while (lonElt.firstChild) {\n      lonElt.removeChild(lonElt.firstChild);\n    }\n\n    var arrayCoords1;\n\n    if (currentProjectionUnits === \"DMS\") {\n      arrayCoords1 = this._createDMSCoordinateElement(\"Lon\", editCoordinates);\n    } else {\n      arrayCoords1 = this._createCoordinateElement(\"Lon\", editCoordinates);\n    }\n\n    for (var j = 0; j < arrayCoords1.length; j++) {\n      lonElt.appendChild(arrayCoords1[j]);\n    } // FIXME on simule un deplacement ?\n    // this.onMapMove();\n\n  },\n\n  /**\n   * Set/unset editing mode\n   *\n   * @param {Boolean} editing - active edit coordinates mode\n   */\n  _setEditMode: function _setEditMode(editing) {\n    var locateElt = document.getElementById(this._addUID(\"GPmousePositionLocate\"));\n    locateElt.title = editing ? \"Aller à la position ...\" : \"Cliquer pour saisir des coordonnées\";\n    var closeEditElt = document.getElementById(this._addUID(\"GPmousePositionCloseEdit\"));\n    closeEditElt.style.display = editing ? \"inline-block\" : \"none\";\n    var selector = \"div[id^=\" + this._addUID(\"GPmousePositionCoordinate\") + \"]\";\n    var inputs = document.querySelectorAll(selector + \" input\");\n\n    for (var i = 0; i < inputs.length; i++) {\n      inputs[i].readOnly = !editing;\n\n      if (editing) {\n        inputs[i].value = \"\";\n        inputs[i].classList.remove(\"error\");\n      }\n    }\n\n    var selects = document.querySelectorAll(selector + \" select\");\n\n    for (var j = 0; j < selects.length; j++) {\n      selects[j].disabled = !editing;\n    }\n  },\n\n  /**\n   *\n   * @param {DOMElement} input - input element\n   * @param {Boolean} isFloat - check for float value\n   *\n   * @returns {Boolean} true if input value is within bounds\n   */\n  _checkDMSElement: function _checkDMSElement(input, isFloat) {\n    var b = isFloat !== undefined;\n    var value = input.value;\n\n    if (b) {\n      value = value.replace(\",\", \".\");\n    }\n\n    if (isNaN(value)) {\n      return false;\n    }\n\n    var v = parseFloat(value);\n\n    if (!b && (v | 0) !== v) {\n      // is it an integer\n      return false;\n    }\n\n    var min = Number(input.dataset.min);\n    var max = Number(input.dataset.max);\n    return v >= min && v <= max;\n  },\n\n  /**\n   * @param {String} coordType - \"Lon\" or \"Lat\"\n   * @param {DOMElement} input - input element\n   *\n   * @returns {Boolean} true if input value is within bounds\n   */\n  _checkDMSDegrees: function _checkDMSDegrees(coordType, input) {\n    if (isNaN(input.value)) {\n      return false;\n    }\n\n    var v = parseFloat(input.value);\n\n    if ((v | 0) !== v) {\n      // is it an integer\n      return false;\n    }\n\n    var min = Number(input.dataset.min);\n    var max = Number(input.dataset.max);\n\n    if (v < min || v > max) {\n      return false;\n    }\n\n    var inputMinutes = document.getElementById(this._addUID(\"GPmousePosition\" + coordType + \"Minutes\"));\n    var inputSeconds = document.getElementById(this._addUID(\"GPmousePosition\" + coordType + \"Seconds\"));\n\n    if (v >= max) {\n      inputMinutes.dataset.max = 0;\n      inputSeconds.dataset.max = 0;\n    } else {\n      inputMinutes.dataset.max = 59;\n      inputSeconds.dataset.max = 59.9999;\n    }\n\n    return true;\n  },\n  // ################################################################### //\n  // ####################### handlers Event ############################ //\n  // ################################################################### //\n\n  /**\n   * Function displaying coordinates from cursor position (desktop)\n   * or map center (tactile)\n   * @param {Object} coordinate - coordinates\n   */\n  GPdisplayCoords: function GPdisplayCoords(coordinate) {\n    // Compute coords in case of cursor position (desktop)\n    if (coordinate) {\n      var labelLon = document.getElementById(this._addUID(\"GPmousePositionLonLabel\"));\n      var labelLat = document.getElementById(this._addUID(\"GPmousePositionLatLabel\"));\n\n      if (coordinate.x || coordinate.y) {\n        labelLat.innerHTML = \"X : \";\n        labelLon.innerHTML = \"Y : \";\n      } else if (coordinate.e || coordinate.n) {\n        labelLat.innerHTML = \"E : \";\n        labelLon.innerHTML = \"N : \";\n      } else {\n        labelLat.innerHTML = \"Latitude : \";\n        labelLon.innerHTML = \"Longitude : \";\n      }\n\n      if (_typeof(coordinate.lat) === \"object\" && _typeof(coordinate.lng) === \"object\") {\n        var parts = {\n          lng: \"Lon\",\n          lat: \"Lat\"\n        };\n        var units = [\"Degrees\", \"Minutes\", \"Seconds\"];\n\n        for (var p in parts) {\n          for (var u = 0; u < units.length; ++u) {\n            var selector = \"GPmousePosition\" + parts[p] + units[u];\n            var elt = document.getElementById(this._addUID(selector));\n            var key = units[u].charAt(0).toLowerCase();\n            elt.value = coordinate[p][key];\n          }\n        } // directions\n\n\n        document.getElementById(this._addUID(\"GPmousePositionLonDirection\")).value = coordinate.lng.direction;\n        document.getElementById(this._addUID(\"GPmousePositionLatDirection\")).value = coordinate.lat.direction;\n      } else {\n        var elLat = document.getElementById(this._addUID(\"GPmousePositionLat\"));\n        var elLon = document.getElementById(this._addUID(\"GPmousePositionLon\"));\n        elLat.value = coordinate.x || coordinate.lat || coordinate.e || \"0\";\n        elLon.value = coordinate.y || coordinate.lng || coordinate.lon || coordinate.n || \"0\"; // les unites\n\n        var unit = coordinate.unit === undefined ? \"\" : coordinate.unit;\n        var elements = document.getElementsByClassName(\"GPmousePositionUnits\");\n\n        for (var n = 0; n < elements.length; ++n) {\n          elements[n].innerHTML = unit;\n        }\n      }\n    }\n  },\n\n  /**\n   * Function displaying altitude from cursor position (desktop)\n   * or map center (tactile)\n   * @param {Object} coordinate - coordinates\n   * @param {Number} altitudeTimeoutDelay - when the mouse stop moving, delay before the altitude request is launched\n   * @param {Number} noDataValue - the no data value\n   * @param {Number} noDataValueTolerance - the no data value tolerance\n   */\n  GPdisplayElevation: function GPdisplayElevation(coordinate, altitudeTimeoutDelay, noDataValue, noDataValueTolerance) {\n    // contexte d'execution\n    var self = this; // Latency for altitude request\n\n    var altitudeTimeout;\n\n    if (!altitudeTimeoutDelay) {\n      altitudeTimeoutDelay = 500;\n    }\n\n    clearTimeout(altitudeTimeout);\n    document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"...\";\n\n    if (noDataValue == null) {\n      noDataValue = -99999;\n    }\n\n    if (noDataValueTolerance == null) {\n      noDataValueTolerance = 99980;\n    }\n\n    var maxThreshold = noDataValue + noDataValueTolerance;\n    var minThreshold = noDataValue - noDataValueTolerance; // Compute coords in case of cursor position (desktop)\n\n    if (coordinate) {\n      // If no altitude panel, don't call altitude request\n      if (document.getElementById(this._addUID(\"GPmousePositionAltitude\"))) {\n        altitudeTimeout = setTimeout(function () {\n          self.onRequestAltitude(coordinate, function (z) {\n            if (minThreshold < z && z < maxThreshold) {\n              self.GPresetElevation();\n            } else {\n              document.getElementById(self._addUID(\"GPmousePositionAlt\")).innerHTML = z;\n            }\n          });\n        }, altitudeTimeoutDelay);\n      }\n    }\n  },\n\n  /**\n   * Function reseting altitude value\n   */\n  GPresetElevation: function GPresetElevation() {\n    if (document.getElementById(this._addUID(\"GPmousePositionAltitude\"))) {\n      document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"---\";\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MousePositionDOM);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Controls/MousePositionDOM.js\n");

/***/ }),

/***/ "./src/Common/Utils/CheckRightManagement.js":
/*!**************************************************!*\
  !*** ./src/Common/Utils/CheckRightManagement.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config */ \"./src/Common/Utils/Config.js\");\n\n\n/**\n * @module CheckRightManagement\n * @alias [private] CheckRightManagement\n * @description\n * ...\n *\n * @example\n * check();\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  /**\n   * Contrôle des droits sur les ressources.\n   *\n   * @function check\n   * @param {Object} options - liste des options\n   * @param {String} options.key - clef API\n   * @param {Array} options.resources - liste des ressources\n   * @param {Array} options.services - liste des services\n   * @returns {Object} rightManagement - undefined ou {\n   *       key : \"\",\n   *       service-1 : [resource-1, resource-2],\n   *       service-2 : [resource-1, resource-2]\n   * }\n   */\n  check: function check(options) {\n    // logger\n    var logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"checkrightmanagement\"); // si aucune option n'est renseignée...\n\n    if (!options) {\n      // message orienté pour le developpeur !\n      logger.error(\"WARNING : \" + \"no parameter specified !\");\n      return;\n    } // les options\n\n\n    var _key = options.key;\n\n    var _resources = options.resources || [];\n\n    var _services = options.services || []; // si aucune information sur les ressources,\n    // il est impossible de controler quelquechose !!!\n\n\n    if (_resources.length === 0) {\n      // message orienté pour le developpeur !\n      logger.error(\"WARNING : \" + \"no parameter 'resources' specified !\");\n      return;\n    } // si aucune information sur les services,\n    // il est impossible de controler quelquechose !!!\n\n\n    if (_services.length === 0) {\n      // message orienté pour le developpeur !\n      logger.error(\"WARNING : \" + \"no parameter 'services' specified !\");\n      return;\n    } // les ressources controlées :\n    // Ex.\n    // {\n    //   \"Itineraire\"     : [\"Pieton\", \"Voiture\"],\n    //   \"Geocode\"        : [\"PositionOfInterest\", \"StreetAddress\", \"CadastralParcel\"],\n    //   \"AutoCompletion\" : [\"PositionOfInterest\", \"StreetAddress\", \"CadastralParcel\"],\n    //   \"Elevation\"      : [\"SERVICE_CALCUL_ALTIMETRIQUE_RSC\"]\n    // }\n\n\n    var _rightManagement = {}; // la clef API n'est pas renseignée\n\n    if (!_key) {\n      // on verifie si l'autoconfiguration est disponible\n      if (!_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n        // si l'autoconfiguration n'est pas chargée,\n        // aucune vérification des droits est possible...\n        logger.warn(\"WARNING : \" + \"The 'apiKey' parameter is missing, \" + \"and the contract key configuration has not been loaded, \" + \"so impossible to check yours rights !\");\n        return;\n      } else {\n        // si l'autoconfiguration est chargée,\n        // on recupere la/les clef(s) API, et on en profitera ensuite pour controler\n        // les droits sur les ressources.\n        _key = Object.keys(_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].configuration.generalOptions.apiKeys);\n        logger.log(_key);\n      }\n    } // on verifie si l'autoconfiguration est disponible\n\n\n    if (!_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n      // si l'autoconfiguration n'est pas chargée,\n      // il est toujours possible de requeter le service avec une clef API,\n      // mais les droits sur les ressources ne sont pas garantis, on risque\n      // d'obtenir des erreurs 403 forbidden...\n      // la responsabilité revient à l'utilisateur (message d'information)...\n      logger.warn(\"WARNING : \" + \"the contract key configuration has not been loaded, \" + \"so be carefull !\"); // les ressouces non controlées\n\n      var _noRightManagement = {};\n\n      for (var i = 0; i < _services.length; i++) {\n        var service = _services[i];\n        _noRightManagement[service] = [];\n\n        for (var j = 0; j < _resources.length; j++) {\n          var resource = _resources[j];\n\n          _noRightManagement[service].push(resource);\n        }\n      } // on ajoute la clef\n\n\n      _noRightManagement.key = _key;\n      logger.log(\"right management not checked\", _noRightManagement);\n      return _noRightManagement;\n    } else {\n      // si l'autoconf est chargée,\n      // on verifie la correspondance entre la clef et l'autoconfiguration,\n      // on previent l'utilisateur (message d'information) s'il n'a\n      // pas de droits sur certaines ressources ...\n      // doit on ecarter les ressources sans droit ?\n      // oui, si possible avec un message d'information pour l'utilisateur...\n      for (var k = 0; k < _resources.length; k++) {\n        var _resource = _resources[k];\n\n        for (var l = 0; l < _services.length; l++) {\n          var _service = _services[l];\n          var params = _Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getServiceParams(_resource, _service, _key);\n\n          if (!params || Object.keys(params).length === 0) {\n            logger.warn(\"WARNING : \" + \"The contract key configuration has no rights to load this geoportal \" + \"resource (\" + _resource + \") \" + \"for this service (\" + _service + \") \");\n            continue;\n          }\n\n          if (!_rightManagement[_service]) {\n            _rightManagement[_service] = [];\n          }\n\n          _rightManagement[_service].push(_resource);\n        }\n      }\n\n      if (Object.keys(_rightManagement).length === 0) {\n        logger.warn(\"WARNING : \" + \"The contract key configuration has been loaded, \" + \"and the 'apiKey' parameter has been set, \" + \"but, there is a problem on the mapping between the contract and the key !\");\n        return;\n      } // on ajoute la clef qui correspond à la ressource vérifiée\n\n\n      _rightManagement.key = params.key;\n      logger.log(\"right management checked\", _rightManagement);\n      return _rightManagement;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Utils/CheckRightManagement.js\n");

/***/ }),

/***/ "./src/Common/Utils/Config.js":
/*!************************************!*\
  !*** ./src/Common/Utils/Config.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLogger(\"config\");\n/**\n * @module Config\n * @alias [private] Config\n * @description\n * ...\n *\n * @example\n * isConfigLoaded();\n * getLayerId();\n * getLayerParams();\n * getServiceParams();\n * getResolutions();\n * getGlobalConstraints();\n * getTileMatrix();\n */\n\nvar Config = {\n  /**\n   * autoconf\n   *\n   * @public\n   * @type {Object}\n   */\n  configuration: null,\n\n  /**\n   * Controle du chargement de l'autoconf\n   *\n   * @function isConfigLoaded\n   * @this Config\n   * @public\n   * @returns {Boolean} True si l'autoconf a déjà été chargée, False sinon.\n   */\n  isConfigLoaded: function isConfigLoaded() {\n    var scope = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : {};\n\n    if (scope.Gp && scope.Gp.Config && Object.keys(scope.Gp.Config).length !== 0) {\n      /** ts-syntax */\n      this.configuration = scope.Gp.Config;\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Recuperation de l'identifiant d'une couche donnée\n   *\n   * @function getLayerId\n   * @public\n   * @param {String} layerName - nom de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n   * @param {String} service   - nom du service (par ex. \"WMS\" ou \"WMTS\")\n   * @returns {String} Identifiant de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS$GEOPORTAIL:OGC:WMTS\")\n   */\n  getLayerId: function getLayerId(layerName, service) {\n    var layerId = null; // layer\n    // key : [layerName]$[contexte]:OGC:[service]\n    // ex : \"ORTHOIMAGERY.ORTHOPHOTOS$GEOPORTAIL:OGC:WMTS\"\n    // service\n    // key : [layerName]$[contexte];[service]\n    // ex : PositionOfInterest$OGC:OPENLS;ReverseGeocode\n\n    if (this.configuration) {\n      var layers = this.configuration[\"layers\"];\n\n      for (var key in layers) {\n        if (layers.hasOwnProperty(key)) {\n          var parts = key.split(\"$\");\n\n          if (layerName === parts[0]) {\n            if (parts[1]) {\n              var servicePartsLayer = parts[1].split(\":\");\n              var servicePartsService = parts[1].split(\";\");\n\n              if (servicePartsService[1] === service) {\n                layerId = key;\n                break;\n              }\n\n              if (servicePartsLayer[2] === service) {\n                layerId = key;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!layerId) {\n      logger.error(\"ERROR layer id (layer name: \" + layerName + \" / service: \" + service + \") was not found !?\");\n    }\n\n    return layerId;\n  },\n\n  /**\n   * Récupération des paramètres nécessaires à l'affichage d'une couche WMS ou WMTS\n   *\n   * @function getLayerParams\n   * @public\n   * @param {String} layerName - nom de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n   * @param {String} service   - nom du service (par ex. \"WMS\" ou \"WMTS\")\n   * @param {String} [apiKey]  - Clé de contrat API\n   * @returns {Object} params  - paramètres du service (WMS ou WMTS) pour la couche donnée\n   * @returns {String} params.url        - Url du service à requêter pour afficher la couche\n   * @returns {String} params.version    - Version du service\n   * @returns {String} params.styles     - Style par défaut de la couche\n   * @returns {String} params.format     - Format par défaut de la couche\n   * @returns {String} params.projection - Projection par défaut de la couche\n   * @returns {Number} params.minScale   - Dénominateur d'échelle minimum de la couche\n   * @returns {Number} params.maxScale   - Dénominateur d'échelle maximum de la couche\n   * @returns {Gp.BBox} params.extent    - Etendue de la couche, dans la projection de la couche\n   * @returns {Array} params.legends     - Tableau des légendes associées à la couche\n   * @returns {Array} params.metadata    - Tableau des métadonnées associées à la couche\n   * @returns {Array} params.originators - Tableau des originators associés à la couche\n   * @returns {Array} params.title       - Nom de la resource, lisible par un humain.\n   * @returns {Array} params.description - Url de l'image d'aperçu rapide de la ressource.\n   * @returns {Array} params.quicklookUrl- Tableau des originators associés à la couche\n   * @returns {String} params.[TMSLink]          - Identifiant de la pyramide (TMS), dans le cas d'une couche WMTS\n   * @returns {Gp.Point} params.[matrixOrigin]   - Origine de la matrice (top left corner), dans le cas d'une couche WMTS\n   * @returns {Array} params.[nativeResolutions] - Tableau regroupant les résolutions de chaque niveau de la matrice, dans le cas d'une couche WMTS\n   * @returns {Array} params.[matrixIds]         - Tableau regroupant les identifiants de chaque niveau de la matrice, dans le cas d'une couche WMTS\n   */\n  getLayerParams: function getLayerParams(layerName, service, apiKey) {\n    var params = {};\n\n    if (this.configuration) {\n      // récupération de l'identifiant complet de la couche.\n      var layerId = this.getLayerId(layerName, service);\n\n      if (layerId) {\n        // récupération de l'objet de configuration de la couche\n        var layerConf = this.configuration.layers[layerId]; // controle de la clef\n\n        var key = layerConf.apiKeys[0];\n\n        if (apiKey) {\n          if (apiKey !== key) {\n            logger.error(\"ERROR different keys (\" + apiKey + \" !== \" + key + \") !?\");\n            return;\n          }\n        }\n\n        apiKey = apiKey || key;\n        params.key = apiKey; // récupération des paramètres du service\n\n        params.url = layerConf.getServerUrl(apiKey);\n        params.version = layerConf.getServiceParams().version;\n        params.styles = layerConf.getDefaultStyle();\n        params.format = layerConf.getDefaultFormat();\n        params.projection = layerConf.getDefaultProjection(); // récupération des infos de la couche\n\n        params.minScale = layerConf.getMinScaleDenominator();\n        params.maxScale = layerConf.getMaxScaleDenominator();\n        params.extent = layerConf.getBBOX();\n        params.legends = layerConf.getLegends();\n        params.metadata = layerConf.getMetadata();\n        params.originators = layerConf.getOriginators();\n        params.title = layerConf.getTitle();\n        params.description = layerConf.getDescription();\n        params.quicklookUrl = layerConf.getQuicklookUrl(); // WMTS : récupération des tileMatrixSetLimits\n\n        if (layerConf.wmtsOptions) {\n          params.tileMatrixSetLimits = layerConf.wmtsOptions.tileMatrixSetLimits;\n        } // WMTS : récupération des paramètres de la pyramide (TMS)\n\n\n        var TMSLink = layerConf.getTMSID();\n\n        if (TMSLink) {\n          params.TMSLink = TMSLink;\n          var tmsConf = this.configuration.getTMSConf(TMSLink); // Get matrix origin : Gp.Point = Object{x:Float, y:Float}\n\n          params.matrixOrigin = tmsConf.getTopLeftCorner();\n          params.nativeResolutions = tmsConf.nativeResolutions;\n          params.matrixIds = tmsConf.matrixIds;\n          params.tileMatrices = tmsConf.tileMatrices;\n        }\n      }\n    }\n\n    return params;\n  },\n\n  /**\n   * Recuperation des parametres d'un service\n   *\n   * @function getServiceParams\n   * @public\n   * @param {String} [resource] - \"PositionOfInterest\", \"StreetAddress\", \"Voiture\", \"Pieton\", ...\n   * @param {String} [service] - Geocode, Itineraire, ...\n   * @param {Array} [apiKeys]  - Clé(s) de contrat API\n   * @returns {Object} params - paramètres de la ressource\n   * @returns {String} params. -\n   * @returns {String} params. -\n   * @returns {String} params. -\n   */\n  getServiceParams: function getServiceParams(resource, service, apiKeys) {\n    var params = {};\n\n    if (this.configuration) {\n      // récupération de l'identifiant complet de la couche.\n      var layerId = this.getLayerId(resource, service);\n\n      if (layerId) {\n        // récupération de l'objet de configuration de la couche\n        var layerConf = this.configuration.layers[layerId]; // controle de la clef (on prend la première clé disponible qui est censée avoir accès à la ressource)\n\n        var key = layerConf.apiKeys[0];\n\n        if (apiKeys) {\n          if (!Array.isArray(apiKeys)) {\n            apiKeys = [apiKeys];\n          }\n\n          for (var i = 0; i < apiKeys.length; i++) {\n            if (apiKeys[i] === key) {\n              var keyIndex = i;\n              break;\n            }\n          } // si aucune clé du tableau apiKeys ne correspond, on retourne rien => pas de droits pour la ressource\n\n\n          if (typeof keyIndex === \"undefined\") {\n            return;\n          }\n        } // on retourne la première clé qui a effectivement accès à la ressource\n\n\n        var apiKey = apiKeys[keyIndex] || key;\n        params.key = apiKey; // récupération des paramètres du service\n\n        params.url = layerConf.getServerUrl(apiKey);\n        params.version = layerConf.getServiceParams().version; // récupération des infos de la couche\n\n        params.extent = layerConf.getBBOX();\n        params.title = layerConf.getTitle();\n        params.description = layerConf.getDescription();\n      }\n    }\n\n    return params;\n  },\n\n  /**\n   * Resolution en geographique\n   *\n   * @function getResolutions\n   * @public\n   * @returns {Array} resolutions\n   */\n  getResolutions: function getResolutions() {\n    var resolutions = [];\n\n    if (this.configuration) {\n      resolutions = this.configuration[\"generalOptions\"][\"wgs84Resolutions\"];\n    }\n\n    return resolutions;\n  },\n\n  /**\n   * Recuperation des parametres TMS de la configuration\n   *\n   * @function getTileMatrix\n   * @public\n   * @param {String} tmsName - tile matrix set name\n   * @returns {Object} tile matrix set\n   */\n  getTileMatrix: function getTileMatrix(tmsName) {\n    var tms = {};\n\n    if (this.configuration) {\n      if (tmsName) {\n        tms = this.configuration[\"tileMatrixSets\"][tmsName.toUpperCase()];\n      }\n    }\n\n    return tms;\n  },\n\n  /**\n   * Récupération des contraintes générales d'une couche donnée : extent, minScale, maxScale, projection\n   *\n   * @function getGlobalConstraints\n   * @public\n   * @param {String} layerId - identifiant de la couche\n   * @returns {Object} params - contraintes de la couche\n   * @returns {String} params.projection - Projection par défaut de la couche\n   * @returns {Number} params.minScale   - Dénominateur d'échelle minimum de la couche\n   * @returns {Number} params.maxScale   - Dénominateur d'échelle maximum de la couche\n   * @returns {Gp.BBox} params.extent    - Etendue de la couche, dans la projection de la couche\n   */\n  getGlobalConstraints: function getGlobalConstraints(layerId) {\n    var params = {};\n\n    if (layerId) {\n      // récupération de l'objet de configuration de la couche\n      var layerConf = this.configuration.layers[layerId];\n      params.projection = layerConf.getDefaultProjection();\n      params.minScale = layerConf.getMinScaleDenominator();\n      params.maxScale = layerConf.getMaxScaleDenominator();\n      params.extent = layerConf.getBBOX();\n    }\n\n    return params;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Config);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Utils/Config.js\n");

/***/ }),

/***/ "./src/Common/Utils/LoggerByDefault.js":
/*!*********************************************!*\
  !*** ./src/Common/Utils/LoggerByDefault.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * @module LoggerByDefault\n * @alias [private] LoggerByDefault\n * @description\n * ...\n *\n * @example\n * getLogger();\n * disableAll();\n * enableAll();\n */\n\nvar LoggerByDefault = {\n  /**\n   * creation d'un logger statique\n   *\n   * @function getLogger\n   * @param {String} [name=\"default\"] - the logger name\n   * @returns {Object} logger\n   */\n  getLogger: function getLogger(name) {\n    // INFO :\n    // à la compilation en mode production, on substitue false\n    // avec \"true\", ceci desactive les loggers !\n    //\n    // à la compilation en mode developpement, on substitue false\n    // avec \"false\", ceci permet d'avoir les loggers actifs !\n    //\n    // lors d'une utilisation en module es6, il n'y a pas de substitution de false,\n    // les loggers sont donc actifs par defaut !\n    //\n    // > Substitute global constants configured at compile time\n    // cf. webpack.config.js\n    // on masque cette constante afin d'eviter \"referenceerror not defined\"\n    \"false\".match(/true/) ? loglevel__WEBPACK_IMPORTED_MODULE_0__[\"disableAll\"]() : loglevel__WEBPACK_IMPORTED_MODULE_0__[\"enableAll\"]();\n    var logname = name || \"default\";\n    return loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"](logname);\n  },\n\n  /**\n   * desactive tous les loggers\n   * @function disableAll\n   */\n  disableAll: function disableAll() {\n    var loggers = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLoggers\"]();\n\n    for (var key in loggers) {\n      if (Object.hasOwnProperty.call(loggers, key)) {\n        var logger = loggers[key];\n        logger.disableAll();\n      }\n    }\n  },\n\n  /**\n   * active tous les loggers\n   * @function enableAll\n   */\n  enableAll: function enableAll() {\n    var loggers = loglevel__WEBPACK_IMPORTED_MODULE_0__[\"getLoggers\"]();\n\n    for (var key in loggers) {\n      if (Object.hasOwnProperty.call(loggers, key)) {\n        var logger = loggers[key];\n        logger.enableAll();\n      }\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LoggerByDefault);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcz81YzkwIl0sIm5hbWVzIjpbIkxvZ2dlckJ5RGVmYXVsdCIsImdldExvZ2dlciIsIm5hbWUiLCJtYXRjaCIsIkxvZyIsImxvZ25hbWUiLCJkaXNhYmxlQWxsIiwibG9nZ2VycyIsImtleSIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImxvZ2dlciIsImVuYWJsZUFsbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUlBLGVBQWUsR0FBRztBQUNsQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxXQUFTLEVBQUcsbUJBQVVDLElBQVYsRUFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxxQkFBaUJDLEtBQWpCLENBQXVCLE1BQXZCLENBQUQsR0FBbUNDLG1EQUFBLEVBQW5DLEdBQXNEQSxrREFBQSxFQUF0RDtBQUNBLFFBQUlDLE9BQU8sR0FBR0gsSUFBSSxJQUFJLFNBQXRCO0FBQ0EsV0FBT0Usa0RBQUEsQ0FBY0MsT0FBZCxDQUFQO0FBQ0gsR0F6QmlCOztBQTBCbEI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsWUFBVSxFQUFHLHNCQUFZO0FBQ3JCLFFBQUlDLE9BQU8sR0FBR0gsbURBQUEsRUFBZDs7QUFDQSxTQUFLLElBQU1JLEdBQVgsSUFBa0JELE9BQWxCLEVBQTJCO0FBQ3ZCLFVBQUlFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsSUFBdEIsQ0FBMkJKLE9BQTNCLEVBQW9DQyxHQUFwQyxDQUFKLEVBQThDO0FBQzFDLFlBQU1JLE1BQU0sR0FBR0wsT0FBTyxDQUFDQyxHQUFELENBQXRCO0FBQ0FJLGNBQU0sQ0FBQ04sVUFBUDtBQUNIO0FBQ0o7QUFDSixHQXRDaUI7O0FBdUNsQjtBQUNKO0FBQ0E7QUFDQTtBQUNJTyxXQUFTLEVBQUcscUJBQVk7QUFDcEIsUUFBSU4sT0FBTyxHQUFHSCxtREFBQSxFQUFkOztBQUNBLFNBQUssSUFBTUksR0FBWCxJQUFrQkQsT0FBbEIsRUFBMkI7QUFDdkIsVUFBSUUsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxJQUF0QixDQUEyQkosT0FBM0IsRUFBb0NDLEdBQXBDLENBQUosRUFBOEM7QUFDMUMsWUFBTUksTUFBTSxHQUFHTCxPQUFPLENBQUNDLEdBQUQsQ0FBdEI7QUFDQUksY0FBTSxDQUFDQyxTQUFQO0FBQ0g7QUFDSjtBQUNKO0FBbkRpQixDQUF0QjtBQXNEZWIsOEVBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIExvZyBmcm9tIFwibG9nbGV2ZWxcIjtcblxuLyoqXG4gKiBAbW9kdWxlIExvZ2dlckJ5RGVmYXVsdFxuICogQGFsaWFzIFtwcml2YXRlXSBMb2dnZXJCeURlZmF1bHRcbiAqIEBkZXNjcmlwdGlvblxuICogLi4uXG4gKlxuICogQGV4YW1wbGVcbiAqIGdldExvZ2dlcigpO1xuICogZGlzYWJsZUFsbCgpO1xuICogZW5hYmxlQWxsKCk7XG4gKi9cbnZhciBMb2dnZXJCeURlZmF1bHQgPSB7XG4gICAgLyoqXG4gICAgICogY3JlYXRpb24gZCd1biBsb2dnZXIgc3RhdGlxdWVcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvbiBnZXRMb2dnZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWU9XCJkZWZhdWx0XCJdIC0gdGhlIGxvZ2dlciBuYW1lXG4gICAgICogQHJldHVybnMge09iamVjdH0gbG9nZ2VyXG4gICAgICovXG4gICAgZ2V0TG9nZ2VyIDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgLy8gSU5GTyA6XG4gICAgICAgIC8vIMOgIGxhIGNvbXBpbGF0aW9uIGVuIG1vZGUgcHJvZHVjdGlvbiwgb24gc3Vic3RpdHVlIF9fUFJPRFVDVElPTl9fXG4gICAgICAgIC8vIGF2ZWMgXCJ0cnVlXCIsIGNlY2kgZGVzYWN0aXZlIGxlcyBsb2dnZXJzICFcbiAgICAgICAgLy9cbiAgICAgICAgLy8gw6AgbGEgY29tcGlsYXRpb24gZW4gbW9kZSBkZXZlbG9wcGVtZW50LCBvbiBzdWJzdGl0dWUgX19QUk9EVUNUSU9OX19cbiAgICAgICAgLy8gYXZlYyBcImZhbHNlXCIsIGNlY2kgcGVybWV0IGQnYXZvaXIgbGVzIGxvZ2dlcnMgYWN0aWZzICFcbiAgICAgICAgLy9cbiAgICAgICAgLy8gbG9ycyBkJ3VuZSB1dGlsaXNhdGlvbiBlbiBtb2R1bGUgZXM2LCBpbCBuJ3kgYSBwYXMgZGUgc3Vic3RpdHV0aW9uIGRlIF9fUFJPRFVDVElPTl9fLFxuICAgICAgICAvLyBsZXMgbG9nZ2VycyBzb250IGRvbmMgYWN0aWZzIHBhciBkZWZhdXQgIVxuICAgICAgICAvL1xuICAgICAgICAvLyA+IFN1YnN0aXR1dGUgZ2xvYmFsIGNvbnN0YW50cyBjb25maWd1cmVkIGF0IGNvbXBpbGUgdGltZVxuICAgICAgICAvLyBjZi4gd2VicGFjay5jb25maWcuanNcbiAgICAgICAgLy8gb24gbWFzcXVlIGNldHRlIGNvbnN0YW50ZSBhZmluIGQnZXZpdGVyIFwicmVmZXJlbmNlZXJyb3Igbm90IGRlZmluZWRcIlxuICAgICAgICAoXCJfX1BST0RVQ1RJT05fX1wiLm1hdGNoKC90cnVlLykpID8gTG9nLmRpc2FibGVBbGwoKSA6IExvZy5lbmFibGVBbGwoKTtcbiAgICAgICAgdmFyIGxvZ25hbWUgPSBuYW1lIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgICByZXR1cm4gTG9nLmdldExvZ2dlcihsb2duYW1lKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGRlc2FjdGl2ZSB0b3VzIGxlcyBsb2dnZXJzXG4gICAgICogQGZ1bmN0aW9uIGRpc2FibGVBbGxcbiAgICAgKi9cbiAgICBkaXNhYmxlQWxsIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbG9nZ2VycyA9IExvZy5nZXRMb2dnZXJzKCk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGxvZ2dlcnMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChsb2dnZXJzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9nZ2VyID0gbG9nZ2Vyc1trZXldO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kaXNhYmxlQWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGFjdGl2ZSB0b3VzIGxlcyBsb2dnZXJzXG4gICAgICogQGZ1bmN0aW9uIGVuYWJsZUFsbFxuICAgICAqL1xuICAgIGVuYWJsZUFsbCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxvZ2dlcnMgPSBMb2cuZ2V0TG9nZ2VycygpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsb2dnZXJzKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobG9nZ2Vycywga2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZ2dlciA9IGxvZ2dlcnNba2V5XTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZW5hYmxlQWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXJCeURlZmF1bHQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Common/Utils/LoggerByDefault.js\n");

/***/ }),

/***/ "./src/Common/Utils/MathUtils.js":
/*!***************************************!*\
  !*** ./src/Common/Utils/MathUtils.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n* @module MathUtils\n* @alias Gp.MathUtils\n* @description\n* ...\n*\n* @example\n* modulo();\n* decimalToDMS();\n* toInteger();\n* isInteger();\n* toFloat();\n*/\nvar MathUtils = {\n  /**\n   * Reste de la division euclidienne\n   * @function modulo\n   * @param {Number} a - divisor\n   * @param {Number} b - quotient\n   * @returns {Number} Modulo\n   */\n  modulo: function modulo(a, b) {\n    var r = a % b;\n    return r * b < 0 ? r + b : r;\n  },\n\n  /**\n   * Transform degrees, minutes, seconds form decimal degrees -\n   * Largely inspired by the private function degreesToStringHDMS from ol/coordinate.js\n   *\n   * @function decimalToDMS\n   * @param {Number} degrees - decimal degrees\n   * @param {Array} hemispheres - \"NS\" ou \"EO\"\n   * @param {Number} numDigits - number of digits for seconds\n   * @returns {Object} DMS coordinate\n   */\n  decimalToDMS: function decimalToDMS(degrees, hemispheres, numDigits) {\n    var normalizedDegrees = this.modulo(degrees + 180, 360) - 180;\n    var x = Math.abs(3600 * normalizedDegrees);\n    var dflPrecision = numDigits || 0;\n    var precision = Math.pow(10, dflPrecision);\n    var deg = Math.floor(x / 3600);\n    var min = Math.floor((x - deg * 3600) / 60);\n    var sec = x - deg * 3600 - min * 60;\n    sec = Math.ceil(sec * precision) / precision;\n\n    if (sec >= 60) {\n      sec = 0;\n      min += 1;\n    }\n\n    if (min >= 60) {\n      min = 0;\n      deg += 1;\n    }\n\n    var direction = hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n    return {\n      d: deg,\n      m: min,\n      s: sec,\n      direction: direction\n    };\n  },\n\n  /**\n   * Converts string to Integer\n   *\n   * @function toInteger\n   * @param {String} s - string number\n   * @param {Numeric} base - between 2 and 36\n   * @returns {null|Numeric} result\n   */\n  toInteger: function toInteger(s, base) {\n    var _base = base || 10;\n\n    var n = parseInt(s, _base);\n\n    if (!isNaN(n) && isFinite(n)) {\n      return n;\n    }\n\n    return null;\n  },\n\n  /**\n   * check if s represents an integer\n   *\n   * @function isInteger\n   * @param {String} s - string number\n   * @returns {Boolean} is integer\n   */\n  isInteger: function isInteger(s) {\n    if (isNaN(s)) {\n      return false;\n    }\n\n    var v = parseFloat(s);\n    return (v | 0) === v;\n  },\n\n  /**\n   * Converts s to float\n   *\n   * @function toFloat\n   * @param {String} s - string number\n   * @returns {null|Numeric} result\n   */\n  toFloat: function toFloat(s) {\n    var n = parseFloat(s);\n\n    if (!isNaN(n) && isFinite(n)) {\n      return n;\n    }\n\n    return null;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MathUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL1V0aWxzL01hdGhVdGlscy5qcz8yMzFlIl0sIm5hbWVzIjpbIk1hdGhVdGlscyIsIm1vZHVsbyIsImEiLCJiIiwiciIsImRlY2ltYWxUb0RNUyIsImRlZ3JlZXMiLCJoZW1pc3BoZXJlcyIsIm51bURpZ2l0cyIsIm5vcm1hbGl6ZWREZWdyZWVzIiwieCIsIk1hdGgiLCJhYnMiLCJkZmxQcmVjaXNpb24iLCJwcmVjaXNpb24iLCJwb3ciLCJkZWciLCJmbG9vciIsIm1pbiIsInNlYyIsImNlaWwiLCJkaXJlY3Rpb24iLCJjaGFyQXQiLCJkIiwibSIsInMiLCJ0b0ludGVnZXIiLCJiYXNlIiwiX2Jhc2UiLCJuIiwicGFyc2VJbnQiLCJpc05hTiIsImlzRmluaXRlIiwiaXNJbnRlZ2VyIiwidiIsInBhcnNlRmxvYXQiLCJ0b0Zsb2F0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsU0FBUyxHQUFHO0FBQ1o7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsUUFBTSxFQUFHLGdCQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDckIsUUFBSUMsQ0FBQyxHQUFHRixDQUFDLEdBQUdDLENBQVo7QUFDQSxXQUFPQyxDQUFDLEdBQUdELENBQUosR0FBUSxDQUFSLEdBQVlDLENBQUMsR0FBR0QsQ0FBaEIsR0FBb0JDLENBQTNCO0FBQ0gsR0FYVzs7QUFhWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxjQUFZLEVBQUcsc0JBQVVDLE9BQVYsRUFBbUJDLFdBQW5CLEVBQWdDQyxTQUFoQyxFQUEyQztBQUN0RCxRQUFJQyxpQkFBaUIsR0FBRyxLQUFLUixNQUFMLENBQVlLLE9BQU8sR0FBRyxHQUF0QixFQUEyQixHQUEzQixJQUFrQyxHQUExRDtBQUNBLFFBQUlJLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsT0FBT0gsaUJBQWhCLENBQVI7QUFDQSxRQUFJSSxZQUFZLEdBQUdMLFNBQVMsSUFBSSxDQUFoQztBQUNBLFFBQUlNLFNBQVMsR0FBR0gsSUFBSSxDQUFDSSxHQUFMLENBQVMsRUFBVCxFQUFhRixZQUFiLENBQWhCO0FBRUEsUUFBSUcsR0FBRyxHQUFHTCxJQUFJLENBQUNNLEtBQUwsQ0FBV1AsQ0FBQyxHQUFHLElBQWYsQ0FBVjtBQUNBLFFBQUlRLEdBQUcsR0FBR1AsSUFBSSxDQUFDTSxLQUFMLENBQVcsQ0FBQ1AsQ0FBQyxHQUFHTSxHQUFHLEdBQUcsSUFBWCxJQUFtQixFQUE5QixDQUFWO0FBQ0EsUUFBSUcsR0FBRyxHQUFHVCxDQUFDLEdBQUlNLEdBQUcsR0FBRyxJQUFYLEdBQW9CRSxHQUFHLEdBQUcsRUFBcEM7QUFDQUMsT0FBRyxHQUFHUixJQUFJLENBQUNTLElBQUwsQ0FBVUQsR0FBRyxHQUFHTCxTQUFoQixJQUE2QkEsU0FBbkM7O0FBRUEsUUFBSUssR0FBRyxJQUFJLEVBQVgsRUFBZTtBQUNYQSxTQUFHLEdBQUcsQ0FBTjtBQUNBRCxTQUFHLElBQUksQ0FBUDtBQUNIOztBQUVELFFBQUlBLEdBQUcsSUFBSSxFQUFYLEVBQWU7QUFDWEEsU0FBRyxHQUFHLENBQU47QUFDQUYsU0FBRyxJQUFJLENBQVA7QUFDSDs7QUFFRCxRQUFJSyxTQUFTLEdBQUdkLFdBQVcsQ0FBQ2UsTUFBWixDQUFtQmIsaUJBQWlCLEdBQUcsQ0FBcEIsR0FBd0IsQ0FBeEIsR0FBNEIsQ0FBL0MsQ0FBaEI7QUFDQSxXQUFPO0FBQ0hjLE9BQUMsRUFBR1AsR0FERDtBQUVIUSxPQUFDLEVBQUdOLEdBRkQ7QUFHSE8sT0FBQyxFQUFHTixHQUhEO0FBSUhFLGVBQVMsRUFBR0E7QUFKVCxLQUFQO0FBTUgsR0FuRFc7O0FBcURaO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUssV0FBUyxFQUFHLG1CQUFVRCxDQUFWLEVBQWFFLElBQWIsRUFBbUI7QUFDM0IsUUFBSUMsS0FBSyxHQUFHRCxJQUFJLElBQUksRUFBcEI7O0FBQ0EsUUFBSUUsQ0FBQyxHQUFHQyxRQUFRLENBQUNMLENBQUQsRUFBSUcsS0FBSixDQUFoQjs7QUFDQSxRQUFJLENBQUNHLEtBQUssQ0FBQ0YsQ0FBRCxDQUFOLElBQWFHLFFBQVEsQ0FBQ0gsQ0FBRCxDQUF6QixFQUE4QjtBQUMxQixhQUFPQSxDQUFQO0FBQ0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FwRVc7O0FBc0VaO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lJLFdBQVMsRUFBRyxtQkFBVVIsQ0FBVixFQUFhO0FBQ3JCLFFBQUlNLEtBQUssQ0FBQ04sQ0FBRCxDQUFULEVBQWM7QUFDVixhQUFPLEtBQVA7QUFDSDs7QUFFRCxRQUFJUyxDQUFDLEdBQUdDLFVBQVUsQ0FBQ1YsQ0FBRCxDQUFsQjtBQUNBLFdBQVEsQ0FBQ1MsQ0FBQyxHQUFHLENBQUwsTUFBWUEsQ0FBcEI7QUFDSCxHQXBGVzs7QUFzRlo7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUUsU0FBTyxFQUFHLGlCQUFVWCxDQUFWLEVBQWE7QUFDbkIsUUFBSUksQ0FBQyxHQUFHTSxVQUFVLENBQUNWLENBQUQsQ0FBbEI7O0FBQ0EsUUFBSSxDQUFDTSxLQUFLLENBQUNGLENBQUQsQ0FBTixJQUFhRyxRQUFRLENBQUNILENBQUQsQ0FBekIsRUFBOEI7QUFDMUIsYUFBT0EsQ0FBUDtBQUNIOztBQUNELFdBQU8sSUFBUDtBQUNIO0FBbkdXLENBQWhCO0FBc0dlN0Isd0VBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL01hdGhVdGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBAbW9kdWxlIE1hdGhVdGlsc1xuKiBAYWxpYXMgR3AuTWF0aFV0aWxzXG4qIEBkZXNjcmlwdGlvblxuKiAuLi5cbipcbiogQGV4YW1wbGVcbiogbW9kdWxvKCk7XG4qIGRlY2ltYWxUb0RNUygpO1xuKiB0b0ludGVnZXIoKTtcbiogaXNJbnRlZ2VyKCk7XG4qIHRvRmxvYXQoKTtcbiovXG52YXIgTWF0aFV0aWxzID0ge1xuICAgIC8qKlxuICAgICAqIFJlc3RlIGRlIGxhIGRpdmlzaW9uIGV1Y2xpZGllbm5lXG4gICAgICogQGZ1bmN0aW9uIG1vZHVsb1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhIC0gZGl2aXNvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiIC0gcXVvdGllbnRcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBNb2R1bG9cbiAgICAgKi9cbiAgICBtb2R1bG8gOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgciA9IGEgJSBiO1xuICAgICAgICByZXR1cm4gciAqIGIgPCAwID8gciArIGIgOiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm0gZGVncmVlcywgbWludXRlcywgc2Vjb25kcyBmb3JtIGRlY2ltYWwgZGVncmVlcyAtXG4gICAgICogTGFyZ2VseSBpbnNwaXJlZCBieSB0aGUgcHJpdmF0ZSBmdW5jdGlvbiBkZWdyZWVzVG9TdHJpbmdIRE1TIGZyb20gb2wvY29vcmRpbmF0ZS5qc1xuICAgICAqXG4gICAgICogQGZ1bmN0aW9uIGRlY2ltYWxUb0RNU1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZWdyZWVzIC0gZGVjaW1hbCBkZWdyZWVzXG4gICAgICogQHBhcmFtIHtBcnJheX0gaGVtaXNwaGVyZXMgLSBcIk5TXCIgb3UgXCJFT1wiXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG51bURpZ2l0cyAtIG51bWJlciBvZiBkaWdpdHMgZm9yIHNlY29uZHNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBETVMgY29vcmRpbmF0ZVxuICAgICAqL1xuICAgIGRlY2ltYWxUb0RNUyA6IGZ1bmN0aW9uIChkZWdyZWVzLCBoZW1pc3BoZXJlcywgbnVtRGlnaXRzKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkRGVncmVlcyA9IHRoaXMubW9kdWxvKGRlZ3JlZXMgKyAxODAsIDM2MCkgLSAxODA7XG4gICAgICAgIHZhciB4ID0gTWF0aC5hYnMoMzYwMCAqIG5vcm1hbGl6ZWREZWdyZWVzKTtcbiAgICAgICAgdmFyIGRmbFByZWNpc2lvbiA9IG51bURpZ2l0cyB8fCAwO1xuICAgICAgICB2YXIgcHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIGRmbFByZWNpc2lvbik7XG5cbiAgICAgICAgdmFyIGRlZyA9IE1hdGguZmxvb3IoeCAvIDM2MDApO1xuICAgICAgICB2YXIgbWluID0gTWF0aC5mbG9vcigoeCAtIGRlZyAqIDM2MDApIC8gNjApO1xuICAgICAgICB2YXIgc2VjID0geCAtIChkZWcgKiAzNjAwKSAtIChtaW4gKiA2MCk7XG4gICAgICAgIHNlYyA9IE1hdGguY2VpbChzZWMgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuXG4gICAgICAgIGlmIChzZWMgPj0gNjApIHtcbiAgICAgICAgICAgIHNlYyA9IDA7XG4gICAgICAgICAgICBtaW4gKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW4gPj0gNjApIHtcbiAgICAgICAgICAgIG1pbiA9IDA7XG4gICAgICAgICAgICBkZWcgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBoZW1pc3BoZXJlcy5jaGFyQXQobm9ybWFsaXplZERlZ3JlZXMgPCAwID8gMSA6IDApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZCA6IGRlZyxcbiAgICAgICAgICAgIG0gOiBtaW4sXG4gICAgICAgICAgICBzIDogc2VjLFxuICAgICAgICAgICAgZGlyZWN0aW9uIDogZGlyZWN0aW9uXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHN0cmluZyB0byBJbnRlZ2VyXG4gICAgICpcbiAgICAgKiBAZnVuY3Rpb24gdG9JbnRlZ2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHMgLSBzdHJpbmcgbnVtYmVyXG4gICAgICogQHBhcmFtIHtOdW1lcmljfSBiYXNlIC0gYmV0d2VlbiAyIGFuZCAzNlxuICAgICAqIEByZXR1cm5zIHtudWxsfE51bWVyaWN9IHJlc3VsdFxuICAgICAqL1xuICAgIHRvSW50ZWdlciA6IGZ1bmN0aW9uIChzLCBiYXNlKSB7XG4gICAgICAgIHZhciBfYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgICAgIHZhciBuID0gcGFyc2VJbnQocywgX2Jhc2UpO1xuICAgICAgICBpZiAoIWlzTmFOKG4pICYmIGlzRmluaXRlKG4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgaWYgcyByZXByZXNlbnRzIGFuIGludGVnZXJcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvbiBpc0ludGVnZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcyAtIHN0cmluZyBudW1iZXJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXMgaW50ZWdlclxuICAgICAqL1xuICAgIGlzSW50ZWdlciA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIGlmIChpc05hTihzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHYgPSBwYXJzZUZsb2F0KHMpO1xuICAgICAgICByZXR1cm4gKCh2IHwgMCkgPT09IHYpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBzIHRvIGZsb2F0XG4gICAgICpcbiAgICAgKiBAZnVuY3Rpb24gdG9GbG9hdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzIC0gc3RyaW5nIG51bWJlclxuICAgICAqIEByZXR1cm5zIHtudWxsfE51bWVyaWN9IHJlc3VsdFxuICAgICAqL1xuICAgIHRvRmxvYXQgOiBmdW5jdGlvbiAocykge1xuICAgICAgICB2YXIgbiA9IHBhcnNlRmxvYXQocyk7XG4gICAgICAgIGlmICghaXNOYU4obikgJiYgaXNGaW5pdGUobikpIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1hdGhVdGlscztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/Utils/MathUtils.js\n");

/***/ }),

/***/ "./src/Common/Utils/Register.js":
/*!**************************************!*\
  !*** ./src/Common/Utils/Register.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * @module Register\n * @alias [private] Register\n * @description\n * Register definition for IGNF, and EPSG CRS.\n *\n * @example\n * Gp.Register.IGNF.AMST63\n *   // return : \"+title=Amsterdam 1963 +proj=geocent +towgs84=109.753,-528.133,-362.244,0,0,0,0 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\"\n * Gp.Register.get(\"IGNF:AMST63\")\n *   // same as Gp.Register.IGNF.AMST63\n */\nvar Register = {\n  /**\n   * instance already loaded into proj4\n   */\n  isLoaded: false,\n\n  /**\n   * get the definition for a code\n   *\n   * @function get\n   * @param {String} name - ie. EPSG:2154 (Lambert)\n   * @returns {Object} definition\n   * @example\n   * Register.get(\"EPSG:2154\");\n   * // \"+title=RGF93 / Lambert-93 +proj=lcc +lat_1=49 ...\"\n   */\n  get: function get(name) {\n    if (name === \"\" || name === null || typeof name === \"undefined\") {\n      return;\n    }\n\n    var s = name.split(\":\");\n\n    if (s.length !== 2) {\n      return;\n    }\n\n    var _register = s[0];\n    var _code = s[1];\n\n    if (!this.hasOwnProperty(_register)) {\n      return;\n    }\n\n    if (!this[_register].hasOwnProperty(_code)) {\n      return;\n    }\n\n    return this[_register][_code];\n  },\n\n  /**\n   * does projection code exist ?\n   *\n   * @function exist\n   * @param {String} name - ie. EPSG:2154 (Lambert)\n   * @returns {Boolean} true/false\n   * @example\n   * Register.exist(\"EPSG:2154\"); // true\n   */\n  exist: function exist(name) {\n    if (name === \"\" || name === null || typeof name === \"undefined\") {\n      return false;\n    }\n\n    var s = name.split(\":\");\n\n    if (s.length !== 2) {\n      return false;\n    }\n\n    var _register = s[0];\n    var _code = s[1];\n\n    if (!this.hasOwnProperty(_register)) {\n      return false;\n    }\n\n    if (!this[_register].hasOwnProperty(_code)) {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * load all defs to proj4\n   * @function load\n   * @param {Object} Proj4 - proj4 instance\n   */\n  load: function load(Proj4) {\n    // un flag pour savoir si le chargement est déjà realisé\n    // (car ceci peut être couteux !)\n    if (!this.isLoaded) {\n      var registers = [\"IGNF\", // exception lors du register IGNF ?\n      \"EPSG\", \"CRS\"];\n\n      for (var i = 0; i < registers.length; i++) {\n        var _register = registers[i];\n        var codes = this[_register];\n\n        for (var _code in codes) {\n          if (codes.hasOwnProperty(_code)) {\n            var name = _register + \":\" + _code;\n            Proj4.defs(name, this.get(name)); // on enlève la dependance à OpenLayers...\n            // la fonction register est donc à appeller afin d'enregistrer\n            // les definitions dans OpenLayers :\n            //  import { get } from \"ol/proj\";\n            //  import proj4 from \"proj4\";\n            //  import { register } from \"ol/proj/proj4\";\n            //      Register.load();\n            //      // Make projections defined in proj4 (with proj4.defs()) available in OpenLayers.\n            //      // see ol/proj/proj4.register (https://openlayers.org/en/latest/apidoc/module-ol_proj_proj4.html)\n            //      register(proj4);\n            //      console.log(get(\"CRS:84\").getCode()); // \"CRS:84\"\n          }\n        }\n      }\n      /** ts-syntax */\n\n\n      this.isLoaded = true;\n    }\n  },\n\n  /**\n   * load defs by default to proj4\n   *\n   * include into proj4 :\n   * - WGS84\n   * - ['EPSG:4326']\n   * - ['EPSG:3785'], ['EPSG:3857'], GOOGLE, ['EPSG:900913'], ['EPSG:102113']\n   * +\n   * - [\"EPSG:2154\"], [\"EPSG:27571\"],  [\"EPSG:27572\"],  [\"EPSG:27573\"],  [\"EPSG:2757\"],\n   * - [\"CRS:84\"],\n   * - [\"IGNF:LAMB93\"],\n   * - [\"IGNF:LAMBE\"], [\"IGNF:LAMB1\"],  [\"IGNF:LAMB2\"],  [\"IGNF:LAMB3\"],  [\"IGNF:LAMB4\"],\n   * - [\"IGNF:RGF93G\"],\n   * - [\"IGNF:WGS84G\"]\n   *\n   * @function loadByDefault\n   * @param {Object} Proj4 - proj4 instance\n   */\n  loadByDefault: function loadByDefault(Proj4) {\n    // la liste de projections par defaut...\n    var registers = {\n      EPSG: {\n        2154: Register[\"EPSG\"][\"2154\"],\n        27571: Register[\"EPSG\"][\"27571\"],\n        27572: Register[\"EPSG\"][\"27572\"],\n        27573: Register[\"EPSG\"][\"27573\"],\n        27574: Register[\"EPSG\"][\"27574\"]\n      },\n      CRS: {\n        84: Register[\"CRS\"][\"84\"]\n      },\n      IGNF: {\n        LAMB93: Register[\"IGNF\"][\"LAMB93\"],\n        LAMBE: Register[\"IGNF\"][\"LAMBE\"],\n        LAMB1: Register[\"IGNF\"][\"LAMB1\"],\n        LAMB2: Register[\"IGNF\"][\"LAMB2\"],\n        LAMB3: Register[\"IGNF\"][\"LAMB3\"],\n        LAMB4: Register[\"IGNF\"][\"LAMB4\"],\n        RGF93G: Register[\"IGNF\"][\"RGF93G\"],\n        WGS84G: Register[\"IGNF\"][\"WGS84G\"]\n      }\n    };\n\n    for (var register in registers) {\n      if (registers.hasOwnProperty(register)) {\n        var codes = registers[register];\n\n        for (var code in codes) {\n          if (codes.hasOwnProperty(code)) {\n            var name = register + \":\" + code;\n            Proj4.defs(name, codes[code]);\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * load only a def to proj4\n   *\n   * @function loadByName\n   * @param {Object} Proj4 - proj4 instance\n   * @param {String} name - ie. EPSG:2154 (Lambert)\n   * @returns {Boolean} true/false\n   */\n  loadByName: function loadByName(Proj4, name) {\n    if (!this.exist(name)) {\n      return false;\n    }\n\n    try {\n      Proj4.defs(name, this.get(name));\n    } catch (e) {\n      // FIXME message !?\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * definitions EPSG\n   * @enum\n   */\n  EPSG: {\n    4978: \"+proj=geocent +datum=WGS84 +units=m +no_defs \",\n    3857: \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\",\n    3785: \"+title=WGS 84 / Pseudo-Mercator (deprecated) +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\",\n    4149: \"+title=CH1903 +proj=longlat +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +no_defs \",\n    4150: \"+title=CH1903plus +proj=longlat +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +no_defs \",\n    4151: \"+title=CHTRF95 +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4171: \"+title=RGF93 +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4230: \"+title=ED50 +proj=longlat +ellps=intl +no_defs \",\n    4235: \"+title=Guyane Francaise +proj=longlat +ellps=intl +no_defs \",\n    4258: \"+title=ETRS89 +proj=longlat +ellps=GRS80 +no_defs \",\n    4275: \"+title=NTF +proj=longlat +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +no_defs \",\n    4322: \"+title=WGS 72 +proj=longlat +ellps=WGS72 +no_defs \",\n    4326: \"+title=WGS 84 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs \",\n    4467: \"+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    4470: \"+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4471: \"+proj=utm +zone=38 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    4474: \"+proj=utm +zone=38 +south +ellps=intl +towgs84=-382,-59,-262,0,0,0,0 +units=m +no_defs \",\n    4558: \"+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4559: \"+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    4621: \"+title=Fort Marigot +proj=longlat +ellps=intl +towgs84=137,248,-430,0,0,0,0 +no_defs \",\n    4622: \"+title=Guadeloupe 1948 +proj=longlat +ellps=intl +no_defs \",\n    4623: \"+title=CSG67 +proj=longlat +ellps=intl +towgs84=-186,230,110,0,0,0,0 +no_defs \",\n    4624: \"+title=RGFG95 +proj=longlat +ellps=GRS80 +towgs84=2,2,-2,0,0,0,0 +no_defs \",\n    4625: \"+title=Martinique 1938 +proj=longlat +ellps=intl +no_defs \",\n    4626: \"+title=Reunion 1947 +proj=longlat +ellps=intl +no_defs \",\n    4627: \"+title=RGR92 +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4628: \"+title=Tahiti 52 +proj=longlat +ellps=intl +towgs84=162,117,154,0,0,0,0 +no_defs \",\n    4629: \"+title=Tahaa 54 +proj=longlat +ellps=intl +no_defs \",\n    4630: \"+title=IGN72 Nuku Hiva +proj=longlat +ellps=intl +no_defs \",\n    4632: \"+title=Combani 1950 +proj=longlat +ellps=intl +towgs84=-382,-59,-262,0,0,0,0 +no_defs \",\n    4633: \"+title=IGN56 Lifou +proj=longlat +ellps=intl +no_defs \",\n    4634: \"+title=IGN72 Grand Terre +proj=longlat +ellps=intl +no_defs \",\n    4637: \"+title=Perroud 1950 +proj=longlat +ellps=intl +towgs84=325,154,172,0,0,0,0 +no_defs \",\n    4638: \"+title=Saint Pierre et Miquelon 1950 +proj=longlat +ellps=clrk66 +towgs84=30,430,368,0,0,0,0 +no_defs \",\n    4640: \"+title=RRAF 1991 +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4641: \"+title=IGN53 Mare +proj=longlat +ellps=intl +no_defs \",\n    4645: \"+title=RGNC 1991 +proj=longlat +ellps=intl +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4687: \"+proj=longlat +ellps=GRS80 +no_defs \",\n    4662: \"+title=IGN72 Grande Terre +proj=longlat +ellps=intl +no_defs \",\n    4689: \"+title=IGN63 Hiva Oa +proj=longlat +ellps=intl +no_defs \",\n    4690: \"+title=Tahiti 79 +proj=longlat +ellps=intl +no_defs \",\n    4691: \"+title=Moorea 87 +proj=longlat +ellps=intl +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773 +no_defs \",\n    4692: \"+title=Maupiti 83 +proj=longlat +ellps=intl +towgs84=217.037,86.959,23.956,0,0,0,0 +no_defs \",\n    4698: \"+title=IGN 1962 Kerguelen +proj=longlat +ellps=intl +towgs84=145,-187,103,0,0,0,0 +no_defs \",\n    4749: \"+title=RGNC91-93 +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs \",\n    4750: \"+title=ST87 Ouvea +proj=longlat +ellps=WGS84 +towgs84=-56.263,16.136,-22.856,0,0,0,0 +no_defs \",\n    4807: \"+title=NTF (Paris) +proj=longlat +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +no_defs \",\n    2056: \"+title=CH1903+ / LV95 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs \",\n    2154: \"+title=RGF93 / Lambert-93 +proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    2213: \"+title=ETRS89 / TM 30 NE +proj=tmerc +lat_0=0 +lon_0=30 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs \",\n    2969: \"+title=Fort Marigot / UTM zone 20N +proj=utm +zone=20 +ellps=intl +towgs84=137,248,-430,0,0,0,0 +units=m +no_defs \",\n    2970: \"+title=Guadeloupe 1948 / UTM zone 20N +proj=utm +zone=20 +ellps=intl +units=m +no_defs \",\n    2971: \"+title=CSG67 / UTM zone 22N +proj=utm +zone=22 +ellps=intl +towgs84=-186,230,110,0,0,0,0 +units=m +no_defs \",\n    2972: \"+title=RGFG95 / UTM zone 22N +proj=utm +zone=22 +ellps=GRS80 +towgs84=2,2,-2,0,0,0,0 +units=m +no_defs \",\n    2973: \"+title=Martinique 1938 / UTM zone 20N +proj=utm +zone=20 +ellps=intl +units=m +no_defs \",\n    2975: \"+title=RGR92 / UTM zone 40S +proj=utm +zone=40 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    2976: \"+title=Tahiti 52 / UTM zone 6S +proj=utm +zone=6 +south +ellps=intl +towgs84=162,117,154,0,0,0,0 +units=m +no_defs \",\n    2977: \"+title=Tahaa 54 / UTM zone 5S +proj=utm +zone=5 +south +ellps=intl +units=m +no_defs \",\n    2978: \"+title=IGN72 Nuku Hiva / UTM zone 7S +proj=utm +zone=7 +south +ellps=intl +units=m +no_defs \",\n    2980: \"+title=Combani 1950 / UTM zone 38S +proj=utm +zone=38 +south +ellps=intl +towgs84=-382,-59,-262,0,0,0,0 +units=m +no_defs \",\n    2981: \"+title=IGN56 Lifou / UTM zone 58S +proj=utm +zone=58 +south +ellps=intl +units=m +no_defs \",\n    2982: \"+title=IGN72 Grand Terre / UTM zone 58S (deprecated) +proj=utm +zone=58 +south +ellps=intl +units=m +no_defs \",\n    2984: \"+title=RGNC 1991 / Lambert New Caledonia (deprecated) +proj=lcc +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5 +lon_0=166 +x_0=400000 +y_0=300000 +ellps=intl +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    2986: \"+title=Terre Adelie 1950 +proj=stere +towgs84=324.9120,153.2820,172.0260 +a=6378388.0000 +rf=297.0000000000000 +lat_0=-90.000000000 +lon_0=140.000000000 +lat_ts=-67.000000000 +k=0.96027295 +x_0=300000.000 +y_0=-2299363.482 +units=m +no_defs\",\n    2987: \"+title=Saint Pierre et Miquelon 1950 / UTM zone 21N +proj=utm +zone=21 +ellps=clrk66 +towgs84=30,430,368,0,0,0,0 +units=m +no_defs \",\n    2989: \"+title=RRAF 1991 / UTM zone 20N +proj=utm +zone=20 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    2990: \"+title=Reunion 1947 / TM Reunion (deprecated) +proj=tmerc +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=50000 +y_0=160000 +ellps=intl +units=m +no_defs \",\n    2995: \"+title=IGN53 Mare / UTM zone 58S +proj=utm +zone=58 +south +ellps=intl +units=m +no_defs \",\n    3038: \"+proj=utm +zone=26 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3039: \"+proj=utm +zone=27 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3040: \"+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3041: \"+proj=utm +zone=29 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    // 3042 : \"+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    // 3043 : \"+proj=utm +zone=31 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    // 3044 : \"+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3045: \"+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3046: \"+proj=utm +zone=34 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3047: \"+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3048: \"+proj=utm +zone=36 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3049: \"+proj=utm +zone=37 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3050: \"+proj=utm +zone=38 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3051: \"+proj=utm +zone=39 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3034: \"+title=ETRS89 / ETRS-LCC +proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +units=m +no_defs \",\n    3035: \"+title=ETRS89 / ETRS-LAEA +proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \",\n    3042: \"+title=ETRS89 / ETRS-TM30 +proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs \",\n    3043: \"+title=ETRS89 / ETRS-TM31 +proj=utm +zone=31 +ellps=GRS80 +units=m +no_defs \",\n    3044: \"+title=ETRS89 / ETRS-TM32 +proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs \",\n    25828: \"+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    25829: \"+proj=utm +zone=29 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    // 25830 : \"+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    // 25831 : \"+proj=utm +zone=31 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    // 25832 : \"+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    25833: \"+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    25834: \"+proj=utm +zone=34 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    25835: \"+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    25836: \"+proj=utm +zone=36 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    25837: \"+proj=utm +zone=37 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    25838: \"+proj=utm +zone=38 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3060: \"+title=IGN72 Grande Terre / UTM zone 58S +proj=utm +zone=58 +south +ellps=intl +units=m +no_defs \",\n    3163: \"+title=RGNC91-93 / Lambert New Caledonia +proj=lcc +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5 +lon_0=166 +x_0=400000 +y_0=300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3164: \"+title=ST87 Ouvea / UTM zone 58S +proj=utm +zone=58 +south +ellps=WGS84 +towgs84=-56.263,16.136,-22.856,0,0,0,0 +units=m +no_defs \",\n    3165: \"+title=NEA74 Noumea / Noumea Lambert +proj=lcc +lat_1=-22.24469175 +lat_2=-22.29469175 +lat_0=-22.26969175 +lon_0=166.44242575 +x_0=0.66 +y_0=1.02 +ellps=intl +units=m +no_defs \",\n    3166: \"+title=NEA74 Noumea / Noumea Lambert 2 +proj=lcc +lat_1=-22.24472222222222 +lat_2=-22.29472222222222 +lat_0=-22.26972222222222 +lon_0=166.4425 +x_0=8.313000000000001 +y_0=-2.354 +ellps=intl +units=m +no_defs \",\n    3169: \"+title=RGNC91-93 / UTM zone 57S +proj=utm +zone=57 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3170: \"+title=RGNC91-93 / UTM zone 58S +proj=utm +zone=58 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3171: \"+title=RGNC91-93 / UTM zone 59S +proj=utm +zone=59 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \",\n    3172: \"+title=IGN53 Mare / UTM zone 59S +proj=utm +zone=59 +south +ellps=intl +units=m +no_defs \",\n    3296: \"+title=RGPF / UTM zone 5S +proj=utm +zone=5 +south +ellps=GRS80 +units=m +no_defs \",\n    3297: \"+title=RGPF / UTM zone 6S +proj=utm +zone=6 +south +ellps=GRS80 +units=m +no_defs \",\n    3298: \"+title=RGPF / UTM zone 7S +proj=utm +zone=7 +south +ellps=GRS80 +units=m +no_defs \",\n    3299: \"+title=RGPF / UTM zone 8S +proj=utm +zone=8 +south +ellps=GRS80 +units=m +no_defs \",\n    3302: \"+title=IGN63 Hiva Oa / UTM zone 7S +proj=utm +zone=7 +south +ellps=intl +units=m +no_defs \",\n    3303: \"+title=Fatu Iva 72 / UTM zone 7S +proj=utm +zone=7 +south +ellps=intl +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074 +units=m +no_defs \",\n    3304: \"+title=Tahiti 79 / UTM zone 6S +proj=utm +zone=6 +south +ellps=intl +units=m +no_defs \",\n    3305: \"+title=Moorea 87 / UTM zone 6S +proj=utm +zone=6 +south +ellps=intl +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773 +units=m +no_defs \",\n    3306: \"+title=Maupiti 83 / UTM zone 5S +proj=utm +zone=5 +south +ellps=intl +towgs84=217.037,86.959,23.956,0,0,0,0 +units=m +no_defs \",\n    3312: \"+title=CSG67 / UTM zone 21N +proj=utm +zone=21 +ellps=intl +towgs84=-186,230,110,0,0,0,0 +units=m +no_defs \",\n    3313: \"+title=RGFG95 / UTM zone 21N +proj=utm +zone=21 +ellps=GRS80 +towgs84=2,2,-2,0,0,0,0 +units=m +no_defs \",\n    3336: \"+title=IGN 1962 Kerguelen / UTM zone 42S +proj=utm +zone=42 +south +ellps=intl +towgs84=145,-187,103,0,0,0,0 +units=m +no_defs \",\n    3395: \"+title=WGS 84 / World Mercator +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    3727: \"+title=Reunion 1947 / TM Reunion +proj=tmerc +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=160000 +y_0=50000 +ellps=intl +units=m +no_defs \",\n    21781: \"+title=CH1903 / LV03 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs \",\n    25830: \"+title=ETRS89 / UTM zone 30N +proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs \",\n    25831: \"+title=ETRS89 / UTM zone 31N +proj=utm +zone=31 +ellps=GRS80 +units=m +no_defs \",\n    25832: \"+title=ETRS89 / UTM zone 32N +proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs \",\n    27561: \"+title=NTF (Paris) / Lambert Nord France +proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27562: \"+title=NTF (Paris) / Lambert Centre France +proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27563: \"+title=NTF (Paris) / Lambert Sud France +proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.9998774990000001 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27564: \"+title=NTF (Paris) / Lambert Corse +proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.9999447100000001 +x_0=234.358 +y_0=185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27571: \"+title=NTF (Paris) / Lambert zone I +proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=1200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27572: \"+title=NTF (Paris) / Lambert zone II +proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27573: \"+title=NTF (Paris) / Lambert zone III +proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.9998774990000001 +x_0=600000 +y_0=3200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27574: \"+title=NTF (Paris) / Lambert zone IV +proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.9999447100000001 +x_0=234.358 +y_0=4185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27581: \"+title=NTF (Paris) / France I (deprecated) +proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=1200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27582: \"+title=NTF (Paris) / France II (deprecated) +proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27583: \"+title=NTF (Paris) / France III (deprecated) +proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.9998774990000001 +x_0=600000 +y_0=3200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27584: \"+title=NTF (Paris) / France IV (deprecated) +proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.9999447100000001 +x_0=234.358 +y_0=4185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27591: \"+title=NTF (Paris) / Nord France (deprecated) +proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27592: \"+title=NTF (Paris) / Centre France (deprecated) +proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27593: \"+title=NTF (Paris) / Sud France (deprecated) +proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.9998774990000001 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    27594: \"+title=NTF (Paris) / Corse (deprecated) +proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.9999447100000001 +x_0=234.358 +y_0=185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs \",\n    32601: \"+proj=utm +zone=1 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32602: \"+proj=utm +zone=2 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32603: \"+proj=utm +zone=3 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32604: \"+proj=utm +zone=4 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32605: \"+proj=utm +zone=5 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32606: \"+proj=utm +zone=6 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32607: \"+proj=utm +zone=7 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32608: \"+proj=utm +zone=8 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32609: \"+proj=utm +zone=9 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32610: \"+proj=utm +zone=10 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32611: \"+proj=utm +zone=11 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32612: \"+proj=utm +zone=12 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32613: \"+proj=utm +zone=13 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32614: \"+proj=utm +zone=14 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32615: \"+proj=utm +zone=15 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32616: \"+proj=utm +zone=16 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32617: \"+proj=utm +zone=17 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32618: \"+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32619: \"+proj=utm +zone=19 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32620: \"+proj=utm +zone=20 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32621: \"+proj=utm +zone=21 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32622: \"+proj=utm +zone=22 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32623: \"+proj=utm +zone=23 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32624: \"+proj=utm +zone=24 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32625: \"+proj=utm +zone=25 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32626: \"+proj=utm +zone=26 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32627: \"+proj=utm +zone=27 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32628: \"+proj=utm +zone=28 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32629: \"+proj=utm +zone=29 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32630: \"+proj=utm +zone=30 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32631: \"+proj=utm +zone=31 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32632: \"+proj=utm +zone=32 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32633: \"+proj=utm +zone=33 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32634: \"+proj=utm +zone=34 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32635: \"+proj=utm +zone=35 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32636: \"+proj=utm +zone=36 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32637: \"+proj=utm +zone=37 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32638: \"+proj=utm +zone=38 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32639: \"+proj=utm +zone=39 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32640: \"+proj=utm +zone=40 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32641: \"+proj=utm +zone=41 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32642: \"+proj=utm +zone=42 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32643: \"+proj=utm +zone=43 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32644: \"+proj=utm +zone=44 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32645: \"+proj=utm +zone=45 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32646: \"+proj=utm +zone=46 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32647: \"+proj=utm +zone=47 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32648: \"+proj=utm +zone=48 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32649: \"+proj=utm +zone=49 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32650: \"+proj=utm +zone=50 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32651: \"+proj=utm +zone=51 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32652: \"+proj=utm +zone=52 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32653: \"+proj=utm +zone=53 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32654: \"+proj=utm +zone=54 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32655: \"+proj=utm +zone=55 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32656: \"+proj=utm +zone=56 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32657: \"+proj=utm +zone=57 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32658: \"+proj=utm +zone=58 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32659: \"+proj=utm +zone=59 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32660: \"+proj=utm +zone=60 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32661: \"+proj=stere +lat_0=90 +lat_ts=90 +lon_0=0 +k=0.994 +x_0=2000000 +y_0=2000000 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32662: \"+title=WGS 84 / Plate Carree +proj=eqc +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32701: \"+proj=utm +zone=1 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32702: \"+proj=utm +zone=2 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32703: \"+proj=utm +zone=3 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32704: \"+proj=utm +zone=4 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32705: \"+proj=utm +zone=5 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32706: \"+proj=utm +zone=6 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32707: \"+proj=utm +zone=7 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32708: \"+proj=utm +zone=8 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32709: \"+proj=utm +zone=9 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32710: \"+proj=utm +zone=10 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32711: \"+proj=utm +zone=11 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32712: \"+proj=utm +zone=12 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32713: \"+proj=utm +zone=13 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32714: \"+proj=utm +zone=14 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32715: \"+proj=utm +zone=15 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32716: \"+proj=utm +zone=16 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32717: \"+proj=utm +zone=17 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32718: \"+proj=utm +zone=18 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32719: \"+proj=utm +zone=19 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32720: \"+proj=utm +zone=20 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32721: \"+proj=utm +zone=21 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32722: \"+proj=utm +zone=22 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32723: \"+proj=utm +zone=23 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32724: \"+proj=utm +zone=24 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32725: \"+proj=utm +zone=25 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32726: \"+proj=utm +zone=26 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32727: \"+proj=utm +zone=27 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32728: \"+proj=utm +zone=28 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32729: \"+proj=utm +zone=29 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32730: \"+proj=utm +zone=30 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32731: \"+proj=utm +zone=31 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32732: \"+proj=utm +zone=32 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32733: \"+proj=utm +zone=33 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32734: \"+proj=utm +zone=34 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32735: \"+proj=utm +zone=35 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32736: \"+proj=utm +zone=36 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32737: \"+proj=utm +zone=37 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32738: \"+proj=utm +zone=38 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32739: \"+proj=utm +zone=39 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32740: \"+proj=utm +zone=40 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32741: \"+proj=utm +zone=41 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32742: \"+proj=utm +zone=42 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32743: \"+proj=utm +zone=43 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32744: \"+proj=utm +zone=44 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32745: \"+proj=utm +zone=45 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32746: \"+proj=utm +zone=46 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32747: \"+proj=utm +zone=47 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32748: \"+proj=utm +zone=48 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32749: \"+proj=utm +zone=49 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32750: \"+proj=utm +zone=50 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32751: \"+proj=utm +zone=51 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32752: \"+proj=utm +zone=52 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32753: \"+proj=utm +zone=53 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32754: \"+proj=utm +zone=54 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32755: \"+proj=utm +zone=55 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32756: \"+proj=utm +zone=56 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32757: \"+proj=utm +zone=57 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32758: \"+proj=utm +zone=58 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32759: \"+proj=utm +zone=59 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32760: \"+proj=utm +zone=60 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    32761: \"+proj=stere +lat_0=-90 +lat_ts=-90 +lon_0=0 +k=0.994 +x_0=2000000 +y_0=2000000 +ellps=WGS84 +datum=WGS84 +units=m +no_defs \",\n    310024802: \"+title=Geoportail - France metropolitaine +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=46.500000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310915814: \"+title=Geoportail - Antilles francaises +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=15.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310486805: \"+title=Geoportail - Guyane +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=4.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310700806: \"+title=Geoportail - Reunion et dependances +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-21.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310702807: \"+title=Geoportail - Mayotte +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-12.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310706808: \"+title=Geoportail - Saint-Pierre et Miquelon +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=47.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310547809: \"+title=Geoportail - Nouvelle-Caledonie +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-22.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310642810: \"+title=Geoportail - Wallis et Futuna +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.000000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-14.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310032811: \"+title=Geoportail - Polynesie francaise +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-15.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310642812: \"+title=Geoportail - Kerguelen +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-49.500000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310642801: \"+title=Geoportail - Crozet +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-46.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310642813: \"+title=Geoportail - Amsterdam et Saint-Paul +proj=eqc +nadgrids=null +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-38.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    310642901: \"+title=Geoportail - Monde +proj=mill +towgs84=0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.000000 +a=6378137.0000 +rf=298.2572221010000 +lon_0=0.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    5489: \"+title=RGAF09 geographiques (dms) +proj=longlat +nadgrids=@null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137 +rf=298.257222101 +units=m +no_defs\",\n    5490: \"+title=RGAF09 UTM Nord Fuseau 20 +proj=tmerc +nadgrids=@null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137 +rf=298.257222101 +lat_0=0.000000000 +lon_0=-63.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\"\n  },\n\n  /**\n   * definitions CRS\n   * @enum\n   */\n  CRS: {\n    84: \"+title=WGS 84 longitude-latitude +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs \"\n  },\n\n  /**\n   * definitions IGNF\n   * @enum\n   */\n  IGNF: {\n    AMST63: \"+title=Amsterdam 1963 +proj=geocent +towgs84=109.753,-528.133,-362.244,0,0,0,0 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    CROZ63: \"+title=Crozet 1963 +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    CSG67: \"+title=Guyane CSG67 +proj=geocent +towgs84=-193.0660,236.9930,105.4470,0.4814,-0.8074,0.1276,1.564900 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    ED50: \"+title=ED50 +proj=geocent +towgs84=-84.0000,-97.0000,-117.0000 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    ETRS89: \"+title=Systeme de reference terrestre Europeen (1989) +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    GUAD48: \"+title=Guadeloupe Ste Anne +proj=geocent +towgs84=-472.2900,-5.6300,-304.1200,0.4362,-0.8374,0.2563,1.898400 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    GUADFM49: \"+title=Guadeloupe Fort Marigot +proj=geocent +towgs84=136.5960,248.1480,-429.7890 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    IGN63: \"+title=IGN 1963 (Hiva Oa, Tahuata, Mohotani) +proj=geocent +towgs84=410.7210,55.0490,80.7460,-2.5779,-2.3514,-0.6664,17.331100 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    IGN72: \"+title=IGN 1972 Grande-Terre / Ile des Pins +proj=geocent +towgs84=-11.6400,-348.6000,291.6800 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    KERG62CAR: \"+title=Kerguelen - K0 +proj=geocent +towgs84=144.8990,-186.7700,100.9230 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    MART38: \"+title=Martinique Fort-Desaix +proj=geocent +towgs84=126.9260,547.9390,130.4090,-2.7867,5.1612,-0.8584,13.822650 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    MAYO50: \"+title=Mayotte Combani +proj=geocent +towgs84=-599.9280,-275.5520,-195.6650,-0.0835,-0.4715,0.0602,49.281400 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    MOOREA87: \"+title=Moorea 1987 +proj=geocent +towgs84=215.9820,149.5930,176.2290,3.2624,1.6920,1.1571,10.477300 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    NTF: \"+title=Nouvelle Triangulation Francaise +proj=geocent +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +units=m +no_defs\",\n    NUKU72: \"+title=IGN 1972 Nuku Hiva +proj=geocent +towgs84=165.7320,216.7200,180.5050,-0.6434,-0.4512,-0.0791,7.420400 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    REUN47: \"+title=Reunion 1947 +proj=geocent +towgs84=789.5240,-626.4860,-89.9040,0.6006,76.7946,-10.5788,-32.324100 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    RGF93: \"+title=Reseau geodesique francais 1993 +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGFG95: \"+title=Reseau geodesique francais de Guyane 1995 +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGM04: \"+title=RGM04 (Reseau Geodesique de Mayotte 2004) +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGNC: \"+title=Reseau Geodesique de Nouvelle-Caledonie +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGPF: \"+title=RGPF (Reseau Geodesique de Polynesie Francaise) +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGR92: \"+title=Reseau geodesique Reunion 1992 +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGSPM06: \"+title=Reseau Geodesique Saint-Pierre-et-Miquelon (2006) +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGTAAF07: \"+title=Reseau Geodesique des TAAF (2007) +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RRAF91: \"+title=RRAF 1991 (Reseau de Reference des Antilles Francaises) +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    STPL69: \"+title=Saint-Paul 1969 +proj=geocent +towgs84=225.571,-346.608,-46.567,0,0,0,0 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    STPM50: \"+title=St Pierre et Miquelon 1950 +proj=geocent +towgs84=-95.5930,573.7630,173.4420,-0.9602,1.2510,-1.3918,42.626500 +a=6378206.4000 +rf=294.9786982000000 +units=m +no_defs\",\n    TAHAA: \"+title=Raiatea - Tahaa 51-54 (Tahaa, Base Terme Est) +proj=geocent +towgs84=72.4380,345.9180,79.4860,-1.6045,-0.8823,-0.5565,1.374600 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    TAHI79: \"+title=IGN79 (Tahiti) Iles de la Societe +proj=geocent +towgs84=221.5250,152.9480,176.7680,2.3847,1.3896,0.8770,11.474100 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    TERA50: \"+title=Pointe Geologie - Perroud 1950 +proj=geocent +towgs84=324.9120,153.2820,172.0260 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    WALL78: \"+title=Wallis-Uvea 1978 (MOP78) +proj=geocent +towgs84=253.0000,-133.0000,-127.0000 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    WGS72: \"+title=World Geodetic System 1972 +proj=geocent +towgs84=0.0000,12.0000,6.0000 +a=6378135.0000 +rf=298.2600000000000 +units=m +no_defs\",\n    WGS84: \"+title=World Geodetic System 1984 +proj=geocent +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    AMST63GEO: \"+title=Amsterdam 1963 +proj=longlat +towgs84=109.753,-528.133,-362.244,0,0,0,0 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    CROZ63GEO: \"+title=Crozet 1963 +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    CSG67GEO: \"+title=Guyane CSG67 +proj=longlat +towgs84=-193.0660,236.9930,105.4470,0.4814,-0.8074,0.1276,1.564900 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    ED50G: \"+title=ED50 +proj=longlat +towgs84=-84.0000,-97.0000,-117.0000 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    GUAD48GEO: \"+title=Guadeloupe Ste Anne +proj=longlat +towgs84=-472.2900,-5.6300,-304.1200,0.4362,-0.8374,0.2563,1.898400 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    GUADFM49GEO: \"+title=Guadeloupe Fort Marigot +proj=longlat +towgs84=136.5960,248.1480,-429.7890 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    IGN63GEO: \"+title=IGN 1963 (Hiva Oa, Tahuata, Mohotani) +proj=longlat +towgs84=410.7210,55.0490,80.7460,-2.5779,-2.3514,-0.6664,17.331100 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    IGN72GEO: \"+title=IGN 1972 Grande-Terre / Ile des Pins +proj=longlat +towgs84=-11.6400,-348.6000,291.6800 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    KERG62GEO: \"+title=Kerguelen - K0 +proj=longlat +towgs84=144.8990,-186.7700,100.9230 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    MART38GEO: \"+title=Martinique Fort-Desaix +proj=longlat +towgs84=126.9260,547.9390,130.4090,-2.7867,5.1612,-0.8584,13.822650 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    MAYO50GEO: \"+title=Mayotte Combani +proj=longlat +towgs84=-599.9280,-275.5520,-195.6650,-0.0835,-0.4715,0.0602,49.281400 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    MOOREA87GEO: \"+title=Moorea 1987 +proj=longlat +towgs84=215.9820,149.5930,176.2290,3.2624,1.6920,1.1571,10.477300 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    NTFG: \"+title=Nouvelle Triangulation Francaise Greenwich degres sexagesimaux +proj=longlat +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +units=m +no_defs\",\n    NTFP: \"+title=Nouvelle Triangulation Francaise Paris grades +proj=longlat +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +units=m +no_defs\",\n    NUKU72GEO: \"+title=IGN 1972 Nuku Hiva +proj=longlat +towgs84=165.7320,216.7200,180.5050,-0.6434,-0.4512,-0.0791,7.420400 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    REUN47GEO: \"+title=Reunion 1947 +proj=longlat +towgs84=789.5240,-626.4860,-89.9040,0.6006,76.7946,-10.5788,-32.324100 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    RGF93G: \"+title=Reseau geodesique francais 1993 +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGFG95GEO: \"+title=Reseau geodesique francais de Guyane 1995 +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGM04GEO: \"+title=RGM04 (Reseau Geodesique de Mayotte 2004) +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGNCGEO: \"+title=Reseau Geodesique de Nouvelle-Caledonie +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGPFGEO: \"+title=RGPF (Reseau Geodesique de Polynesie Francaise) +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGR92GEO: \"+title=Reseau geodesique de la Reunion 1992 +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGSPM06GEO: \"+title=Saint-Pierre-et-Miquelon (2006) +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    RGTAAF07G: \"+title=Reseau Geodesique des TAAF (2007) (dms) +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    STPL69GEO: \"+title=Saint-Paul 1969 +proj=longlat +towgs84=225.571,-346.608,-46.567,0,0,0,0 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    STPM50GEO: \"+title=St Pierre et Miquelon 1950  +proj=longlat +towgs84=-95.5930,573.7630,173.4420,-0.9602,1.2510,-1.3918,42.626500 +a=6378206.4000 +rf=294.9786982000000 +units=m +no_defs\",\n    TAHAAGEO: \"+title=Raiatea - Tahaa 51-54 (Tahaa, Base Terme Est) +proj=longlat +towgs84=72.4380,345.9180,79.4860,-1.6045,-0.8823,-0.5565,1.374600 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    TAHI79GEO: \"+title=IGN79 (Tahiti) Iles de la Societe +proj=longlat +towgs84=221.5250,152.9480,176.7680,2.3847,1.3896,0.8770,11.474100 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    TERA50G: \"+title=Pointe Geologie - Perroud 1950 +proj=longlat +towgs84=324.9120,153.2820,172.0260 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    WALL78GEO: \"+title=Wallis - Uvea 1978 (MOP78) +proj=longlat +towgs84=253.0000,-133.0000,-127.0000 +a=6378388.0000 +rf=297.0000000000000 +units=m +no_defs\",\n    WGS72G: \"+title=WGS72 +proj=longlat +towgs84=0.0000,12.0000,6.0000 +a=6378135.0000 +rf=298.2600000000000 +units=m +no_defs\",\n    WGS84G: \"+title=World Geodetic System 1984 +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    WGS84RRAFGEO: \"+title=Reseau de reference des Antilles francaises (1988-1991) +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    XGEO: \"+title=Systeme CIO-BIH +proj=longlat +towgs84=0.0000,0.0000,0.5000,0.0000,0.0000,0.0140,-0.100000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    AMST63UTM43S: \"+title=Amsterdam 1963 UTM fuseau 43 Sud +proj=tmerc +towgs84=109.753,-528.133,-362.244,0,0,0,0 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=75.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    CROZ63UTM39S: \"+title=Crozet 1963 +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=51.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    CSG67UTM21: \"+title=Guyane CSG67 UTM fuseau 21 +proj=tmerc +towgs84=-193.0660,236.9930,105.4470,0.4814,-0.8074,0.1276,1.564900 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-57.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    CSG67UTM22: \"+title=Guyane CSG67 UTM fuseau 22 +proj=tmerc +towgs84=-193.0660,236.9930,105.4470,0.4814,-0.8074,0.1276,1.564900 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-51.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALANF: \"+title=Geoportail - Antilles francaises +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=15.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALASP: \"+title=Geoportail - Amsterdam et Saint-Paul +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-38.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALCRZ: \"+title=Geoportail - Crozet +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-46.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALFXX: \"+title=Geoportail - France metropolitaine +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=46.500000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALGUF: \"+title=Geoportail - Guyane +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=4.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALKER: \"+title=Geoportail - Kerguelen +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-49.500000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALMYT: \"+title=Geoportail - Mayotte +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-12.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALNCL: \"+title=Geoportail - Nouvelle-Caledonie +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-22.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALPYF: \"+title=Geoportail - Polynesie francaise +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-15.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALREU: \"+title=Geoportail - Reunion et dependances +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-21.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALSPM: \"+title=Geoportail - Saint-Pierre et Miquelon +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=47.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GEOPORTALWLF: \"+title=Geoportail - Wallis et Futuna +proj=eqc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=0.000000000 +lat_ts=-14.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    GUAD48UTM20: \"+title=Guadeloupe Ste Anne +proj=tmerc +towgs84=-472.2900,-5.6300,-304.1200,0.4362,-0.8374,0.2563,1.898400 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-63.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    GUADFM49U20: \"+title=Guadeloupe Fort Marigot  +proj=tmerc +towgs84=136.5960,248.1480,-429.7890 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-63.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    IGN63UTM7S: \"+title=IGN 1963 - Hiva Oa, Tahuata, Mohotani - UTM fuseau 7 Sud +proj=tmerc +towgs84=410.7210,55.0490,80.7460,-2.5779,-2.3514,-0.6664,17.331100 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-141.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    IGN72UTM58S: \"+title=IGN 1972 - UTM fuseau 58 Sud +proj=tmerc +towgs84=-11.6400,-348.6000,291.6800 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=165.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    KERG62UTM42S: \"+title=Kerguelen 1962 +proj=tmerc +towgs84=144.8990,-186.7700,100.9230 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=69.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    LAMB1: \"+title=Lambert I +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=49.500000000 +lon_0=0.000000000 +k_0=0.99987734 +lat_1=49.500000000 +x_0=600000.000 +y_0=200000.000 +units=m +no_defs\",\n    LAMB1C: \"+title=Lambert I Carto +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=49.500000000 +lon_0=0.000000000 +k_0=0.99987734 +lat_1=49.500000000 +x_0=600000.000 +y_0=1200000.000 +units=m +no_defs\",\n    LAMB2: \"+title=Lambert II +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=46.800000000 +lon_0=0.000000000 +k_0=0.99987742 +lat_1=46.800000000 +x_0=600000.000 +y_0=200000.000 +units=m +no_defs\",\n    LAMB2C: \"+title=Lambert II Carto +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=46.800000000 +lon_0=0.000000000 +k_0=0.99987742 +lat_1=46.800000000 +x_0=600000.000 +y_0=2200000.000 +units=m +no_defs\",\n    LAMB3: \"+title=Lambert III +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=44.100000000 +lon_0=0.000000000 +k_0=0.99987750 +lat_1=44.100000000 +x_0=600000.000 +y_0=200000.000 +units=m +no_defs\",\n    LAMB3C: \"+title=Lambert III Carto +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=44.100000000 +lon_0=0.000000000 +k_0=0.99987750 +lat_1=44.100000000 +x_0=600000.000 +y_0=3200000.000 +units=m +no_defs\",\n    LAMB4: \"+title=Lambert IV +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=42.165000000 +lon_0=0.000000000 +k_0=0.99994471 +lat_1=42.165000000 +x_0=234.358 +y_0=185861.369 +units=m +no_defs\",\n    LAMB4C: \"+title=Lambert IV Carto +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=42.165000000 +lon_0=0.000000000 +k_0=0.99994471 +lat_1=42.165000000 +x_0=234.358 +y_0=4185861.369 +units=m +no_defs\",\n    LAMB93: \"+title=Lambert 93 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=46.500000000 +lon_0=3.000000000 +lat_1=44.000000000 +lat_2=49.000000000 +x_0=700000.000 +y_0=6600000.000 +units=m +no_defs\",\n    RGF93CC42: \"+title=Lambert conique conforme Zone 1 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=42.000000000 +lon_0=3.000000000 +lat_1=41.200000000 +lat_2=42.800000000 +x_0=1700000.000 +y_0=1200000.000 +units=m +no_defs\",\n    RGF93CC43: \"+title=Lambert conique conforme Zone 2 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=43.000000000 +lon_0=3.000000000 +lat_1=42.200000000 +lat_2=43.800000000 +x_0=1700000.000 +y_0=2200000.000 +units=m +no_defs\",\n    RGF93CC44: \"+title=Lambert conique conforme Zone 3 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=44.000000000 +lon_0=3.000000000 +lat_1=43.200000000 +lat_2=44.800000000 +x_0=1700000.000 +y_0=3200000.000 +units=m +no_defs\",\n    RGF93CC45: \"+title=Lambert conique conforme Zone 4 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=45.000000000 +lon_0=3.000000000 +lat_1=44.200000000 +lat_2=45.800000000 +x_0=1700000.000 +y_0=4200000.000 +units=m +no_defs\",\n    RGF93CC46: \"+title=Lambert conique conforme Zone 5 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=46.000000000 +lon_0=3.000000000 +lat_1=45.200000000 +lat_2=46.800000000 +x_0=1700000.000 +y_0=5200000.000 +units=m +no_defs\",\n    RGF93CC47: \"+title=Lambert conique conforme Zone 6 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=47.000000000 +lon_0=3.000000000 +lat_1=46.200000000 +lat_2=47.800000000 +x_0=1700000.000 +y_0=6200000.000 +units=m +no_defs\",\n    RGF93CC48: \"+title=Lambert conique conforme Zone 7 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=48.000000000 +lon_0=3.000000000 +lat_1=47.200000000 +lat_2=48.800000000 +x_0=1700000.000 +y_0=7200000.000 +units=m +no_defs\",\n    RGF93CC49: \"+title=Lambert conique conforme Zone 8 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=49.000000000 +lon_0=3.000000000 +lat_1=48.200000000 +lat_2=49.800000000 +x_0=1700000.000 +y_0=8200000.000 +units=m +no_defs\",\n    RGF93CC50: \"+title=Lambert conique conforme Zone 9 +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=50.000000000 +lon_0=3.000000000 +lat_1=49.200000000 +lat_2=50.800000000 +x_0=1700000.000 +y_0=9200000.000 +units=m +no_defs\",\n    LAMBE: \"+title=Lambert II etendu +proj=lcc +nadgrids=ntf_r93.gsb,null +wktext +towgs84=-168.0000,-60.0000,320.0000 +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=46.800000000 +lon_0=0.000000000 +k_0=0.99987742 +lat_1=46.800000000 +x_0=600000.000 +y_0=2200000.000 +units=m +no_defs\",\n    MART38UTM20: \"+title=Martinique Fort-Desaix +proj=tmerc +towgs84=126.9260,547.9390,130.4090,-2.7867,5.1612,-0.8584,13.822650 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-63.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    MAYO50UTM38S: \"+title=Mayotte Combani +proj=tmerc +towgs84=-599.9280,-275.5520,-195.6650,-0.0835,-0.4715,0.0602,49.281400 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=45.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    MILLER: \"+title=Geoportail - Monde +proj=mill +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lon_0=0.000000000 +x_0=0.000 +y_0=0.000 +units=m +no_defs\",\n    MOOREA87U6S: \"+title=Moorea 1987 - UTM fuseau 6 Sud +proj=tmerc +towgs84=215.9820,149.5930,176.2290,3.2624,1.6920,1.1571,10.477300 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-147.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    NUKU72U7S: \"+title=IGN 1972 Nuku Hiva - UTM fuseau 7 Sud +proj=tmerc +towgs84=165.7320,216.7200,180.5050,-0.6434,-0.4512,-0.0791,7.420400 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-141.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    // REUN47GAUSSL : \"+title=Reunion Gauss Laborde +proj=gstmerc +towgs84=789.5240,-626.4860,-89.9040,0.6006,76.7946,-10.5788,-32.324100 +a=6378388.0000 +rf=297.0000000000000 +lat_0=-21.116666667 +lon_0=55.533333333 +k_0=1.00000000 +x_0=160000.000 +y_0=50000.000 +units=m +no_defs\",\n    RGM04UTM38S: \"+title=UTM fuseau 38 Sud (Reseau Geodesique de Mayotte 2004) +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=45.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGNCUTM57S: \"+title=Reseau Geodesique de Nouvelle-Caledonie - UTM fuseau 57 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=159.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGNCUTM58S: \"+title=Reseau Geodesique de Nouvelle-Caledonie - UTM fuseau 58 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=165.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGNCUTM59S: \"+title=Reseau Geodesique de Nouvelle-Caledonie - UTM fuseau 59 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=171.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGPFUTM5S: \"+title=RGPF - UTM fuseau 5 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-153.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGPFUTM6S: \"+title=RGPF - UTM fuseau 6 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-147.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGPFUTM7S: \"+title=RGPF - UTM fuseau 7 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-141.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGR92UTM40S: \"+title=RGR92 UTM fuseau 40 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=57.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    RGSPM06U21: \"+title=Saint-Pierre-et-Miquelon (2006) UTM Fuseau 21 Nord +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-57.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    STPL69UTM43S: \"+title=Saint-Paul 1969 UTM fuseau 43 Sud +proj=tmerc +towgs84=225.571,-346.608,-46.567,0,0,0,0 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=75.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    STPM50UTM21: \"+title=St Pierre et Miquelon 1950 +proj=tmerc +towgs84=-95.5930,573.7630,173.4420,-0.9602,1.2510,-1.3918,42.626500 +a=6378206.4000 +rf=294.9786982000000 +lat_0=0.000000000 +lon_0=-57.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    TAHAAUTM05S: \"+title=Tahaa 1951 +proj=tmerc +towgs84=72.4380,345.9180,79.4860,-1.6045,-0.8823,-0.5565,1.374600 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-153.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    TAHI51UTM06S: \"+title=Tahiti-Terme Nord UTM fuseau 6 Sud +proj=tmerc +towgs84=162.0000,117.0000,154.0000 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-147.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    TAHI79UTM6S: \"+title=Tahiti 1979 +proj=tmerc +towgs84=221.5250,152.9480,176.7680,2.3847,1.3896,0.8770,11.474100 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-147.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    TERA50STEREO: \"+title=Terre Adelie 1950 +proj=stere +towgs84=324.9120,153.2820,172.0260 +a=6378388.0000 +rf=297.0000000000000 +lat_0=-90.000000000 +lon_0=140.000000000 +lat_ts=-67 +k=0.96027295 +x_0=300000.000 +y_0=-2299363.482 +units=m +no_defs\",\n    UTM01SW84: \"+title=World Geodetic System 1984 UTM fuseau 01 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-177.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    UTM20W84GUAD: \"+title=World Geodetic System 1984 UTM fuseau 20 Nord-Guadeloupe +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-63.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM20W84MART: \"+title=World Geodetic System 1984 UTM fuseau 20 Nord-Martinique +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-63.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM22RGFG95: \"+title=RGFG95 UTM fuseau 22 Nord-Guyane +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-51.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM39SW84: \"+title=World Geodetic System 1984 UTM fuseau 39 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=51.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    UTM42SW84: \"+title=World Geodetic System 1984 UTM fuseau 42 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=69.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    UTM43SW84: \"+title=World Geodetic System 1984 UTM fuseau 43 Sud +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=75.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    WALL78UTM1S: \"+title=Wallis-Uvea 1978 (MOP78) UTM 1 SUD +proj=tmerc +towgs84=253.0000,-133.0000,-127.0000 +a=6378388.0000 +rf=297.0000000000000 +lat_0=0.000000000 +lon_0=-177.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=10000000.000 +units=m +no_defs\",\n    ETRS89GEO: \"+title=ETRS89 geographiques (dms) +proj=longlat +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +units=m +no_defs\",\n    ETRS89LAEA: \"+title=ETRS89 Lambert Azimutal Equal Area +proj=laea +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=52.000000000 +lon_0=10.000000000 +x_0=4321000.000 +y_0=3210000.000 +units=m +no_defs\",\n    ETRS89LCC: \"+title=ETRS89 Lambert Conformal Conic +proj=lcc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=52.000000000 +lon_0=9.999999995 +lat_1=35.000000000 +lat_2=65.000000000 +x_0=4000000.000 +y_0=2800000.000 +units=m +no_defs\",\n    UTM26ETRS89: \"+title=Europe - de 30d a 24d Ouest +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-27.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM27ETRS89: \"+title=Europe - de 24d a 18d Ouest +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-21.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM28ETRS89: \"+title=Europe - de 18d a 12d Ouest +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-15.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM29ETRS89: \"+title=Europe - de 12d a 6d Ouest +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-9.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM30ETRS89: \"+title=Europe - de -6d a 0d Ouest +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=-3.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM31ETRS89: \"+title=Europe - de 0d a 6d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=3.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM32ETRS89: \"+title=Europe - de 6d a 12d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=9.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM33ETRS89: \"+title=Europe - de 12d a 18d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=15.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM34ETRS89: \"+title=Europe - de 18d a 24d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=21.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM35ETRS89: \"+title=Europe - de 24d a 30d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=27.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM36ETRS89: \"+title=Europe - de 30d a 36d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=33.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM37ETRS89: \"+title=Europe - de 36d a 42d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=39.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\",\n    UTM38ETRS89: \"+title=Europe - de 42d a 48d Est +proj=tmerc +nadgrids=null +wktext +towgs84=0.0000,0.0000,0.0000 +a=6378137.0000 +rf=298.2572221010000 +lat_0=0.000000000 +lon_0=45.000000000 +k_0=0.99960000 +x_0=500000.000 +y_0=0.000 +units=m +no_defs\"\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Register);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Common/Utils/Register.js\n");

/***/ }),

/***/ "./src/Common/Utils/SelectorID.js":
/*!****************************************!*\
  !*** ./src/Common/Utils/SelectorID.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * @module SelectorID\n * @alias [private] SelectorID\n * @description\n * formalisme d'un tag ID :\n * -> NAME(_ORDER)-1460636385836\n *\n * @example\n * Ex.\n *   GProutePoints-1460636385836\n *   GProutePoint_10-1460636385836\n */\nvar SelectorID = {\n  /**\n   * Construction d'un identifiant statique basé sur le timestamp,\n   * et qui s'incremente de +1 à chaque appel\n   * @function generate\n   */\n  generate: function () {\n    var timestamp = Math.floor(Date.now());\n    return function () {\n      return timestamp++;\n    };\n  }(),\n\n  /**\n   * nom du tag\n   * @function name\n   * @param {String} id - the id\n   * @returns {String} index\n   */\n  name: function name(id) {\n    var name = null;\n    var i = id.lastIndexOf(\"-\");\n\n    if (i === -1) {\n      name = id;\n    } else {\n      name = id.substring(0, i);\n    }\n\n    return name;\n  },\n\n  /**\n   * numero d'identifiant du tag\n   *\n   * @function index\n   * @param {String} id - the id\n   * @returns {String} index\n   */\n  index: function index(id) {\n    var index = null;\n    var name = this.name(id); // if (name !== id) {\n\n    var i = name.lastIndexOf(\"_\");\n\n    if (i !== -1) {\n      index = name.substring(i + 1);\n    } // }\n\n\n    return index;\n  },\n\n  /**\n   * uuid du tag\n   *\n   * @function uuid\n   * @param {String} id - the id\n   * @returns {String} uuid\n   */\n  uuid: function uuid(id) {\n    var uuid = null;\n    var i = id.lastIndexOf(\"-\");\n\n    if (i !== -1) {\n      uuid = parseInt(id.substring(i + 1), 10);\n    }\n\n    return uuid;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (SelectorID);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvQ29tbW9uL1V0aWxzL1NlbGVjdG9ySUQuanM/ZTZjNSJdLCJuYW1lcyI6WyJTZWxlY3RvcklEIiwiZ2VuZXJhdGUiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwibmFtZSIsImlkIiwiaSIsImxhc3RJbmRleE9mIiwic3Vic3RyaW5nIiwiaW5kZXgiLCJ1dWlkIiwicGFyc2VJbnQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsVUFBVSxHQUFHO0FBRWI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxVQUFRLEVBQUksWUFBWTtBQUNwQixRQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxJQUFJLENBQUNDLEdBQUwsRUFBWCxDQUFoQjtBQUNBLFdBQU8sWUFBWTtBQUNmLGFBQU9KLFNBQVMsRUFBaEI7QUFDSCxLQUZEO0FBR0gsR0FMVSxFQVBFOztBQWNiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJSyxNQUFJLEVBQUcsY0FBVUMsRUFBVixFQUFjO0FBQ2pCLFFBQUlELElBQUksR0FBRyxJQUFYO0FBRUEsUUFBSUUsQ0FBQyxHQUFHRCxFQUFFLENBQUNFLFdBQUgsQ0FBZSxHQUFmLENBQVI7O0FBQ0EsUUFBSUQsQ0FBQyxLQUFLLENBQUMsQ0FBWCxFQUFjO0FBQ1ZGLFVBQUksR0FBR0MsRUFBUDtBQUNILEtBRkQsTUFFTztBQUNIRCxVQUFJLEdBQUdDLEVBQUUsQ0FBQ0csU0FBSCxDQUFhLENBQWIsRUFBZ0JGLENBQWhCLENBQVA7QUFDSDs7QUFFRCxXQUFPRixJQUFQO0FBQ0gsR0EvQlk7O0FBaUNiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lLLE9BQUssRUFBRyxlQUFVSixFQUFWLEVBQWM7QUFDbEIsUUFBSUksS0FBSyxHQUFHLElBQVo7QUFFQSxRQUFJTCxJQUFJLEdBQUcsS0FBS0EsSUFBTCxDQUFVQyxFQUFWLENBQVgsQ0FIa0IsQ0FJbEI7O0FBQ0EsUUFBSUMsQ0FBQyxHQUFHRixJQUFJLENBQUNHLFdBQUwsQ0FBaUIsR0FBakIsQ0FBUjs7QUFDQSxRQUFJRCxDQUFDLEtBQUssQ0FBQyxDQUFYLEVBQWM7QUFDVkcsV0FBSyxHQUFHTCxJQUFJLENBQUNJLFNBQUwsQ0FBZUYsQ0FBQyxHQUFHLENBQW5CLENBQVI7QUFDSCxLQVJpQixDQVNsQjs7O0FBRUEsV0FBT0csS0FBUDtBQUNILEdBcERZOztBQXNEYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxNQUFJLEVBQUcsY0FBVUwsRUFBVixFQUFjO0FBQ2pCLFFBQUlLLElBQUksR0FBRyxJQUFYO0FBRUEsUUFBSUosQ0FBQyxHQUFHRCxFQUFFLENBQUNFLFdBQUgsQ0FBZSxHQUFmLENBQVI7O0FBQ0EsUUFBSUQsQ0FBQyxLQUFLLENBQUMsQ0FBWCxFQUFjO0FBQ1ZJLFVBQUksR0FBR0MsUUFBUSxDQUFDTixFQUFFLENBQUNHLFNBQUgsQ0FBYUYsQ0FBQyxHQUFHLENBQWpCLENBQUQsRUFBc0IsRUFBdEIsQ0FBZjtBQUNIOztBQUVELFdBQU9JLElBQVA7QUFDSDtBQXRFWSxDQUFqQjtBQTBFZWIseUVBQWYiLCJmaWxlIjoiLi9zcmMvQ29tbW9uL1V0aWxzL1NlbGVjdG9ySUQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgU2VsZWN0b3JJRFxuICogQGFsaWFzIFtwcml2YXRlXSBTZWxlY3RvcklEXG4gKiBAZGVzY3JpcHRpb25cbiAqIGZvcm1hbGlzbWUgZCd1biB0YWcgSUQgOlxuICogLT4gTkFNRShfT1JERVIpLTE0NjA2MzYzODU4MzZcbiAqXG4gKiBAZXhhbXBsZVxuICogRXguXG4gKiAgIEdQcm91dGVQb2ludHMtMTQ2MDYzNjM4NTgzNlxuICogICBHUHJvdXRlUG9pbnRfMTAtMTQ2MDYzNjM4NTgzNlxuICovXG52YXIgU2VsZWN0b3JJRCA9IHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGlvbiBkJ3VuIGlkZW50aWZpYW50IHN0YXRpcXVlIGJhc8OpIHN1ciBsZSB0aW1lc3RhbXAsXG4gICAgICogZXQgcXVpIHMnaW5jcmVtZW50ZSBkZSArMSDDoCBjaGFxdWUgYXBwZWxcbiAgICAgKiBAZnVuY3Rpb24gZ2VuZXJhdGVcbiAgICAgKi9cbiAgICBnZW5lcmF0ZSA6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcCsrO1xuICAgICAgICB9O1xuICAgIH0pKCksXG5cbiAgICAvKipcbiAgICAgKiBub20gZHUgdGFnXG4gICAgICogQGZ1bmN0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBpbmRleFxuICAgICAqL1xuICAgIG5hbWUgOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xuXG4gICAgICAgIHZhciBpID0gaWQubGFzdEluZGV4T2YoXCItXCIpO1xuICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5hbWUgPSBpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hbWUgPSBpZC5zdWJzdHJpbmcoMCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbnVtZXJvIGQnaWRlbnRpZmlhbnQgZHUgdGFnXG4gICAgICpcbiAgICAgKiBAZnVuY3Rpb24gaW5kZXhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBpbmRleFxuICAgICAqL1xuICAgIGluZGV4IDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG51bGw7XG5cbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUoaWQpO1xuICAgICAgICAvLyBpZiAobmFtZSAhPT0gaWQpIHtcbiAgICAgICAgdmFyIGkgPSBuYW1lLmxhc3RJbmRleE9mKFwiX1wiKTtcbiAgICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hbWUuc3Vic3RyaW5nKGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1dWlkIGR1IHRhZ1xuICAgICAqXG4gICAgICogQGZ1bmN0aW9uIHV1aWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSB0aGUgaWRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB1dWlkXG4gICAgICovXG4gICAgdXVpZCA6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdXVpZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIGkgPSBpZC5sYXN0SW5kZXhPZihcIi1cIik7XG4gICAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICAgICAgdXVpZCA9IHBhcnNlSW50KGlkLnN1YnN0cmluZyhpICsgMSksIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1dWlkO1xuICAgIH1cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0b3JJRDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Common/Utils/SelectorID.js\n");

/***/ }),

/***/ "./src/Leaflet/CRS/CRS.js":
/*!********************************!*\
  !*** ./src/Leaflet/CRS/CRS.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var proj4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proj4 */ \"./node_modules/proj4/dist/proj4-src.js-exposed\");\n/* harmony import */ var proj4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(proj4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var proj4leaflet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! proj4leaflet */ \"./node_modules/proj4leaflet/src/proj4leaflet.js\");\n/* harmony import */ var proj4leaflet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(proj4leaflet__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/Register */ \"./src/Common/Utils/Register.js\");\n/* harmony import */ var _EPSG2154__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EPSG2154 */ \"./src/Leaflet/CRS/EPSG2154.js\");\n/* harmony import */ var _EPSG27572__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EPSG27572 */ \"./src/Leaflet/CRS/EPSG27572.js\");\n/* harmony import */ var _EPSG4326__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EPSG4326 */ \"./src/Leaflet/CRS/EPSG4326.js\");\n\n\n\n\n\n\n/** autoload function */\n\n(function () {\n  // load all defs into proj4\n  _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__[\"default\"].load(proj4__WEBPACK_IMPORTED_MODULE_0___default.a);\n})();\n/**\n * CRS (Coordinate Reference Systems) Factory to create <a href=\"http://kartena.github.io/Proj4Leaflet/api/#l-proj-crs\" target=\"_blank\">L.Proj.CRS</a> instances.\n *\n * @module CRS\n * @alias L.geoportalCRS\n * @abstract\n * @example\n *  var map = L.Map('divmap', {\n *    crs : L.geoportalCRS.EPSG2154\n *  }).setView();\n *\n *  var lyr = L.geoportalLayer.WMTS(\n *    {\n *      layer : \"ORTHOIMAGERY.ORTHOPHOTOS.BDORTHO.L93\"\n *    },\n *    {\n *      opacity : 1,\n *      transparent : true,\n *      minZoom : 1,\n *      maxZoom : 21\n *      ...\n *    });\n *\n *  lyr.addTo(map); // ou map.addLayer(lyr);\n */\n\n/** @type {L.geoportalCRS} */\n\n\nvar CRS = {\n  /**\n   * Lambert 93 (\"EPSG:2154\") CRS definition to be used with Leaflet.\n   *\n   * @method EPSG2154\n   * @static\n   * @alias L.geoportalCRS.EPSG2154\n   * @returns {EPSG2154} epsg code\n   */\n  EPSG2154: function EPSG2154() {\n    return _EPSG2154__WEBPACK_IMPORTED_MODULE_3__[\"default\"].build();\n  },\n\n  /**\n   * CRS : Lambert 2 extened\n   *\n   * @method EPSG27572\n   * @static\n   * @alias L.geoportalCRS.EPSG27572\n   * @returns {EPSG27572} epsg code\n   */\n  EPSG27572: function EPSG27572() {\n    return _EPSG27572__WEBPACK_IMPORTED_MODULE_4__[\"default\"].build();\n  },\n\n  /**\n   * CRS : EPSG4326\n   *\n   * @ignore\n   * @method EPSG4326\n   * @static\n   * @alias L.geoportalCRS.EPSG4326\n   * @returns {EPSG4326} epsg code\n   */\n  EPSG4326: function EPSG4326() {\n    return _EPSG4326__WEBPACK_IMPORTED_MODULE_5__[\"default\"].build();\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (CRS); // Expose CRS as L.geoportalCRS (for a build bundle)\n\nif (window.L) {\n  window.L.geoportalCRS = CRS;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DUlMvQ1JTLmpzP2FkOGEiXSwibmFtZXMiOlsiUmVnaXN0ZXIiLCJsb2FkIiwiUHJvajQiLCJDUlMiLCJFUFNHMjE1NCIsIkVwc2cyMTU0IiwiYnVpbGQiLCJFUFNHMjc1NzIiLCJFcHNnMjc1NzIiLCJFUFNHNDMyNiIsIkVwc2c0MzI2Iiwid2luZG93IiwiTCIsImdlb3BvcnRhbENSUyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0EsQ0FBQyxZQUFZO0FBQ1Q7QUFDQUEsZ0VBQVEsQ0FBQ0MsSUFBVCxDQUFjQyw0Q0FBZDtBQUNILENBSEQ7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7O0FBQ0EsSUFBSUMsR0FBRyxHQUFHO0FBRU47QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxVQUFRLEVBQUcsb0JBQVk7QUFDbkIsV0FBT0MsaURBQVEsQ0FBQ0MsS0FBVCxFQUFQO0FBQ0gsR0FaSzs7QUFjTjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLFdBQVMsRUFBRyxxQkFBWTtBQUNwQixXQUFPQyxrREFBUyxDQUFDRixLQUFWLEVBQVA7QUFDSCxHQXhCSzs7QUEwQk47QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lHLFVBQVEsRUFBRyxvQkFBWTtBQUNuQixXQUFPQyxpREFBUSxDQUFDSixLQUFULEVBQVA7QUFDSDtBQXJDSyxDQUFWO0FBd0NlSCxrRUFBZixFLENBRUE7O0FBQ0EsSUFBSVEsTUFBTSxDQUFDQyxDQUFYLEVBQWM7QUFDVkQsUUFBTSxDQUFDQyxDQUFQLENBQVNDLFlBQVQsR0FBd0JWLEdBQXhCO0FBQ0giLCJmaWxlIjoiLi9zcmMvTGVhZmxldC9DUlMvQ1JTLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb2o0IGZyb20gXCJwcm9qNFwiO1xuaW1wb3J0IFwicHJvajRsZWFmbGV0XCI7XG5pbXBvcnQgUmVnaXN0ZXIgZnJvbSBcIi4uLy4uL0NvbW1vbi9VdGlscy9SZWdpc3RlclwiO1xuaW1wb3J0IEVwc2cyMTU0IGZyb20gXCIuL0VQU0cyMTU0XCI7XG5pbXBvcnQgRXBzZzI3NTcyIGZyb20gXCIuL0VQU0cyNzU3MlwiO1xuaW1wb3J0IEVwc2c0MzI2IGZyb20gXCIuL0VQU0c0MzI2XCI7XG5cbi8qKiBhdXRvbG9hZCBmdW5jdGlvbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBsb2FkIGFsbCBkZWZzIGludG8gcHJvajRcbiAgICBSZWdpc3Rlci5sb2FkKFByb2o0KTtcbn0pKCk7XG5cbi8qKlxuICogQ1JTIChDb29yZGluYXRlIFJlZmVyZW5jZSBTeXN0ZW1zKSBGYWN0b3J5IHRvIGNyZWF0ZSA8YSBocmVmPVwiaHR0cDovL2thcnRlbmEuZ2l0aHViLmlvL1Byb2o0TGVhZmxldC9hcGkvI2wtcHJvai1jcnNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MLlByb2ouQ1JTPC9hPiBpbnN0YW5jZXMuXG4gKlxuICogQG1vZHVsZSBDUlNcbiAqIEBhbGlhcyBMLmdlb3BvcnRhbENSU1xuICogQGFic3RyYWN0XG4gKiBAZXhhbXBsZVxuICogIHZhciBtYXAgPSBMLk1hcCgnZGl2bWFwJywge1xuICogICAgY3JzIDogTC5nZW9wb3J0YWxDUlMuRVBTRzIxNTRcbiAqICB9KS5zZXRWaWV3KCk7XG4gKlxuICogIHZhciBseXIgPSBMLmdlb3BvcnRhbExheWVyLldNVFMoXG4gKiAgICB7XG4gKiAgICAgIGxheWVyIDogXCJPUlRIT0lNQUdFUlkuT1JUSE9QSE9UT1MuQkRPUlRITy5MOTNcIlxuICogICAgfSxcbiAqICAgIHtcbiAqICAgICAgb3BhY2l0eSA6IDEsXG4gKiAgICAgIHRyYW5zcGFyZW50IDogdHJ1ZSxcbiAqICAgICAgbWluWm9vbSA6IDEsXG4gKiAgICAgIG1heFpvb20gOiAyMVxuICogICAgICAuLi5cbiAqICAgIH0pO1xuICpcbiAqICBseXIuYWRkVG8obWFwKTsgLy8gb3UgbWFwLmFkZExheWVyKGx5cik7XG4gKi9cbi8qKiBAdHlwZSB7TC5nZW9wb3J0YWxDUlN9ICovXG52YXIgQ1JTID0ge1xuXG4gICAgLyoqXG4gICAgICogTGFtYmVydCA5MyAoXCJFUFNHOjIxNTRcIikgQ1JTIGRlZmluaXRpb24gdG8gYmUgdXNlZCB3aXRoIExlYWZsZXQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIEVQU0cyMTU0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBhbGlhcyBMLmdlb3BvcnRhbENSUy5FUFNHMjE1NFxuICAgICAqIEByZXR1cm5zIHtFUFNHMjE1NH0gZXBzZyBjb2RlXG4gICAgICovXG4gICAgRVBTRzIxNTQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBFcHNnMjE1NC5idWlsZCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDUlMgOiBMYW1iZXJ0IDIgZXh0ZW5lZFxuICAgICAqXG4gICAgICogQG1ldGhvZCBFUFNHMjc1NzJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQGFsaWFzIEwuZ2VvcG9ydGFsQ1JTLkVQU0cyNzU3MlxuICAgICAqIEByZXR1cm5zIHtFUFNHMjc1NzJ9IGVwc2cgY29kZVxuICAgICAqL1xuICAgIEVQU0cyNzU3MiA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEVwc2cyNzU3Mi5idWlsZCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDUlMgOiBFUFNHNDMyNlxuICAgICAqXG4gICAgICogQGlnbm9yZVxuICAgICAqIEBtZXRob2QgRVBTRzQzMjZcbiAgICAgKiBAc3RhdGljXG4gICAgICogQGFsaWFzIEwuZ2VvcG9ydGFsQ1JTLkVQU0c0MzI2XG4gICAgICogQHJldHVybnMge0VQU0c0MzI2fSBlcHNnIGNvZGVcbiAgICAgKi9cbiAgICBFUFNHNDMyNiA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEVwc2c0MzI2LmJ1aWxkKCk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ1JTO1xuXG4vLyBFeHBvc2UgQ1JTIGFzIEwuZ2VvcG9ydGFsQ1JTIChmb3IgYSBidWlsZCBidW5kbGUpXG5pZiAod2luZG93LkwpIHtcbiAgICB3aW5kb3cuTC5nZW9wb3J0YWxDUlMgPSBDUlM7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Leaflet/CRS/CRS.js\n");

/***/ }),

/***/ "./src/Leaflet/CRS/EPSG2154.js":
/*!*************************************!*\
  !*** ./src/Leaflet/CRS/EPSG2154.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/Config */ \"./src/Common/Utils/Config.js\");\n/* harmony import */ var _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/Register */ \"./src/Common/Utils/Register.js\");\n\n\n\n/**\n * @classdesc\n *\n * Leaflet Lambert 93 (EPSG:2154) <a href=\"http://leafletjs.com/reference.html#icrs\" target=\"_blank\">ICRS compatible</a> definition.\n *\n * @module\n * @alias L.geoportalCRS.EPSG2154\n * @example\n *  var map = L.Map('divmap', {\n *    crs : L.geoportalCRS.EPSG2154\n *  }).setView();\n *  var lyr = L.geoportalLayer.WMTS(\n *    {\n *      layer : \"ORTHOIMAGERY.ORTHOPHOTOS.BDORTHO.L93\"\n *    });\n *\n *  lyr.addTo(map); // ou map.addLayer(lyr);\n */\n\n/** @type {L.geoportalCRS.EPSG2154} */\n\nvar EPSG2154 = {\n  /**\n   * instance\n   *\n   * @private\n   */\n  instance: null,\n\n  /**\n   * execution\n   *\n   * @returns {Object} instance\n   * @private\n   */\n  build: function build() {\n    // singleton\n    if (!this.instance) {\n      var crs = new leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Proj.CRS(\"EPSG:2154\", _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"EPSG:2154\"), {\n        // FIXME issue de l'autoconf cf. nativeResolutions\n        resolutions: this._getResolutions(),\n        origin: this._getOrigin()\n      });\n      this.instance = crs;\n    }\n\n    return this.instance;\n  },\n\n  /**\n   * resolutions\n   *\n   * @returns {Number[]} resolutions\n   * @private\n   */\n  _getResolutions: function _getResolutions() {\n    var resolutions = []; // resolutions issues de l'autoconf\n\n    if (_Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n      var o = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getTileMatrix(\"LAMB93\");\n      resolutions = o.nativeResolutions;\n    }\n\n    if (resolutions.length) {\n      return resolutions;\n    } // resolution par defaut\n\n\n    return [104579.22454989408, 52277.53235379051, 26135.487078595408, 13066.891381800004, 6533.228604113456, 3266.5595244626675, 1633.2660045974187, 816.6295549860224, 408.31391467683596, 204.15674151090204, 102.07831678324082, 51.0391448966112, 25.519569074269395, 12.759783693647506, 6.379891635966491, 3.18994576530532, 1.5949728694977277, 0.7974864315474559, 0.398743214900604, 0.19937160727567999, 0.099685803696052, 0.049842901818919996];\n  },\n\n  /**\n   * origine\n   *\n   * @returns {Number[]} origin\n   * @private\n   */\n  _getOrigin: function _getOrigin() {\n    return [0, 12000000];\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (EPSG2154);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DUlMvRVBTRzIxNTQuanM/ZWYxZiJdLCJuYW1lcyI6WyJFUFNHMjE1NCIsImluc3RhbmNlIiwiYnVpbGQiLCJjcnMiLCJMIiwiUHJvaiIsIkNSUyIsIlJlZ2lzdGVyIiwiZ2V0IiwicmVzb2x1dGlvbnMiLCJfZ2V0UmVzb2x1dGlvbnMiLCJvcmlnaW4iLCJfZ2V0T3JpZ2luIiwiQ29uZmlnIiwiaXNDb25maWdMb2FkZWQiLCJvIiwiZ2V0VGlsZU1hdHJpeCIsIm5hdGl2ZVJlc29sdXRpb25zIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBOztBQUNBLElBQUlBLFFBQVEsR0FBRztBQUVYO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsVUFBUSxFQUFHLElBUEE7O0FBU1g7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLE9BQUssRUFBRyxpQkFBWTtBQUNoQjtBQUNBLFFBQUksQ0FBQyxLQUFLRCxRQUFWLEVBQW9CO0FBQ2hCLFVBQUlFLEdBQUcsR0FBRyxJQUFJQyw4Q0FBQyxDQUFDQyxJQUFGLENBQU9DLEdBQVgsQ0FBZSxXQUFmLEVBQ05DLDhEQUFRLENBQUNDLEdBQVQsQ0FBYSxXQUFiLENBRE0sRUFDcUI7QUFDdkI7QUFDQUMsbUJBQVcsRUFBRyxLQUFLQyxlQUFMLEVBRlM7QUFHdkJDLGNBQU0sRUFBRyxLQUFLQyxVQUFMO0FBSGMsT0FEckIsQ0FBVjtBQU1BLFdBQUtYLFFBQUwsR0FBZ0JFLEdBQWhCO0FBQ0g7O0FBRUQsV0FBTyxLQUFLRixRQUFaO0FBQ0gsR0E1QlU7O0FBOEJYO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJUyxpQkFBZSxFQUFHLDJCQUFZO0FBQzFCLFFBQUlELFdBQVcsR0FBRyxFQUFsQixDQUQwQixDQUUxQjs7QUFDQSxRQUFJSSw0REFBTSxDQUFDQyxjQUFQLEVBQUosRUFBNkI7QUFDekIsVUFBSUMsQ0FBQyxHQUFHRiw0REFBTSxDQUFDRyxhQUFQLENBQXFCLFFBQXJCLENBQVI7QUFDQVAsaUJBQVcsR0FBR00sQ0FBQyxDQUFDRSxpQkFBaEI7QUFDSDs7QUFFRCxRQUFJUixXQUFXLENBQUNTLE1BQWhCLEVBQXdCO0FBQ3BCLGFBQU9ULFdBQVA7QUFDSCxLQVZ5QixDQVkxQjs7O0FBQ0EsV0FBTyxDQUNILGtCQURHLEVBRUgsaUJBRkcsRUFHSCxrQkFIRyxFQUlILGtCQUpHLEVBS0gsaUJBTEcsRUFNSCxrQkFORyxFQU9ILGtCQVBHLEVBUUgsaUJBUkcsRUFTSCxrQkFURyxFQVVILGtCQVZHLEVBV0gsa0JBWEcsRUFZSCxnQkFaRyxFQWFILGtCQWJHLEVBY0gsa0JBZEcsRUFlSCxpQkFmRyxFQWdCSCxnQkFoQkcsRUFpQkgsa0JBakJHLEVBa0JILGtCQWxCRyxFQW1CSCxpQkFuQkcsRUFvQkgsbUJBcEJHLEVBcUJILGlCQXJCRyxFQXNCSCxvQkF0QkcsQ0FBUDtBQXdCSCxHQXpFVTs7QUEyRVg7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lHLFlBQVUsRUFBRyxzQkFBWTtBQUNyQixXQUFPLENBQUMsQ0FBRCxFQUFJLFFBQUosQ0FBUDtBQUNIO0FBbkZVLENBQWY7QUFzRmVaLHVFQUFmIiwiZmlsZSI6Ii4vc3JjL0xlYWZsZXQvQ1JTL0VQU0cyMTU0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEwgZnJvbSBcImxlYWZsZXRcIjtcbmltcG9ydCBDb25maWcgZnJvbSBcIi4uLy4uL0NvbW1vbi9VdGlscy9Db25maWdcIjtcbmltcG9ydCBSZWdpc3RlciBmcm9tIFwiLi4vLi4vQ29tbW9uL1V0aWxzL1JlZ2lzdGVyXCI7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICpcbiAqIExlYWZsZXQgTGFtYmVydCA5MyAoRVBTRzoyMTU0KSA8YSBocmVmPVwiaHR0cDovL2xlYWZsZXRqcy5jb20vcmVmZXJlbmNlLmh0bWwjaWNyc1wiIHRhcmdldD1cIl9ibGFua1wiPklDUlMgY29tcGF0aWJsZTwvYT4gZGVmaW5pdGlvbi5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYWxpYXMgTC5nZW9wb3J0YWxDUlMuRVBTRzIxNTRcbiAqIEBleGFtcGxlXG4gKiAgdmFyIG1hcCA9IEwuTWFwKCdkaXZtYXAnLCB7XG4gKiAgICBjcnMgOiBMLmdlb3BvcnRhbENSUy5FUFNHMjE1NFxuICogIH0pLnNldFZpZXcoKTtcbiAqICB2YXIgbHlyID0gTC5nZW9wb3J0YWxMYXllci5XTVRTKFxuICogICAge1xuICogICAgICBsYXllciA6IFwiT1JUSE9JTUFHRVJZLk9SVEhPUEhPVE9TLkJET1JUSE8uTDkzXCJcbiAqICAgIH0pO1xuICpcbiAqICBseXIuYWRkVG8obWFwKTsgLy8gb3UgbWFwLmFkZExheWVyKGx5cik7XG4gKi9cbi8qKiBAdHlwZSB7TC5nZW9wb3J0YWxDUlMuRVBTRzIxNTR9ICovXG52YXIgRVBTRzIxNTQgPSB7XG5cbiAgICAvKipcbiAgICAgKiBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpbnN0YW5jZSA6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBleGVjdXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBidWlsZCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gc2luZ2xldG9uXG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIGNycyA9IG5ldyBMLlByb2ouQ1JTKFwiRVBTRzoyMTU0XCIsXG4gICAgICAgICAgICAgICAgUmVnaXN0ZXIuZ2V0KFwiRVBTRzoyMTU0XCIpLCB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZJWE1FIGlzc3VlIGRlIGwnYXV0b2NvbmYgY2YuIG5hdGl2ZVJlc29sdXRpb25zXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb25zIDogdGhpcy5fZ2V0UmVzb2x1dGlvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luIDogdGhpcy5fZ2V0T3JpZ2luKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSBjcnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVzb2x1dGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gcmVzb2x1dGlvbnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRSZXNvbHV0aW9ucyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc29sdXRpb25zID0gW107XG4gICAgICAgIC8vIHJlc29sdXRpb25zIGlzc3VlcyBkZSBsJ2F1dG9jb25mXG4gICAgICAgIGlmIChDb25maWcuaXNDb25maWdMb2FkZWQoKSkge1xuICAgICAgICAgICAgdmFyIG8gPSBDb25maWcuZ2V0VGlsZU1hdHJpeChcIkxBTUI5M1wiKTtcbiAgICAgICAgICAgIHJlc29sdXRpb25zID0gby5uYXRpdmVSZXNvbHV0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNvbHV0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHV0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc29sdXRpb24gcGFyIGRlZmF1dFxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgMTA0NTc5LjIyNDU0OTg5NDA4LFxuICAgICAgICAgICAgNTIyNzcuNTMyMzUzNzkwNTEsXG4gICAgICAgICAgICAyNjEzNS40ODcwNzg1OTU0MDgsXG4gICAgICAgICAgICAxMzA2Ni44OTEzODE4MDAwMDQsXG4gICAgICAgICAgICA2NTMzLjIyODYwNDExMzQ1NixcbiAgICAgICAgICAgIDMyNjYuNTU5NTI0NDYyNjY3NSxcbiAgICAgICAgICAgIDE2MzMuMjY2MDA0NTk3NDE4NyxcbiAgICAgICAgICAgIDgxNi42Mjk1NTQ5ODYwMjI0LFxuICAgICAgICAgICAgNDA4LjMxMzkxNDY3NjgzNTk2LFxuICAgICAgICAgICAgMjA0LjE1Njc0MTUxMDkwMjA0LFxuICAgICAgICAgICAgMTAyLjA3ODMxNjc4MzI0MDgyLFxuICAgICAgICAgICAgNTEuMDM5MTQ0ODk2NjExMixcbiAgICAgICAgICAgIDI1LjUxOTU2OTA3NDI2OTM5NSxcbiAgICAgICAgICAgIDEyLjc1OTc4MzY5MzY0NzUwNixcbiAgICAgICAgICAgIDYuMzc5ODkxNjM1OTY2NDkxLFxuICAgICAgICAgICAgMy4xODk5NDU3NjUzMDUzMixcbiAgICAgICAgICAgIDEuNTk0OTcyODY5NDk3NzI3NyxcbiAgICAgICAgICAgIDAuNzk3NDg2NDMxNTQ3NDU1OSxcbiAgICAgICAgICAgIDAuMzk4NzQzMjE0OTAwNjA0LFxuICAgICAgICAgICAgMC4xOTkzNzE2MDcyNzU2Nzk5OSxcbiAgICAgICAgICAgIDAuMDk5Njg1ODAzNjk2MDUyLFxuICAgICAgICAgICAgMC4wNDk4NDI5MDE4MTg5MTk5OTZcbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogb3JpZ2luZVxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcltdfSBvcmlnaW5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRPcmlnaW4gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbMCwgMTIwMDAwMDBdO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVQU0cyMTU0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Leaflet/CRS/EPSG2154.js\n");

/***/ }),

/***/ "./src/Leaflet/CRS/EPSG27572.js":
/*!**************************************!*\
  !*** ./src/Leaflet/CRS/EPSG27572.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/Config */ \"./src/Common/Utils/Config.js\");\n/* harmony import */ var _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/Register */ \"./src/Common/Utils/Register.js\");\n\n\n\n/**\n *\n * Projection Lambert 2 étendu\n *\n * @module\n * @alias L.geoportalCRS.EPSG27572\n * @example\n *  var map = L.Map('divmap', {\n *    crs : L.geoportalCRS.EPSG27572\n *  }).setView();\n *  var lyr = L.geoportalLayer.WMTS(\n *    {\n *      layer : \"ORTHOIMAGERY.ORTHOPHOTOS.BDORTHO.L93\",\n *      apiKey : \"wqxljfvklsdhvlfkjqfmlq787645\"\n *    },\n *    {\n *      attribution : \"test for layer ORTHOIMAGERY\",\n *      opacity : 1,\n *      transparent : true,\n *      minZoom : 1,\n *      maxZoom : 21\n *      ...\n *    });\n *\n *  lyr.addTo(map); // ou map.addLayer(lyr);\n */\n\n/** @type {L.geoportalCRS.EPSG27572} */\n\nvar EPSG27572 = {\n  /**\n   * instance\n   *\n   * @private\n   */\n  instance: null,\n\n  /**\n   * execution\n   *\n   * @returns {Object} instance\n   * @private\n   */\n  build: function build() {\n    // singleton\n    if (!this.instance) {\n      var crs = new leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Proj.CRS(\"EPSG:27572\", _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"EPSG:27572\"), {\n        // FIXME issue de l'autoconf cf. nativeResolutions\n        resolutions: this._getResolutions(),\n        origin: this._getOrigin()\n      });\n      this.instance = crs;\n    }\n\n    return this.instance;\n  },\n\n  /**\n   * resolutions\n   *\n   * @returns {Number[]} resolutions\n   * @private\n   */\n  _getResolutions: function _getResolutions() {\n    var resolutions = []; // resolutions issues de l'autoconf\n\n    if (_Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n      var o = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getTileMatrix(\"LAMB2E\");\n\n      if (o && Object.keys(o).length) {\n        resolutions = o.nativeResolutions;\n      }\n    }\n\n    if (resolutions.length) {\n      return resolutions;\n    } // FIXME resolution par defaut ???\n\n\n    return [104579.22454989408, 52277.53235379051, 26135.487078595408, 13066.891381800004, 6533.228604113456, 3266.5595244626675, 1633.2660045974187, 816.6295549860224, 408.31391467683596, 204.15674151090204, 102.07831678324082, 51.0391448966112, 25.519569074269395, 12.759783693647506, 6.379891635966491, 3.18994576530532, 1.5949728694977277, 0.7974864315474559, 0.398743214900604, 0.19937160727567999, 0.099685803696052, 0.049842901818919996];\n  },\n\n  /**\n   * origine\n   *\n   * @returns {Number[]} origin\n   * @private\n   */\n  _getOrigin: function _getOrigin() {\n    return [0, 12000000];\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (EPSG27572);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DUlMvRVBTRzI3NTcyLmpzP2UxZGMiXSwibmFtZXMiOlsiRVBTRzI3NTcyIiwiaW5zdGFuY2UiLCJidWlsZCIsImNycyIsIkwiLCJQcm9qIiwiQ1JTIiwiUmVnaXN0ZXIiLCJnZXQiLCJyZXNvbHV0aW9ucyIsIl9nZXRSZXNvbHV0aW9ucyIsIm9yaWdpbiIsIl9nZXRPcmlnaW4iLCJDb25maWciLCJpc0NvbmZpZ0xvYWRlZCIsIm8iLCJnZXRUaWxlTWF0cml4IiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIm5hdGl2ZVJlc29sdXRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUc7QUFFWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLFVBQVEsRUFBRyxJQVBDOztBQVNaO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxPQUFLLEVBQUcsaUJBQVk7QUFDaEI7QUFDQSxRQUFJLENBQUMsS0FBS0QsUUFBVixFQUFvQjtBQUNoQixVQUFJRSxHQUFHLEdBQUcsSUFBSUMsOENBQUMsQ0FBQ0MsSUFBRixDQUFPQyxHQUFYLENBQWUsWUFBZixFQUNOQyw4REFBUSxDQUFDQyxHQUFULENBQWEsWUFBYixDQURNLEVBQ3NCO0FBQ3hCO0FBQ0FDLG1CQUFXLEVBQUcsS0FBS0MsZUFBTCxFQUZVO0FBR3hCQyxjQUFNLEVBQUcsS0FBS0MsVUFBTDtBQUhlLE9BRHRCLENBQVY7QUFNQSxXQUFLWCxRQUFMLEdBQWdCRSxHQUFoQjtBQUNIOztBQUVELFdBQU8sS0FBS0YsUUFBWjtBQUNILEdBNUJXOztBQThCWjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSVMsaUJBQWUsRUFBRywyQkFBWTtBQUMxQixRQUFJRCxXQUFXLEdBQUcsRUFBbEIsQ0FEMEIsQ0FFMUI7O0FBQ0EsUUFBSUksNERBQU0sQ0FBQ0MsY0FBUCxFQUFKLEVBQTZCO0FBQ3pCLFVBQUlDLENBQUMsR0FBR0YsNERBQU0sQ0FBQ0csYUFBUCxDQUFxQixRQUFyQixDQUFSOztBQUNBLFVBQUlELENBQUMsSUFBSUUsTUFBTSxDQUFDQyxJQUFQLENBQVlILENBQVosRUFBZUksTUFBeEIsRUFBZ0M7QUFDNUJWLG1CQUFXLEdBQUdNLENBQUMsQ0FBQ0ssaUJBQWhCO0FBQ0g7QUFDSjs7QUFFRCxRQUFJWCxXQUFXLENBQUNVLE1BQWhCLEVBQXdCO0FBQ3BCLGFBQU9WLFdBQVA7QUFDSCxLQVp5QixDQWMxQjs7O0FBQ0EsV0FBTyxDQUNILGtCQURHLEVBRUgsaUJBRkcsRUFHSCxrQkFIRyxFQUlILGtCQUpHLEVBS0gsaUJBTEcsRUFNSCxrQkFORyxFQU9ILGtCQVBHLEVBUUgsaUJBUkcsRUFTSCxrQkFURyxFQVVILGtCQVZHLEVBV0gsa0JBWEcsRUFZSCxnQkFaRyxFQWFILGtCQWJHLEVBY0gsa0JBZEcsRUFlSCxpQkFmRyxFQWdCSCxnQkFoQkcsRUFpQkgsa0JBakJHLEVBa0JILGtCQWxCRyxFQW1CSCxpQkFuQkcsRUFvQkgsbUJBcEJHLEVBcUJILGlCQXJCRyxFQXNCSCxvQkF0QkcsQ0FBUDtBQXdCSCxHQTNFVzs7QUE2RVo7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lHLFlBQVUsRUFBRyxzQkFBWTtBQUNyQixXQUFPLENBQUMsQ0FBRCxFQUFJLFFBQUosQ0FBUDtBQUNIO0FBckZXLENBQWhCO0FBd0ZlWix3RUFBZiIsImZpbGUiOiIuL3NyYy9MZWFmbGV0L0NSUy9FUFNHMjc1NzIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTCBmcm9tIFwibGVhZmxldFwiO1xuaW1wb3J0IENvbmZpZyBmcm9tIFwiLi4vLi4vQ29tbW9uL1V0aWxzL0NvbmZpZ1wiO1xuaW1wb3J0IFJlZ2lzdGVyIGZyb20gXCIuLi8uLi9Db21tb24vVXRpbHMvUmVnaXN0ZXJcIjtcblxuLyoqXG4gKlxuICogUHJvamVjdGlvbiBMYW1iZXJ0IDIgw6l0ZW5kdVxuICpcbiAqIEBtb2R1bGVcbiAqIEBhbGlhcyBMLmdlb3BvcnRhbENSUy5FUFNHMjc1NzJcbiAqIEBleGFtcGxlXG4gKiAgdmFyIG1hcCA9IEwuTWFwKCdkaXZtYXAnLCB7XG4gKiAgICBjcnMgOiBMLmdlb3BvcnRhbENSUy5FUFNHMjc1NzJcbiAqICB9KS5zZXRWaWV3KCk7XG4gKiAgdmFyIGx5ciA9IEwuZ2VvcG9ydGFsTGF5ZXIuV01UUyhcbiAqICAgIHtcbiAqICAgICAgbGF5ZXIgOiBcIk9SVEhPSU1BR0VSWS5PUlRIT1BIT1RPUy5CRE9SVEhPLkw5M1wiLFxuICogICAgICBhcGlLZXkgOiBcIndxeGxqZnZrbHNkaHZsZmtqcWZtbHE3ODc2NDVcIlxuICogICAgfSxcbiAqICAgIHtcbiAqICAgICAgYXR0cmlidXRpb24gOiBcInRlc3QgZm9yIGxheWVyIE9SVEhPSU1BR0VSWVwiLFxuICogICAgICBvcGFjaXR5IDogMSxcbiAqICAgICAgdHJhbnNwYXJlbnQgOiB0cnVlLFxuICogICAgICBtaW5ab29tIDogMSxcbiAqICAgICAgbWF4Wm9vbSA6IDIxXG4gKiAgICAgIC4uLlxuICogICAgfSk7XG4gKlxuICogIGx5ci5hZGRUbyhtYXApOyAvLyBvdSBtYXAuYWRkTGF5ZXIobHlyKTtcbiAqL1xuLyoqIEB0eXBlIHtMLmdlb3BvcnRhbENSUy5FUFNHMjc1NzJ9ICovXG52YXIgRVBTRzI3NTcyID0ge1xuXG4gICAgLyoqXG4gICAgICogaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW5zdGFuY2UgOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogZXhlY3V0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYnVpbGQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHNpbmdsZXRvblxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBjcnMgPSBuZXcgTC5Qcm9qLkNSUyhcIkVQU0c6Mjc1NzJcIixcbiAgICAgICAgICAgICAgICBSZWdpc3Rlci5nZXQoXCJFUFNHOjI3NTcyXCIpLCB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZJWE1FIGlzc3VlIGRlIGwnYXV0b2NvbmYgY2YuIG5hdGl2ZVJlc29sdXRpb25zXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb25zIDogdGhpcy5fZ2V0UmVzb2x1dGlvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luIDogdGhpcy5fZ2V0T3JpZ2luKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSBjcnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVzb2x1dGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gcmVzb2x1dGlvbnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRSZXNvbHV0aW9ucyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc29sdXRpb25zID0gW107XG4gICAgICAgIC8vIHJlc29sdXRpb25zIGlzc3VlcyBkZSBsJ2F1dG9jb25mXG4gICAgICAgIGlmIChDb25maWcuaXNDb25maWdMb2FkZWQoKSkge1xuICAgICAgICAgICAgdmFyIG8gPSBDb25maWcuZ2V0VGlsZU1hdHJpeChcIkxBTUIyRVwiKTtcbiAgICAgICAgICAgIGlmIChvICYmIE9iamVjdC5rZXlzKG8pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlc29sdXRpb25zID0gby5uYXRpdmVSZXNvbHV0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNvbHV0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHV0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZJWE1FIHJlc29sdXRpb24gcGFyIGRlZmF1dCA/Pz9cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIDEwNDU3OS4yMjQ1NDk4OTQwOCxcbiAgICAgICAgICAgIDUyMjc3LjUzMjM1Mzc5MDUxLFxuICAgICAgICAgICAgMjYxMzUuNDg3MDc4NTk1NDA4LFxuICAgICAgICAgICAgMTMwNjYuODkxMzgxODAwMDA0LFxuICAgICAgICAgICAgNjUzMy4yMjg2MDQxMTM0NTYsXG4gICAgICAgICAgICAzMjY2LjU1OTUyNDQ2MjY2NzUsXG4gICAgICAgICAgICAxNjMzLjI2NjAwNDU5NzQxODcsXG4gICAgICAgICAgICA4MTYuNjI5NTU0OTg2MDIyNCxcbiAgICAgICAgICAgIDQwOC4zMTM5MTQ2NzY4MzU5NixcbiAgICAgICAgICAgIDIwNC4xNTY3NDE1MTA5MDIwNCxcbiAgICAgICAgICAgIDEwMi4wNzgzMTY3ODMyNDA4MixcbiAgICAgICAgICAgIDUxLjAzOTE0NDg5NjYxMTIsXG4gICAgICAgICAgICAyNS41MTk1NjkwNzQyNjkzOTUsXG4gICAgICAgICAgICAxMi43NTk3ODM2OTM2NDc1MDYsXG4gICAgICAgICAgICA2LjM3OTg5MTYzNTk2NjQ5MSxcbiAgICAgICAgICAgIDMuMTg5OTQ1NzY1MzA1MzIsXG4gICAgICAgICAgICAxLjU5NDk3Mjg2OTQ5NzcyNzcsXG4gICAgICAgICAgICAwLjc5NzQ4NjQzMTU0NzQ1NTksXG4gICAgICAgICAgICAwLjM5ODc0MzIxNDkwMDYwNCxcbiAgICAgICAgICAgIDAuMTk5MzcxNjA3Mjc1Njc5OTksXG4gICAgICAgICAgICAwLjA5OTY4NTgwMzY5NjA1MixcbiAgICAgICAgICAgIDAuMDQ5ODQyOTAxODE4OTE5OTk2XG4gICAgICAgIF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG9yaWdpbmVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gb3JpZ2luXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0T3JpZ2luIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gWzAsIDEyMDAwMDAwXTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFUFNHMjc1NzI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Leaflet/CRS/EPSG27572.js\n");

/***/ }),

/***/ "./src/Leaflet/CRS/EPSG4326.js":
/*!*************************************!*\
  !*** ./src/Leaflet/CRS/EPSG4326.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Utils/Config */ \"./src/Common/Utils/Config.js\");\n/* harmony import */ var _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Utils/Register */ \"./src/Common/Utils/Register.js\");\n\n\n // FIXME prototype\n// il ne fonctionne pas car les bbox ne sont pas bien formatées !?\n//   > BBOX=xmin,ymin,xmax,ymax --> conversion en EPSG --> BBOX=ymin,xmin,ymax,xmax\n// cf. methode L.TileLayer.WMS.getTileUrl()\n//   > inversion des coordonnées si crs = L.CRS.EPSG4326\n// il faudrait donc surcharger cette methode afin qu'elle prenne en compte la condition suivante :\n//   > crs.code = \"EPSG:4326\"\n\n/**\n * Projection Geographic (EPSG:4326)\n * (PROTOTYPE)\n *\n * @ignore\n * @module\n * @alias L.geoportalCRS.EPSG2154\n * @returns {L.Proj.CRS}\n * @example\n *  var map = L.Map('divmap', {\n *    crs : L.geoportalCRS.EPSG4326 // ou L.CRS.EPSG4326\n *  }).setView();\n *  var lyr = L.geoportalLayer.WMTS(\n *    {\n *      layer : \"ORTHOIMAGERY.ORTHOPHOTOS.BDORTHO\",\n *      apiKey : \"wqxljfvklsdhvlfkjqfmlq787645\"\n *    },\n *    {\n *      attribution : \"test for layer ORTHOIMAGERY\",\n *      opacity : 1,\n *      transparent : true,\n *      minZoom : 1,\n *      maxZoom : 21\n *      ...\n *    });\n *\n *  lyr.addTo(map); // ou map.addLayer(lyr);\n */\n\n/** @type {L.geoportalCRS.EPSG4326} */\n\nvar EPSG4326 = {\n  /**\n   * instance\n   *\n   * @private\n   */\n  instance: null,\n\n  /**\n   * execution\n   *\n   * @returns {Object} instance\n   * @private\n   */\n  build: function build() {\n    // singleton\n    if (!this.instance) {\n      var crs = new leaflet__WEBPACK_IMPORTED_MODULE_0___default.a.Proj.CRS(\"EPSG:4326\", _Common_Utils_Register__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"EPSG:4326\"), {\n        resolutions: this._getResolutions(),\n        origin: [-180, 90] // ???\n\n      });\n      this.instance = crs;\n    }\n\n    return this.instance;\n  },\n\n  /**\n   * resolutions\n   *\n   * @returns {Number[]} resolutions\n   * @private\n   */\n  _getResolutions: function _getResolutions() {\n    var resolutions = []; // FIXME resolutions issues de l'autoconf\n    // mais pas celle du TMS WGS84G\n\n    if (_Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isConfigLoaded()) {\n      resolutions = _Common_Utils_Config__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getResolutions();\n    }\n\n    if (resolutions.length) {\n      return resolutions;\n    }\n\n    return [1.40625, 0.703125, 0.3515625, 0.17578125, 0.087890625, 0.0439453125, 0.02197265625, 0.010986328125, 0.0054931640625, 0.00274658203125, 0.001373291015625, 0.0006866455078125, 0.00034332275390625, 0.000171661376953126, 0.0000858306884765628, 0.0000429153442382813, 0.0000214576721191407, 0.0000107288360595703, 0.00000536441802978517, 0.00000268220901489259, 0.0000013411045074463, 0.000000670552253723145, 0.00000033527612686157];\n  },\n\n  /**\n   * origine\n   *\n   * @private\n   */\n  _getOrigin: function _getOrigin() {}\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (EPSG4326);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DUlMvRVBTRzQzMjYuanM/NzI5MSJdLCJuYW1lcyI6WyJFUFNHNDMyNiIsImluc3RhbmNlIiwiYnVpbGQiLCJjcnMiLCJMIiwiUHJvaiIsIkNSUyIsIlJlZ2lzdGVyIiwiZ2V0IiwicmVzb2x1dGlvbnMiLCJfZ2V0UmVzb2x1dGlvbnMiLCJvcmlnaW4iLCJDb25maWciLCJpc0NvbmZpZ0xvYWRlZCIsImdldFJlc29sdXRpb25zIiwibGVuZ3RoIiwiX2dldE9yaWdpbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7Q0FHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQSxJQUFJQSxRQUFRLEdBQUc7QUFFWDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLFVBQVEsRUFBRyxJQVBBOztBQVNYO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxPQUFLLEVBQUcsaUJBQVk7QUFDaEI7QUFDQSxRQUFJLENBQUMsS0FBS0QsUUFBVixFQUFvQjtBQUNoQixVQUFJRSxHQUFHLEdBQUcsSUFBSUMsOENBQUMsQ0FBQ0MsSUFBRixDQUFPQyxHQUFYLENBQWUsV0FBZixFQUNOQyw4REFBUSxDQUFDQyxHQUFULENBQWEsV0FBYixDQURNLEVBQ3FCO0FBQ3ZCQyxtQkFBVyxFQUFHLEtBQUtDLGVBQUwsRUFEUztBQUV2QkMsY0FBTSxFQUFHLENBQUMsQ0FBQyxHQUFGLEVBQU8sRUFBUCxDQUZjLENBRUg7O0FBRkcsT0FEckIsQ0FBVjtBQU1BLFdBQUtWLFFBQUwsR0FBZ0JFLEdBQWhCO0FBQ0g7O0FBRUQsV0FBTyxLQUFLRixRQUFaO0FBQ0gsR0E1QlU7O0FBOEJYO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJUyxpQkFBZSxFQUFHLDJCQUFZO0FBQzFCLFFBQUlELFdBQVcsR0FBRyxFQUFsQixDQUQwQixDQUUxQjtBQUNBOztBQUVBLFFBQUlHLDREQUFNLENBQUNDLGNBQVAsRUFBSixFQUE2QjtBQUN6QkosaUJBQVcsR0FBR0csNERBQU0sQ0FBQ0UsY0FBUCxFQUFkO0FBQ0g7O0FBRUQsUUFBSUwsV0FBVyxDQUFDTSxNQUFoQixFQUF3QjtBQUNwQixhQUFPTixXQUFQO0FBQ0g7O0FBRUQsV0FBTyxDQUNILE9BREcsRUFFSCxRQUZHLEVBR0gsU0FIRyxFQUlILFVBSkcsRUFLSCxXQUxHLEVBTUgsWUFORyxFQU9ILGFBUEcsRUFRSCxjQVJHLEVBU0gsZUFURyxFQVVILGdCQVZHLEVBV0gsaUJBWEcsRUFZSCxrQkFaRyxFQWFILG1CQWJHLEVBY0gsb0JBZEcsRUFlSCxxQkFmRyxFQWdCSCxxQkFoQkcsRUFpQkgscUJBakJHLEVBa0JILHFCQWxCRyxFQW1CSCxzQkFuQkcsRUFvQkgsc0JBcEJHLEVBcUJILHFCQXJCRyxFQXNCSCx1QkF0QkcsRUF1Qkgsc0JBdkJHLENBQVA7QUF5QkgsR0ExRVU7O0FBMkVYO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSU8sWUFBVSxFQUFHLHNCQUFZLENBQUU7QUFoRmhCLENBQWY7QUFtRmVoQix1RUFBZiIsImZpbGUiOiIuL3NyYy9MZWFmbGV0L0NSUy9FUFNHNDMyNi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMIGZyb20gXCJsZWFmbGV0XCI7XG5pbXBvcnQgQ29uZmlnIGZyb20gXCIuLi8uLi9Db21tb24vVXRpbHMvQ29uZmlnXCI7XG5pbXBvcnQgUmVnaXN0ZXIgZnJvbSBcIi4uLy4uL0NvbW1vbi9VdGlscy9SZWdpc3RlclwiO1xuXG4vLyBGSVhNRSBwcm90b3R5cGVcbi8vIGlsIG5lIGZvbmN0aW9ubmUgcGFzIGNhciBsZXMgYmJveCBuZSBzb250IHBhcyBiaWVuIGZvcm1hdMOpZXMgIT9cbi8vICAgPiBCQk9YPXhtaW4seW1pbix4bWF4LHltYXggLS0+IGNvbnZlcnNpb24gZW4gRVBTRyAtLT4gQkJPWD15bWluLHhtaW4seW1heCx4bWF4XG4vLyBjZi4gbWV0aG9kZSBMLlRpbGVMYXllci5XTVMuZ2V0VGlsZVVybCgpXG4vLyAgID4gaW52ZXJzaW9uIGRlcyBjb29yZG9ubsOpZXMgc2kgY3JzID0gTC5DUlMuRVBTRzQzMjZcbi8vIGlsIGZhdWRyYWl0IGRvbmMgc3VyY2hhcmdlciBjZXR0ZSBtZXRob2RlIGFmaW4gcXUnZWxsZSBwcmVubmUgZW4gY29tcHRlIGxhIGNvbmRpdGlvbiBzdWl2YW50ZSA6XG4vLyAgID4gY3JzLmNvZGUgPSBcIkVQU0c6NDMyNlwiXG5cbi8qKlxuICogUHJvamVjdGlvbiBHZW9ncmFwaGljIChFUFNHOjQzMjYpXG4gKiAoUFJPVE9UWVBFKVxuICpcbiAqIEBpZ25vcmVcbiAqIEBtb2R1bGVcbiAqIEBhbGlhcyBMLmdlb3BvcnRhbENSUy5FUFNHMjE1NFxuICogQHJldHVybnMge0wuUHJvai5DUlN9XG4gKiBAZXhhbXBsZVxuICogIHZhciBtYXAgPSBMLk1hcCgnZGl2bWFwJywge1xuICogICAgY3JzIDogTC5nZW9wb3J0YWxDUlMuRVBTRzQzMjYgLy8gb3UgTC5DUlMuRVBTRzQzMjZcbiAqICB9KS5zZXRWaWV3KCk7XG4gKiAgdmFyIGx5ciA9IEwuZ2VvcG9ydGFsTGF5ZXIuV01UUyhcbiAqICAgIHtcbiAqICAgICAgbGF5ZXIgOiBcIk9SVEhPSU1BR0VSWS5PUlRIT1BIT1RPUy5CRE9SVEhPXCIsXG4gKiAgICAgIGFwaUtleSA6IFwid3F4bGpmdmtsc2Rodmxma2pxZm1scTc4NzY0NVwiXG4gKiAgICB9LFxuICogICAge1xuICogICAgICBhdHRyaWJ1dGlvbiA6IFwidGVzdCBmb3IgbGF5ZXIgT1JUSE9JTUFHRVJZXCIsXG4gKiAgICAgIG9wYWNpdHkgOiAxLFxuICogICAgICB0cmFuc3BhcmVudCA6IHRydWUsXG4gKiAgICAgIG1pblpvb20gOiAxLFxuICogICAgICBtYXhab29tIDogMjFcbiAqICAgICAgLi4uXG4gKiAgICB9KTtcbiAqXG4gKiAgbHlyLmFkZFRvKG1hcCk7IC8vIG91IG1hcC5hZGRMYXllcihseXIpO1xuICovXG4vKiogQHR5cGUge0wuZ2VvcG9ydGFsQ1JTLkVQU0c0MzI2fSAqL1xudmFyIEVQU0c0MzI2ID0ge1xuXG4gICAgLyoqXG4gICAgICogaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW5zdGFuY2UgOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogZXhlY3V0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYnVpbGQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHNpbmdsZXRvblxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBjcnMgPSBuZXcgTC5Qcm9qLkNSUyhcIkVQU0c6NDMyNlwiLFxuICAgICAgICAgICAgICAgIFJlZ2lzdGVyLmdldChcIkVQU0c6NDMyNlwiKSwge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9ucyA6IHRoaXMuX2dldFJlc29sdXRpb25zKCksXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbiA6IFstMTgwLCA5MF0gLy8gPz8/XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSBjcnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVzb2x1dGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gcmVzb2x1dGlvbnNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRSZXNvbHV0aW9ucyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc29sdXRpb25zID0gW107XG4gICAgICAgIC8vIEZJWE1FIHJlc29sdXRpb25zIGlzc3VlcyBkZSBsJ2F1dG9jb25mXG4gICAgICAgIC8vIG1haXMgcGFzIGNlbGxlIGR1IFRNUyBXR1M4NEdcblxuICAgICAgICBpZiAoQ29uZmlnLmlzQ29uZmlnTG9hZGVkKCkpIHtcbiAgICAgICAgICAgIHJlc29sdXRpb25zID0gQ29uZmlnLmdldFJlc29sdXRpb25zKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzb2x1dGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x1dGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgMS40MDYyNSxcbiAgICAgICAgICAgIDAuNzAzMTI1LFxuICAgICAgICAgICAgMC4zNTE1NjI1LFxuICAgICAgICAgICAgMC4xNzU3ODEyNSxcbiAgICAgICAgICAgIDAuMDg3ODkwNjI1LFxuICAgICAgICAgICAgMC4wNDM5NDUzMTI1LFxuICAgICAgICAgICAgMC4wMjE5NzI2NTYyNSxcbiAgICAgICAgICAgIDAuMDEwOTg2MzI4MTI1LFxuICAgICAgICAgICAgMC4wMDU0OTMxNjQwNjI1LFxuICAgICAgICAgICAgMC4wMDI3NDY1ODIwMzEyNSxcbiAgICAgICAgICAgIDAuMDAxMzczMjkxMDE1NjI1LFxuICAgICAgICAgICAgMC4wMDA2ODY2NDU1MDc4MTI1LFxuICAgICAgICAgICAgMC4wMDAzNDMzMjI3NTM5MDYyNSxcbiAgICAgICAgICAgIDAuMDAwMTcxNjYxMzc2OTUzMTI2LFxuICAgICAgICAgICAgMC4wMDAwODU4MzA2ODg0NzY1NjI4LFxuICAgICAgICAgICAgMC4wMDAwNDI5MTUzNDQyMzgyODEzLFxuICAgICAgICAgICAgMC4wMDAwMjE0NTc2NzIxMTkxNDA3LFxuICAgICAgICAgICAgMC4wMDAwMTA3Mjg4MzYwNTk1NzAzLFxuICAgICAgICAgICAgMC4wMDAwMDUzNjQ0MTgwMjk3ODUxNyxcbiAgICAgICAgICAgIDAuMDAwMDAyNjgyMjA5MDE0ODkyNTksXG4gICAgICAgICAgICAwLjAwMDAwMTM0MTEwNDUwNzQ0NjMsXG4gICAgICAgICAgICAwLjAwMDAwMDY3MDU1MjI1MzcyMzE0NSxcbiAgICAgICAgICAgIDAuMDAwMDAwMzM1Mjc2MTI2ODYxNTdcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIG9yaWdpbmVcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldE9yaWdpbiA6IGZ1bmN0aW9uICgpIHt9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFUFNHNDMyNjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Leaflet/CRS/EPSG4326.js\n");

/***/ }),

/***/ "./src/Leaflet/CSS/Controls/MousePosition/GPmousePositionLeaflet.css":
/*!***************************************************************************!*\
  !*** ./src/Leaflet/CSS/Controls/MousePosition/GPmousePositionLeaflet.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DU1MvQ29udHJvbHMvTW91c2VQb3NpdGlvbi9HUG1vdXNlUG9zaXRpb25MZWFmbGV0LmNzcz84MjQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL0xlYWZsZXQvQ1NTL0NvbnRyb2xzL01vdXNlUG9zaXRpb24vR1Btb3VzZVBvc2l0aW9uTGVhZmxldC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Leaflet/CSS/Controls/MousePosition/GPmousePositionLeaflet.css\n");

/***/ }),

/***/ "./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css":
/*!****************************************************!*\
  !*** ./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvTGVhZmxldC9DU1MvR1BnZW5lcmFsV2lkZ2V0TGVhZmxldC5jc3M/NjAxMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9MZWFmbGV0L0NTUy9HUGdlbmVyYWxXaWRnZXRMZWFmbGV0LmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css\n");

/***/ }),

/***/ "./src/Leaflet/Controls/MousePosition.js":
/*!***********************************************!*\
  !*** ./src/Leaflet/Controls/MousePosition.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var geoportal_access_lib_src_Services_Alti_Alti__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! geoportal-access-lib/src/Services/Alti/Alti */ \"./node_modules/geoportal-access-lib/src/Services/Alti/Alti.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Common_CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/CSS/GPgeneralWidget.css */ \"./src/Common/CSS/GPgeneralWidget.css\");\n/* harmony import */ var _Common_CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Common_CSS_GPgeneralWidget_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Common_CSS_GPmousePosition_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/CSS/GPmousePosition.css */ \"./src/Common/CSS/GPmousePosition.css\");\n/* harmony import */ var _Common_CSS_GPmousePosition_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Common_CSS_GPmousePosition_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _CSS_GPgeneralWidgetLeaflet_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../CSS/GPgeneralWidgetLeaflet.css */ \"./src/Leaflet/CSS/GPgeneralWidgetLeaflet.css\");\n/* harmony import */ var _CSS_GPgeneralWidgetLeaflet_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_CSS_GPgeneralWidgetLeaflet_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _CSS_Controls_MousePosition_GPmousePositionLeaflet_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../CSS/Controls/MousePosition/GPmousePositionLeaflet.css */ \"./src/Leaflet/CSS/Controls/MousePosition/GPmousePositionLeaflet.css\");\n/* harmony import */ var _CSS_Controls_MousePosition_GPmousePositionLeaflet_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_CSS_Controls_MousePosition_GPmousePositionLeaflet_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Common/Utils/LoggerByDefault */ \"./src/Common/Utils/LoggerByDefault.js\");\n/* harmony import */ var _Common_Utils_CheckRightManagement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Common/Utils/CheckRightManagement */ \"./src/Common/Utils/CheckRightManagement.js\");\n/* harmony import */ var _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Common/Utils/SelectorID */ \"./src/Common/Utils/SelectorID.js\");\n/* harmony import */ var _Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Common/Utils/MathUtils */ \"./src/Common/Utils/MathUtils.js\");\n/* harmony import */ var _Common_Controls_MousePositionDOM__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Common/Controls/MousePositionDOM */ \"./src/Common/Controls/MousePositionDOM.js\");\n/* harmony import */ var _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Utils/PositionFormater */ \"./src/Leaflet/Controls/Utils/PositionFormater.js\");\n/* harmony import */ var _CRS_CRS__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../CRS/CRS */ \"./src/Leaflet/CRS/CRS.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar logger = _Common_Utils_LoggerByDefault__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getLogger(\"mouseposition\");\n/**\n * @classdesc\n *\n * Leaflet Control Class to display Mouse position in various CRS and altitude using the <a href=\"https://geoservices.ign.fr/documentation/geoservices/alti.html\" target=\"_blank\">altimetric web service of the Geoportal Platform</a>.\n *\n * Use {@link module:Controls.MousePosition L.geoportalControl.MousePosition()} factory to create instances of that class.\n *\n * **Extends** Leaflet <a href=\"http://leafletjs.com/reference.html#control\" target=\"_blank\">L.Control</a> native class.\n *\n * @namespace\n * @alias L.geoportalControl.MousePosition\n */\n\nvar MousePosition = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Control.extend(\n/** @lends L.geoportalControl.MousePosition.prototype */\n{\n  includes: _Common_Controls_MousePositionDOM__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n\n  /**\n   * options by default\n   *\n   * @private\n   */\n  options: {\n    position: \"bottomleft\",\n    collapsed: true,\n    units: [],\n    systems: [],\n    displayAltitude: true,\n    displayCoordinates: true,\n    editCoordinates: false,\n    altitude: {\n      triggerDelay: 200,\n      responseDelay: 500,\n      noDataValue: -99999,\n      noDataValueTolerance: 90000,\n      serviceOptions: {}\n    }\n  },\n\n  /**\n   * @constructor MousePosition\n   *\n   * @private\n   * @alias MousePosition\n   * @extends {L.Control}\n   * @param {Object} options - options for function call.\n   * @param {String}   [options.apiKey] - API key, mandatory if autoconf service has not been charged in advance\n   * @param {Boolean} [options.ssl = true] - use of ssl or not (default true, service requested using https protocol)\n   * @param {String}  [options.position] - position of component into the map, 'bottomleft' by default\n   * @param {Boolean} [options.collapsed = true] - collapse mode, false by default\n   * @param {Array}   [options.systems] - list of projection systems, GEOGRAPHIC, MERCATOR, LAMB93 and LAMB2E by default\n   *      Each array element (=system) is an object with following properties :\n   * @param {String}  options.systems.crs - Proj4 crs alias (from proj4 defs). e.g. : \"EPSG:4326\". Required\n   * @param {String}  [options.systems.label] - CRS label to be displayed in control. Default is crs code (e.g. \"EPSG:4326\")\n   * @param {String}  [options.systems.type] - CRS units type for coordinates conversion : \"Geographical\" or \"Metric\". Default: \"Metric\"\n   * @param {Object}  [options.systems.geoBBox] - Aera covered by the system (WGS84 coordinates).\n   * @param {Number}  options.systems.geoBBox.right - Right bound.\n   * @param {Number}  options.systems.geoBBox.left - Left bound.\n   * @param {Number}  options.systems.geoBBox.top - Top bound.\n   * @param {Number}  options.systems.geoBBox.bottom - Bottom bound.\n   * @param {Array}   [options.units] - list of units by system, Geographical and Metric by default\n   *      Values may be \"DEC\" (decimal degrees), \"DMS\" (sexagecimal), \"RAD\" (radians) and \"GON\" (grades) for geographical coordinates,\n   *      and \"M\" or \"KM\" for metric coordinates\n   * @param {Boolean} [options.displayAltitude= true] - active/desactivate the altitude panel, if desactivate, have just the coordinate panel, true by default\n   * @param {Boolean} [options.displayCoordinates= true] - active/desactivate the coordinate panel, if desactivate, have just the altitude panel, true by default\n   * @param {Boolean} [options.editCoordinates = false] - add edit coordinates options. False by default.\n   * @param {Object}  [options.altitude] - elevation configuration\n   * @param {Object}  [options.altitude.serviceOptions] - options of elevation service\n   * @param {Number}  [options.altitude.responseDelay] - latency for altitude request, 500 ms by default\n   * @param {Number}  [options.altitude.triggerDelay] - immobilisation time of movement on the map to trigger the elevation calculation, 200 ms by default\n   * @param {Number}  [options.altitude.noDataValue] - value used for altitude service no data (default is -99999). In this case, \"---m\" will be displayed instead of \"-99999m\"\n   * @param {Number}  [options.altitude.noDataValueTolerance] - tolerance for no data value :\n   *                  values in [noDataValue - noDataValueTolerance ; noDataValue + noDataValueTolerance] interval will not be displayed, but \"---m\" will be displayed instead.\n   *                  Default is 90000\n   * @example\n   *  var MousePosition = L.geoportalControl.MousePosition({\n   *      position : 'bottomleft',\n   *      collapsed : false,\n   *      displayAltitude : true,\n   *      displayCoordinates : true,\n   *      editCoordinates : false,\n   *      altitude : {\n   *           triggerDelay : 100,\n   *           responseDelay : 500,\n   *           noDataValue : -99999,\n   *           noDataValueTolerance : 90000,\n   *           serviceOptions : {}\n   *      },\n   *      systems : [\n   *       {\n   *          crs : L.CRS.EPSG4326,\n   *          label : \"Lon,Lat\",\n   *          type : \"Geographical\"\n   *        },\n   *       {\n   *          crs : L.geoportalCRS.EPSG2154,\n   *          label : \"Lambert 93\",\n   *          type : \"Metric\"\n   *        }\n   *      ],\n   *      units : [\"DEC\", \"DMS\"]\n   *  });\n   */\n  initialize: function initialize(options) {\n    // on merge les options avec celles par defaut\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.extend(this.options, options); // uuid\n\n    this._uid = _Common_Utils_SelectorID__WEBPACK_IMPORTED_MODULE_8__[\"default\"].generate(); // initialisation des systemes de projections\n\n    this._projectionSystems = [];\n\n    this._initProjectionSystems(); // initialisation des systemes des unités\n\n\n    this._projectionUnits = {};\n\n    this._initProjectionUnits(); // detection du support : desktop ou tactile\n\n\n    this._isDesktop = this._detectSupport(); // on met en place un seuil sur le timer\n\n    if (this.options.altitude.triggerDelay < 100) {\n      this.options.altitude.triggerDelay = 100;\n    } // timer sur le delai d'immobilisation du mouvement\n\n\n    this._timer = this.options.altitude.triggerDelay; // Systeme de projection selectionné (cf. _initProjectionSystems)\n\n    this._currentProjectionSystems = this._projectionSystems[0]; // Container des systemes\n\n    this._projectionSystemsContainer = null;\n    /** Type d'unité de projection selectionnés : Geographical ou Metric (cf._initProjectionSystems ) */\n\n    this._currentProjectionType = this._projectionSystems[0].type; // Unité de projection selectionnés (cf. _initProjectionUnits)\n\n    this._currentProjectionUnits = this._projectionUnits[this._currentProjectionType][0].code; // Container des unités\n\n    this._projectionUnitsContainer = null;\n    /** Container de visualisation du panneau du composant */\n\n    this._showContainer = null;\n    this._pictoContainer = null;\n    this._panelContainer = null;\n    this._panelHeaderContainer = null; // gestion de l'affichage du panneau de l'altitude / coordonnées\n\n    if (!this.options.displayAltitude && !this.options.displayCoordinates) {\n      // on reactive cette option !\n      this.options.displayCoordinates = true;\n    }\n\n    if (!this.options.displayCoordinates) {\n      // si les coordonnées ne sont pas affichées : pas besoin de les éditer...\n      this.options.editCoordinates = false;\n    }\n    /** Edition des coordonnées en cours ou non */\n\n\n    this._isEditing = false;\n    /**\n     * Droit sur le ressource alti.\n     * Par defaut, on n'en s'occupe pas\n     * sauf si l'autoconfiguration est chargée !\n     */\n\n    this._noRightManagement = false; // gestion des droits sur les ressources/services\n    // si l'on souhaite un calcul d'altitude, on verifie\n    // les droits sur les ressources d'alti...\n\n    if (this.options.displayAltitude) {\n      this._checkRightsManagement();\n    } // on transmet les options au controle\n\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.setOptions(this, this.options);\n  },\n\n  /**\n   * this method is called by this.addTo(map) when the control is added on the map\n   * and fills variable 'this._container = this.onAdd(map)',\n   * and create events on map.\n   * @param {Object} map - the map\n   *\n   * @returns {DOMElement} DOM element\n   * @private\n   */\n  onAdd: function onAdd(map) {\n    // initialisation du DOM du composant\n    var container = this._container = this._initLayout(); // on met en place l'evenement sur la carte pour recuperer les coordonnées,\n    // on l'active à l'ouverture du panneau uniquement !\n\n\n    if (!this.options.collapsed) {\n      // this.onShowMousePositionClick();\n      // evenement valable pour le mode desktop !\n      if (this._isDesktop) {\n        map.on(\"mousemove\", this.onMouseMove, this);\n      } else {\n        map.on(\"move\", this.onMapMove, this);\n      }\n    } // deactivate of events that may interfere with the map\n\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomEvent.disableClickPropagation(container).disableScrollPropagation(container); // on stoppe la propagation de l'événement mousemove sur le container\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomEvent.addListener(container, \"mousemove\", leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomEvent.stopPropagation).addListener(container, \"mousemove\", leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomEvent.preventDefault);\n    return container;\n  },\n\n  /**\n   * this method is called when the control is removed from the map\n   * and removes events on map.\n   * @param {Object} map - the map\n   *\n   * @private\n   */\n  onRemove: function onRemove(map) {\n    map.off(\"mousemove\", this.onMouseMove);\n  },\n\n  /**\n   * this method is called by the constructor and initialize the projection\n   * systems.\n   * getting coordinates in the requested projection :\n   * see this.onMousePositionProjectionSystemChange()\n   *\n   * @private\n   */\n  _initProjectionSystems: function _initProjectionSystems() {\n    // on donne la possibilité à l'utilisateur de modifier\n    // la liste des systèmes à afficher\n    // Ex. this.options.systems\n    // systemes de projection disponible par defaut\n    var projectionSystemsByDefault = [{\n      label: \"G\\xE9ographique\",\n      crs: leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.CRS.Simple,\n      // L.Projection.LonLat !\n      type: \"Geographical\"\n    }, {\n      label: \"Web Mercator\",\n      crs: leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.CRS.EPSG3395,\n      // L.Projection.SphericalMercator !\n      type: \"Metric\"\n    }, {\n      label: \"Lambert 93\",\n      crs: _CRS_CRS__WEBPACK_IMPORTED_MODULE_12__[\"default\"].EPSG2154,\n      type: \"Metric\",\n      geoBBox: {\n        left: -9.86,\n        bottom: 41.15,\n        right: 10.38,\n        top: 51.56\n      }\n    }, {\n      label: \"Lambert II \\xE9tendu\",\n      crs: _CRS_CRS__WEBPACK_IMPORTED_MODULE_12__[\"default\"].EPSG27572,\n      type: \"Metric\",\n      geoBBox: {\n        left: -4.87,\n        bottom: 42.33,\n        right: 8.23,\n        top: 51.14\n      }\n    }];\n    var systems = this.options.systems;\n\n    for (var i = 0; i < systems.length; i++) {\n      // definition d'un systeme de reference\n      var sys = systems[i];\n\n      if (!sys.label) {\n        logger.error(\"not defined !\");\n        continue;\n      }\n\n      if (!sys.crs) {\n        logger.error(\"crs not defined !\");\n        continue;\n      }\n\n      if (!sys.type) {\n        logger.warn(\"type srs not defined, use 'Metric' by default !\");\n        sys.type = \"Metric\";\n      }\n\n      this._projectionSystems.push(systems[i]); // it's a just a test ...\n\n\n      var found = false;\n\n      for (var j = 0; j < projectionSystemsByDefault.length; j++) {\n        var obj = projectionSystemsByDefault[j];\n\n        if (sys.crs === obj.crs) {\n          found = true;\n          logger.info(\"crs '{}' already configured by default\", obj.code);\n        }\n      }\n\n      if (!found) {\n        logger.info(\"crs '{}' not found, it's a new projection\", sys.code || sys.label);\n      }\n    } // au cas où...\n\n\n    if (this._projectionSystems.length === 0) {\n      this._projectionSystems = projectionSystemsByDefault;\n    } // re-initilisation des codes pour gerer le lien entre _projectionSystems et select du mouse position (lien code/value)\n\n\n    for (var k = 0; k < this._projectionSystems.length; ++k) {\n      this._projectionSystems[k].code = k;\n    }\n  },\n\n  /**\n   * this method is called by the constructor and initialize the units.\n   * getting coordinates in the requested units :\n   * see this.onMousePositionProjectionUnitsChange()\n   *\n   * @private\n   */\n  _initProjectionUnits: function _initProjectionUnits() {\n    // on donne la possibilité à l'utilisateur de modifier\n    // la liste des unités à afficher\n    // Ex.\n    // this.options.units : [\"DEC\", \"DMS\"]\n    // unités disponible par defaut\n    var projectionUnitsByDefault = {\n      Geographical: [{\n        code: \"DEC\",\n        label: \"degrés décimaux\",\n        format: this._displayDEC\n      }, {\n        code: \"DMS\",\n        label: \"degrés sexagésimaux\",\n        format: this._displayDMS\n      }, {\n        code: \"RAD\",\n        label: \"radians\",\n        format: this._displayRAD\n      }, {\n        code: \"GON\",\n        label: \"grades\",\n        format: this._displayGON\n      }],\n      Metric: [{\n        code: \"M\",\n        label: \"mètres\",\n        format: this._displayMeter\n      }, {\n        code: \"KM\",\n        label: \"kilomètres\",\n        format: this._displayKMeter\n      }]\n    };\n    var units = this.options.units;\n\n    for (var type in projectionUnitsByDefault) {\n      if (projectionUnitsByDefault.hasOwnProperty(type)) {\n        var found = false;\n\n        for (var j = 0; j < projectionUnitsByDefault[type].length; j++) {\n          var obj = projectionUnitsByDefault[type][j];\n\n          for (var i = 0; i < units.length; i++) {\n            var unit = units[i];\n\n            if (obj.code === unit) {\n              found = true;\n\n              if (!this._projectionUnits[type]) {\n                this._projectionUnits[type] = [];\n              }\n\n              this._projectionUnits[type].push(obj);\n            }\n          }\n        }\n\n        if (!found) {\n          this._projectionUnits[type] = projectionUnitsByDefault[type];\n        }\n      }\n    } // au cas où...\n\n\n    if (Object.keys(this._projectionUnits).length === 0) {\n      this._projectionUnits = projectionUnitsByDefault;\n    }\n  },\n\n  /**\n   * this method is called by constructor\n   * and check the rights to resources\n   *\n   * @private\n   */\n  _checkRightsManagement: function _checkRightsManagement() {\n    var rightManagement = _Common_Utils_CheckRightManagement__WEBPACK_IMPORTED_MODULE_7__[\"default\"].check({\n      key: this.options.apiKey,\n      resources: [\"SERVICE_CALCUL_ALTIMETRIQUE_RSC\"],\n      services: [\"Elevation\"]\n    });\n    this._noRightManagement = !rightManagement; // on recupère les informations utiles\n    // sur ce controle, on ne s'occupe pas de la ressource car elle est unique...\n    // Ex. la clef API issue de l'autoconfiguration si elle n'a pas\n    // été renseignée.\n\n    if (!this.options.apiKey) {\n      this.options.apiKey = rightManagement ? rightManagement.key : null;\n    }\n  },\n\n  /**\n   * this method is called by the constructor.\n   * this information is useful to switch to touch mode.\n   * Detection : test for desktop or tactile\n   *\n   * @returns {Boolean} is desktop\n   * @private\n   */\n  _detectSupport: function _detectSupport() {\n    // TODO\n    // Choix de gérer la détection dans le code du composant au lieu du DOM car :\n    // Utilisation de l'implémentation Leaflet\n    // http://leafletjs.com/reference.html#browser\n    var isDesktop = true;\n    var userAgent = window.navigator.userAgent.toLowerCase();\n\n    if (userAgent.indexOf(\"iphone\") !== -1 || userAgent.indexOf(\"ipod\") !== -1 || userAgent.indexOf(\"ipad\") !== -1 || userAgent.indexOf(\"android\") !== -1 || userAgent.indexOf(\"mobile\") !== -1 || userAgent.indexOf(\"blackberry\") !== -1 || userAgent.indexOf(\"tablet\") !== -1 || userAgent.indexOf(\"phone\") !== -1 || userAgent.indexOf(\"touch\") !== -1) {\n      isDesktop = false;\n    }\n\n    if (userAgent.indexOf(\"msie\") !== -1 || userAgent.indexOf(\"trident\") !== -1) {\n      isDesktop = true;\n    }\n\n    return isDesktop;\n  },\n  // ################################################################### //\n  // ######################## methods handle dom ####################### //\n  // ################################################################### //\n\n  /**\n   * this method is called by this.onAdd(map)\n   * and initialize the container HTMLElement\n   *\n   * @returns {DOMElement} DOM element\n   * @private\n   */\n  _initLayout: function _initLayout() {\n    // create main container\n    var container = this._createMainContainerElement();\n\n    var inputShow = this._showContainer = this._createShowMousePositionElement();\n\n    container.appendChild(inputShow); // mode \"collapsed\"\n\n    if (!this.options.collapsed) {\n      inputShow.checked = true;\n    }\n\n    var picto = this._pictoContainer = this._createShowMousePositionPictoElement(this._isDesktop);\n\n    container.appendChild(picto);\n\n    var panel = this._panelContainer = this._createMousePositionPanelElement();\n\n    var header = this._panelHeaderContainer = this._createMousePositionPanelHeaderElement();\n\n    panel.appendChild(header);\n\n    var basic = this._createMousePositionPanelBasicElement(this.options.displayAltitude, this.options.displayCoordinates, this.options.editCoordinates);\n\n    panel.appendChild(basic);\n\n    var arraySettings = this._createShowMousePositionSettingsElement(this.options.displayCoordinates);\n\n    for (var j = 0; j < arraySettings.length; j++) {\n      panel.appendChild(arraySettings[j]);\n    }\n\n    var settings = this._createMousePositionSettingsElement();\n\n    var systems = this._projectionSystemsContainer = this._createMousePositionSettingsSystemsElement(this._projectionSystems);\n\n    var units = this._projectionUnitsContainer = this._createMousePositionSettingsUnitsElement(this._projectionUnits[this._currentProjectionType]);\n\n    settings.appendChild(systems);\n    settings.appendChild(units);\n    panel.appendChild(settings);\n    container.appendChild(panel); // ce tag n'est pas à placer dans le container du controle,\n    // mais dans celui de la map !\n\n    var center = this._createMapCenter();\n\n    var map = this._map;\n    map.getContainer().appendChild(center);\n    return container;\n  },\n\n  /**\n   * this method is called by this.()\n   * and it changes the elevation view panel into the dom.\n   * FIXME call by ID !\n   *\n   * @param {Boolean} active - true:active, false:disable\n   *\n   * @private\n   */\n  _setElevationPanel: function _setElevationPanel(active) {\n    var div = null;\n\n    if (!active) {\n      div = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePositionAltitude\"));\n      div.style.display = \"none\";\n    }\n\n    if (active && this._noRightManagement) {\n      div = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePositionAlt\"));\n      div.innerHTML = \"no right !\";\n    }\n  },\n\n  /**\n   * this method is called by this.()\n   * and it changes the coordinate view panel into the dom.\n   * FIXME call by ID !\n   *\n   * @param {Boolean} active - true:active, false:disable\n   *\n   * @private\n   */\n  _setCoordinatePanel: function _setCoordinatePanel(active) {\n    if (!active) {\n      var div = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePositionCoordinate\"));\n      div.style.display = \"none\";\n    }\n  },\n\n  /**\n   * this method is called by this.()\n   * and it changes the settings view panel into the dom.\n   * FIXME call by ID !\n   *\n   * @param {Boolean} active - true:active, false:disable\n   *\n   * @private\n   */\n  _setSettingsPanel: function _setSettingsPanel(active) {\n    if (!active) {\n      var divPicto = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(\"GPshowMousePositionSettingsPicto\");\n      var divPanel = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePositionSettings\"));\n      divPicto.style.display = \"none\";\n      divPanel.style.display = \"none\";\n    }\n  },\n\n  /**\n   * this method is called by this.onMousePositionProjectionSystemChange()\n   * when changes to a metric or a geographical units.\n   *\n   * @param {String} type - Geographical or Metric\n   *\n   * @private\n   */\n  _setTypeUnitsPanel: function _setTypeUnitsPanel(type) {\n    var container = this._projectionUnitsContainer; // on supprime les enfants...\n\n    while (container.firstChild) {\n      container.removeChild(container.firstChild);\n    }\n\n    var units = this._projectionUnits[type];\n\n    for (var j = 0; j < units.length; j++) {\n      var obj = units[j];\n      var option = document.createElement(\"option\");\n      option.value = obj.code ? obj.code : j;\n      option.text = obj.label || j; // option.label = obj.label;\n\n      container.appendChild(option);\n    }\n\n    var projectionUnits = this._projectionUnits[type][0].code;\n\n    if (this._currentProjectionUnits === \"DMS\" || projectionUnits === \"DMS\") {\n      this._resetCoordinateElements(this.options.editCoordinates, type, projectionUnits);\n\n      this._setEditMode(this._isEditing);\n    } // le nouveau type de system ...\n\n\n    this._currentProjectionType = type; // Mise a jour des elements labels et unites\n\n    this._resetLabelElements(type);\n\n    this._resetUnitElements(projectionUnits); // et comme on a changé de type de systeme,\n    // il faut changer aussi d'unité !\n\n\n    this._currentProjectionUnits = this._projectionUnits[type][0].code;\n  },\n  // ################################################################### //\n  // ######################## method units format ###################### //\n  // ################################################################### //\n\n  /**\n   * degreedecimal\n   * @param {Object} oLatLng - coordinates\n   *\n   * @returns {Object} coordinates in decimal\n   * @private\n   */\n  _displayDEC: function _displayDEC(oLatLng) {\n    var coordinate = {};\n    coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].roundToDecimal(oLatLng.lat, 6);\n    coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].roundToDecimal(oLatLng.lng, 6);\n    coordinate.unit = \"°\";\n    return coordinate;\n  },\n\n  /**\n   * degreedecimal2sexagecimal\n   * @param {Object} oLatLng - coordinates\n   *\n   * @returns {Object} coordinates in DMS\n   * @private\n   */\n  _displayDMS: function _displayDMS(oLatLng) {\n    var coordinate = {};\n    coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].decimalLatToDMS(oLatLng.lat, true);\n    coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].decimalLonToDMS(oLatLng.lng, true);\n    return coordinate;\n  },\n\n  /**\n   * degreedecimal2radian\n   * @param {Object} oLatLng - coordinates\n   *\n   * @returns {Object} coordinates in radian\n   * @private\n   */\n  _displayRAD: function _displayRAD(oLatLng) {\n    var coordinate = {};\n    coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].decimalToRadian(oLatLng.lat);\n    coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].decimalToRadian(oLatLng.lng);\n    coordinate.unit = \"rad\";\n    return coordinate;\n  },\n\n  /**\n   * degreedecimal2grade\n   * @param {Object} oLatLng - coordinates\n   *\n   * @returns {Object} coordinates in gon\n   * @private\n   */\n  _displayGON: function _displayGON(oLatLng) {\n    var coordinate = {};\n    coordinate.lat = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].decimalToGrade(oLatLng.lat);\n    coordinate.lng = _Utils_PositionFormater__WEBPACK_IMPORTED_MODULE_11__[\"default\"].decimalToGrade(oLatLng.lng);\n    coordinate.unit = \"gon\";\n    return coordinate;\n  },\n\n  /**\n   * meter\n   * @param {Object} oXY - coordinates\n   *\n   * @returns {Object} coordinates in meters\n   * @private\n   */\n  _displayMeter: function _displayMeter(oXY) {\n    // on recoit toujours des coordonnées metriques\n    var coordinate = {};\n    coordinate.x = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.formatNum(oXY.x, 2);\n    coordinate.y = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.formatNum(oXY.y, 2);\n    coordinate.unit = \"m\";\n    return coordinate;\n  },\n\n  /**\n   * kilometer\n   * @param {Object} oXY - coordinates\n   *\n   * @returns {Object} coordinates in km\n   * @private\n   */\n  _displayKMeter: function _displayKMeter(oXY) {\n    var coordinate = {};\n    coordinate.x = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.formatNum(oXY.x / 1000, 2);\n    coordinate.y = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.formatNum(oXY.y / 1000, 2);\n    coordinate.unit = \"km\";\n    return coordinate;\n  },\n  // ################################################################### //\n  // ####################### method system project ##################### //\n  // ################################################################### //\n\n  /**\n   * this method projects a coordinate to a specific projection.\n   * FIXME\n   *\n   * @param {Object} oLatLng - geographic coordinate (L.LatLng)\n   * @param {Object} crs - projection system (ex. GEOGRAPHIC, LAMB93, LAMB2E, MERCATOR, ...)\n   * @returns {Object} oXY - coordinate\n   * @private\n   */\n  _project: function _project(oLatLng, crs) {\n    // cf. http://leafletjs.com/reference.html#iprojection\n    // notre carte est dans la projection par defaut :\n    // Spherical Mercator projection (EPSG:3857)\n    // - GEOGRAPHIC : conversion native, L.CRS.Simple ou L.Projection.LngLat.project(latlng)\n    // - LAMB93 : L.GeoportalCRS.EPSG2154 ou projection.project(latlng)\n    // - LAMB2E : L.GeoportalCRS.EPSG27572 ou projection.project(latlng)\n    // - MERCATOR ou EPSG:3395 : L.CRS.EPSG3395 ou L.Projection.Mercator.project(latlng)\n    if (typeof crs === \"function\") {\n      // \"crs is an function !\"... en mode AMD !\n      crs = crs();\n    }\n\n    if (_typeof(crs) !== \"object\") {\n      logger.log(\"crs is not an object !\");\n      return;\n    } // pas de reprojection pour le systeme de projection natif !\n\n\n    if (crs === leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.CRS.Simple) {\n      return oLatLng;\n    }\n\n    if (!crs.projection || _typeof(crs.projection) !== \"object\") {\n      logger.error(\"projection is not an object !\");\n      return;\n    }\n\n    var oPoint = crs.projection.project(oLatLng); // FIXME reprojeter du geographique en geographique cause qq problemes\n    // Ex. LatLng en EPSG4326 !\n    // FIXME probleme d'inversion d'axe sur les projections geographiques\n    // Ex. EPSG:4326 -> lat/lon\n    //     IGNF:RGF93G -> lon/lat\n\n    if (this._currentProjectionType === \"Geographical\") {\n      oPoint.lat = oPoint.y;\n      oPoint.lng = oPoint.x;\n    }\n\n    if (!oPoint || Object.keys(oPoint).length === 0) {\n      logger.error(\"Failed to project with crs code : \" + crs.code);\n    }\n\n    return oPoint;\n  },\n\n  /**\n   * this method unprojects a coordinate to a geographic projection.\n   *\n   * @param {Object} oXY - coordinate\n   * @returns {Object} oLatLng - geographic coordinate (L.LatLng)\n   * @private\n   */\n  _unproject: function _unproject(oXY) {\n    // cf. http://leafletjs.com/reference.html#iprojection\n    // notre carte est dans la projection par defaut :\n    // Spherical Mercator projection (EPSG:3857)\n    // - GEOGRAPHIC : conversion native, L.CRS.Simple ou L.Projection.LngLat.project(latlng)\n    // - LAMB93 : L.GeoportalCRS.EPSG2154 ou projection.project(latlng)\n    // - LAMB2E : L.GeoportalCRS.EPSG27572 ou projection.project(latlng)\n    // - MERCATOR ou EPSG:3395 : L.CRS.EPSG3395 ou L.Projection.Mercator.project(latlng)\n    var oSrs = this._currentProjectionSystems.crs;\n\n    if (!oSrs) {\n      logger.log(\"system crs not found\");\n      return;\n    }\n\n    if (typeof oSrs === \"function\") {\n      // \"crs is an function !\"... en mode AMD !\n      oSrs = oSrs();\n    }\n\n    if (_typeof(oSrs) !== \"object\") {\n      logger.log(\"crs is not an object !\");\n      return;\n    } // pas de reprojection pour le systeme de projection natif !\n\n\n    if (oSrs === leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.CRS.Simple) {\n      return {\n        lat: oXY.y,\n        lng: oXY.x\n      };\n    }\n\n    if (this._currentProjectionType === \"Geographical\") {\n      return {\n        lat: oXY.y,\n        lng: oXY.x\n      };\n    }\n\n    if (!oSrs.projection || _typeof(oSrs.projection) !== \"object\") {\n      logger.error(\"projection is not an object !\");\n      return;\n    }\n\n    var oLatLng = oSrs.projection.unproject(oXY);\n\n    if (!oLatLng || Object.keys(oLatLng).length === 0) {\n      logger.error(\"Failed to unproject coordinate\");\n    }\n\n    return oLatLng;\n  },\n  // ################################################################### //\n  // ##################### handlers events to control ################## //\n  // ################################################################### //\n\n  /**\n   * this sends the coordinates to the panel.\n   * (cf. this.GPdisplayCoords() into the DOM functions)\n   *\n   * @param {Object} oLatLng - geographic coordinate (L.LatLng)\n   *\n   * @private\n   */\n  _setCoordinate: function _setCoordinate(oLatLng) {\n    // structure\n    // L.LatLng\n    //     lat: 4.07249425916745\n    //     lng: 2.4609375\n    // type de systeme : Geographical ou Metric\n    var type = this._currentProjectionSystems.type; // on recherche la fonction de formatage dans l'unitée demandée\n\n    var format = null;\n    var units = this._projectionUnits[type];\n\n    for (var i = 0; i < units.length; i++) {\n      if (units[i].code === this._currentProjectionUnits) {\n        format = units[i].format;\n        break;\n      }\n    } // structure pour les coordonnées en fonctin du type demandé :\n    // {x:, y:, unit:} ou {lng:, lat:} ou {lon:, lat:} ou {e:, n:, unit:}...\n\n\n    var coordinate = {}; // on projete le point dans le systeme demandé\n\n    var oSrs = this._currentProjectionSystems.crs;\n\n    if (!oSrs) {\n      logger.error(\"crs not found !\");\n      return;\n    }\n\n    coordinate = format(this._project(oLatLng, oSrs));\n\n    if (!coordinate || Object.keys(coordinate).length === 0) {\n      return;\n    }\n\n    this.GPdisplayCoords(coordinate);\n  },\n\n  /**\n   * this sends the coordinates to the panel.\n   * (cf. this.GPdisplayElevation() into the DOM functions)\n   *\n   * @param {Object} oLatLng - geographic coordinate (L.LatLng)\n   *\n   * @private\n   */\n  _setElevation: function _setElevation(oLatLng) {\n    // gestion du timer de la requete du service d'altitude\n    var delay = this.options.altitude.responseDelay;\n    var noDataValue = this.options.altitude.noDataValue;\n    var noDataValueTolerance = this.options.altitude.noDataValueTolerance;\n    this.GPdisplayElevation(oLatLng, delay, noDataValue, noDataValueTolerance);\n  },\n\n  /**\n   * this method is triggered when the mouse or the map is stopped.\n   * (cf. onMouseMove and onMapMove)\n   *\n   * @param {Object} oLatLng - geographic coordinate (L.LatLng)\n   *\n   * @private\n   */\n  onMoveStopped: function onMoveStopped(oLatLng) {\n    // si pas de droit, on ne met pas à jour l'affichage !\n    if (this._noRightManagement) {\n      return;\n    }\n\n    this._setElevation(oLatLng);\n  },\n\n  /**\n   * this method is an handler event to control. The event is 'mousemove' on\n   * the map. The handler sends the coordinates to the panel.\n   * (cf. this.GPdisplayCoords() into the DOM functions)\n   *\n   * @param {Object} e - HTMLElement\n   *\n   * @private\n   */\n  onMouseMove: function onMouseMove(e) {\n    var self = this;\n    var oLatLng = e.latlng;\n\n    this._setCoordinate(oLatLng);\n\n    clearTimeout(this._timer);\n    this._timer = setTimeout(function () {\n      self.onMoveStopped(oLatLng);\n    }, this.options.altitude.triggerDelay);\n  },\n\n  /**\n   * this method is an handler event to control. The event is 'moveend' on\n   * the map. The handler sends the coordinates to the panel.\n   * (cf. this.GPdisplayCoords() into the DOM functions)\n   *\n   * @private\n   */\n  onMapMove: function onMapMove() {\n    var self = this;\n    var map = this._map;\n    var oLatLng = map.getCenter();\n\n    this._setCoordinate(oLatLng);\n\n    clearTimeout(this._timer);\n    this._timer = setTimeout(function () {\n      self.onMoveStopped(oLatLng);\n    }, this.options.altitude.triggerDelay);\n  },\n  // ################################################################### //\n  // ####################### handlers events to dom #################### //\n  // ################################################################### //\n\n  /**\n   * this method is called by this.GPdisplayCoords() in the dom, and\n   * it executes a request to the elevation service.\n   *\n   * @param {Object} coordinate - {lat:..., lng:...}\n   * @param {Function} callback - callback\n   *\n   * @private\n   */\n  onRequestAltitude: function onRequestAltitude(coordinate, callback) {\n    logger.log(\"onRequestAltitude\"); // INFORMATION\n    // on effectue la requête au service d'altitude...\n    // on met en place des callbacks afin de recuperer les resultats ou\n    // les messages d'erreurs du service.\n    // le resultat est affiché dans une balise du dom.\n    // les messages d'erreurs sont affichés sur la console (?)\n\n    if (!coordinate || Object.keys(coordinate).length === 0) {\n      return;\n    } // si on ne veut pas de calcul d'altitude, on ne continue pas !\n\n\n    if (!this.options.displayAltitude) {\n      return;\n    } // si on n'a pas les droits sur la ressource, pas la peine de\n    // continuer !\n\n\n    if (this._noRightManagement) {\n      return;\n    }\n\n    logger.log(coordinate);\n    var options = {}; // on recupere les options du service\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.extend(options, this.options.altitude.serviceOptions); // ainsi que les coordonnées\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.extend(options, {\n      zonly: true,\n      positions: [{\n        lon: coordinate.lon || coordinate.lng,\n        lat: coordinate.lat\n      }]\n    }); // et les callbacks\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.extend(options, {\n      scope: this,\n      // callback onSuccess\n      onSuccess: function onSuccess(results) {\n        logger.log(results);\n\n        if (results && Object.keys(results).length) {\n          // var context = this.options.scope;\n          // context._setAltidude(results.elevations[0].z);\n          callback.call(this, results.elevations[0].z);\n        }\n      },\n      // callback onFailure\n      onFailure: function onFailure(error) {\n        logger.error(error.message);\n      }\n    }); // cas où la clef API n'est pas renseignée dans les options du service,\n    // on utilise celle de l'autoconf ou celle renseignée au niveau du controle\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.extend(options, {\n      apiKey: options.apiKey || this.options.apiKey\n    }); // si l'utilisateur a spécifié le paramètre ssl au niveau du control, on s'en sert\n    // true par défaut (https)\n\n    leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.Util.extend(options, {\n      ssl: this.options.ssl\n    });\n    logger.log(options);\n    var altiService = new geoportal_access_lib_src_Services_Alti_Alti__WEBPACK_IMPORTED_MODULE_0__[\"default\"](options);\n    altiService.call();\n  },\n\n  /**\n   * this method is called by event 'click' on 'GPshowMousePositionPicto' tag label\n   * (cf. this._createShowMousePositionPictoElement),\n   * and toggles event 'mousemove' on map.\n   * FIXME\n   *\n   * @param {Object} e - HTMLElement\n   *\n   * @private\n   */\n  onShowMousePositionClick: function onShowMousePositionClick(e) {\n    logger.log(e); // checked : true - panel close\n    // checked : false - panel open\n\n    var map = this._map; // evenement declenché à l'ouverture/fermeture du panneau,\n    // et en fonction du mode : desktop ou tactile !\n\n    if (this._showContainer.checked) {\n      this._isDesktop ? map.off(\"mousemove\", this.onMouseMove, this) : map.off(\"move\", this.onMapMove, this);\n    } else {\n      this._isDesktop ? map.on(\"mousemove\", this.onMouseMove, this) : map.on(\"move\", this.onMapMove, this);\n    } // on gère l'affichage des panneaux ici...,\n    // même si ce n'est pas l'endroit adequate...\n\n\n    this._setElevationPanel(this.options.displayAltitude);\n\n    this._setCoordinatePanel(this.options.displayCoordinates);\n\n    if (!this.options.displayCoordinates) {\n      this._setSettingsPanel(false);\n    }\n  },\n\n  /**\n   * this method is called by event 'click' on input coordinate\n   *\n   * @param {Boolean} editing - editing mode\n   * @private\n   */\n  onMousePositionEditModeClick: function onMousePositionEditModeClick(editing) {\n    if (!this.options.editCoordinates) {\n      return;\n    }\n\n    if (this._isEditing === editing) {\n      return;\n    }\n\n    this._isEditing = editing; // Affichage des outils, input en ecriture\n\n    this._setEditMode(this._isEditing);\n\n    var map = this._map;\n\n    if (this._isDesktop) {\n      this._isEditing ? map.off(\"mousemove\", this.onMouseMove, this) : map.on(\"mousemove\", this.onMouseMove, this);\n    } else {\n      this._isEditing ? map.off(\"move\", this.onMapMove, this) : map.on(\"move\", this.onMapMove, this);\n    }\n  },\n\n  /**\n   * Convert Coordinate value : km to meters, radians, grades to decimal degrees\n   * @param {Number} value - value to convert\n   * @param {String} unit - unit\n   *\n   * @returns {Number} converted value\n   * @private\n   */\n  _convertCoordinate: function _convertCoordinate(value, unit) {\n    var result;\n\n    if (unit === \"DEC\" || unit === \"DMS\") {\n      // DMS est converti en DEC !\n      result = value;\n    } else if (unit === \"M\") {\n      result = value;\n    } else if (unit === \"KM\") {\n      result = value * 1000;\n    } else if (unit === \"RAD\") {\n      var rd = (180 / Math.PI).toFixed(20);\n      result = (value * rd).toFixed(20);\n    } else if (unit === \"GON\") {\n      var d = (9 / 10).toFixed(20);\n      result = (value * d).toFixed(20);\n    }\n\n    return result;\n  },\n\n  /**\n   * Validate Extend coordinate\n   *\n   * @param {String} coordType - Lat or Lon\n   * @param {String} value - coordinate\n   * @param {Event} e - event\n   * @returns {Boolean} value is within extent\n   */\n  validateExtentCoordinate: function validateExtentCoordinate(coordType, value, e) {\n    // FIXME pas de validation...\n    if (e !== undefined) {\n      return true;\n    }\n\n    if ([\"Lon\", \"Lat\"].indexOf(coordType) === -1) {\n      return false;\n    }\n\n    var geoBBox = this._currentProjectionSystems.geoBBox;\n\n    if (geoBBox === undefined) {\n      return true;\n    }\n\n    if (geoBBox) {\n      // check if coordinates are in the extent\n      var extent = [geoBBox.left, geoBBox.bottom, geoBBox.right, geoBBox.top];\n      var unit = this._currentProjectionUnits; // on convertit un point..., mais on n'a pas de fonction\n      // de conversion comme pour openlayers...\n\n      var oLatLon = this._unproject({\n        x: coordType === \"Lon\" ? this._convertCoordinate(value, unit) : 0,\n        y: coordType === \"Lat\" ? this._convertCoordinate(value, unit) : 0\n      });\n\n      if (coordType === \"Lon\" && (oLatLon.lng < extent[0] || oLatLon.lng > extent[2])) {\n        logger.warn(\"coordinates (lon) out of extent !?\");\n        return false;\n      }\n\n      if (coordType === \"Lat\" && (oLatLon.lat < extent[1] || oLatLon.lat > extent[3])) {\n        logger.warn(\"coordinates (lat) out of extent !?\");\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Get coordinate from inputs and select in decimal degrees\n   *\n   * @param {String} coordType - \"Lon\" or \"Lat\"\n   * @returns {String} coordinate\n   * @private\n   */\n  _getCoordinate: function _getCoordinate(coordType) {\n    var inputDegrees = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePosition\" + coordType + \"Degrees\"));\n    var degrees = inputDegrees.value;\n\n    if (!degrees) {\n      return null;\n    }\n\n    degrees = degrees.replace(\",\", \".\");\n\n    if (!_Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_9__[\"default\"].isInteger(degrees)) {\n      return null;\n    }\n\n    var result = _Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_9__[\"default\"].toInteger(degrees);\n\n    if (result < Number(inputDegrees.dataset.min) || result > Number(inputDegrees.dataset.max)) {\n      return null;\n    }\n\n    var direction = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePosition\" + coordType + \"Direction\")).value;\n    var inputMinutes = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePosition\" + coordType + \"Minutes\"));\n    var minutes = inputMinutes.value;\n\n    if (minutes) {\n      minutes = minutes.replace(\",\", \".\");\n\n      if (_Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_9__[\"default\"].isInteger(minutes)) {\n        var mins = _Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_9__[\"default\"].toInteger(minutes);\n\n        if (mins >= Number(inputMinutes.dataset.min) && mins <= Number(inputMinutes.dataset.max)) {\n          result += mins / 60;\n        }\n      }\n    }\n\n    var inputSeconds = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePosition\" + coordType + \"Seconds\"));\n    var seconds = inputSeconds.value;\n\n    if (seconds) {\n      seconds = seconds.replace(\",\", \".\");\n      var secs = _Common_Utils_MathUtils__WEBPACK_IMPORTED_MODULE_9__[\"default\"].toFloat(seconds);\n\n      if (secs && secs >= Number(inputSeconds.dataset.min) && secs <= Number(inputSeconds.dataset.max)) {\n        result += secs / 3600;\n      }\n    }\n\n    if (direction === \"O\" || direction === \"S\") {\n      result = -result;\n    }\n\n    return result;\n  },\n\n  /**\n   * locate DMS coordinates on map\n   *\n   * @private\n   */\n  _locateDMSCoordinates: function _locateDMSCoordinates() {\n    // on est toujours en coordonnées geographiques...\n    var oLatLon = {\n      lat: this._getCoordinate(\"Lat\"),\n      lng: this._getCoordinate(\"Lon\")\n    };\n\n    if (!this.validateExtentCoordinate(\"Lon\", oLatLon.lng)) {\n      return;\n    }\n\n    if (!this.validateExtentCoordinate(\"Lat\", oLatLon.lat)) {\n      return;\n    } // FIXME https://github.com/Leaflet/Leaflet/issues/922\n\n\n    var map = this._map;\n    map.panTo(oLatLon);\n  },\n\n  /**\n   * locate coordinates on map (not DMS)\n   *\n   * @private\n   */\n  _locateCoordinates: function _locateCoordinates() {\n    // soit longitude ou soit y\n    var lonYDom = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePositionLon\")).value;\n    lonYDom = lonYDom.replace(\",\", \".\");\n    lonYDom = parseFloat(lonYDom);\n\n    if (isNaN(lonYDom)) {\n      return;\n    } // soit lattitude ou soit x\n\n\n    var latXDom = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePositionLat\")).value;\n    latXDom = latXDom.replace(\",\", \".\");\n    latXDom = parseFloat(latXDom);\n\n    if (isNaN(latXDom)) {\n      return;\n    }\n\n    var lon = null;\n    var lat = null;\n    var x = null;\n    var y = null;\n\n    if (this._currentProjectionType === \"Geographical\") {\n      lon = lonYDom;\n      lat = latXDom;\n    } else {\n      x = latXDom;\n      y = lonYDom;\n    }\n\n    if (!this.validateExtentCoordinate(\"Lon\", lon || x)) {\n      return;\n    }\n\n    if (!this.validateExtentCoordinate(\"Lat\", lat || y)) {\n      return;\n    }\n\n    var unit = this._currentProjectionUnits;\n\n    var oLatLon = this._unproject({\n      x: this._convertCoordinate(lon !== null ? lon : x, unit),\n      y: this._convertCoordinate(lat !== null ? lat : y, unit)\n    }); // FIXME https://github.com/Leaflet/Leaflet/issues/922\n\n\n    var map = this._map;\n    map.panTo(oLatLon);\n  },\n\n  /**\n   * locate coordinates on map\n   *\n   * @method locate\n   * @private\n   */\n  onMousePositionEditModeLocateClick: function onMousePositionEditModeLocateClick() {\n    if (!this.options.editCoordinates) {\n      return;\n    }\n\n    if (!this._isEditing) {\n      this.onMousePositionEditModeClick(true);\n      return;\n    }\n\n    this._currentProjectionUnits === \"DMS\" ? this._locateDMSCoordinates() : this._locateCoordinates();\n  },\n\n  /**\n   * this method is called by event 'change' on 'GPmousePositionProjectionSystem'\n   * tag select (cf. this._createMousePositionSettingsElement),\n   * and selects the system projection.\n   *\n   * @param {Object} e - HTMLElement\n   *\n   * @private\n   */\n  onMousePositionProjectionSystemChange: function onMousePositionProjectionSystemChange(e) {\n    logger.log(\"onMousePositionProjectionSystemChange\", e);\n    var idx = e.target.selectedIndex; // index\n\n    var value = e.target.options[idx].value; // crs, ex. MERCATOR (optionnel)\n\n    var label = e.target.options[idx].label; // etiquette, ex Géographiques\n\n    logger.log(idx, value, label);\n\n    this._setCurrentSystem(value);\n  },\n\n  /**\n   * this method selects the current system projection.\n   *\n   * @param {Object} systemCode - inner code (rank in array _projectionSystems)\n   *\n   * @private\n   */\n  _setCurrentSystem: function _setCurrentSystem(systemCode) {\n    // si on change de type de systeme, on doit aussi changer le type d'unités !\n    var type = null;\n\n    for (var i = 0; i < this._projectionSystems.length; ++i) {\n      if (this._projectionSystems[i].code === Number(systemCode)) {\n        type = this._projectionSystems[i].type;\n        break;\n      }\n    }\n\n    if (!type) {\n      logger.log(\"system not found in projection systems container\");\n      return;\n    }\n\n    if (type !== this._currentProjectionType) {\n      this._setTypeUnitsPanel(type);\n    } // on enregistre le systeme courrant\n\n\n    this._currentProjectionSystems = this._projectionSystems[Number(systemCode)]; // on simule un deplacement en mode tactile pour mettre à jour les\n    // resultats\n\n    if (!this._isDesktop) {\n      this.onMapMove();\n    }\n  },\n\n  /**\n   * this method is called by event 'mouseover' on 'GPmousePositionProjectionSystem'\n   * tag select (cf. this._createMousePositionSettingsElement),\n   * and selects the system projection.\n   *\n   * @param {Object} e - HTMLElement\n   *\n   * @private\n   */\n  onMousePositionProjectionSystemMouseOver: function onMousePositionProjectionSystemMouseOver(e) {\n    logger.log(\"onMousePositionProjectionSystemMouseOver\", e);\n    var map = this._map;\n\n    if (!map) {\n      return;\n    } // clear select\n\n\n    var systemList = leaflet__WEBPACK_IMPORTED_MODULE_1___default.a.DomUtil.get(this._addUID(\"GPmousePositionProjectionSystem\"));\n    systemList.innerHTML = \"\"; // add systems whose extent intersects the map extent\n\n    for (var j = 0; j < this._projectionSystems.length; j++) {\n      var proj = this._projectionSystems[j];\n      var option = null;\n\n      if (proj.geoBBox) {\n        // bboxes intersection test\n        if (map.getBounds()._southWest.lng > proj.geoBBox.right || map.getBounds()._southWest.lat > proj.geoBBox.top || map.getBounds()._northEast.lng < proj.geoBBox.left || map.getBounds()._northEast.lat < proj.geoBBox.bottom) {\n          if (proj === this._currentProjectionSystems) {\n            option = document.createElement(\"option\");\n            option.value = proj.code;\n            option.text = proj.label || j;\n            option.setAttribute(\"selected\", \"selected\");\n            option.setAttribute(\"disabled\", \"disabled\");\n            systemList.appendChild(option);\n          }\n\n          continue; // do not intersect\n        }\n      }\n\n      option = document.createElement(\"option\");\n      option.value = proj.code;\n      option.text = proj.label || j;\n\n      if (proj === this._currentProjectionSystems) {\n        option.setAttribute(\"selected\", \"selected\");\n      }\n\n      systemList.appendChild(option);\n    }\n  },\n\n  /**\n   * this method is called by event 'change' on 'GPmousePositionProjectionUnits'\n   * tag select (cf. this._createMousePositionSettingsElement),\n   * and selects the units projection.\n   *\n   * @param {Object} e - HTMLElement\n   *\n   * @private\n   */\n  onMousePositionProjectionUnitsChange: function onMousePositionProjectionUnitsChange(e) {\n    logger.log(\"onMousePositionProjectionUnitsChange\", e);\n    var idx = e.target.selectedIndex;\n    var value = e.target.options[idx].value;\n    var label = e.target.options[idx].label;\n    logger.log(idx, value, label);\n    var oldProjectionUnits = this._currentProjectionUnits;\n    var newProjectionUnits = this._currentProjectionUnits = value;\n    var newProjectionType = this._currentProjectionType; // Mise a jour des elements lebels et unites\n\n    this._resetLabelElements(newProjectionType);\n\n    this._resetUnitElements(newProjectionUnits); // mise a jour des inputs pour les coordonnees\n\n\n    if (oldProjectionUnits === \"DMS\" || newProjectionUnits === \"DMS\") {\n      this._resetCoordinateElements(this.options.editCoordinates, newProjectionType, newProjectionUnits);\n\n      this._setEditMode(this._isEditing);\n    } // on simule un deplacement en mode tactile pour mettre à jour les\n    // resultats\n\n\n    if (!this._isDesktop) {\n      this.onMapMove();\n    }\n  },\n  // ################################################################### //\n  // ###### METHODES PUBLIQUES (INTERFACE AVEC LE CONTROLE) ############ //\n  // ################################################################### //\n\n  /**\n   * This method is public.\n   * It allows to control the execution of a movement.\n   *\n   * @param {Object} position - position = {lon: , lat: }\n   * @param {Number} zoom - zoom\n   * @param {Object} options - Zoom/pan options\n   */\n  moveTo: function moveTo(position, zoom, options) {\n    if (!this._showContainer.checked) {\n      this._pictoContainer.click();\n    }\n\n    var map = this._map;\n\n    if (!map) {\n      return;\n    }\n\n    this.onMouseMove({\n      latlng: position\n    });\n    map.flyTo(position, zoom || 10, options || {});\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (MousePosition); // Expose MousePosition as L.geoportalControl.MousePosition (for a build bundle)\n\nif (window.L) {\n  if (!window.L.geoportalControl) {\n    window.L.geoportalControl = {};\n  }\n\n  window.L.geoportalControl.MousePosition = MousePosition;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Leaflet/Controls/MousePosition.js\n");

/***/ }),

/***/ "./src/Leaflet/Controls/Utils/PositionFormater.js":
/*!********************************************************!*\
  !*** ./src/Leaflet/Controls/Utils/PositionFormater.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n* implementation :\n* cf. http://uihacker.blogspot.fr/2011/07/javascript-formatting-latitudelongitude.html?m=1\n* cf. http://andrew.hedges.name/experiments/convert_lat_long/\n* FIXME formater la sortie\n* cf. http://mottie.github.io/javascript-number-formatter/\n* cf. https://github.com/j-/number-formatter\n*\n*/\n\n/** ... */\nvar PositionFormater = {\n  /** ... */\n  NORTH: \"N\",\n\n  /** ... */\n  SOUTH: \"S\",\n\n  /** ... */\n  EAST: \"E\",\n\n  /** ... */\n  WEST: \"O\",\n\n  /** ... */\n  digitSecond: 2,\n\n  /** ... */\n  digitDecimal: 5,\n\n  /** ... */\n  digitRadian: 8,\n\n  /**\n   * @param {Number} inputNum -inputNum\n   * @param {Integer} numPoints - numPoints\n   *\n   * @returns {Number} rounded result\n   */\n  roundToDecimal: function roundToDecimal(inputNum, numPoints) {\n    var multiplier = Math.pow(10, numPoints);\n    return Math.round(inputNum * multiplier) / multiplier;\n  },\n\n  /**\n   * @param {Number} location -location\n   *\n   * @returns {Number} location in radian\n   */\n  decimalToRadian: function decimalToRadian(location) {\n    var d = 0.01745329251994329577;\n    return this.roundToDecimal(location * d, this.digitRadian);\n  },\n\n  /**\n   * @param {Number} location -location\n   *\n   * @returns {Number} location in grade\n   */\n  decimalToGrade: function decimalToGrade(location) {\n    var d = 1.11111111111111111111;\n    return this.roundToDecimal(location * d, this.digitRadian);\n  },\n\n  /**\n   * @param {Number} location -location\n   * @param {String} hemisphere -hemisphere\n   * @param {Boolean} obj -specifies if an object must be returned\n   *\n   * @returns {String|Object} DMS (String or Object depending on obj parameter value)\n   */\n  decimalToDMS: function decimalToDMS(location, hemisphere, obj) {\n    if (location < 0) {\n      location *= -1; // strip dash '-'\n    }\n\n    var degrees = Math.floor(location); // strip decimal remainer for degrees\n\n    var minutesFromRemainder = (location - degrees) * 60; // multiply the remainer by 60\n\n    var minutes = Math.floor(minutesFromRemainder); // get minutes from integer\n\n    var secondsFromRemainder = (minutesFromRemainder - minutes) * 60; // multiply the remainer by 60\n\n    var seconds = this.roundToDecimal(secondsFromRemainder, this.digitSecond); // get minutes by rounding to integer\n\n    var dms = degrees + \"° \" + minutes + \"' \" + seconds + \"\\\" \";\n\n    if (hemisphere) {\n      dms += hemisphere;\n    }\n\n    if (obj) {\n      return {\n        d: degrees,\n        m: minutes,\n        s: seconds,\n        direction: hemisphere\n      };\n    }\n\n    return dms;\n  },\n\n  /**\n   * @param {Number} location -location\n   * @param {Boolean} obj -specifies if an object must be returned\n   *\n   * @returns {String|Object} DMS (String or Object depending on obj parameter value)\n   */\n  decimalLatToDMS: function decimalLatToDMS(location, obj) {\n    var hemisphere = location < 0 ? this.SOUTH : this.NORTH; // south if negative\n\n    return this.decimalToDMS(location, hemisphere, obj);\n  },\n\n  /**\n   * @param {Number} location -location\n   * @param {Boolean} obj -specifies if an object must be returned\n   *\n   * @returns {String|Object} DMS (String or Object depending on obj parameter value)\n   */\n  decimalLonToDMS: function decimalLonToDMS(location, obj) {\n    var hemisphere = location < 0 ? this.WEST : this.EAST; // west if negative\n\n    return this.decimalToDMS(location, hemisphere, obj);\n  },\n\n  /**\n   * @param {Number} degrees -degrees\n   * @param {Number} minutes -minutes\n   * @param {Number} seconds -seconds\n   * @param {String} hemisphere -hemisphere\n   *\n   * @returns {Number} decimal\n   */\n  DMSToDecimal: function DMSToDecimal(degrees, minutes, seconds, hemisphere) {\n    var ddVal = degrees + minutes / 60 + seconds / 3600;\n    ddVal = hemisphere === this.SOUTH || hemisphere === this.WEST ? ddVal * -1 : ddVal;\n    var decimal = this.roundToDecimal(ddVal, this.digitDecimal);\n    return decimal;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (PositionFormater);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Leaflet/Controls/Utils/PositionFormater.js\n");

/***/ }),

/***/ "leaflet":
/*!********************!*\
  !*** external "L" ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = L;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJMXCI/ZmEyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJsZWFmbGV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBMOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///leaflet\n");

/***/ }),

/***/ "node-fetch":
/*!***********************************************************************************!*\
  !*** external {"commonjs2":"node-fetch","commonjs":"node-fetch","amd":"require"} ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = undefined;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJub2RlLWZldGNoXCIsXCJjb21tb25qc1wiOlwibm9kZS1mZXRjaFwiLFwiYW1kXCI6XCJyZXF1aXJlXCJ9P2FiYmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoibm9kZS1mZXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gdW5kZWZpbmVkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///node-fetch\n");

/***/ }),

/***/ "xmldom":
/*!***************************************************************************!*\
  !*** external {"commonjs2":"xmldom","commonjs":"xmldom","amd":"require"} ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = undefined;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJ4bWxkb21cIixcImNvbW1vbmpzXCI6XCJ4bWxkb21cIixcImFtZFwiOlwicmVxdWlyZVwifT9hNmJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InhtbGRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gdW5kZWZpbmVkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///xmldom\n");

/***/ })

/******/ })["default"];